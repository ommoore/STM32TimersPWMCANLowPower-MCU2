
CAN_NormalMode_2Nodes_Nucleo-F746ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004370  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004540  08004540  00014540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800462c  0800462c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004634  08004634  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800463c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  080046ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080046ac  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f70  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b28  00000000  00000000  00031010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00032b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00033860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f73  00000000  00000000  000344f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eec3  00000000  00000000  0005a463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f212e  00000000  00000000  00069326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015b454  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c44  00000000  00000000  0015b4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004528 	.word	0x08004528

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004528 	.word	0x08004528

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <SysTick_Handler>:
extern CAN_HandleTypeDef hcan1;
extern TIM_HandleTypeDef htim6;

extern void CAN1_Tx(uint8_t remote);

void SysTick_Handler(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

	HAL_IncTick();
 80005bc:	f000 fd60 	bl	8001080 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005c0:	f001 fce6 	bl	8001f90 <HAL_SYSTICK_IRQHandler>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <CAN1_TX_IRQHandler+0x10>)
 80005ce:	f001 f9aa 	bl	8001926 <HAL_CAN_IRQHandler>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	2000016c 	.word	0x2000016c

080005dc <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <CAN1_RX0_IRQHandler+0x10>)
 80005e2:	f001 f9a0 	bl	8001926 <HAL_CAN_IRQHandler>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000016c 	.word	0x2000016c

080005f0 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <CAN1_RX1_IRQHandler+0x10>)
 80005f6:	f001 f996 	bl	8001926 <HAL_CAN_IRQHandler>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000016c 	.word	0x2000016c

08000604 <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan1);
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <CAN1_SCE_IRQHandler+0x10>)
 800060a:	f001 f98c 	bl	8001926 <HAL_CAN_IRQHandler>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000016c 	.word	0x2000016c

08000618 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

	HAL_TIM_IRQHandler(&htim6);
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <TIM6_DAC_IRQHandler+0x10>)
 800061e:	f002 fc3f 	bl	8002ea0 <HAL_TIM_IRQHandler>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000009c 	.word	0x2000009c

0800062c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim6);
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <EXTI15_10_IRQHandler+0x18>)
 8000632:	f002 fbbd 	bl	8002db0 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000636:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800063a:	f001 fe97 	bl	800236c <HAL_GPIO_EXTI_IRQHandler>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000009c 	.word	0x2000009c

08000648 <main>:
TIM_HandleTypeDef htim6;
CAN_RxHeaderTypeDef RxHeader;
uint8_t req_counter = 0;
uint8_t led_no = 0;

int main(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

	HAL_Init();
 800064c:	f000 fcdb 	bl	8001006 <HAL_Init>
	SystemClock_Config_HSE(SYS_CLOCK_FREQ_84MHZ);
 8000650:	2054      	movs	r0, #84	; 0x54
 8000652:	f000 f81f 	bl	8000694 <SystemClock_Config_HSE>
	GPIO_Init();
 8000656:	f000 f8b3 	bl	80007c0 <GPIO_Init>
	UART2_Init();
 800065a:	f000 f91b 	bl	8000894 <UART2_Init>
	TIM6_Init();
 800065e:	f000 f93f 	bl	80008e0 <TIM6_Init>
	CAN1_Init();
 8000662:	f000 f959 	bl	8000918 <CAN1_Init>
	CAN_Filter_Config();
 8000666:	f000 f98d 	bl	8000984 <CAN_Filter_Config>

	//Activate Interrupts by setting CAN_IER bits
	if(HAL_CAN_ActivateNotification(&hcan1, (CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF)) != HAL_OK) {
 800066a:	f240 4103 	movw	r1, #1027	; 0x403
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <main+0x48>)
 8000670:	f001 f933 	bl	80018da <HAL_CAN_ActivateNotification>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <main+0x36>
		Error_handler();
 800067a:	f000 fbb7 	bl	8000dec <Error_handler>
	}

	//Start CAN
	if(HAL_CAN_Start(&hcan1) != HAL_OK) {
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <main+0x48>)
 8000680:	f000 fefa 	bl	8001478 <HAL_CAN_Start>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <main+0x46>
		Error_handler();
 800068a:	f000 fbaf 	bl	8000dec <Error_handler>
	}

	while(1);
 800068e:	e7fe      	b.n	800068e <main+0x46>
 8000690:	2000016c 	.word	0x2000016c

08000694 <SystemClock_Config_HSE>:

	return 0;
}

void SystemClock_Config_HSE(uint8_t clock_freq) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint8_t flash_latency = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	//Using HSE to derive PLL
	//Activate LSE Crystal Oscillator on Nucleo Board
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61fb      	str	r3, [r7, #28]
	osc_init.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ac:	623b      	str	r3, [r7, #32]
	osc_init.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq) {
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b78      	cmp	r3, #120	; 0x78
 80006bc:	d036      	beq.n	800072c <SystemClock_Config_HSE+0x98>
 80006be:	2b78      	cmp	r3, #120	; 0x78
 80006c0:	dc77      	bgt.n	80007b2 <SystemClock_Config_HSE+0x11e>
 80006c2:	2b32      	cmp	r3, #50	; 0x32
 80006c4:	d002      	beq.n	80006cc <SystemClock_Config_HSE+0x38>
 80006c6:	2b54      	cmp	r3, #84	; 0x54
 80006c8:	d018      	beq.n	80006fc <SystemClock_Config_HSE+0x68>
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
			flash_latency = 3;
			break;
		}
		default:
			return;
 80006ca:	e072      	b.n	80007b2 <SystemClock_Config_HSE+0x11e>
			osc_init.PLL.PLLM = 16;
 80006cc:	2310      	movs	r3, #16
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 100;
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLQ = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 80006dc:	230f      	movs	r3, #15
 80006de:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61bb      	str	r3, [r7, #24]
			flash_latency = 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 80006fa:	e02f      	b.n	800075c <SystemClock_Config_HSE+0xc8>
			osc_init.PLL.PLLM = 16;
 80006fc:	2310      	movs	r3, #16
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 168;
 8000700:	23a8      	movs	r3, #168	; 0xa8
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLQ = 2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800070c:	230f      	movs	r3, #15
 800070e:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071c:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	61bb      	str	r3, [r7, #24]
			flash_latency = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 800072a:	e017      	b.n	800075c <SystemClock_Config_HSE+0xc8>
			osc_init.PLL.PLLM = 16;
 800072c:	2310      	movs	r3, #16
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
			osc_init.PLL.PLLN = 240;
 8000730:	23f0      	movs	r3, #240	; 0xf0
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLQ = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
			clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800073c:	230f      	movs	r3, #15
 800073e:	60bb      	str	r3, [r7, #8]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	60fb      	str	r3, [r7, #12]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074c:	617b      	str	r3, [r7, #20]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	61bb      	str	r3, [r7, #24]
			flash_latency = 3;
 8000754:	2303      	movs	r3, #3
 8000756:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 800075a:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fe27 	bl	80023b4 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config_HSE+0xdc>
		Error_handler();
 800076c:	f000 fb3e 	bl	8000dec <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK) {
 8000770:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f002 f8be 	bl	80028fc <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config_HSE+0xf6>
		Error_handler();
 8000786:	f000 fb31 	bl	8000dec <Error_handler>
	}

	//Configure the SYSTICK timer interrupt frequency for every 1ms
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800078a:	f002 fa85 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 800078e:	4603      	mov	r3, r0
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <SystemClock_Config_HSE+0x128>)
 8000792:	fba2 2303 	umull	r2, r3, r2, r3
 8000796:	099b      	lsrs	r3, r3, #6
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fbd0 	bl	8001f3e <HAL_SYSTICK_Config>
	//Configure SYSTICK
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800079e:	2004      	movs	r0, #4
 80007a0:	f001 fbda 	bl	8001f58 <HAL_SYSTICK_CLKSourceConfig>
	//SYSTICK IRQn interrupt configuration
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f001 fb9d 	bl	8001eea <HAL_NVIC_SetPriority>
 80007b0:	e000      	b.n	80007b4 <SystemClock_Config_HSE+0x120>
			return;
 80007b2:	bf00      	nop

}
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	10624dd3 	.word	0x10624dd3

080007c0 <GPIO_Init>:

void GPIO_Init(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <GPIO_Init+0xc4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2e      	ldr	r2, [pc, #184]	; (8000884 <GPIO_Init+0xc4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <GPIO_Init+0xc4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b29      	ldr	r3, [pc, #164]	; (8000884 <GPIO_Init+0xc4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a28      	ldr	r2, [pc, #160]	; (8000884 <GPIO_Init+0xc4>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <GPIO_Init+0xc4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <GPIO_Init+0xc4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a22      	ldr	r2, [pc, #136]	; (8000884 <GPIO_Init+0xc4>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <GPIO_Init+0xc4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 800080e:	2320      	movs	r3, #32
 8000810:	60fb      	str	r3, [r7, #12]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	613b      	str	r3, [r7, #16]
	ledgpio.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &ledgpio);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4619      	mov	r1, r3
 8000820:	4819      	ldr	r0, [pc, #100]	; (8000888 <GPIO_Init+0xc8>)
 8000822:	f001 fbc3 	bl	8001fac <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_8;
 8000826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082a:	60fb      	str	r3, [r7, #12]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
	ledgpio.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &ledgpio);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	4814      	ldr	r0, [pc, #80]	; (800088c <GPIO_Init+0xcc>)
 800083c:	f001 fbb6 	bl	8001fac <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_6 | GPIO_PIN_8 | GPIO_PIN_9;
 8000840:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000844:	60fb      	str	r3, [r7, #12]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	613b      	str	r3, [r7, #16]
	ledgpio.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &ledgpio);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	480e      	ldr	r0, [pc, #56]	; (8000890 <GPIO_Init+0xd0>)
 8000856:	f001 fba9 	bl	8001fac <HAL_GPIO_Init>

	ledgpio.Pin = GPIO_PIN_13;
 800085a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085e:	60fb      	str	r3, [r7, #12]
	ledgpio.Mode = GPIO_MODE_IT_FALLING;
 8000860:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000864:	613b      	str	r3, [r7, #16]
	ledgpio.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &ledgpio);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4619      	mov	r1, r3
 8000870:	4807      	ldr	r0, [pc, #28]	; (8000890 <GPIO_Init+0xd0>)
 8000872:	f001 fb9b 	bl	8001fac <HAL_GPIO_Init>

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000876:	2028      	movs	r0, #40	; 0x28
 8000878:	f001 fb53 	bl	8001f22 <HAL_NVIC_EnableIRQ>
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40020000 	.word	0x40020000
 800088c:	40020400 	.word	0x40020400
 8000890:	40020800 	.word	0x40020800

08000894 <UART2_Init>:

void UART2_Init(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

	huart2.Instance = USART2; //linking
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <UART2_Init+0x44>)
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <UART2_Init+0x48>)
 800089c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <UART2_Init+0x44>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <UART2_Init+0x44>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <UART2_Init+0x44>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <UART2_Init+0x44>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <UART2_Init+0x44>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <UART2_Init+0x44>)
 80008c0:	220c      	movs	r2, #12
 80008c2:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) {
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <UART2_Init+0x44>)
 80008c6:	f002 fcf1 	bl	80032ac <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <UART2_Init+0x40>

		//There is a problem
		Error_handler();
 80008d0:	f000 fa8c 	bl	8000dec <Error_handler>
	}
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000e8 	.word	0x200000e8
 80008dc:	40004400 	.word	0x40004400

080008e0 <TIM6_Init>:

void TIM6_Init(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

	htim6.Instance = TIM6;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <TIM6_Init+0x30>)
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <TIM6_Init+0x34>)
 80008e8:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 4999;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <TIM6_Init+0x30>)
 80008ec:	f241 3287 	movw	r2, #4999	; 0x1387
 80008f0:	605a      	str	r2, [r3, #4]
	htim6.Init.Period = 10000-1;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <TIM6_Init+0x30>)
 80008f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80008f8:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <TIM6_Init+0x30>)
 80008fc:	f002 fa00 	bl	8002d00 <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <TIM6_Init+0x2a>
		Error_handler();
 8000906:	f000 fa71 	bl	8000dec <Error_handler>
	}
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000009c 	.word	0x2000009c
 8000914:	40001000 	.word	0x40001000

08000918 <CAN1_Init>:

void CAN1_Init(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

	hcan1.Instance = CAN1;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <CAN1_Init+0x64>)
 800091e:	4a18      	ldr	r2, [pc, #96]	; (8000980 <CAN1_Init+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <CAN1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = ENABLE;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <CAN1_Init+0x64>)
 800092a:	2201      	movs	r2, #1
 800092c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <CAN1_Init+0x64>)
 8000930:	2201      	movs	r2, #1
 8000932:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <CAN1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <CAN1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <CAN1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <CAN1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	775a      	strb	r2, [r3, #29]

	//Settings related to CAN bit timings (1Mbps)
	hcan1.Init.Prescaler = 3;
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <CAN1_Init+0x64>)
 800094e:	2203      	movs	r2, #3
 8000950:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <CAN1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <CAN1_Init+0x64>)
 800095a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800095e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <CAN1_Init+0x64>)
 8000962:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000966:	615a      	str	r2, [r3, #20]

	if(HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <CAN1_Init+0x64>)
 800096a:	f000 fba9 	bl	80010c0 <HAL_CAN_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <CAN1_Init+0x60>
		Error_handler();
 8000974:	f000 fa3a 	bl	8000dec <Error_handler>
	}
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000016c 	.word	0x2000016c
 8000980:	40006400 	.word	0x40006400

08000984 <CAN_Filter_Config>:

void CAN_Filter_Config(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0

	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
	//Check 4m:00s on course lesson 150 for explanation of 0x01CO
	can1_filter_init.FilterMaskIdHigh = 0x01C0;
 800099e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80009a2:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK) {
 80009b0:	463b      	mov	r3, r7
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <CAN_Filter_Config+0x48>)
 80009b6:	f000 fc7f 	bl	80012b8 <HAL_CAN_ConfigFilter>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <CAN_Filter_Config+0x40>
		Error_handler();
 80009c0:	f000 fa14 	bl	8000dec <Error_handler>
	}
}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000016c 	.word	0x2000016c

080009d0 <CAN1_Tx>:

void CAN1_Tx(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t message;

	TxHeader.DLC = 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
	TxHeader.StdId = 0x65D;
 80009da:	f240 635d 	movw	r3, #1629	; 0x65d
 80009de:	60bb      	str	r3, [r7, #8]
	TxHeader.IDE = CAN_ID_STD;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]

	message = ++led_no;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <CAN1_Tx+0x60>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <CAN1_Tx+0x60>)
 80009f2:	701a      	strb	r2, [r3, #0]
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <CAN1_Tx+0x60>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	70fb      	strb	r3, [r7, #3]

	if(led_no == 4) {
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <CAN1_Tx+0x60>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	d102      	bne.n	8000a08 <CAN1_Tx+0x38>
		led_no = 0;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <CAN1_Tx+0x60>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a08:	2120      	movs	r1, #32
 8000a0a:	480a      	ldr	r0, [pc, #40]	; (8000a34 <CAN1_Tx+0x64>)
 8000a0c:	f001 fc93 	bl	8002336 <HAL_GPIO_TogglePin>

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &message, &TxMailbox) != HAL_OK) {
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	1cfa      	adds	r2, r7, #3
 8000a14:	f107 0108 	add.w	r1, r7, #8
 8000a18:	4807      	ldr	r0, [pc, #28]	; (8000a38 <CAN1_Tx+0x68>)
 8000a1a:	f000 fd71 	bl	8001500 <HAL_CAN_AddTxMessage>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <CAN1_Tx+0x58>
		Error_handler();
 8000a24:	f000 f9e2 	bl	8000dec <Error_handler>
	}
}
 8000a28:	bf00      	nop
 8000a2a:	3720      	adds	r7, #32
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000008d 	.word	0x2000008d
 8000a34:	40020000 	.word	0x40020000
 8000a38:	2000016c 	.word	0x2000016c

08000a3c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b090      	sub	sp, #64	; 0x40
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

	char msg[50];
	sprintf(msg,"Message Transmitted:M0\r\n");
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	490a      	ldr	r1, [pc, #40]	; (8000a74 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f003 f930 	bl	8003cb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fbdb 	bl	8000210 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	f107 010c 	add.w	r1, r7, #12
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 8000a68:	f002 fc6e 	bl	8003348 <HAL_UART_Transmit>
}
 8000a6c:	bf00      	nop
 8000a6e:	3740      	adds	r7, #64	; 0x40
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	08004540 	.word	0x08004540
 8000a78:	200000e8 	.word	0x200000e8

08000a7c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b090      	sub	sp, #64	; 0x40
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

	char msg[50];
	sprintf(msg,"Message Transmitted:M1\r\n");
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	490a      	ldr	r1, [pc, #40]	; (8000ab4 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f003 f910 	bl	8003cb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fbbb 	bl	8000210 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	f107 010c 	add.w	r1, r7, #12
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000aa8:	f002 fc4e 	bl	8003348 <HAL_UART_Transmit>
}
 8000aac:	bf00      	nop
 8000aae:	3740      	adds	r7, #64	; 0x40
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	0800455c 	.word	0x0800455c
 8000ab8:	200000e8 	.word	0x200000e8

08000abc <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b090      	sub	sp, #64	; 0x40
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

	char msg[50];
	sprintf(msg,"Message Transmitted:M2\r\n");
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	490a      	ldr	r1, [pc, #40]	; (8000af4 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 f8f0 	bl	8003cb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fb9b 	bl	8000210 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f107 010c 	add.w	r1, r7, #12
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	4804      	ldr	r0, [pc, #16]	; (8000af8 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000ae8:	f002 fc2e 	bl	8003348 <HAL_UART_Transmit>
}
 8000aec:	bf00      	nop
 8000aee:	3740      	adds	r7, #64	; 0x40
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	08004578 	.word	0x08004578
 8000af8:	200000e8 	.word	0x200000e8

08000afc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b092      	sub	sp, #72	; 0x48
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

	uint8_t rcvd_msg[8];
	char msg[50];

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK) {
 8000b04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b08:	4a2c      	ldr	r2, [pc, #176]	; (8000bbc <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	482c      	ldr	r0, [pc, #176]	; (8000bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000b0e:	f000 fdd2 	bl	80016b6 <HAL_CAN_GetRxMessage>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		Error_handler();
 8000b18:	f000 f968 	bl	8000dec <Error_handler>
	}

	if(RxHeader.StdId == 0x65D && RxHeader.RTR == 0) {
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f240 625d 	movw	r2, #1629	; 0x65d
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d112      	bne.n	8000b4e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d10e      	bne.n	8000b4e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
		//Data frame sent by n1 to n2
		LED_Manage_Output(rcvd_msg[0]);
 8000b30:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f8b7 	bl	8000ca8 <LED_Manage_Output>
		sprintf(msg, "Message Received : #%x\r\n", rcvd_msg[0]);
 8000b3a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	491f      	ldr	r1, [pc, #124]	; (8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 f8b2 	bl	8003cb0 <siprintf>
 8000b4c:	e025      	b.n	8000b9a <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>

	} else if(RxHeader.StdId == 0x651 && RxHeader.RTR == 1) {
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f240 6251 	movw	r2, #1617	; 0x651
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d109      	bne.n	8000b6e <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d105      	bne.n	8000b6e <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
		//Remote frame sent by n1 to n2
		Send_response(RxHeader.StdId);
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f91c 	bl	8000da4 <Send_response>
 8000b6c:	e023      	b.n	8000bb6 <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
		return;

	} else if(RxHeader.StdId == 0x651 && RxHeader.RTR == 0) {
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f240 6251 	movw	r2, #1617	; 0x651
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d10f      	bne.n	8000b9a <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10b      	bne.n	8000b9a <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
		//Data frame reply from n2 to n1
		sprintf(msg, "Reply Received : #%x\r\n", ((rcvd_msg[0] << 8) | rcvd_msg[1]));
 8000b82:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b86:	021b      	lsls	r3, r3, #8
 8000b88:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000b94:	4618      	mov	r0, r3
 8000b96:	f003 f88b 	bl	8003cb0 <siprintf>
	}

	//Send message to the UART (TeraTerm)
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fb36 	bl	8000210 <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	f107 010c 	add.w	r1, r7, #12
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000bb2:	f002 fbc9 	bl	8003348 <HAL_UART_Transmit>
}
 8000bb6:	3748      	adds	r7, #72	; 0x48
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000194 	.word	0x20000194
 8000bc0:	2000016c 	.word	0x2000016c
 8000bc4:	08004594 	.word	0x08004594
 8000bc8:	080045b0 	.word	0x080045b0
 8000bcc:	200000e8 	.word	0x200000e8

08000bd0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b090      	sub	sp, #64	; 0x40
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

	char msg[50];
	sprintf(msg,"CAN Error Detected\r\n");
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	490a      	ldr	r1, [pc, #40]	; (8000c08 <HAL_CAN_ErrorCallback+0x38>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 f866 	bl	8003cb0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fb11 	bl	8000210 <strlen>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	f107 010c 	add.w	r1, r7, #12
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <HAL_CAN_ErrorCallback+0x3c>)
 8000bfc:	f002 fba4 	bl	8003348 <HAL_UART_Transmit>
}
 8000c00:	bf00      	nop
 8000c02:	3740      	adds	r7, #64	; 0x40
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	080045c8 	.word	0x080045c8
 8000c0c:	200000e8 	.word	0x200000e8

08000c10 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t message; //no meaning for data frame

	if(req_counter == 4) {
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d11a      	bne.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0x46>
		//N1 sending Remote frame to N2
		TxHeader.DLC = 2; //N1 demanding a reply of 2 bytes
 8000c20:	2302      	movs	r3, #2
 8000c22:	623b      	str	r3, [r7, #32]
		TxHeader.StdId = 0x651;
 8000c24:	f240 6351 	movw	r3, #1617	; 0x651
 8000c28:	613b      	str	r3, [r7, #16]
		TxHeader.IDE = CAN_ID_STD;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_REMOTE;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61fb      	str	r3, [r7, #28]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &message, &TxMailbox) != HAL_OK) {
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	f107 020b 	add.w	r2, r7, #11
 8000c3a:	f107 0110 	add.w	r1, r7, #16
 8000c3e:	4817      	ldr	r0, [pc, #92]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c40:	f000 fc5e 	bl	8001500 <HAL_CAN_AddTxMessage>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x3e>
			Error_handler();
 8000c4a:	f000 f8cf 	bl	8000dec <Error_handler>
		}
		req_counter = 0;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e007      	b.n	8000c66 <HAL_TIM_PeriodElapsedCallback+0x56>
	} else {
		CAN1_Tx();
 8000c56:	f7ff febb 	bl	80009d0 <CAN1_Tx>
		req_counter++;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c64:	701a      	strb	r2, [r3, #0]
	}
	message = ++led_no;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c70:	701a      	strb	r2, [r3, #0]
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	72fb      	strb	r3, [r7, #11]

	if(led_no == 4) {
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d102      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x76>
		led_no = 0;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle onboard LED
 8000c86:	2120      	movs	r1, #32
 8000c88:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c8a:	f001 fb54 	bl	8002336 <HAL_GPIO_TogglePin>
}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	; 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000008c 	.word	0x2000008c
 8000c9c:	2000016c 	.word	0x2000016c
 8000ca0:	2000008d 	.word	0x2000008d
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <LED_Manage_Output>:

void LED_Manage_Output(uint8_t led_no) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]

	switch(led_no) {
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d86a      	bhi.n	8000d90 <LED_Manage_Output+0xe8>
 8000cba:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <LED_Manage_Output+0x18>)
 8000cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc0:	08000cd1 	.word	0x08000cd1
 8000cc4:	08000d01 	.word	0x08000d01
 8000cc8:	08000d31 	.word	0x08000d31
 8000ccc:	08000d61 	.word	0x08000d61
	case 1:
		HAL_GPIO_WritePin(LED1_PORT, LED1_PIN_NO, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd6:	4831      	ldr	r0, [pc, #196]	; (8000d9c <LED_Manage_Output+0xf4>)
 8000cd8:	f001 fb14 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_PORT, LED2_PIN_NO, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce2:	482e      	ldr	r0, [pc, #184]	; (8000d9c <LED_Manage_Output+0xf4>)
 8000ce4:	f001 fb0e 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_PORT, LED3_PIN_NO, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cee:	482c      	ldr	r0, [pc, #176]	; (8000da0 <LED_Manage_Output+0xf8>)
 8000cf0:	f001 fb08 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_PORT, LED4_PIN_NO, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2140      	movs	r1, #64	; 0x40
 8000cf8:	4828      	ldr	r0, [pc, #160]	; (8000d9c <LED_Manage_Output+0xf4>)
 8000cfa:	f001 fb03 	bl	8002304 <HAL_GPIO_WritePin>
		break;
 8000cfe:	e048      	b.n	8000d92 <LED_Manage_Output+0xea>
	case 2:
		HAL_GPIO_WritePin(LED1_PORT, LED1_PIN_NO, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d06:	4825      	ldr	r0, [pc, #148]	; (8000d9c <LED_Manage_Output+0xf4>)
 8000d08:	f001 fafc 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_PORT, LED2_PIN_NO, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d12:	4822      	ldr	r0, [pc, #136]	; (8000d9c <LED_Manage_Output+0xf4>)
 8000d14:	f001 faf6 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_PORT, LED3_PIN_NO, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d1e:	4820      	ldr	r0, [pc, #128]	; (8000da0 <LED_Manage_Output+0xf8>)
 8000d20:	f001 faf0 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_PORT, LED4_PIN_NO, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	481c      	ldr	r0, [pc, #112]	; (8000d9c <LED_Manage_Output+0xf4>)
 8000d2a:	f001 faeb 	bl	8002304 <HAL_GPIO_WritePin>
		break;
 8000d2e:	e030      	b.n	8000d92 <LED_Manage_Output+0xea>
	case 3:
		HAL_GPIO_WritePin(LED1_PORT, LED1_PIN_NO, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d36:	4819      	ldr	r0, [pc, #100]	; (8000d9c <LED_Manage_Output+0xf4>)
 8000d38:	f001 fae4 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_PORT, LED2_PIN_NO, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d42:	4816      	ldr	r0, [pc, #88]	; (8000d9c <LED_Manage_Output+0xf4>)
 8000d44:	f001 fade 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_PORT, LED3_PIN_NO, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d4e:	4814      	ldr	r0, [pc, #80]	; (8000da0 <LED_Manage_Output+0xf8>)
 8000d50:	f001 fad8 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_PORT, LED4_PIN_NO, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2140      	movs	r1, #64	; 0x40
 8000d58:	4810      	ldr	r0, [pc, #64]	; (8000d9c <LED_Manage_Output+0xf4>)
 8000d5a:	f001 fad3 	bl	8002304 <HAL_GPIO_WritePin>
		break;
 8000d5e:	e018      	b.n	8000d92 <LED_Manage_Output+0xea>
	case 4:
		HAL_GPIO_WritePin(LED1_PORT, LED1_PIN_NO, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <LED_Manage_Output+0xf4>)
 8000d68:	f001 facc 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_PORT, LED2_PIN_NO, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d72:	480a      	ldr	r0, [pc, #40]	; (8000d9c <LED_Manage_Output+0xf4>)
 8000d74:	f001 fac6 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_PORT, LED3_PIN_NO, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7e:	4808      	ldr	r0, [pc, #32]	; (8000da0 <LED_Manage_Output+0xf8>)
 8000d80:	f001 fac0 	bl	8002304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_PORT, LED4_PIN_NO, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <LED_Manage_Output+0xf4>)
 8000d8a:	f001 fabb 	bl	8002304 <HAL_GPIO_WritePin>
		break;
 8000d8e:	e000      	b.n	8000d92 <LED_Manage_Output+0xea>
	default:
		break;
 8000d90:	bf00      	nop
	}
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020400 	.word	0x40020400

08000da4 <Send_response>:

void Send_response(uint32_t StdId) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t response[2] = {0xAB, 0xCD};
 8000dac:	f64c 53ab 	movw	r3, #52651	; 0xcdab
 8000db0:	813b      	strh	r3, [r7, #8]

	TxHeader.DLC = 2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	623b      	str	r3, [r7, #32]
	TxHeader.StdId = StdId;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	613b      	str	r3, [r7, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, response, &TxMailbox) != HAL_OK) {
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	f107 0208 	add.w	r2, r7, #8
 8000dca:	f107 0110 	add.w	r1, r7, #16
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <Send_response+0x44>)
 8000dd0:	f000 fb96 	bl	8001500 <HAL_CAN_AddTxMessage>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <Send_response+0x3a>
		Error_handler();
 8000dda:	f000 f807 	bl	8000dec <Error_handler>
	}
}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000016c 	.word	0x2000016c

08000dec <Error_handler>:

void Error_handler(void) {
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

	while(1);
 8000df0:	e7fe      	b.n	8000df0 <Error_handler+0x4>
	...

08000df4 <HAL_MspInit>:
 *      Author: Oliver
 */

#include "main.h"

void HAL_MspInit(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	/* Low level processor specific inits */

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //not required, as this will set to default setting
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f001 f86b 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//System Control Block (SCB) -> System Handler Control and State Register (SHCSR)
	SCB->SHCSR |= (0x7 << 16);  //Set bits 16,17,18 (MEMFAULTENA, BUSFAULTENA, USGFAULTENA)
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <HAL_MspInit+0x40>)
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	4a0c      	ldr	r2, [pc, #48]	; (8000e34 <HAL_MspInit+0x40>)
 8000e04:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000e08:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f06f 000b 	mvn.w	r0, #11
 8000e12:	f001 f86a 	bl	8001eea <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	f06f 000a 	mvn.w	r0, #10
 8000e1e:	f001 f864 	bl	8001eea <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	f06f 0009 	mvn.w	r0, #9
 8000e2a:	f001 f85e 	bl	8001eea <HAL_NVIC_SetPriority>
	//HAL_Init() in main.c already takes care of SysTick_IRQn priority setting
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	/* Low level inits of the USART2 peripheral */

	//1. Enable the required peripheral clock for the USART2 and GPIOA peripherals
	__HAL_RCC_USART2_CLK_ENABLE();
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_UART_MspInit+0x80>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <HAL_UART_MspInit+0x80>)
 8000e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <HAL_UART_MspInit+0x80>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_UART_MspInit+0x80>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a16      	ldr	r2, [pc, #88]	; (8000eb8 <HAL_UART_MspInit+0x80>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <HAL_UART_MspInit+0x80>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]

	//2. Pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //USART2_TX
 8000e70:	2304      	movs	r3, #4
 8000e72:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 8000e80:	2307      	movs	r3, #7
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480c      	ldr	r0, [pc, #48]	; (8000ebc <HAL_UART_MspInit+0x84>)
 8000e8c:	f001 f88e 	bl	8001fac <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //USART2_RX
 8000e90:	2308      	movs	r3, #8
 8000e92:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4808      	ldr	r0, [pc, #32]	; (8000ebc <HAL_UART_MspInit+0x84>)
 8000e9c:	f001 f886 	bl	8001fac <HAL_GPIO_Init>

	//3. Enable the peripheral IRQ in the NVIC
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ea0:	2026      	movs	r0, #38	; 0x26
 8000ea2:	f001 f83e 	bl	8001f22 <HAL_NVIC_EnableIRQ>

	//4. Set the priorities based on application needs
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	2026      	movs	r0, #38	; 0x26
 8000eac:	f001 f81d 	bl	8001eea <HAL_NVIC_SetPriority>
}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	; 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_can;

	__HAL_RCC_CAN1_CLK_ENABLE();
 8000ec8:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <HAL_CAN_MspInit+0x8c>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	4a1f      	ldr	r2, [pc, #124]	; (8000f4c <HAL_CAN_MspInit+0x8c>)
 8000ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <HAL_CAN_MspInit+0x8c>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]

	//PA11 CAN1_RX
	//PA12 CAN1_TX
	gpio_can.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000ee0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ee4:	60fb      	str	r3, [r7, #12]
	gpio_can.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
	gpio_can.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
	gpio_can.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	61bb      	str	r3, [r7, #24]
	gpio_can.Alternate = GPIO_AF9_CAN1;
 8000ef2:	2309      	movs	r3, #9
 8000ef4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &gpio_can);
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4619      	mov	r1, r3
 8000efc:	4814      	ldr	r0, [pc, #80]	; (8000f50 <HAL_CAN_MspInit+0x90>)
 8000efe:	f001 f855 	bl	8001fac <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	210f      	movs	r1, #15
 8000f06:	2013      	movs	r0, #19
 8000f08:	f000 ffef 	bl	8001eea <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	210f      	movs	r1, #15
 8000f10:	2014      	movs	r0, #20
 8000f12:	f000 ffea 	bl	8001eea <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn,15,0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	210f      	movs	r1, #15
 8000f1a:	2015      	movs	r0, #21
 8000f1c:	f000 ffe5 	bl	8001eea <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	210f      	movs	r1, #15
 8000f24:	2016      	movs	r0, #22
 8000f26:	f000 ffe0 	bl	8001eea <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f2a:	2013      	movs	r0, #19
 8000f2c:	f000 fff9 	bl	8001f22 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f30:	2014      	movs	r0, #20
 8000f32:	f000 fff6 	bl	8001f22 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f36:	2015      	movs	r0, #21
 8000f38:	f000 fff3 	bl	8001f22 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f3c:	2016      	movs	r0, #22
 8000f3e:	f000 fff0 	bl	8001f22 <HAL_NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000

08000f54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	//1. Enable TIM6 Clock
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_TIM_Base_MspInit+0x38>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_TIM_Base_MspInit+0x38>)
 8000f62:	f043 0310 	orr.w	r3, r3, #16
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_TIM_Base_MspInit+0x38>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f003 0310 	and.w	r3, r3, #16
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]

	//2. Enable TIM6 IRQ
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f74:	2036      	movs	r0, #54	; 0x36
 8000f76:	f000 ffd4 	bl	8001f22 <HAL_NVIC_EnableIRQ>

	//3. Setup TIM6_DAC_IRQn priority
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	2036      	movs	r0, #54	; 0x36
 8000f80:	f000 ffb3 	bl	8001eea <HAL_NVIC_SetPriority>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40023800 	.word	0x40023800

08000f90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fba:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd0:	4c0b      	ldr	r4, [pc, #44]	; (8001000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fde:	f7ff ffd7 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f002 fe41 	bl	8003c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fb2f 	bl	8000648 <main>
  bx  lr    
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ff8:	0800463c 	.word	0x0800463c
  ldr r2, =_sbss
 8000ffc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001000:	200001c4 	.word	0x200001c4

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>

08001006 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100a:	2003      	movs	r0, #3
 800100c:	f000 ff62 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001010:	2000      	movs	r0, #0
 8001012:	f000 f805 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001016:	f7ff feed 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x54>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x58>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 ff7d 	bl	8001f3e <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 ff45 	bl	8001eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_InitTick+0x5c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000000 	.word	0x20000000
 8001078:	20000008 	.word	0x20000008
 800107c:	20000004 	.word	0x20000004

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008
 80010a4:	200001b0 	.word	0x200001b0

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200001b0 	.word	0x200001b0

080010c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0ed      	b.n	80012ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff feee 	bl	8000ec0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0201 	orr.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f4:	f7ff ffd8 	bl	80010a8 <HAL_GetTick>
 80010f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010fa:	e012      	b.n	8001122 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010fc:	f7ff ffd4 	bl	80010a8 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b0a      	cmp	r3, #10
 8001108:	d90b      	bls.n	8001122 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2205      	movs	r2, #5
 800111a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e0c5      	b.n	80012ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0e5      	beq.n	80010fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0202 	bic.w	r2, r2, #2
 800113e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001140:	f7ff ffb2 	bl	80010a8 <HAL_GetTick>
 8001144:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001146:	e012      	b.n	800116e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001148:	f7ff ffae 	bl	80010a8 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b0a      	cmp	r3, #10
 8001154:	d90b      	bls.n	800116e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2205      	movs	r2, #5
 8001166:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e09f      	b.n	80012ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1e5      	bne.n	8001148 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7e1b      	ldrb	r3, [r3, #24]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d108      	bne.n	8001196 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	e007      	b.n	80011a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7e5b      	ldrb	r3, [r3, #25]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d108      	bne.n	80011c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e007      	b.n	80011d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7e9b      	ldrb	r3, [r3, #26]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d108      	bne.n	80011ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0220 	orr.w	r2, r2, #32
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	e007      	b.n	80011fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0220 	bic.w	r2, r2, #32
 80011f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7edb      	ldrb	r3, [r3, #27]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d108      	bne.n	8001214 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0210 	bic.w	r2, r2, #16
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	e007      	b.n	8001224 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0210 	orr.w	r2, r2, #16
 8001222:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7f1b      	ldrb	r3, [r3, #28]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d108      	bne.n	800123e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0208 	orr.w	r2, r2, #8
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e007      	b.n	800124e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0208 	bic.w	r2, r2, #8
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7f5b      	ldrb	r3, [r3, #29]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d108      	bne.n	8001268 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0204 	orr.w	r2, r2, #4
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e007      	b.n	8001278 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0204 	bic.w	r2, r2, #4
 8001276:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	ea42 0103 	orr.w	r1, r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	1e5a      	subs	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012d0:	7cfb      	ldrb	r3, [r7, #19]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d003      	beq.n	80012de <HAL_CAN_ConfigFilter+0x26>
 80012d6:	7cfb      	ldrb	r3, [r7, #19]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	f040 80be 	bne.w	800145a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80012de:	4b65      	ldr	r3, [pc, #404]	; (8001474 <HAL_CAN_ConfigFilter+0x1bc>)
 80012e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012e8:	f043 0201 	orr.w	r2, r3, #1
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	431a      	orrs	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	2201      	movs	r2, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43db      	mvns	r3, r3
 8001330:	401a      	ands	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d123      	bne.n	8001388 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001362:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3248      	adds	r2, #72	; 0x48
 8001368:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800137c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800137e:	6979      	ldr	r1, [r7, #20]
 8001380:	3348      	adds	r3, #72	; 0x48
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d122      	bne.n	80013d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	431a      	orrs	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3248      	adds	r2, #72	; 0x48
 80013b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013cc:	6979      	ldr	r1, [r7, #20]
 80013ce:	3348      	adds	r3, #72	; 0x48
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	401a      	ands	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013f0:	e007      	b.n	8001402 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	43db      	mvns	r3, r3
 8001414:	401a      	ands	r2, r3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800141c:	e007      	b.n	800142e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	431a      	orrs	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	431a      	orrs	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800144c:	f023 0201 	bic.w	r2, r3, #1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e006      	b.n	8001468 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
  }
}
 8001468:	4618      	mov	r0, r3
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40006400 	.word	0x40006400

08001478 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d12e      	bne.n	80014ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014a4:	f7ff fe00 	bl	80010a8 <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014aa:	e012      	b.n	80014d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014ac:	f7ff fdfc 	bl	80010a8 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b0a      	cmp	r3, #10
 80014b8:	d90b      	bls.n	80014d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2205      	movs	r2, #5
 80014ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e012      	b.n	80014f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e5      	bne.n	80014ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e006      	b.n	80014f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
  }
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001514:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800151e:	7ffb      	ldrb	r3, [r7, #31]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d003      	beq.n	800152c <HAL_CAN_AddTxMessage+0x2c>
 8001524:	7ffb      	ldrb	r3, [r7, #31]
 8001526:	2b02      	cmp	r3, #2
 8001528:	f040 80b8 	bne.w	800169c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10a      	bne.n	800154c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800153c:	2b00      	cmp	r3, #0
 800153e:	d105      	bne.n	800154c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 80a0 	beq.w	800168c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	0e1b      	lsrs	r3, r3, #24
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d907      	bls.n	800156c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e09e      	b.n	80016aa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800156c:	2201      	movs	r2, #1
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	409a      	lsls	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10d      	bne.n	800159a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001588:	68f9      	ldr	r1, [r7, #12]
 800158a:	6809      	ldr	r1, [r1, #0]
 800158c:	431a      	orrs	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3318      	adds	r3, #24
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	440b      	add	r3, r1
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e00f      	b.n	80015ba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015aa:	68f9      	ldr	r1, [r7, #12]
 80015ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80015ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3318      	adds	r3, #24
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	440b      	add	r3, r1
 80015b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3318      	adds	r3, #24
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	440b      	add	r3, r1
 80015ca:	3304      	adds	r3, #4
 80015cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	7d1b      	ldrb	r3, [r3, #20]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d111      	bne.n	80015fa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3318      	adds	r3, #24
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	4413      	add	r3, r2
 80015e2:	3304      	adds	r3, #4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	6811      	ldr	r1, [r2, #0]
 80015ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	3318      	adds	r3, #24
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	440b      	add	r3, r1
 80015f6:	3304      	adds	r3, #4
 80015f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3307      	adds	r3, #7
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	061a      	lsls	r2, r3, #24
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3306      	adds	r3, #6
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3305      	adds	r3, #5
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	4313      	orrs	r3, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	3204      	adds	r2, #4
 800161a:	7812      	ldrb	r2, [r2, #0]
 800161c:	4610      	mov	r0, r2
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	6811      	ldr	r1, [r2, #0]
 8001622:	ea43 0200 	orr.w	r2, r3, r0
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	440b      	add	r3, r1
 800162c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001630:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3303      	adds	r3, #3
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	061a      	lsls	r2, r3, #24
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3302      	adds	r3, #2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3301      	adds	r3, #1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	4313      	orrs	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	4610      	mov	r0, r2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	6811      	ldr	r1, [r2, #0]
 8001658:	ea43 0200 	orr.w	r2, r3, r0
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	440b      	add	r3, r1
 8001662:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001666:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3318      	adds	r3, #24
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	4413      	add	r3, r2
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	6811      	ldr	r1, [r2, #0]
 800167a:	f043 0201 	orr.w	r2, r3, #1
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3318      	adds	r3, #24
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	440b      	add	r3, r1
 8001686:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	e00e      	b.n	80016aa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e006      	b.n	80016aa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
  }
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016b6:	b480      	push	{r7}
 80016b8:	b087      	sub	sp, #28
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d003      	beq.n	80016da <HAL_CAN_GetRxMessage+0x24>
 80016d2:	7dfb      	ldrb	r3, [r7, #23]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	f040 80f3 	bne.w	80018c0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10e      	bne.n	80016fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d116      	bne.n	800171c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0e7      	b.n	80018ce <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d107      	bne.n	800171c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0d8      	b.n	80018ce <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	331b      	adds	r3, #27
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	4413      	add	r3, r2
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0204 	and.w	r2, r3, #4
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10c      	bne.n	8001754 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	331b      	adds	r3, #27
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	0d5b      	lsrs	r3, r3, #21
 800174a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e00b      	b.n	800176c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	331b      	adds	r3, #27
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4413      	add	r3, r2
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	08db      	lsrs	r3, r3, #3
 8001764:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	331b      	adds	r3, #27
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0202 	and.w	r2, r3, #2
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	331b      	adds	r3, #27
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4413      	add	r3, r2
 800178e:	3304      	adds	r3, #4
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 020f 	and.w	r2, r3, #15
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	331b      	adds	r3, #27
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	4413      	add	r3, r2
 80017a6:	3304      	adds	r3, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	331b      	adds	r3, #27
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	4413      	add	r3, r2
 80017be:	3304      	adds	r3, #4
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	0c1b      	lsrs	r3, r3, #16
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	4413      	add	r3, r2
 80017d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0a1a      	lsrs	r2, r3, #8
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	4413      	add	r3, r2
 8001804:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	0c1a      	lsrs	r2, r3, #16
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3302      	adds	r3, #2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	4413      	add	r3, r2
 800181e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0e1a      	lsrs	r2, r3, #24
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3303      	adds	r3, #3
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	3304      	adds	r3, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4413      	add	r3, r2
 8001850:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0a1a      	lsrs	r2, r3, #8
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	3305      	adds	r3, #5
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	4413      	add	r3, r2
 800186a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0c1a      	lsrs	r2, r3, #16
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	3306      	adds	r3, #6
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	4413      	add	r3, r2
 8001884:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	0e1a      	lsrs	r2, r3, #24
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	3307      	adds	r3, #7
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d108      	bne.n	80018ac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0220 	orr.w	r2, r2, #32
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	e007      	b.n	80018bc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0220 	orr.w	r2, r2, #32
 80018ba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	e006      	b.n	80018ce <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
  }
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d002      	beq.n	80018f8 <HAL_CAN_ActivateNotification+0x1e>
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d109      	bne.n	800190c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6959      	ldr	r1, [r3, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	e006      	b.n	800191a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
  }
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b08a      	sub	sp, #40	; 0x28
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d07c      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d023      	beq.n	80019be <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2201      	movs	r2, #1
 800197c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff f857 	bl	8000a3c <HAL_CAN_TxMailbox0CompleteCallback>
 800198e:	e016      	b.n	80019be <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
 80019a2:	e00c      	b.n	80019be <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d004      	beq.n	80019b8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
 80019b6:	e002      	b.n	80019be <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f96b 	bl	8001c94 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d024      	beq.n	8001a12 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff f84d 	bl	8000a7c <HAL_CAN_TxMailbox1CompleteCallback>
 80019e2:	e016      	b.n	8001a12 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
 80019f6:	e00c      	b.n	8001a12 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d004      	beq.n	8001a0c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0a:	e002      	b.n	8001a12 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f94b 	bl	8001ca8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d024      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff f843 	bl	8000abc <HAL_CAN_TxMailbox2CompleteCallback>
 8001a36:	e016      	b.n	8001a66 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4a:	e00c      	b.n	8001a66 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5e:	e002      	b.n	8001a66 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f92b 	bl	8001cbc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00c      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2210      	movs	r2, #16
 8001a88:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00b      	beq.n	8001aac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f912 	bl	8001cd0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff f819 	bl	8000afc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00c      	beq.n	8001aee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2210      	movs	r2, #16
 8001aec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00b      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2208      	movs	r2, #8
 8001b08:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f8f4 	bl	8001cf8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f8db 	bl	8001ce4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00b      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d006      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2210      	movs	r2, #16
 8001b48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f8de 	bl	8001d0c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00b      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2208      	movs	r2, #8
 8001b6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f8d7 	bl	8001d20 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d07b      	beq.n	8001c74 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d072      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d043      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03e      	beq.n	8001c6c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bf4:	2b60      	cmp	r3, #96	; 0x60
 8001bf6:	d02b      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x32a>
 8001bf8:	2b60      	cmp	r3, #96	; 0x60
 8001bfa:	d82e      	bhi.n	8001c5a <HAL_CAN_IRQHandler+0x334>
 8001bfc:	2b50      	cmp	r3, #80	; 0x50
 8001bfe:	d022      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x320>
 8001c00:	2b50      	cmp	r3, #80	; 0x50
 8001c02:	d82a      	bhi.n	8001c5a <HAL_CAN_IRQHandler+0x334>
 8001c04:	2b40      	cmp	r3, #64	; 0x40
 8001c06:	d019      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x316>
 8001c08:	2b40      	cmp	r3, #64	; 0x40
 8001c0a:	d826      	bhi.n	8001c5a <HAL_CAN_IRQHandler+0x334>
 8001c0c:	2b30      	cmp	r3, #48	; 0x30
 8001c0e:	d010      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x30c>
 8001c10:	2b30      	cmp	r3, #48	; 0x30
 8001c12:	d822      	bhi.n	8001c5a <HAL_CAN_IRQHandler+0x334>
 8001c14:	2b10      	cmp	r3, #16
 8001c16:	d002      	beq.n	8001c1e <HAL_CAN_IRQHandler+0x2f8>
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d005      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c1c:	e01d      	b.n	8001c5a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c26:	e019      	b.n	8001c5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	f043 0310 	orr.w	r3, r3, #16
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c30:	e014      	b.n	8001c5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	f043 0320 	orr.w	r3, r3, #32
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c3a:	e00f      	b.n	8001c5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c44:	e00a      	b.n	8001c5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c4e:	e005      	b.n	8001c5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c58:	e000      	b.n	8001c5c <HAL_CAN_IRQHandler+0x336>
            break;
 8001c5a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699a      	ldr	r2, [r3, #24]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c6a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2204      	movs	r2, #4
 8001c72:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d008      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7fe ffa2 	bl	8000bd0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <__NVIC_SetPriorityGrouping+0x40>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d62:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <__NVIC_SetPriorityGrouping+0x40>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60d3      	str	r3, [r2, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00
 8001d78:	05fa0000 	.word	0x05fa0000

08001d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <__NVIC_GetPriorityGrouping+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0307 	and.w	r3, r3, #7
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db0b      	blt.n	8001dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	f003 021f 	and.w	r2, r3, #31
 8001db0:	4907      	ldr	r1, [pc, #28]	; (8001dd0 <__NVIC_EnableIRQ+0x38>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	2001      	movs	r0, #1
 8001dba:	fa00 f202 	lsl.w	r2, r0, r2
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0a      	blt.n	8001dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <__NVIC_SetPriority+0x4c>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dfc:	e00a      	b.n	8001e14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <__NVIC_SetPriority+0x50>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	761a      	strb	r2, [r3, #24]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f1c3 0307 	rsb	r3, r3, #7
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	bf28      	it	cs
 8001e46:	2304      	movcs	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d902      	bls.n	8001e58 <NVIC_EncodePriority+0x30>
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3b03      	subs	r3, #3
 8001e56:	e000      	b.n	8001e5a <NVIC_EncodePriority+0x32>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	4313      	orrs	r3, r2
         );
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea0:	d301      	bcc.n	8001ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00f      	b.n	8001ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <SysTick_Config+0x40>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eae:	210f      	movs	r1, #15
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f7ff ff8e 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <SysTick_Config+0x40>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <SysTick_Config+0x40>)
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	e000e010 	.word	0xe000e010

08001ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff29 	bl	8001d34 <__NVIC_SetPriorityGrouping>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff3e 	bl	8001d7c <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ff8e 	bl	8001e28 <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff5d 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff31 	bl	8001d98 <__NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffa2 	bl	8001e90 <SysTick_Config>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d106      	bne.n	8001f74 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001f72:	e005      	b.n	8001f80 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001f7a:	f023 0304 	bic.w	r3, r3, #4
 8001f7e:	6013      	str	r3, [r2, #0]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001f94:	f000 f802 	bl	8001f9c <HAL_SYSTICK_Callback>
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	e175      	b.n	80022b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f040 8164 	bne.w	80022b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d005      	beq.n	8002002 <HAL_GPIO_Init+0x56>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d130      	bne.n	8002064 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002038:	2201      	movs	r2, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 0201 	and.w	r2, r3, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b03      	cmp	r3, #3
 800206e:	d017      	beq.n	80020a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d123      	bne.n	80020f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	08da      	lsrs	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3208      	adds	r2, #8
 80020b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	08da      	lsrs	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3208      	adds	r2, #8
 80020ee:	69b9      	ldr	r1, [r7, #24]
 80020f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	2203      	movs	r2, #3
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0203 	and.w	r2, r3, #3
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80be 	beq.w	80022b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	4b66      	ldr	r3, [pc, #408]	; (80022d0 <HAL_GPIO_Init+0x324>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a65      	ldr	r2, [pc, #404]	; (80022d0 <HAL_GPIO_Init+0x324>)
 800213c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b63      	ldr	r3, [pc, #396]	; (80022d0 <HAL_GPIO_Init+0x324>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800214e:	4a61      	ldr	r2, [pc, #388]	; (80022d4 <HAL_GPIO_Init+0x328>)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3302      	adds	r3, #2
 8002156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	220f      	movs	r2, #15
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a58      	ldr	r2, [pc, #352]	; (80022d8 <HAL_GPIO_Init+0x32c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d037      	beq.n	80021ea <HAL_GPIO_Init+0x23e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a57      	ldr	r2, [pc, #348]	; (80022dc <HAL_GPIO_Init+0x330>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d031      	beq.n	80021e6 <HAL_GPIO_Init+0x23a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a56      	ldr	r2, [pc, #344]	; (80022e0 <HAL_GPIO_Init+0x334>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d02b      	beq.n	80021e2 <HAL_GPIO_Init+0x236>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a55      	ldr	r2, [pc, #340]	; (80022e4 <HAL_GPIO_Init+0x338>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d025      	beq.n	80021de <HAL_GPIO_Init+0x232>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a54      	ldr	r2, [pc, #336]	; (80022e8 <HAL_GPIO_Init+0x33c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01f      	beq.n	80021da <HAL_GPIO_Init+0x22e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a53      	ldr	r2, [pc, #332]	; (80022ec <HAL_GPIO_Init+0x340>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d019      	beq.n	80021d6 <HAL_GPIO_Init+0x22a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a52      	ldr	r2, [pc, #328]	; (80022f0 <HAL_GPIO_Init+0x344>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0x226>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a51      	ldr	r2, [pc, #324]	; (80022f4 <HAL_GPIO_Init+0x348>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00d      	beq.n	80021ce <HAL_GPIO_Init+0x222>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <HAL_GPIO_Init+0x34c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x21e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4f      	ldr	r2, [pc, #316]	; (80022fc <HAL_GPIO_Init+0x350>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_GPIO_Init+0x21a>
 80021c2:	2309      	movs	r3, #9
 80021c4:	e012      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021c6:	230a      	movs	r3, #10
 80021c8:	e010      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021ca:	2308      	movs	r3, #8
 80021cc:	e00e      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021ce:	2307      	movs	r3, #7
 80021d0:	e00c      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021d2:	2306      	movs	r3, #6
 80021d4:	e00a      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021d6:	2305      	movs	r3, #5
 80021d8:	e008      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021da:	2304      	movs	r3, #4
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021de:	2303      	movs	r3, #3
 80021e0:	e004      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e002      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_GPIO_Init+0x240>
 80021ea:	2300      	movs	r3, #0
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	f002 0203 	and.w	r2, r2, #3
 80021f2:	0092      	lsls	r2, r2, #2
 80021f4:	4093      	lsls	r3, r2
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021fc:	4935      	ldr	r1, [pc, #212]	; (80022d4 <HAL_GPIO_Init+0x328>)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	3302      	adds	r3, #2
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_GPIO_Init+0x354>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222e:	4a34      	ldr	r2, [pc, #208]	; (8002300 <HAL_GPIO_Init+0x354>)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002234:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_GPIO_Init+0x354>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002258:	4a29      	ldr	r2, [pc, #164]	; (8002300 <HAL_GPIO_Init+0x354>)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800225e:	4b28      	ldr	r3, [pc, #160]	; (8002300 <HAL_GPIO_Init+0x354>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002282:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <HAL_GPIO_Init+0x354>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_GPIO_Init+0x354>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <HAL_GPIO_Init+0x354>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3301      	adds	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	f67f ae86 	bls.w	8001fcc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3724      	adds	r7, #36	; 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40013800 	.word	0x40013800
 80022d8:	40020000 	.word	0x40020000
 80022dc:	40020400 	.word	0x40020400
 80022e0:	40020800 	.word	0x40020800
 80022e4:	40020c00 	.word	0x40020c00
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40021400 	.word	0x40021400
 80022f0:	40021800 	.word	0x40021800
 80022f4:	40021c00 	.word	0x40021c00
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40022400 	.word	0x40022400
 8002300:	40013c00 	.word	0x40013c00

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002336:	b480      	push	{r7}
 8002338:	b085      	sub	sp, #20
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002348:	887a      	ldrh	r2, [r7, #2]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4013      	ands	r3, r2
 800234e:	041a      	lsls	r2, r3, #16
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	43d9      	mvns	r1, r3
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	400b      	ands	r3, r1
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	619a      	str	r2, [r3, #24]
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002382:	4a05      	ldr	r2, [pc, #20]	; (8002398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f806 	bl	800239c <HAL_GPIO_EXTI_Callback>
  }
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40013c00 	.word	0x40013c00

0800239c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e291      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8087 	beq.w	80024e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d8:	4b96      	ldr	r3, [pc, #600]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 030c 	and.w	r3, r3, #12
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d00c      	beq.n	80023fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e4:	4b93      	ldr	r3, [pc, #588]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d112      	bne.n	8002416 <HAL_RCC_OscConfig+0x62>
 80023f0:	4b90      	ldr	r3, [pc, #576]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fc:	d10b      	bne.n	8002416 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fe:	4b8d      	ldr	r3, [pc, #564]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d06c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x130>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d168      	bne.n	80024e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e26b      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x7a>
 8002420:	4b84      	ldr	r3, [pc, #528]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a83      	ldr	r2, [pc, #524]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	e02e      	b.n	800248c <HAL_RCC_OscConfig+0xd8>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x9c>
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a7e      	ldr	r2, [pc, #504]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 800243c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7b      	ldr	r2, [pc, #492]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e01d      	b.n	800248c <HAL_RCC_OscConfig+0xd8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0xc0>
 800245a:	4b76      	ldr	r3, [pc, #472]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a75      	ldr	r2, [pc, #468]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b73      	ldr	r3, [pc, #460]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a72      	ldr	r2, [pc, #456]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0xd8>
 8002474:	4b6f      	ldr	r3, [pc, #444]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a6e      	ldr	r2, [pc, #440]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 800247a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b6c      	ldr	r3, [pc, #432]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a6b      	ldr	r2, [pc, #428]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d013      	beq.n	80024bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fe08 	bl	80010a8 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7fe fe04 	bl	80010a8 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e21f      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	4b61      	ldr	r3, [pc, #388]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0xe8>
 80024ba:	e014      	b.n	80024e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe fdf4 	bl	80010a8 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7fe fdf0 	bl	80010a8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e20b      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	4b57      	ldr	r3, [pc, #348]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x110>
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d069      	beq.n	80025c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024f2:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00b      	beq.n	8002516 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fe:	4b4d      	ldr	r3, [pc, #308]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b08      	cmp	r3, #8
 8002508:	d11c      	bne.n	8002544 <HAL_RCC_OscConfig+0x190>
 800250a:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d116      	bne.n	8002544 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_RCC_OscConfig+0x17a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e1df      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	493d      	ldr	r1, [pc, #244]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	e040      	b.n	80025c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d023      	beq.n	8002594 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254c:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a38      	ldr	r2, [pc, #224]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fda6 	bl	80010a8 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002560:	f7fe fda2 	bl	80010a8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e1bd      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	4b30      	ldr	r3, [pc, #192]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4929      	ldr	r1, [pc, #164]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
 8002592:	e018      	b.n	80025c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002594:	4b27      	ldr	r3, [pc, #156]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a26      	ldr	r2, [pc, #152]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7fe fd82 	bl	80010a8 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a8:	f7fe fd7e 	bl	80010a8 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e199      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d038      	beq.n	8002644 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d019      	beq.n	800260e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 80025dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e6:	f7fe fd5f 	bl	80010a8 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ee:	f7fe fd5b 	bl	80010a8 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e176      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x23a>
 800260c:	e01a      	b.n	8002644 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002612:	4a08      	ldr	r2, [pc, #32]	; (8002634 <HAL_RCC_OscConfig+0x280>)
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fd45 	bl	80010a8 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002622:	f7fe fd41 	bl	80010a8 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d903      	bls.n	8002638 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e15c      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
 8002634:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	4b91      	ldr	r3, [pc, #580]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 800263a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1ee      	bne.n	8002622 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80a4 	beq.w	800279a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002652:	4b8b      	ldr	r3, [pc, #556]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800265e:	4b88      	ldr	r3, [pc, #544]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a87      	ldr	r2, [pc, #540]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b85      	ldr	r3, [pc, #532]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267a:	4b82      	ldr	r3, [pc, #520]	; (8002884 <HAL_RCC_OscConfig+0x4d0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002686:	4b7f      	ldr	r3, [pc, #508]	; (8002884 <HAL_RCC_OscConfig+0x4d0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a7e      	ldr	r2, [pc, #504]	; (8002884 <HAL_RCC_OscConfig+0x4d0>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe fd09 	bl	80010a8 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe fd05 	bl	80010a8 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b64      	cmp	r3, #100	; 0x64
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e120      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ac:	4b75      	ldr	r3, [pc, #468]	; (8002884 <HAL_RCC_OscConfig+0x4d0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x31a>
 80026c0:	4b6f      	ldr	r3, [pc, #444]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	4a6e      	ldr	r2, [pc, #440]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6713      	str	r3, [r2, #112]	; 0x70
 80026cc:	e02d      	b.n	800272a <HAL_RCC_OscConfig+0x376>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x33c>
 80026d6:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	4a69      	ldr	r2, [pc, #420]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	4a66      	ldr	r2, [pc, #408]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80026e8:	f023 0304 	bic.w	r3, r3, #4
 80026ec:	6713      	str	r3, [r2, #112]	; 0x70
 80026ee:	e01c      	b.n	800272a <HAL_RCC_OscConfig+0x376>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d10c      	bne.n	8002712 <HAL_RCC_OscConfig+0x35e>
 80026f8:	4b61      	ldr	r3, [pc, #388]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	4a60      	ldr	r2, [pc, #384]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	6713      	str	r3, [r2, #112]	; 0x70
 8002704:	4b5e      	ldr	r3, [pc, #376]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a5d      	ldr	r2, [pc, #372]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	e00b      	b.n	800272a <HAL_RCC_OscConfig+0x376>
 8002712:	4b5b      	ldr	r3, [pc, #364]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	4a5a      	ldr	r2, [pc, #360]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6713      	str	r3, [r2, #112]	; 0x70
 800271e:	4b58      	ldr	r3, [pc, #352]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	4a57      	ldr	r2, [pc, #348]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7fe fcb9 	bl	80010a8 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe fcb5 	bl	80010a8 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0ce      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ee      	beq.n	800273a <HAL_RCC_OscConfig+0x386>
 800275c:	e014      	b.n	8002788 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275e:	f7fe fca3 	bl	80010a8 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe fc9f 	bl	80010a8 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	; 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e0b8      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	4b40      	ldr	r3, [pc, #256]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ee      	bne.n	8002766 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278e:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a3b      	ldr	r2, [pc, #236]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80a4 	beq.w	80028ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a4:	4b36      	ldr	r3, [pc, #216]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d06b      	beq.n	8002888 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d149      	bne.n	800284c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b8:	4b31      	ldr	r3, [pc, #196]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a30      	ldr	r2, [pc, #192]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80027be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fc70 	bl	80010a8 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027cc:	f7fe fc6c 	bl	80010a8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e087      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	4b28      	ldr	r3, [pc, #160]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	019b      	lsls	r3, r3, #6
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	085b      	lsrs	r3, r3, #1
 8002802:	3b01      	subs	r3, #1
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	4313      	orrs	r3, r2
 8002810:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002816:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a18      	ldr	r2, [pc, #96]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 800281e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7fe fc40 	bl	80010a8 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282c:	f7fe fc3c 	bl	80010a8 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e057      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x478>
 800284a:	e04f      	b.n	80028ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fc26 	bl	80010a8 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002860:	f7fe fc22 	bl	80010a8 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e03d      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_RCC_OscConfig+0x4cc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x4ac>
 800287e:	e035      	b.n	80028ec <HAL_RCC_OscConfig+0x538>
 8002880:	40023800 	.word	0x40023800
 8002884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_RCC_OscConfig+0x544>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d028      	beq.n	80028e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d121      	bne.n	80028e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d11a      	bne.n	80028e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028b8:	4013      	ands	r3, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d111      	bne.n	80028e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	3b01      	subs	r3, #1
 80028d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d107      	bne.n	80028e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800

080028fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0d0      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b6a      	ldr	r3, [pc, #424]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 030f 	and.w	r3, r3, #15
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d910      	bls.n	8002944 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 020f 	bic.w	r2, r3, #15
 800292a:	4965      	ldr	r1, [pc, #404]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0b8      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d020      	beq.n	8002992 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800295c:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a58      	ldr	r2, [pc, #352]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002966:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002974:	4b53      	ldr	r3, [pc, #332]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4a52      	ldr	r2, [pc, #328]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 800297a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800297e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	494d      	ldr	r1, [pc, #308]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 800298e:	4313      	orrs	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d040      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d115      	bne.n	80029de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e07f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	4b41      	ldr	r3, [pc, #260]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e073      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	4b3d      	ldr	r3, [pc, #244]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e06b      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4936      	ldr	r1, [pc, #216]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f0:	f7fe fb5a 	bl	80010a8 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7fe fb56 	bl	80010a8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e053      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d210      	bcs.n	8002a50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 020f 	bic.w	r2, r3, #15
 8002a36:	4922      	ldr	r1, [pc, #136]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e032      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4916      	ldr	r1, [pc, #88]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	490e      	ldr	r1, [pc, #56]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a8e:	f000 f821 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002a92:	4602      	mov	r2, r0
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	490a      	ldr	r1, [pc, #40]	; (8002ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8002aa0:	5ccb      	ldrb	r3, [r1, r3]
 8002aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa6:	4a09      	ldr	r2, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1d0>)
 8002aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1d4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fab6 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023c00 	.word	0x40023c00
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	080045e0 	.word	0x080045e0
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000004 	.word	0x20000004

08002ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aec:	4b67      	ldr	r3, [pc, #412]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d00d      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x40>
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	f200 80bd 	bhi.w	8002c78 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x34>
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b06:	e0b7      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b08:	4b61      	ldr	r3, [pc, #388]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b0a:	60bb      	str	r3, [r7, #8]
      break;
 8002b0c:	e0b7      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0e:	4b61      	ldr	r3, [pc, #388]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002b10:	60bb      	str	r3, [r7, #8]
      break;
 8002b12:	e0b4      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b14:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b1c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b1e:	4b5b      	ldr	r3, [pc, #364]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d04d      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2a:	4b58      	ldr	r3, [pc, #352]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	099b      	lsrs	r3, r3, #6
 8002b30:	461a      	mov	r2, r3
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	ea02 0800 	and.w	r8, r2, r0
 8002b42:	ea03 0901 	and.w	r9, r3, r1
 8002b46:	4640      	mov	r0, r8
 8002b48:	4649      	mov	r1, r9
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	014b      	lsls	r3, r1, #5
 8002b54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b58:	0142      	lsls	r2, r0, #5
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	ebb0 0008 	subs.w	r0, r0, r8
 8002b62:	eb61 0109 	sbc.w	r1, r1, r9
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	018b      	lsls	r3, r1, #6
 8002b70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b74:	0182      	lsls	r2, r0, #6
 8002b76:	1a12      	subs	r2, r2, r0
 8002b78:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7c:	f04f 0000 	mov.w	r0, #0
 8002b80:	f04f 0100 	mov.w	r1, #0
 8002b84:	00d9      	lsls	r1, r3, #3
 8002b86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b8a:	00d0      	lsls	r0, r2, #3
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	eb12 0208 	adds.w	r2, r2, r8
 8002b94:	eb43 0309 	adc.w	r3, r3, r9
 8002b98:	f04f 0000 	mov.w	r0, #0
 8002b9c:	f04f 0100 	mov.w	r1, #0
 8002ba0:	0259      	lsls	r1, r3, #9
 8002ba2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ba6:	0250      	lsls	r0, r2, #9
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	f7fd fb82 	bl	80002c0 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e04a      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc6:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	099b      	lsrs	r3, r3, #6
 8002bcc:	461a      	mov	r2, r3
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	ea02 0400 	and.w	r4, r2, r0
 8002bde:	ea03 0501 	and.w	r5, r3, r1
 8002be2:	4620      	mov	r0, r4
 8002be4:	4629      	mov	r1, r5
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	014b      	lsls	r3, r1, #5
 8002bf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bf4:	0142      	lsls	r2, r0, #5
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	1b00      	subs	r0, r0, r4
 8002bfc:	eb61 0105 	sbc.w	r1, r1, r5
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	018b      	lsls	r3, r1, #6
 8002c0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c0e:	0182      	lsls	r2, r0, #6
 8002c10:	1a12      	subs	r2, r2, r0
 8002c12:	eb63 0301 	sbc.w	r3, r3, r1
 8002c16:	f04f 0000 	mov.w	r0, #0
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	00d9      	lsls	r1, r3, #3
 8002c20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c24:	00d0      	lsls	r0, r2, #3
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	1912      	adds	r2, r2, r4
 8002c2c:	eb45 0303 	adc.w	r3, r5, r3
 8002c30:	f04f 0000 	mov.w	r0, #0
 8002c34:	f04f 0100 	mov.w	r1, #0
 8002c38:	0299      	lsls	r1, r3, #10
 8002c3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c3e:	0290      	lsls	r0, r2, #10
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	f7fd fb36 	bl	80002c0 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	3301      	adds	r3, #1
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	60bb      	str	r3, [r7, #8]
      break;
 8002c76:	e002      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c7a:	60bb      	str	r3, [r7, #8]
      break;
 8002c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	00f42400 	.word	0x00f42400
 8002c94:	007a1200 	.word	0x007a1200

08002c98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000000 	.word	0x20000000

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cb4:	f7ff fff0 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	0a9b      	lsrs	r3, r3, #10
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4903      	ldr	r1, [pc, #12]	; (8002cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	080045f0 	.word	0x080045f0

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cdc:	f7ff ffdc 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0b5b      	lsrs	r3, r3, #13
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	080045f0 	.word	0x080045f0

08002d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e049      	b.n	8002da6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe f914 	bl	8000f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	f000 f9f6 	bl	8003130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d001      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e054      	b.n	8002e72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d022      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x80>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df2:	d01d      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x80>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d018      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x80>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d013      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x80>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00e      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x80>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <HAL_TIM_Base_Start_IT+0xe0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d009      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x80>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <HAL_TIM_Base_Start_IT+0xe4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x80>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1b      	ldr	r2, [pc, #108]	; (8002e98 <HAL_TIM_Base_Start_IT+0xe8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d115      	bne.n	8002e5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_TIM_Base_Start_IT+0xec>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d015      	beq.n	8002e6e <HAL_TIM_Base_Start_IT+0xbe>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e48:	d011      	beq.n	8002e6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5a:	e008      	b.n	8002e6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e000      	b.n	8002e70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40010000 	.word	0x40010000
 8002e84:	40000400 	.word	0x40000400
 8002e88:	40000800 	.word	0x40000800
 8002e8c:	40000c00 	.word	0x40000c00
 8002e90:	40010400 	.word	0x40010400
 8002e94:	40014000 	.word	0x40014000
 8002e98:	40001800 	.word	0x40001800
 8002e9c:	00010007 	.word	0x00010007

08002ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d122      	bne.n	8002efc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d11b      	bne.n	8002efc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0202 	mvn.w	r2, #2
 8002ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f905 	bl	80030f2 <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f8f7 	bl	80030de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f908 	bl	8003106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d122      	bne.n	8002f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d11b      	bne.n	8002f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0204 	mvn.w	r2, #4
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f8db 	bl	80030f2 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f8cd 	bl	80030de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f8de 	bl	8003106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d122      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d11b      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0208 	mvn.w	r2, #8
 8002f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2204      	movs	r2, #4
 8002f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f8b1 	bl	80030f2 <HAL_TIM_IC_CaptureCallback>
 8002f90:	e005      	b.n	8002f9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f8a3 	bl	80030de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f8b4 	bl	8003106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b10      	cmp	r3, #16
 8002fb0:	d122      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0210 	mvn.w	r2, #16
 8002fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2208      	movs	r2, #8
 8002fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f887 	bl	80030f2 <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f879 	bl	80030de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f88a 	bl	8003106 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b01      	cmp	r3, #1
 8003004:	d10e      	bne.n	8003024 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d107      	bne.n	8003024 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0201 	mvn.w	r2, #1
 800301c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fdf6 	bl	8000c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302e:	2b80      	cmp	r3, #128	; 0x80
 8003030:	d10e      	bne.n	8003050 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303c:	2b80      	cmp	r3, #128	; 0x80
 800303e:	d107      	bne.n	8003050 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f91a 	bl	8003284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800305e:	d10e      	bne.n	800307e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306a:	2b80      	cmp	r3, #128	; 0x80
 800306c:	d107      	bne.n	800307e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f90d 	bl	8003298 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	d10e      	bne.n	80030aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d107      	bne.n	80030aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f838 	bl	800311a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d10e      	bne.n	80030d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d107      	bne.n	80030d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f06f 0220 	mvn.w	r2, #32
 80030ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f8cd 	bl	8003270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a40      	ldr	r2, [pc, #256]	; (8003244 <TIM_Base_SetConfig+0x114>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d013      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314e:	d00f      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3d      	ldr	r2, [pc, #244]	; (8003248 <TIM_Base_SetConfig+0x118>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00b      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3c      	ldr	r2, [pc, #240]	; (800324c <TIM_Base_SetConfig+0x11c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d007      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a3b      	ldr	r2, [pc, #236]	; (8003250 <TIM_Base_SetConfig+0x120>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_Base_SetConfig+0x40>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a3a      	ldr	r2, [pc, #232]	; (8003254 <TIM_Base_SetConfig+0x124>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d108      	bne.n	8003182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a2f      	ldr	r2, [pc, #188]	; (8003244 <TIM_Base_SetConfig+0x114>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d02b      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d027      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a2c      	ldr	r2, [pc, #176]	; (8003248 <TIM_Base_SetConfig+0x118>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d023      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2b      	ldr	r2, [pc, #172]	; (800324c <TIM_Base_SetConfig+0x11c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01f      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a2a      	ldr	r2, [pc, #168]	; (8003250 <TIM_Base_SetConfig+0x120>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01b      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a29      	ldr	r2, [pc, #164]	; (8003254 <TIM_Base_SetConfig+0x124>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d017      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a28      	ldr	r2, [pc, #160]	; (8003258 <TIM_Base_SetConfig+0x128>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a27      	ldr	r2, [pc, #156]	; (800325c <TIM_Base_SetConfig+0x12c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00f      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a26      	ldr	r2, [pc, #152]	; (8003260 <TIM_Base_SetConfig+0x130>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00b      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a25      	ldr	r2, [pc, #148]	; (8003264 <TIM_Base_SetConfig+0x134>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a24      	ldr	r2, [pc, #144]	; (8003268 <TIM_Base_SetConfig+0x138>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d003      	beq.n	80031e2 <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a23      	ldr	r2, [pc, #140]	; (800326c <TIM_Base_SetConfig+0x13c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d108      	bne.n	80031f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <TIM_Base_SetConfig+0x114>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d003      	beq.n	8003228 <TIM_Base_SetConfig+0xf8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <TIM_Base_SetConfig+0x124>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d103      	bne.n	8003230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	615a      	str	r2, [r3, #20]
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40010000 	.word	0x40010000
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40000c00 	.word	0x40000c00
 8003254:	40010400 	.word	0x40010400
 8003258:	40014000 	.word	0x40014000
 800325c:	40014400 	.word	0x40014400
 8003260:	40014800 	.word	0x40014800
 8003264:	40001800 	.word	0x40001800
 8003268:	40001c00 	.word	0x40001c00
 800326c:	40002000 	.word	0x40002000

08003270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e040      	b.n	8003340 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd fdb2 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	; 0x24
 80032d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f8c0 	bl	8003470 <UART_SetConfig>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e022      	b.n	8003340 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fb16 	bl	8003934 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fb9d 	bl	8003a78 <UART_CheckIdleState>
 800333e:	4603      	mov	r3, r0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335c:	2b20      	cmp	r3, #32
 800335e:	f040 8081 	bne.w	8003464 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_UART_Transmit+0x26>
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e079      	b.n	8003466 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_UART_Transmit+0x38>
 800337c:	2302      	movs	r3, #2
 800337e:	e072      	b.n	8003466 <HAL_UART_Transmit+0x11e>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2221      	movs	r2, #33	; 0x21
 8003394:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003396:	f7fd fe87 	bl	80010a8 <HAL_GetTick>
 800339a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b4:	d108      	bne.n	80033c8 <HAL_UART_Transmit+0x80>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	e003      	b.n	80033d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80033d8:	e02c      	b.n	8003434 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2200      	movs	r2, #0
 80033e2:	2180      	movs	r1, #128	; 0x80
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fb7a 	bl	8003ade <UART_WaitOnFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e038      	b.n	8003466 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003408:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	3302      	adds	r3, #2
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	e007      	b.n	8003422 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	3301      	adds	r3, #1
 8003420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1cc      	bne.n	80033da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2200      	movs	r2, #0
 8003448:	2140      	movs	r1, #64	; 0x40
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fb47 	bl	8003ade <UART_WaitOnFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e005      	b.n	8003466 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2220      	movs	r2, #32
 800345e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e000      	b.n	8003466 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003464:	2302      	movs	r3, #2
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	3720      	adds	r7, #32
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4ba7      	ldr	r3, [pc, #668]	; (8003738 <UART_SetConfig+0x2c8>)
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	6979      	ldr	r1, [r7, #20]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a95      	ldr	r2, [pc, #596]	; (800373c <UART_SetConfig+0x2cc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d120      	bne.n	800352e <UART_SetConfig+0xbe>
 80034ec:	4b94      	ldr	r3, [pc, #592]	; (8003740 <UART_SetConfig+0x2d0>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d816      	bhi.n	8003528 <UART_SetConfig+0xb8>
 80034fa:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <UART_SetConfig+0x90>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003511 	.word	0x08003511
 8003504:	0800351d 	.word	0x0800351d
 8003508:	08003517 	.word	0x08003517
 800350c:	08003523 	.word	0x08003523
 8003510:	2301      	movs	r3, #1
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e14f      	b.n	80037b6 <UART_SetConfig+0x346>
 8003516:	2302      	movs	r3, #2
 8003518:	77fb      	strb	r3, [r7, #31]
 800351a:	e14c      	b.n	80037b6 <UART_SetConfig+0x346>
 800351c:	2304      	movs	r3, #4
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e149      	b.n	80037b6 <UART_SetConfig+0x346>
 8003522:	2308      	movs	r3, #8
 8003524:	77fb      	strb	r3, [r7, #31]
 8003526:	e146      	b.n	80037b6 <UART_SetConfig+0x346>
 8003528:	2310      	movs	r3, #16
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e143      	b.n	80037b6 <UART_SetConfig+0x346>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a84      	ldr	r2, [pc, #528]	; (8003744 <UART_SetConfig+0x2d4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d132      	bne.n	800359e <UART_SetConfig+0x12e>
 8003538:	4b81      	ldr	r3, [pc, #516]	; (8003740 <UART_SetConfig+0x2d0>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d828      	bhi.n	8003598 <UART_SetConfig+0x128>
 8003546:	a201      	add	r2, pc, #4	; (adr r2, 800354c <UART_SetConfig+0xdc>)
 8003548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354c:	08003581 	.word	0x08003581
 8003550:	08003599 	.word	0x08003599
 8003554:	08003599 	.word	0x08003599
 8003558:	08003599 	.word	0x08003599
 800355c:	0800358d 	.word	0x0800358d
 8003560:	08003599 	.word	0x08003599
 8003564:	08003599 	.word	0x08003599
 8003568:	08003599 	.word	0x08003599
 800356c:	08003587 	.word	0x08003587
 8003570:	08003599 	.word	0x08003599
 8003574:	08003599 	.word	0x08003599
 8003578:	08003599 	.word	0x08003599
 800357c:	08003593 	.word	0x08003593
 8003580:	2300      	movs	r3, #0
 8003582:	77fb      	strb	r3, [r7, #31]
 8003584:	e117      	b.n	80037b6 <UART_SetConfig+0x346>
 8003586:	2302      	movs	r3, #2
 8003588:	77fb      	strb	r3, [r7, #31]
 800358a:	e114      	b.n	80037b6 <UART_SetConfig+0x346>
 800358c:	2304      	movs	r3, #4
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e111      	b.n	80037b6 <UART_SetConfig+0x346>
 8003592:	2308      	movs	r3, #8
 8003594:	77fb      	strb	r3, [r7, #31]
 8003596:	e10e      	b.n	80037b6 <UART_SetConfig+0x346>
 8003598:	2310      	movs	r3, #16
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e10b      	b.n	80037b6 <UART_SetConfig+0x346>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a69      	ldr	r2, [pc, #420]	; (8003748 <UART_SetConfig+0x2d8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d120      	bne.n	80035ea <UART_SetConfig+0x17a>
 80035a8:	4b65      	ldr	r3, [pc, #404]	; (8003740 <UART_SetConfig+0x2d0>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035b2:	2b30      	cmp	r3, #48	; 0x30
 80035b4:	d013      	beq.n	80035de <UART_SetConfig+0x16e>
 80035b6:	2b30      	cmp	r3, #48	; 0x30
 80035b8:	d814      	bhi.n	80035e4 <UART_SetConfig+0x174>
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d009      	beq.n	80035d2 <UART_SetConfig+0x162>
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d810      	bhi.n	80035e4 <UART_SetConfig+0x174>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <UART_SetConfig+0x15c>
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d006      	beq.n	80035d8 <UART_SetConfig+0x168>
 80035ca:	e00b      	b.n	80035e4 <UART_SetConfig+0x174>
 80035cc:	2300      	movs	r3, #0
 80035ce:	77fb      	strb	r3, [r7, #31]
 80035d0:	e0f1      	b.n	80037b6 <UART_SetConfig+0x346>
 80035d2:	2302      	movs	r3, #2
 80035d4:	77fb      	strb	r3, [r7, #31]
 80035d6:	e0ee      	b.n	80037b6 <UART_SetConfig+0x346>
 80035d8:	2304      	movs	r3, #4
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e0eb      	b.n	80037b6 <UART_SetConfig+0x346>
 80035de:	2308      	movs	r3, #8
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e0e8      	b.n	80037b6 <UART_SetConfig+0x346>
 80035e4:	2310      	movs	r3, #16
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e0e5      	b.n	80037b6 <UART_SetConfig+0x346>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a57      	ldr	r2, [pc, #348]	; (800374c <UART_SetConfig+0x2dc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d120      	bne.n	8003636 <UART_SetConfig+0x1c6>
 80035f4:	4b52      	ldr	r3, [pc, #328]	; (8003740 <UART_SetConfig+0x2d0>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003600:	d013      	beq.n	800362a <UART_SetConfig+0x1ba>
 8003602:	2bc0      	cmp	r3, #192	; 0xc0
 8003604:	d814      	bhi.n	8003630 <UART_SetConfig+0x1c0>
 8003606:	2b80      	cmp	r3, #128	; 0x80
 8003608:	d009      	beq.n	800361e <UART_SetConfig+0x1ae>
 800360a:	2b80      	cmp	r3, #128	; 0x80
 800360c:	d810      	bhi.n	8003630 <UART_SetConfig+0x1c0>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <UART_SetConfig+0x1a8>
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d006      	beq.n	8003624 <UART_SetConfig+0x1b4>
 8003616:	e00b      	b.n	8003630 <UART_SetConfig+0x1c0>
 8003618:	2300      	movs	r3, #0
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e0cb      	b.n	80037b6 <UART_SetConfig+0x346>
 800361e:	2302      	movs	r3, #2
 8003620:	77fb      	strb	r3, [r7, #31]
 8003622:	e0c8      	b.n	80037b6 <UART_SetConfig+0x346>
 8003624:	2304      	movs	r3, #4
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e0c5      	b.n	80037b6 <UART_SetConfig+0x346>
 800362a:	2308      	movs	r3, #8
 800362c:	77fb      	strb	r3, [r7, #31]
 800362e:	e0c2      	b.n	80037b6 <UART_SetConfig+0x346>
 8003630:	2310      	movs	r3, #16
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	e0bf      	b.n	80037b6 <UART_SetConfig+0x346>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a45      	ldr	r2, [pc, #276]	; (8003750 <UART_SetConfig+0x2e0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d125      	bne.n	800368c <UART_SetConfig+0x21c>
 8003640:	4b3f      	ldr	r3, [pc, #252]	; (8003740 <UART_SetConfig+0x2d0>)
 8003642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800364e:	d017      	beq.n	8003680 <UART_SetConfig+0x210>
 8003650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003654:	d817      	bhi.n	8003686 <UART_SetConfig+0x216>
 8003656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365a:	d00b      	beq.n	8003674 <UART_SetConfig+0x204>
 800365c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003660:	d811      	bhi.n	8003686 <UART_SetConfig+0x216>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <UART_SetConfig+0x1fe>
 8003666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800366a:	d006      	beq.n	800367a <UART_SetConfig+0x20a>
 800366c:	e00b      	b.n	8003686 <UART_SetConfig+0x216>
 800366e:	2300      	movs	r3, #0
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e0a0      	b.n	80037b6 <UART_SetConfig+0x346>
 8003674:	2302      	movs	r3, #2
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e09d      	b.n	80037b6 <UART_SetConfig+0x346>
 800367a:	2304      	movs	r3, #4
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e09a      	b.n	80037b6 <UART_SetConfig+0x346>
 8003680:	2308      	movs	r3, #8
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e097      	b.n	80037b6 <UART_SetConfig+0x346>
 8003686:	2310      	movs	r3, #16
 8003688:	77fb      	strb	r3, [r7, #31]
 800368a:	e094      	b.n	80037b6 <UART_SetConfig+0x346>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a30      	ldr	r2, [pc, #192]	; (8003754 <UART_SetConfig+0x2e4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d125      	bne.n	80036e2 <UART_SetConfig+0x272>
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <UART_SetConfig+0x2d0>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036a4:	d017      	beq.n	80036d6 <UART_SetConfig+0x266>
 80036a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036aa:	d817      	bhi.n	80036dc <UART_SetConfig+0x26c>
 80036ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b0:	d00b      	beq.n	80036ca <UART_SetConfig+0x25a>
 80036b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b6:	d811      	bhi.n	80036dc <UART_SetConfig+0x26c>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <UART_SetConfig+0x254>
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c0:	d006      	beq.n	80036d0 <UART_SetConfig+0x260>
 80036c2:	e00b      	b.n	80036dc <UART_SetConfig+0x26c>
 80036c4:	2301      	movs	r3, #1
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e075      	b.n	80037b6 <UART_SetConfig+0x346>
 80036ca:	2302      	movs	r3, #2
 80036cc:	77fb      	strb	r3, [r7, #31]
 80036ce:	e072      	b.n	80037b6 <UART_SetConfig+0x346>
 80036d0:	2304      	movs	r3, #4
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e06f      	b.n	80037b6 <UART_SetConfig+0x346>
 80036d6:	2308      	movs	r3, #8
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e06c      	b.n	80037b6 <UART_SetConfig+0x346>
 80036dc:	2310      	movs	r3, #16
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e069      	b.n	80037b6 <UART_SetConfig+0x346>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <UART_SetConfig+0x2e8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d137      	bne.n	800375c <UART_SetConfig+0x2ec>
 80036ec:	4b14      	ldr	r3, [pc, #80]	; (8003740 <UART_SetConfig+0x2d0>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036fa:	d017      	beq.n	800372c <UART_SetConfig+0x2bc>
 80036fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003700:	d817      	bhi.n	8003732 <UART_SetConfig+0x2c2>
 8003702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003706:	d00b      	beq.n	8003720 <UART_SetConfig+0x2b0>
 8003708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370c:	d811      	bhi.n	8003732 <UART_SetConfig+0x2c2>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <UART_SetConfig+0x2aa>
 8003712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003716:	d006      	beq.n	8003726 <UART_SetConfig+0x2b6>
 8003718:	e00b      	b.n	8003732 <UART_SetConfig+0x2c2>
 800371a:	2300      	movs	r3, #0
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e04a      	b.n	80037b6 <UART_SetConfig+0x346>
 8003720:	2302      	movs	r3, #2
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e047      	b.n	80037b6 <UART_SetConfig+0x346>
 8003726:	2304      	movs	r3, #4
 8003728:	77fb      	strb	r3, [r7, #31]
 800372a:	e044      	b.n	80037b6 <UART_SetConfig+0x346>
 800372c:	2308      	movs	r3, #8
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e041      	b.n	80037b6 <UART_SetConfig+0x346>
 8003732:	2310      	movs	r3, #16
 8003734:	77fb      	strb	r3, [r7, #31]
 8003736:	e03e      	b.n	80037b6 <UART_SetConfig+0x346>
 8003738:	efff69f3 	.word	0xefff69f3
 800373c:	40011000 	.word	0x40011000
 8003740:	40023800 	.word	0x40023800
 8003744:	40004400 	.word	0x40004400
 8003748:	40004800 	.word	0x40004800
 800374c:	40004c00 	.word	0x40004c00
 8003750:	40005000 	.word	0x40005000
 8003754:	40011400 	.word	0x40011400
 8003758:	40007800 	.word	0x40007800
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a71      	ldr	r2, [pc, #452]	; (8003928 <UART_SetConfig+0x4b8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d125      	bne.n	80037b2 <UART_SetConfig+0x342>
 8003766:	4b71      	ldr	r3, [pc, #452]	; (800392c <UART_SetConfig+0x4bc>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003770:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003774:	d017      	beq.n	80037a6 <UART_SetConfig+0x336>
 8003776:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800377a:	d817      	bhi.n	80037ac <UART_SetConfig+0x33c>
 800377c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003780:	d00b      	beq.n	800379a <UART_SetConfig+0x32a>
 8003782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003786:	d811      	bhi.n	80037ac <UART_SetConfig+0x33c>
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <UART_SetConfig+0x324>
 800378c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003790:	d006      	beq.n	80037a0 <UART_SetConfig+0x330>
 8003792:	e00b      	b.n	80037ac <UART_SetConfig+0x33c>
 8003794:	2300      	movs	r3, #0
 8003796:	77fb      	strb	r3, [r7, #31]
 8003798:	e00d      	b.n	80037b6 <UART_SetConfig+0x346>
 800379a:	2302      	movs	r3, #2
 800379c:	77fb      	strb	r3, [r7, #31]
 800379e:	e00a      	b.n	80037b6 <UART_SetConfig+0x346>
 80037a0:	2304      	movs	r3, #4
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e007      	b.n	80037b6 <UART_SetConfig+0x346>
 80037a6:	2308      	movs	r3, #8
 80037a8:	77fb      	strb	r3, [r7, #31]
 80037aa:	e004      	b.n	80037b6 <UART_SetConfig+0x346>
 80037ac:	2310      	movs	r3, #16
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e001      	b.n	80037b6 <UART_SetConfig+0x346>
 80037b2:	2310      	movs	r3, #16
 80037b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037be:	d15a      	bne.n	8003876 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80037c0:	7ffb      	ldrb	r3, [r7, #31]
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d827      	bhi.n	8003816 <UART_SetConfig+0x3a6>
 80037c6:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <UART_SetConfig+0x35c>)
 80037c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037cc:	080037f1 	.word	0x080037f1
 80037d0:	080037f9 	.word	0x080037f9
 80037d4:	08003801 	.word	0x08003801
 80037d8:	08003817 	.word	0x08003817
 80037dc:	08003807 	.word	0x08003807
 80037e0:	08003817 	.word	0x08003817
 80037e4:	08003817 	.word	0x08003817
 80037e8:	08003817 	.word	0x08003817
 80037ec:	0800380f 	.word	0x0800380f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f0:	f7ff fa5e 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 80037f4:	61b8      	str	r0, [r7, #24]
        break;
 80037f6:	e013      	b.n	8003820 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f8:	f7ff fa6e 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 80037fc:	61b8      	str	r0, [r7, #24]
        break;
 80037fe:	e00f      	b.n	8003820 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003800:	4b4b      	ldr	r3, [pc, #300]	; (8003930 <UART_SetConfig+0x4c0>)
 8003802:	61bb      	str	r3, [r7, #24]
        break;
 8003804:	e00c      	b.n	8003820 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003806:	f7ff f965 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 800380a:	61b8      	str	r0, [r7, #24]
        break;
 800380c:	e008      	b.n	8003820 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800380e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003812:	61bb      	str	r3, [r7, #24]
        break;
 8003814:	e004      	b.n	8003820 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	77bb      	strb	r3, [r7, #30]
        break;
 800381e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d074      	beq.n	8003910 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	005a      	lsls	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	fbb2 f3f3 	udiv	r3, r2, r3
 800383a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	d916      	bls.n	8003870 <UART_SetConfig+0x400>
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d212      	bcs.n	8003870 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	b29b      	uxth	r3, r3
 800384e:	f023 030f 	bic.w	r3, r3, #15
 8003852:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	b29b      	uxth	r3, r3
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	b29a      	uxth	r2, r3
 8003860:	89fb      	ldrh	r3, [r7, #14]
 8003862:	4313      	orrs	r3, r2
 8003864:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	89fa      	ldrh	r2, [r7, #14]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	e04f      	b.n	8003910 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	77bb      	strb	r3, [r7, #30]
 8003874:	e04c      	b.n	8003910 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003876:	7ffb      	ldrb	r3, [r7, #31]
 8003878:	2b08      	cmp	r3, #8
 800387a:	d828      	bhi.n	80038ce <UART_SetConfig+0x45e>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <UART_SetConfig+0x414>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	080038a9 	.word	0x080038a9
 8003888:	080038b1 	.word	0x080038b1
 800388c:	080038b9 	.word	0x080038b9
 8003890:	080038cf 	.word	0x080038cf
 8003894:	080038bf 	.word	0x080038bf
 8003898:	080038cf 	.word	0x080038cf
 800389c:	080038cf 	.word	0x080038cf
 80038a0:	080038cf 	.word	0x080038cf
 80038a4:	080038c7 	.word	0x080038c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a8:	f7ff fa02 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 80038ac:	61b8      	str	r0, [r7, #24]
        break;
 80038ae:	e013      	b.n	80038d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b0:	f7ff fa12 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 80038b4:	61b8      	str	r0, [r7, #24]
        break;
 80038b6:	e00f      	b.n	80038d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <UART_SetConfig+0x4c0>)
 80038ba:	61bb      	str	r3, [r7, #24]
        break;
 80038bc:	e00c      	b.n	80038d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038be:	f7ff f909 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 80038c2:	61b8      	str	r0, [r7, #24]
        break;
 80038c4:	e008      	b.n	80038d8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ca:	61bb      	str	r3, [r7, #24]
        break;
 80038cc:	e004      	b.n	80038d8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	77bb      	strb	r3, [r7, #30]
        break;
 80038d6:	bf00      	nop
    }

    if (pclk != 0U)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d018      	beq.n	8003910 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	085a      	lsrs	r2, r3, #1
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	441a      	add	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b0f      	cmp	r3, #15
 80038f6:	d909      	bls.n	800390c <UART_SetConfig+0x49c>
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fe:	d205      	bcs.n	800390c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	e001      	b.n	8003910 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800391c:	7fbb      	ldrb	r3, [r7, #30]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40007c00 	.word	0x40007c00
 800392c:	40023800 	.word	0x40023800
 8003930:	00f42400 	.word	0x00f42400

08003934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01a      	beq.n	8003a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a32:	d10a      	bne.n	8003a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	605a      	str	r2, [r3, #4]
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a88:	f7fd fb0e 	bl	80010a8 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d10e      	bne.n	8003aba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f817 	bl	8003ade <UART_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e00d      	b.n	8003ad6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b09c      	sub	sp, #112	; 0x70
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aee:	e0a5      	b.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af6:	f000 80a1 	beq.w	8003c3c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afa:	f7fd fad5 	bl	80010a8 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d302      	bcc.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d13e      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b24:	667b      	str	r3, [r7, #100]	; 0x64
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b30:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e6      	bne.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	663b      	str	r3, [r7, #96]	; 0x60
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3308      	adds	r3, #8
 8003b60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b62:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e5      	bne.n	8003b42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e067      	b.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d04f      	beq.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003baa:	d147      	bne.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e6      	bne.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3308      	adds	r3, #8
 8003bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3308      	adds	r3, #8
 8003c06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c08:	623a      	str	r2, [r7, #32]
 8003c0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	69f9      	ldr	r1, [r7, #28]
 8003c0e:	6a3a      	ldr	r2, [r7, #32]
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e5      	bne.n	8003be8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e010      	b.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	f43f af4a 	beq.w	8003af0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3770      	adds	r7, #112	; 0x70
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <__libc_init_array>:
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	4d0d      	ldr	r5, [pc, #52]	; (8003ca0 <__libc_init_array+0x38>)
 8003c6c:	4c0d      	ldr	r4, [pc, #52]	; (8003ca4 <__libc_init_array+0x3c>)
 8003c6e:	1b64      	subs	r4, r4, r5
 8003c70:	10a4      	asrs	r4, r4, #2
 8003c72:	2600      	movs	r6, #0
 8003c74:	42a6      	cmp	r6, r4
 8003c76:	d109      	bne.n	8003c8c <__libc_init_array+0x24>
 8003c78:	4d0b      	ldr	r5, [pc, #44]	; (8003ca8 <__libc_init_array+0x40>)
 8003c7a:	4c0c      	ldr	r4, [pc, #48]	; (8003cac <__libc_init_array+0x44>)
 8003c7c:	f000 fc54 	bl	8004528 <_init>
 8003c80:	1b64      	subs	r4, r4, r5
 8003c82:	10a4      	asrs	r4, r4, #2
 8003c84:	2600      	movs	r6, #0
 8003c86:	42a6      	cmp	r6, r4
 8003c88:	d105      	bne.n	8003c96 <__libc_init_array+0x2e>
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c90:	4798      	blx	r3
 8003c92:	3601      	adds	r6, #1
 8003c94:	e7ee      	b.n	8003c74 <__libc_init_array+0xc>
 8003c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c9a:	4798      	blx	r3
 8003c9c:	3601      	adds	r6, #1
 8003c9e:	e7f2      	b.n	8003c86 <__libc_init_array+0x1e>
 8003ca0:	08004634 	.word	0x08004634
 8003ca4:	08004634 	.word	0x08004634
 8003ca8:	08004634 	.word	0x08004634
 8003cac:	08004638 	.word	0x08004638

08003cb0 <siprintf>:
 8003cb0:	b40e      	push	{r1, r2, r3}
 8003cb2:	b500      	push	{lr}
 8003cb4:	b09c      	sub	sp, #112	; 0x70
 8003cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8003cb8:	9002      	str	r0, [sp, #8]
 8003cba:	9006      	str	r0, [sp, #24]
 8003cbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cc0:	4809      	ldr	r0, [pc, #36]	; (8003ce8 <siprintf+0x38>)
 8003cc2:	9107      	str	r1, [sp, #28]
 8003cc4:	9104      	str	r1, [sp, #16]
 8003cc6:	4909      	ldr	r1, [pc, #36]	; (8003cec <siprintf+0x3c>)
 8003cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ccc:	9105      	str	r1, [sp, #20]
 8003cce:	6800      	ldr	r0, [r0, #0]
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	a902      	add	r1, sp, #8
 8003cd4:	f000 f868 	bl	8003da8 <_svfiprintf_r>
 8003cd8:	9b02      	ldr	r3, [sp, #8]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	b01c      	add	sp, #112	; 0x70
 8003ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ce4:	b003      	add	sp, #12
 8003ce6:	4770      	bx	lr
 8003ce8:	2000000c 	.word	0x2000000c
 8003cec:	ffff0208 	.word	0xffff0208

08003cf0 <__ssputs_r>:
 8003cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf4:	688e      	ldr	r6, [r1, #8]
 8003cf6:	429e      	cmp	r6, r3
 8003cf8:	4682      	mov	sl, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	4690      	mov	r8, r2
 8003cfe:	461f      	mov	r7, r3
 8003d00:	d838      	bhi.n	8003d74 <__ssputs_r+0x84>
 8003d02:	898a      	ldrh	r2, [r1, #12]
 8003d04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d08:	d032      	beq.n	8003d70 <__ssputs_r+0x80>
 8003d0a:	6825      	ldr	r5, [r4, #0]
 8003d0c:	6909      	ldr	r1, [r1, #16]
 8003d0e:	eba5 0901 	sub.w	r9, r5, r1
 8003d12:	6965      	ldr	r5, [r4, #20]
 8003d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	444b      	add	r3, r9
 8003d20:	106d      	asrs	r5, r5, #1
 8003d22:	429d      	cmp	r5, r3
 8003d24:	bf38      	it	cc
 8003d26:	461d      	movcc	r5, r3
 8003d28:	0553      	lsls	r3, r2, #21
 8003d2a:	d531      	bpl.n	8003d90 <__ssputs_r+0xa0>
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	f000 fb47 	bl	80043c0 <_malloc_r>
 8003d32:	4606      	mov	r6, r0
 8003d34:	b950      	cbnz	r0, 8003d4c <__ssputs_r+0x5c>
 8003d36:	230c      	movs	r3, #12
 8003d38:	f8ca 3000 	str.w	r3, [sl]
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d42:	81a3      	strh	r3, [r4, #12]
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4c:	6921      	ldr	r1, [r4, #16]
 8003d4e:	464a      	mov	r2, r9
 8003d50:	f000 fabe 	bl	80042d0 <memcpy>
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5e:	81a3      	strh	r3, [r4, #12]
 8003d60:	6126      	str	r6, [r4, #16]
 8003d62:	6165      	str	r5, [r4, #20]
 8003d64:	444e      	add	r6, r9
 8003d66:	eba5 0509 	sub.w	r5, r5, r9
 8003d6a:	6026      	str	r6, [r4, #0]
 8003d6c:	60a5      	str	r5, [r4, #8]
 8003d6e:	463e      	mov	r6, r7
 8003d70:	42be      	cmp	r6, r7
 8003d72:	d900      	bls.n	8003d76 <__ssputs_r+0x86>
 8003d74:	463e      	mov	r6, r7
 8003d76:	4632      	mov	r2, r6
 8003d78:	6820      	ldr	r0, [r4, #0]
 8003d7a:	4641      	mov	r1, r8
 8003d7c:	f000 fab6 	bl	80042ec <memmove>
 8003d80:	68a3      	ldr	r3, [r4, #8]
 8003d82:	6822      	ldr	r2, [r4, #0]
 8003d84:	1b9b      	subs	r3, r3, r6
 8003d86:	4432      	add	r2, r6
 8003d88:	60a3      	str	r3, [r4, #8]
 8003d8a:	6022      	str	r2, [r4, #0]
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	e7db      	b.n	8003d48 <__ssputs_r+0x58>
 8003d90:	462a      	mov	r2, r5
 8003d92:	f000 fb6f 	bl	8004474 <_realloc_r>
 8003d96:	4606      	mov	r6, r0
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	d1e1      	bne.n	8003d60 <__ssputs_r+0x70>
 8003d9c:	6921      	ldr	r1, [r4, #16]
 8003d9e:	4650      	mov	r0, sl
 8003da0:	f000 fabe 	bl	8004320 <_free_r>
 8003da4:	e7c7      	b.n	8003d36 <__ssputs_r+0x46>
	...

08003da8 <_svfiprintf_r>:
 8003da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dac:	4698      	mov	r8, r3
 8003dae:	898b      	ldrh	r3, [r1, #12]
 8003db0:	061b      	lsls	r3, r3, #24
 8003db2:	b09d      	sub	sp, #116	; 0x74
 8003db4:	4607      	mov	r7, r0
 8003db6:	460d      	mov	r5, r1
 8003db8:	4614      	mov	r4, r2
 8003dba:	d50e      	bpl.n	8003dda <_svfiprintf_r+0x32>
 8003dbc:	690b      	ldr	r3, [r1, #16]
 8003dbe:	b963      	cbnz	r3, 8003dda <_svfiprintf_r+0x32>
 8003dc0:	2140      	movs	r1, #64	; 0x40
 8003dc2:	f000 fafd 	bl	80043c0 <_malloc_r>
 8003dc6:	6028      	str	r0, [r5, #0]
 8003dc8:	6128      	str	r0, [r5, #16]
 8003dca:	b920      	cbnz	r0, 8003dd6 <_svfiprintf_r+0x2e>
 8003dcc:	230c      	movs	r3, #12
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	e0d1      	b.n	8003f7a <_svfiprintf_r+0x1d2>
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	616b      	str	r3, [r5, #20]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dde:	2320      	movs	r3, #32
 8003de0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003de8:	2330      	movs	r3, #48	; 0x30
 8003dea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f94 <_svfiprintf_r+0x1ec>
 8003dee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003df2:	f04f 0901 	mov.w	r9, #1
 8003df6:	4623      	mov	r3, r4
 8003df8:	469a      	mov	sl, r3
 8003dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dfe:	b10a      	cbz	r2, 8003e04 <_svfiprintf_r+0x5c>
 8003e00:	2a25      	cmp	r2, #37	; 0x25
 8003e02:	d1f9      	bne.n	8003df8 <_svfiprintf_r+0x50>
 8003e04:	ebba 0b04 	subs.w	fp, sl, r4
 8003e08:	d00b      	beq.n	8003e22 <_svfiprintf_r+0x7a>
 8003e0a:	465b      	mov	r3, fp
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	4629      	mov	r1, r5
 8003e10:	4638      	mov	r0, r7
 8003e12:	f7ff ff6d 	bl	8003cf0 <__ssputs_r>
 8003e16:	3001      	adds	r0, #1
 8003e18:	f000 80aa 	beq.w	8003f70 <_svfiprintf_r+0x1c8>
 8003e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e1e:	445a      	add	r2, fp
 8003e20:	9209      	str	r2, [sp, #36]	; 0x24
 8003e22:	f89a 3000 	ldrb.w	r3, [sl]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80a2 	beq.w	8003f70 <_svfiprintf_r+0x1c8>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e36:	f10a 0a01 	add.w	sl, sl, #1
 8003e3a:	9304      	str	r3, [sp, #16]
 8003e3c:	9307      	str	r3, [sp, #28]
 8003e3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e42:	931a      	str	r3, [sp, #104]	; 0x68
 8003e44:	4654      	mov	r4, sl
 8003e46:	2205      	movs	r2, #5
 8003e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e4c:	4851      	ldr	r0, [pc, #324]	; (8003f94 <_svfiprintf_r+0x1ec>)
 8003e4e:	f7fc f9e7 	bl	8000220 <memchr>
 8003e52:	9a04      	ldr	r2, [sp, #16]
 8003e54:	b9d8      	cbnz	r0, 8003e8e <_svfiprintf_r+0xe6>
 8003e56:	06d0      	lsls	r0, r2, #27
 8003e58:	bf44      	itt	mi
 8003e5a:	2320      	movmi	r3, #32
 8003e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e60:	0711      	lsls	r1, r2, #28
 8003e62:	bf44      	itt	mi
 8003e64:	232b      	movmi	r3, #43	; 0x2b
 8003e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e70:	d015      	beq.n	8003e9e <_svfiprintf_r+0xf6>
 8003e72:	9a07      	ldr	r2, [sp, #28]
 8003e74:	4654      	mov	r4, sl
 8003e76:	2000      	movs	r0, #0
 8003e78:	f04f 0c0a 	mov.w	ip, #10
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e82:	3b30      	subs	r3, #48	; 0x30
 8003e84:	2b09      	cmp	r3, #9
 8003e86:	d94e      	bls.n	8003f26 <_svfiprintf_r+0x17e>
 8003e88:	b1b0      	cbz	r0, 8003eb8 <_svfiprintf_r+0x110>
 8003e8a:	9207      	str	r2, [sp, #28]
 8003e8c:	e014      	b.n	8003eb8 <_svfiprintf_r+0x110>
 8003e8e:	eba0 0308 	sub.w	r3, r0, r8
 8003e92:	fa09 f303 	lsl.w	r3, r9, r3
 8003e96:	4313      	orrs	r3, r2
 8003e98:	9304      	str	r3, [sp, #16]
 8003e9a:	46a2      	mov	sl, r4
 8003e9c:	e7d2      	b.n	8003e44 <_svfiprintf_r+0x9c>
 8003e9e:	9b03      	ldr	r3, [sp, #12]
 8003ea0:	1d19      	adds	r1, r3, #4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	9103      	str	r1, [sp, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bfbb      	ittet	lt
 8003eaa:	425b      	neglt	r3, r3
 8003eac:	f042 0202 	orrlt.w	r2, r2, #2
 8003eb0:	9307      	strge	r3, [sp, #28]
 8003eb2:	9307      	strlt	r3, [sp, #28]
 8003eb4:	bfb8      	it	lt
 8003eb6:	9204      	strlt	r2, [sp, #16]
 8003eb8:	7823      	ldrb	r3, [r4, #0]
 8003eba:	2b2e      	cmp	r3, #46	; 0x2e
 8003ebc:	d10c      	bne.n	8003ed8 <_svfiprintf_r+0x130>
 8003ebe:	7863      	ldrb	r3, [r4, #1]
 8003ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec2:	d135      	bne.n	8003f30 <_svfiprintf_r+0x188>
 8003ec4:	9b03      	ldr	r3, [sp, #12]
 8003ec6:	1d1a      	adds	r2, r3, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	9203      	str	r2, [sp, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	bfb8      	it	lt
 8003ed0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ed4:	3402      	adds	r4, #2
 8003ed6:	9305      	str	r3, [sp, #20]
 8003ed8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fa4 <_svfiprintf_r+0x1fc>
 8003edc:	7821      	ldrb	r1, [r4, #0]
 8003ede:	2203      	movs	r2, #3
 8003ee0:	4650      	mov	r0, sl
 8003ee2:	f7fc f99d 	bl	8000220 <memchr>
 8003ee6:	b140      	cbz	r0, 8003efa <_svfiprintf_r+0x152>
 8003ee8:	2340      	movs	r3, #64	; 0x40
 8003eea:	eba0 000a 	sub.w	r0, r0, sl
 8003eee:	fa03 f000 	lsl.w	r0, r3, r0
 8003ef2:	9b04      	ldr	r3, [sp, #16]
 8003ef4:	4303      	orrs	r3, r0
 8003ef6:	3401      	adds	r4, #1
 8003ef8:	9304      	str	r3, [sp, #16]
 8003efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003efe:	4826      	ldr	r0, [pc, #152]	; (8003f98 <_svfiprintf_r+0x1f0>)
 8003f00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f04:	2206      	movs	r2, #6
 8003f06:	f7fc f98b 	bl	8000220 <memchr>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d038      	beq.n	8003f80 <_svfiprintf_r+0x1d8>
 8003f0e:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <_svfiprintf_r+0x1f4>)
 8003f10:	bb1b      	cbnz	r3, 8003f5a <_svfiprintf_r+0x1b2>
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	3307      	adds	r3, #7
 8003f16:	f023 0307 	bic.w	r3, r3, #7
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	9303      	str	r3, [sp, #12]
 8003f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f20:	4433      	add	r3, r6
 8003f22:	9309      	str	r3, [sp, #36]	; 0x24
 8003f24:	e767      	b.n	8003df6 <_svfiprintf_r+0x4e>
 8003f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	e7a5      	b.n	8003e7c <_svfiprintf_r+0xd4>
 8003f30:	2300      	movs	r3, #0
 8003f32:	3401      	adds	r4, #1
 8003f34:	9305      	str	r3, [sp, #20]
 8003f36:	4619      	mov	r1, r3
 8003f38:	f04f 0c0a 	mov.w	ip, #10
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f42:	3a30      	subs	r2, #48	; 0x30
 8003f44:	2a09      	cmp	r2, #9
 8003f46:	d903      	bls.n	8003f50 <_svfiprintf_r+0x1a8>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0c5      	beq.n	8003ed8 <_svfiprintf_r+0x130>
 8003f4c:	9105      	str	r1, [sp, #20]
 8003f4e:	e7c3      	b.n	8003ed8 <_svfiprintf_r+0x130>
 8003f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f54:	4604      	mov	r4, r0
 8003f56:	2301      	movs	r3, #1
 8003f58:	e7f0      	b.n	8003f3c <_svfiprintf_r+0x194>
 8003f5a:	ab03      	add	r3, sp, #12
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	462a      	mov	r2, r5
 8003f60:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <_svfiprintf_r+0x1f8>)
 8003f62:	a904      	add	r1, sp, #16
 8003f64:	4638      	mov	r0, r7
 8003f66:	f3af 8000 	nop.w
 8003f6a:	1c42      	adds	r2, r0, #1
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	d1d6      	bne.n	8003f1e <_svfiprintf_r+0x176>
 8003f70:	89ab      	ldrh	r3, [r5, #12]
 8003f72:	065b      	lsls	r3, r3, #25
 8003f74:	f53f af2c 	bmi.w	8003dd0 <_svfiprintf_r+0x28>
 8003f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f7a:	b01d      	add	sp, #116	; 0x74
 8003f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f80:	ab03      	add	r3, sp, #12
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	462a      	mov	r2, r5
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <_svfiprintf_r+0x1f8>)
 8003f88:	a904      	add	r1, sp, #16
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	f000 f87a 	bl	8004084 <_printf_i>
 8003f90:	e7eb      	b.n	8003f6a <_svfiprintf_r+0x1c2>
 8003f92:	bf00      	nop
 8003f94:	080045f8 	.word	0x080045f8
 8003f98:	08004602 	.word	0x08004602
 8003f9c:	00000000 	.word	0x00000000
 8003fa0:	08003cf1 	.word	0x08003cf1
 8003fa4:	080045fe 	.word	0x080045fe

08003fa8 <_printf_common>:
 8003fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fac:	4616      	mov	r6, r2
 8003fae:	4699      	mov	r9, r3
 8003fb0:	688a      	ldr	r2, [r1, #8]
 8003fb2:	690b      	ldr	r3, [r1, #16]
 8003fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	bfb8      	it	lt
 8003fbc:	4613      	movlt	r3, r2
 8003fbe:	6033      	str	r3, [r6, #0]
 8003fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	b10a      	cbz	r2, 8003fce <_printf_common+0x26>
 8003fca:	3301      	adds	r3, #1
 8003fcc:	6033      	str	r3, [r6, #0]
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	0699      	lsls	r1, r3, #26
 8003fd2:	bf42      	ittt	mi
 8003fd4:	6833      	ldrmi	r3, [r6, #0]
 8003fd6:	3302      	addmi	r3, #2
 8003fd8:	6033      	strmi	r3, [r6, #0]
 8003fda:	6825      	ldr	r5, [r4, #0]
 8003fdc:	f015 0506 	ands.w	r5, r5, #6
 8003fe0:	d106      	bne.n	8003ff0 <_printf_common+0x48>
 8003fe2:	f104 0a19 	add.w	sl, r4, #25
 8003fe6:	68e3      	ldr	r3, [r4, #12]
 8003fe8:	6832      	ldr	r2, [r6, #0]
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	42ab      	cmp	r3, r5
 8003fee:	dc26      	bgt.n	800403e <_printf_common+0x96>
 8003ff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ff4:	1e13      	subs	r3, r2, #0
 8003ff6:	6822      	ldr	r2, [r4, #0]
 8003ff8:	bf18      	it	ne
 8003ffa:	2301      	movne	r3, #1
 8003ffc:	0692      	lsls	r2, r2, #26
 8003ffe:	d42b      	bmi.n	8004058 <_printf_common+0xb0>
 8004000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004004:	4649      	mov	r1, r9
 8004006:	4638      	mov	r0, r7
 8004008:	47c0      	blx	r8
 800400a:	3001      	adds	r0, #1
 800400c:	d01e      	beq.n	800404c <_printf_common+0xa4>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	68e5      	ldr	r5, [r4, #12]
 8004012:	6832      	ldr	r2, [r6, #0]
 8004014:	f003 0306 	and.w	r3, r3, #6
 8004018:	2b04      	cmp	r3, #4
 800401a:	bf08      	it	eq
 800401c:	1aad      	subeq	r5, r5, r2
 800401e:	68a3      	ldr	r3, [r4, #8]
 8004020:	6922      	ldr	r2, [r4, #16]
 8004022:	bf0c      	ite	eq
 8004024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004028:	2500      	movne	r5, #0
 800402a:	4293      	cmp	r3, r2
 800402c:	bfc4      	itt	gt
 800402e:	1a9b      	subgt	r3, r3, r2
 8004030:	18ed      	addgt	r5, r5, r3
 8004032:	2600      	movs	r6, #0
 8004034:	341a      	adds	r4, #26
 8004036:	42b5      	cmp	r5, r6
 8004038:	d11a      	bne.n	8004070 <_printf_common+0xc8>
 800403a:	2000      	movs	r0, #0
 800403c:	e008      	b.n	8004050 <_printf_common+0xa8>
 800403e:	2301      	movs	r3, #1
 8004040:	4652      	mov	r2, sl
 8004042:	4649      	mov	r1, r9
 8004044:	4638      	mov	r0, r7
 8004046:	47c0      	blx	r8
 8004048:	3001      	adds	r0, #1
 800404a:	d103      	bne.n	8004054 <_printf_common+0xac>
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004054:	3501      	adds	r5, #1
 8004056:	e7c6      	b.n	8003fe6 <_printf_common+0x3e>
 8004058:	18e1      	adds	r1, r4, r3
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	2030      	movs	r0, #48	; 0x30
 800405e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004062:	4422      	add	r2, r4
 8004064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800406c:	3302      	adds	r3, #2
 800406e:	e7c7      	b.n	8004000 <_printf_common+0x58>
 8004070:	2301      	movs	r3, #1
 8004072:	4622      	mov	r2, r4
 8004074:	4649      	mov	r1, r9
 8004076:	4638      	mov	r0, r7
 8004078:	47c0      	blx	r8
 800407a:	3001      	adds	r0, #1
 800407c:	d0e6      	beq.n	800404c <_printf_common+0xa4>
 800407e:	3601      	adds	r6, #1
 8004080:	e7d9      	b.n	8004036 <_printf_common+0x8e>
	...

08004084 <_printf_i>:
 8004084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004088:	460c      	mov	r4, r1
 800408a:	4691      	mov	r9, r2
 800408c:	7e27      	ldrb	r7, [r4, #24]
 800408e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004090:	2f78      	cmp	r7, #120	; 0x78
 8004092:	4680      	mov	r8, r0
 8004094:	469a      	mov	sl, r3
 8004096:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800409a:	d807      	bhi.n	80040ac <_printf_i+0x28>
 800409c:	2f62      	cmp	r7, #98	; 0x62
 800409e:	d80a      	bhi.n	80040b6 <_printf_i+0x32>
 80040a0:	2f00      	cmp	r7, #0
 80040a2:	f000 80d8 	beq.w	8004256 <_printf_i+0x1d2>
 80040a6:	2f58      	cmp	r7, #88	; 0x58
 80040a8:	f000 80a3 	beq.w	80041f2 <_printf_i+0x16e>
 80040ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040b4:	e03a      	b.n	800412c <_printf_i+0xa8>
 80040b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040ba:	2b15      	cmp	r3, #21
 80040bc:	d8f6      	bhi.n	80040ac <_printf_i+0x28>
 80040be:	a001      	add	r0, pc, #4	; (adr r0, 80040c4 <_printf_i+0x40>)
 80040c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80040c4:	0800411d 	.word	0x0800411d
 80040c8:	08004131 	.word	0x08004131
 80040cc:	080040ad 	.word	0x080040ad
 80040d0:	080040ad 	.word	0x080040ad
 80040d4:	080040ad 	.word	0x080040ad
 80040d8:	080040ad 	.word	0x080040ad
 80040dc:	08004131 	.word	0x08004131
 80040e0:	080040ad 	.word	0x080040ad
 80040e4:	080040ad 	.word	0x080040ad
 80040e8:	080040ad 	.word	0x080040ad
 80040ec:	080040ad 	.word	0x080040ad
 80040f0:	0800423d 	.word	0x0800423d
 80040f4:	08004161 	.word	0x08004161
 80040f8:	0800421f 	.word	0x0800421f
 80040fc:	080040ad 	.word	0x080040ad
 8004100:	080040ad 	.word	0x080040ad
 8004104:	0800425f 	.word	0x0800425f
 8004108:	080040ad 	.word	0x080040ad
 800410c:	08004161 	.word	0x08004161
 8004110:	080040ad 	.word	0x080040ad
 8004114:	080040ad 	.word	0x080040ad
 8004118:	08004227 	.word	0x08004227
 800411c:	680b      	ldr	r3, [r1, #0]
 800411e:	1d1a      	adds	r2, r3, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	600a      	str	r2, [r1, #0]
 8004124:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800412c:	2301      	movs	r3, #1
 800412e:	e0a3      	b.n	8004278 <_printf_i+0x1f4>
 8004130:	6825      	ldr	r5, [r4, #0]
 8004132:	6808      	ldr	r0, [r1, #0]
 8004134:	062e      	lsls	r6, r5, #24
 8004136:	f100 0304 	add.w	r3, r0, #4
 800413a:	d50a      	bpl.n	8004152 <_printf_i+0xce>
 800413c:	6805      	ldr	r5, [r0, #0]
 800413e:	600b      	str	r3, [r1, #0]
 8004140:	2d00      	cmp	r5, #0
 8004142:	da03      	bge.n	800414c <_printf_i+0xc8>
 8004144:	232d      	movs	r3, #45	; 0x2d
 8004146:	426d      	negs	r5, r5
 8004148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800414c:	485e      	ldr	r0, [pc, #376]	; (80042c8 <_printf_i+0x244>)
 800414e:	230a      	movs	r3, #10
 8004150:	e019      	b.n	8004186 <_printf_i+0x102>
 8004152:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004156:	6805      	ldr	r5, [r0, #0]
 8004158:	600b      	str	r3, [r1, #0]
 800415a:	bf18      	it	ne
 800415c:	b22d      	sxthne	r5, r5
 800415e:	e7ef      	b.n	8004140 <_printf_i+0xbc>
 8004160:	680b      	ldr	r3, [r1, #0]
 8004162:	6825      	ldr	r5, [r4, #0]
 8004164:	1d18      	adds	r0, r3, #4
 8004166:	6008      	str	r0, [r1, #0]
 8004168:	0628      	lsls	r0, r5, #24
 800416a:	d501      	bpl.n	8004170 <_printf_i+0xec>
 800416c:	681d      	ldr	r5, [r3, #0]
 800416e:	e002      	b.n	8004176 <_printf_i+0xf2>
 8004170:	0669      	lsls	r1, r5, #25
 8004172:	d5fb      	bpl.n	800416c <_printf_i+0xe8>
 8004174:	881d      	ldrh	r5, [r3, #0]
 8004176:	4854      	ldr	r0, [pc, #336]	; (80042c8 <_printf_i+0x244>)
 8004178:	2f6f      	cmp	r7, #111	; 0x6f
 800417a:	bf0c      	ite	eq
 800417c:	2308      	moveq	r3, #8
 800417e:	230a      	movne	r3, #10
 8004180:	2100      	movs	r1, #0
 8004182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004186:	6866      	ldr	r6, [r4, #4]
 8004188:	60a6      	str	r6, [r4, #8]
 800418a:	2e00      	cmp	r6, #0
 800418c:	bfa2      	ittt	ge
 800418e:	6821      	ldrge	r1, [r4, #0]
 8004190:	f021 0104 	bicge.w	r1, r1, #4
 8004194:	6021      	strge	r1, [r4, #0]
 8004196:	b90d      	cbnz	r5, 800419c <_printf_i+0x118>
 8004198:	2e00      	cmp	r6, #0
 800419a:	d04d      	beq.n	8004238 <_printf_i+0x1b4>
 800419c:	4616      	mov	r6, r2
 800419e:	fbb5 f1f3 	udiv	r1, r5, r3
 80041a2:	fb03 5711 	mls	r7, r3, r1, r5
 80041a6:	5dc7      	ldrb	r7, [r0, r7]
 80041a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041ac:	462f      	mov	r7, r5
 80041ae:	42bb      	cmp	r3, r7
 80041b0:	460d      	mov	r5, r1
 80041b2:	d9f4      	bls.n	800419e <_printf_i+0x11a>
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d10b      	bne.n	80041d0 <_printf_i+0x14c>
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	07df      	lsls	r7, r3, #31
 80041bc:	d508      	bpl.n	80041d0 <_printf_i+0x14c>
 80041be:	6923      	ldr	r3, [r4, #16]
 80041c0:	6861      	ldr	r1, [r4, #4]
 80041c2:	4299      	cmp	r1, r3
 80041c4:	bfde      	ittt	le
 80041c6:	2330      	movle	r3, #48	; 0x30
 80041c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041d0:	1b92      	subs	r2, r2, r6
 80041d2:	6122      	str	r2, [r4, #16]
 80041d4:	f8cd a000 	str.w	sl, [sp]
 80041d8:	464b      	mov	r3, r9
 80041da:	aa03      	add	r2, sp, #12
 80041dc:	4621      	mov	r1, r4
 80041de:	4640      	mov	r0, r8
 80041e0:	f7ff fee2 	bl	8003fa8 <_printf_common>
 80041e4:	3001      	adds	r0, #1
 80041e6:	d14c      	bne.n	8004282 <_printf_i+0x1fe>
 80041e8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ec:	b004      	add	sp, #16
 80041ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f2:	4835      	ldr	r0, [pc, #212]	; (80042c8 <_printf_i+0x244>)
 80041f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	680e      	ldr	r6, [r1, #0]
 80041fc:	061f      	lsls	r7, r3, #24
 80041fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8004202:	600e      	str	r6, [r1, #0]
 8004204:	d514      	bpl.n	8004230 <_printf_i+0x1ac>
 8004206:	07d9      	lsls	r1, r3, #31
 8004208:	bf44      	itt	mi
 800420a:	f043 0320 	orrmi.w	r3, r3, #32
 800420e:	6023      	strmi	r3, [r4, #0]
 8004210:	b91d      	cbnz	r5, 800421a <_printf_i+0x196>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	f023 0320 	bic.w	r3, r3, #32
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	2310      	movs	r3, #16
 800421c:	e7b0      	b.n	8004180 <_printf_i+0xfc>
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	f043 0320 	orr.w	r3, r3, #32
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	2378      	movs	r3, #120	; 0x78
 8004228:	4828      	ldr	r0, [pc, #160]	; (80042cc <_printf_i+0x248>)
 800422a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800422e:	e7e3      	b.n	80041f8 <_printf_i+0x174>
 8004230:	065e      	lsls	r6, r3, #25
 8004232:	bf48      	it	mi
 8004234:	b2ad      	uxthmi	r5, r5
 8004236:	e7e6      	b.n	8004206 <_printf_i+0x182>
 8004238:	4616      	mov	r6, r2
 800423a:	e7bb      	b.n	80041b4 <_printf_i+0x130>
 800423c:	680b      	ldr	r3, [r1, #0]
 800423e:	6826      	ldr	r6, [r4, #0]
 8004240:	6960      	ldr	r0, [r4, #20]
 8004242:	1d1d      	adds	r5, r3, #4
 8004244:	600d      	str	r5, [r1, #0]
 8004246:	0635      	lsls	r5, r6, #24
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	d501      	bpl.n	8004250 <_printf_i+0x1cc>
 800424c:	6018      	str	r0, [r3, #0]
 800424e:	e002      	b.n	8004256 <_printf_i+0x1d2>
 8004250:	0671      	lsls	r1, r6, #25
 8004252:	d5fb      	bpl.n	800424c <_printf_i+0x1c8>
 8004254:	8018      	strh	r0, [r3, #0]
 8004256:	2300      	movs	r3, #0
 8004258:	6123      	str	r3, [r4, #16]
 800425a:	4616      	mov	r6, r2
 800425c:	e7ba      	b.n	80041d4 <_printf_i+0x150>
 800425e:	680b      	ldr	r3, [r1, #0]
 8004260:	1d1a      	adds	r2, r3, #4
 8004262:	600a      	str	r2, [r1, #0]
 8004264:	681e      	ldr	r6, [r3, #0]
 8004266:	6862      	ldr	r2, [r4, #4]
 8004268:	2100      	movs	r1, #0
 800426a:	4630      	mov	r0, r6
 800426c:	f7fb ffd8 	bl	8000220 <memchr>
 8004270:	b108      	cbz	r0, 8004276 <_printf_i+0x1f2>
 8004272:	1b80      	subs	r0, r0, r6
 8004274:	6060      	str	r0, [r4, #4]
 8004276:	6863      	ldr	r3, [r4, #4]
 8004278:	6123      	str	r3, [r4, #16]
 800427a:	2300      	movs	r3, #0
 800427c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004280:	e7a8      	b.n	80041d4 <_printf_i+0x150>
 8004282:	6923      	ldr	r3, [r4, #16]
 8004284:	4632      	mov	r2, r6
 8004286:	4649      	mov	r1, r9
 8004288:	4640      	mov	r0, r8
 800428a:	47d0      	blx	sl
 800428c:	3001      	adds	r0, #1
 800428e:	d0ab      	beq.n	80041e8 <_printf_i+0x164>
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	079b      	lsls	r3, r3, #30
 8004294:	d413      	bmi.n	80042be <_printf_i+0x23a>
 8004296:	68e0      	ldr	r0, [r4, #12]
 8004298:	9b03      	ldr	r3, [sp, #12]
 800429a:	4298      	cmp	r0, r3
 800429c:	bfb8      	it	lt
 800429e:	4618      	movlt	r0, r3
 80042a0:	e7a4      	b.n	80041ec <_printf_i+0x168>
 80042a2:	2301      	movs	r3, #1
 80042a4:	4632      	mov	r2, r6
 80042a6:	4649      	mov	r1, r9
 80042a8:	4640      	mov	r0, r8
 80042aa:	47d0      	blx	sl
 80042ac:	3001      	adds	r0, #1
 80042ae:	d09b      	beq.n	80041e8 <_printf_i+0x164>
 80042b0:	3501      	adds	r5, #1
 80042b2:	68e3      	ldr	r3, [r4, #12]
 80042b4:	9903      	ldr	r1, [sp, #12]
 80042b6:	1a5b      	subs	r3, r3, r1
 80042b8:	42ab      	cmp	r3, r5
 80042ba:	dcf2      	bgt.n	80042a2 <_printf_i+0x21e>
 80042bc:	e7eb      	b.n	8004296 <_printf_i+0x212>
 80042be:	2500      	movs	r5, #0
 80042c0:	f104 0619 	add.w	r6, r4, #25
 80042c4:	e7f5      	b.n	80042b2 <_printf_i+0x22e>
 80042c6:	bf00      	nop
 80042c8:	08004609 	.word	0x08004609
 80042cc:	0800461a 	.word	0x0800461a

080042d0 <memcpy>:
 80042d0:	440a      	add	r2, r1
 80042d2:	4291      	cmp	r1, r2
 80042d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042d8:	d100      	bne.n	80042dc <memcpy+0xc>
 80042da:	4770      	bx	lr
 80042dc:	b510      	push	{r4, lr}
 80042de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042e6:	4291      	cmp	r1, r2
 80042e8:	d1f9      	bne.n	80042de <memcpy+0xe>
 80042ea:	bd10      	pop	{r4, pc}

080042ec <memmove>:
 80042ec:	4288      	cmp	r0, r1
 80042ee:	b510      	push	{r4, lr}
 80042f0:	eb01 0402 	add.w	r4, r1, r2
 80042f4:	d902      	bls.n	80042fc <memmove+0x10>
 80042f6:	4284      	cmp	r4, r0
 80042f8:	4623      	mov	r3, r4
 80042fa:	d807      	bhi.n	800430c <memmove+0x20>
 80042fc:	1e43      	subs	r3, r0, #1
 80042fe:	42a1      	cmp	r1, r4
 8004300:	d008      	beq.n	8004314 <memmove+0x28>
 8004302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800430a:	e7f8      	b.n	80042fe <memmove+0x12>
 800430c:	4402      	add	r2, r0
 800430e:	4601      	mov	r1, r0
 8004310:	428a      	cmp	r2, r1
 8004312:	d100      	bne.n	8004316 <memmove+0x2a>
 8004314:	bd10      	pop	{r4, pc}
 8004316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800431a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800431e:	e7f7      	b.n	8004310 <memmove+0x24>

08004320 <_free_r>:
 8004320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004322:	2900      	cmp	r1, #0
 8004324:	d048      	beq.n	80043b8 <_free_r+0x98>
 8004326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800432a:	9001      	str	r0, [sp, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f1a1 0404 	sub.w	r4, r1, #4
 8004332:	bfb8      	it	lt
 8004334:	18e4      	addlt	r4, r4, r3
 8004336:	f000 f8d3 	bl	80044e0 <__malloc_lock>
 800433a:	4a20      	ldr	r2, [pc, #128]	; (80043bc <_free_r+0x9c>)
 800433c:	9801      	ldr	r0, [sp, #4]
 800433e:	6813      	ldr	r3, [r2, #0]
 8004340:	4615      	mov	r5, r2
 8004342:	b933      	cbnz	r3, 8004352 <_free_r+0x32>
 8004344:	6063      	str	r3, [r4, #4]
 8004346:	6014      	str	r4, [r2, #0]
 8004348:	b003      	add	sp, #12
 800434a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800434e:	f000 b8cd 	b.w	80044ec <__malloc_unlock>
 8004352:	42a3      	cmp	r3, r4
 8004354:	d90b      	bls.n	800436e <_free_r+0x4e>
 8004356:	6821      	ldr	r1, [r4, #0]
 8004358:	1862      	adds	r2, r4, r1
 800435a:	4293      	cmp	r3, r2
 800435c:	bf04      	itt	eq
 800435e:	681a      	ldreq	r2, [r3, #0]
 8004360:	685b      	ldreq	r3, [r3, #4]
 8004362:	6063      	str	r3, [r4, #4]
 8004364:	bf04      	itt	eq
 8004366:	1852      	addeq	r2, r2, r1
 8004368:	6022      	streq	r2, [r4, #0]
 800436a:	602c      	str	r4, [r5, #0]
 800436c:	e7ec      	b.n	8004348 <_free_r+0x28>
 800436e:	461a      	mov	r2, r3
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	b10b      	cbz	r3, 8004378 <_free_r+0x58>
 8004374:	42a3      	cmp	r3, r4
 8004376:	d9fa      	bls.n	800436e <_free_r+0x4e>
 8004378:	6811      	ldr	r1, [r2, #0]
 800437a:	1855      	adds	r5, r2, r1
 800437c:	42a5      	cmp	r5, r4
 800437e:	d10b      	bne.n	8004398 <_free_r+0x78>
 8004380:	6824      	ldr	r4, [r4, #0]
 8004382:	4421      	add	r1, r4
 8004384:	1854      	adds	r4, r2, r1
 8004386:	42a3      	cmp	r3, r4
 8004388:	6011      	str	r1, [r2, #0]
 800438a:	d1dd      	bne.n	8004348 <_free_r+0x28>
 800438c:	681c      	ldr	r4, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	6053      	str	r3, [r2, #4]
 8004392:	4421      	add	r1, r4
 8004394:	6011      	str	r1, [r2, #0]
 8004396:	e7d7      	b.n	8004348 <_free_r+0x28>
 8004398:	d902      	bls.n	80043a0 <_free_r+0x80>
 800439a:	230c      	movs	r3, #12
 800439c:	6003      	str	r3, [r0, #0]
 800439e:	e7d3      	b.n	8004348 <_free_r+0x28>
 80043a0:	6825      	ldr	r5, [r4, #0]
 80043a2:	1961      	adds	r1, r4, r5
 80043a4:	428b      	cmp	r3, r1
 80043a6:	bf04      	itt	eq
 80043a8:	6819      	ldreq	r1, [r3, #0]
 80043aa:	685b      	ldreq	r3, [r3, #4]
 80043ac:	6063      	str	r3, [r4, #4]
 80043ae:	bf04      	itt	eq
 80043b0:	1949      	addeq	r1, r1, r5
 80043b2:	6021      	streq	r1, [r4, #0]
 80043b4:	6054      	str	r4, [r2, #4]
 80043b6:	e7c7      	b.n	8004348 <_free_r+0x28>
 80043b8:	b003      	add	sp, #12
 80043ba:	bd30      	pop	{r4, r5, pc}
 80043bc:	20000090 	.word	0x20000090

080043c0 <_malloc_r>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	1ccd      	adds	r5, r1, #3
 80043c4:	f025 0503 	bic.w	r5, r5, #3
 80043c8:	3508      	adds	r5, #8
 80043ca:	2d0c      	cmp	r5, #12
 80043cc:	bf38      	it	cc
 80043ce:	250c      	movcc	r5, #12
 80043d0:	2d00      	cmp	r5, #0
 80043d2:	4606      	mov	r6, r0
 80043d4:	db01      	blt.n	80043da <_malloc_r+0x1a>
 80043d6:	42a9      	cmp	r1, r5
 80043d8:	d903      	bls.n	80043e2 <_malloc_r+0x22>
 80043da:	230c      	movs	r3, #12
 80043dc:	6033      	str	r3, [r6, #0]
 80043de:	2000      	movs	r0, #0
 80043e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043e2:	f000 f87d 	bl	80044e0 <__malloc_lock>
 80043e6:	4921      	ldr	r1, [pc, #132]	; (800446c <_malloc_r+0xac>)
 80043e8:	680a      	ldr	r2, [r1, #0]
 80043ea:	4614      	mov	r4, r2
 80043ec:	b99c      	cbnz	r4, 8004416 <_malloc_r+0x56>
 80043ee:	4f20      	ldr	r7, [pc, #128]	; (8004470 <_malloc_r+0xb0>)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	b923      	cbnz	r3, 80043fe <_malloc_r+0x3e>
 80043f4:	4621      	mov	r1, r4
 80043f6:	4630      	mov	r0, r6
 80043f8:	f000 f862 	bl	80044c0 <_sbrk_r>
 80043fc:	6038      	str	r0, [r7, #0]
 80043fe:	4629      	mov	r1, r5
 8004400:	4630      	mov	r0, r6
 8004402:	f000 f85d 	bl	80044c0 <_sbrk_r>
 8004406:	1c43      	adds	r3, r0, #1
 8004408:	d123      	bne.n	8004452 <_malloc_r+0x92>
 800440a:	230c      	movs	r3, #12
 800440c:	6033      	str	r3, [r6, #0]
 800440e:	4630      	mov	r0, r6
 8004410:	f000 f86c 	bl	80044ec <__malloc_unlock>
 8004414:	e7e3      	b.n	80043de <_malloc_r+0x1e>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	1b5b      	subs	r3, r3, r5
 800441a:	d417      	bmi.n	800444c <_malloc_r+0x8c>
 800441c:	2b0b      	cmp	r3, #11
 800441e:	d903      	bls.n	8004428 <_malloc_r+0x68>
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	441c      	add	r4, r3
 8004424:	6025      	str	r5, [r4, #0]
 8004426:	e004      	b.n	8004432 <_malloc_r+0x72>
 8004428:	6863      	ldr	r3, [r4, #4]
 800442a:	42a2      	cmp	r2, r4
 800442c:	bf0c      	ite	eq
 800442e:	600b      	streq	r3, [r1, #0]
 8004430:	6053      	strne	r3, [r2, #4]
 8004432:	4630      	mov	r0, r6
 8004434:	f000 f85a 	bl	80044ec <__malloc_unlock>
 8004438:	f104 000b 	add.w	r0, r4, #11
 800443c:	1d23      	adds	r3, r4, #4
 800443e:	f020 0007 	bic.w	r0, r0, #7
 8004442:	1ac2      	subs	r2, r0, r3
 8004444:	d0cc      	beq.n	80043e0 <_malloc_r+0x20>
 8004446:	1a1b      	subs	r3, r3, r0
 8004448:	50a3      	str	r3, [r4, r2]
 800444a:	e7c9      	b.n	80043e0 <_malloc_r+0x20>
 800444c:	4622      	mov	r2, r4
 800444e:	6864      	ldr	r4, [r4, #4]
 8004450:	e7cc      	b.n	80043ec <_malloc_r+0x2c>
 8004452:	1cc4      	adds	r4, r0, #3
 8004454:	f024 0403 	bic.w	r4, r4, #3
 8004458:	42a0      	cmp	r0, r4
 800445a:	d0e3      	beq.n	8004424 <_malloc_r+0x64>
 800445c:	1a21      	subs	r1, r4, r0
 800445e:	4630      	mov	r0, r6
 8004460:	f000 f82e 	bl	80044c0 <_sbrk_r>
 8004464:	3001      	adds	r0, #1
 8004466:	d1dd      	bne.n	8004424 <_malloc_r+0x64>
 8004468:	e7cf      	b.n	800440a <_malloc_r+0x4a>
 800446a:	bf00      	nop
 800446c:	20000090 	.word	0x20000090
 8004470:	20000094 	.word	0x20000094

08004474 <_realloc_r>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	4607      	mov	r7, r0
 8004478:	4614      	mov	r4, r2
 800447a:	460e      	mov	r6, r1
 800447c:	b921      	cbnz	r1, 8004488 <_realloc_r+0x14>
 800447e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004482:	4611      	mov	r1, r2
 8004484:	f7ff bf9c 	b.w	80043c0 <_malloc_r>
 8004488:	b922      	cbnz	r2, 8004494 <_realloc_r+0x20>
 800448a:	f7ff ff49 	bl	8004320 <_free_r>
 800448e:	4625      	mov	r5, r4
 8004490:	4628      	mov	r0, r5
 8004492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004494:	f000 f830 	bl	80044f8 <_malloc_usable_size_r>
 8004498:	42a0      	cmp	r0, r4
 800449a:	d20f      	bcs.n	80044bc <_realloc_r+0x48>
 800449c:	4621      	mov	r1, r4
 800449e:	4638      	mov	r0, r7
 80044a0:	f7ff ff8e 	bl	80043c0 <_malloc_r>
 80044a4:	4605      	mov	r5, r0
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d0f2      	beq.n	8004490 <_realloc_r+0x1c>
 80044aa:	4631      	mov	r1, r6
 80044ac:	4622      	mov	r2, r4
 80044ae:	f7ff ff0f 	bl	80042d0 <memcpy>
 80044b2:	4631      	mov	r1, r6
 80044b4:	4638      	mov	r0, r7
 80044b6:	f7ff ff33 	bl	8004320 <_free_r>
 80044ba:	e7e9      	b.n	8004490 <_realloc_r+0x1c>
 80044bc:	4635      	mov	r5, r6
 80044be:	e7e7      	b.n	8004490 <_realloc_r+0x1c>

080044c0 <_sbrk_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	4d06      	ldr	r5, [pc, #24]	; (80044dc <_sbrk_r+0x1c>)
 80044c4:	2300      	movs	r3, #0
 80044c6:	4604      	mov	r4, r0
 80044c8:	4608      	mov	r0, r1
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	f000 f81e 	bl	800450c <_sbrk>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d102      	bne.n	80044da <_sbrk_r+0x1a>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	b103      	cbz	r3, 80044da <_sbrk_r+0x1a>
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	bd38      	pop	{r3, r4, r5, pc}
 80044dc:	200001b4 	.word	0x200001b4

080044e0 <__malloc_lock>:
 80044e0:	4801      	ldr	r0, [pc, #4]	; (80044e8 <__malloc_lock+0x8>)
 80044e2:	f000 b811 	b.w	8004508 <__retarget_lock_acquire_recursive>
 80044e6:	bf00      	nop
 80044e8:	200001bc 	.word	0x200001bc

080044ec <__malloc_unlock>:
 80044ec:	4801      	ldr	r0, [pc, #4]	; (80044f4 <__malloc_unlock+0x8>)
 80044ee:	f000 b80c 	b.w	800450a <__retarget_lock_release_recursive>
 80044f2:	bf00      	nop
 80044f4:	200001bc 	.word	0x200001bc

080044f8 <_malloc_usable_size_r>:
 80044f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044fc:	1f18      	subs	r0, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	bfbc      	itt	lt
 8004502:	580b      	ldrlt	r3, [r1, r0]
 8004504:	18c0      	addlt	r0, r0, r3
 8004506:	4770      	bx	lr

08004508 <__retarget_lock_acquire_recursive>:
 8004508:	4770      	bx	lr

0800450a <__retarget_lock_release_recursive>:
 800450a:	4770      	bx	lr

0800450c <_sbrk>:
 800450c:	4b04      	ldr	r3, [pc, #16]	; (8004520 <_sbrk+0x14>)
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	4602      	mov	r2, r0
 8004512:	b909      	cbnz	r1, 8004518 <_sbrk+0xc>
 8004514:	4903      	ldr	r1, [pc, #12]	; (8004524 <_sbrk+0x18>)
 8004516:	6019      	str	r1, [r3, #0]
 8004518:	6818      	ldr	r0, [r3, #0]
 800451a:	4402      	add	r2, r0
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	4770      	bx	lr
 8004520:	20000098 	.word	0x20000098
 8004524:	200001c8 	.word	0x200001c8

08004528 <_init>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	bf00      	nop
 800452c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452e:	bc08      	pop	{r3}
 8004530:	469e      	mov	lr, r3
 8004532:	4770      	bx	lr

08004534 <_fini>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	bf00      	nop
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr
