
RTC_AlarmA_12h.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08006dc8  08006dc8  00016dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c4  080072c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072cc  080072cc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080072d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  200001dc  080074b0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  080074b0  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c166  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197f  00000000  00000000  0002c372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002dcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002e598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228e6  00000000  00000000  0002eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6c3  00000000  00000000  00051686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7437  00000000  00000000  0005cd49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134180  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e0  00000000  00000000  001341d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001377b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00137880  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006dac 	.word	0x08006dac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006dac 	.word	0x08006dac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <SysTick_Handler>:

#include "main.h"

extern RTC_HandleTypeDef hrtc;

void SysTick_Handler(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8000ee4:	f000 fc18 	bl	8001718 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000ee8:	f000 fd88 	bl	80019fc <HAL_SYSTICK_IRQHandler>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ef4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ef8:	f000 ff3c 	bl	8001d74 <HAL_GPIO_EXTI_IRQHandler>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <RTC_Alarm_IRQHandler>:

void RTC_Alarm_IRQHandler(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

	HAL_RTC_AlarmIRQHandler(&hrtc);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <RTC_Alarm_IRQHandler+0x10>)
 8000f06:	f002 fc49 	bl	800379c <HAL_RTC_AlarmIRQHandler>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000204 	.word	0x20000204

08000f14 <printmsg>:
char* getDayOfWeek(uint8_t number);

UART_HandleTypeDef huart2;
RTC_HandleTypeDef hrtc;

void printmsg(char *format, ...) {
 8000f14:	b40f      	push	{r0, r1, r2, r3}
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b096      	sub	sp, #88	; 0x58
 8000f1a:	af00      	add	r7, sp, #0

	char str[80];

	/* Extract the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000f1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f20:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fcd8 	bl	80048e0 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff f96b 	bl	8000210 <strlen>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	f107 0108 	add.w	r1, r7, #8
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <printmsg+0x48>)
 8000f48:	f002 fd55 	bl	80039f6 <HAL_UART_Transmit>
	va_end(args);
}
 8000f4c:	bf00      	nop
 8000f4e:	3758      	adds	r7, #88	; 0x58
 8000f50:	46bd      	mov	sp, r7
 8000f52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f56:	b004      	add	sp, #16
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000224 	.word	0x20000224

08000f60 <main>:

int main(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

	HAL_Init(); //Systick interrupt initialized here
 8000f64:	f000 fb86 	bl	8001674 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50MHZ);
 8000f68:	2032      	movs	r0, #50	; 0x32
 8000f6a:	f000 f80d 	bl	8000f88 <SystemClock_Config_HSE>

	GPIO_Init();
 8000f6e:	f000 f8a7 	bl	80010c0 <GPIO_Init>
	UART2_Init();
 8000f72:	f000 f8f1 	bl	8001158 <UART2_Init>
	RTC_Init();
 8000f76:	f000 f915 	bl	80011a4 <RTC_Init>
	printmsg("RTC Alarm Test\r\n");
 8000f7a:	4802      	ldr	r0, [pc, #8]	; (8000f84 <main+0x24>)
 8000f7c:	f7ff ffca 	bl	8000f14 <printmsg>

	while(1)
 8000f80:	e7fe      	b.n	8000f80 <main+0x20>
 8000f82:	bf00      	nop
 8000f84:	08006e18 	.word	0x08006e18

08000f88 <SystemClock_Config_HSE>:
	{}

	return 0;
}

void SystemClock_Config_HSE(uint8_t clock_freq) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b096      	sub	sp, #88	; 0x58
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint8_t flash_latency = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	//Using HSE to derive PLL
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	623b      	str	r3, [r7, #32]
	osc_init.HSEState = RCC_HSE_ON;
 8000f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000faa:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq) {
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2b78      	cmp	r3, #120	; 0x78
 8000fb0:	d03a      	beq.n	8001028 <SystemClock_Config_HSE+0xa0>
 8000fb2:	2b78      	cmp	r3, #120	; 0x78
 8000fb4:	dc7d      	bgt.n	80010b2 <SystemClock_Config_HSE+0x12a>
 8000fb6:	2b32      	cmp	r3, #50	; 0x32
 8000fb8:	d002      	beq.n	8000fc0 <SystemClock_Config_HSE+0x38>
 8000fba:	2b54      	cmp	r3, #84	; 0x54
 8000fbc:	d01a      	beq.n	8000ff4 <SystemClock_Config_HSE+0x6c>
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
			flash_latency = 3;
			break;
		}
		default:
			return;
 8000fbe:	e078      	b.n	80010b2 <SystemClock_Config_HSE+0x12a>
			osc_init.PLL.PLLM = 16;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLN = 100;
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64bb      	str	r3, [r7, #72]	; 0x48
			osc_init.PLL.PLLQ = 2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64fb      	str	r3, [r7, #76]	; 0x4c
			osc_init.PLL.PLLR = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	653b      	str	r3, [r7, #80]	; 0x50
			clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	61fb      	str	r3, [r7, #28]
			flash_latency = 1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 8000ff2:	e033      	b.n	800105c <SystemClock_Config_HSE+0xd4>
			osc_init.PLL.PLLM = 16;
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLN = 168;
 8000ff8:	23a8      	movs	r3, #168	; 0xa8
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	64bb      	str	r3, [r7, #72]	; 0x48
			osc_init.PLL.PLLQ = 2;
 8001000:	2302      	movs	r3, #2
 8001002:	64fb      	str	r3, [r7, #76]	; 0x4c
			osc_init.PLL.PLLR = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	653b      	str	r3, [r7, #80]	; 0x50
			clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8001008:	230f      	movs	r3, #15
 800100a:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2302      	movs	r3, #2
 800100e:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001018:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	61fb      	str	r3, [r7, #28]
			flash_latency = 2;
 8001020:	2302      	movs	r3, #2
 8001022:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 8001026:	e019      	b.n	800105c <SystemClock_Config_HSE+0xd4>
			osc_init.PLL.PLLM = 16;
 8001028:	2310      	movs	r3, #16
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLN = 240;
 800102c:	23f0      	movs	r3, #240	; 0xf0
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8001030:	2302      	movs	r3, #2
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
			osc_init.PLL.PLLQ = 2;
 8001034:	2302      	movs	r3, #2
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
			osc_init.PLL.PLLR = 2;
 8001038:	2302      	movs	r3, #2
 800103a:	653b      	str	r3, [r7, #80]	; 0x50
			clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800103c:	230f      	movs	r3, #15
 800103e:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2302      	movs	r3, #2
 8001042:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8001048:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800104c:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001052:	61fb      	str	r3, [r7, #28]
			flash_latency = 3;
 8001054:	2303      	movs	r3, #3
 8001056:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
 800105a:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fc95 	bl	8002990 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config_HSE+0xe8>
		Error_handler();
 800106c:	f000 fa04 	bl	8001478 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK) {
 8001070:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fe92 	bl	8001da4 <HAL_RCC_ClockConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config_HSE+0x102>
		Error_handler();
 8001086:	f000 f9f7 	bl	8001478 <Error_handler>
	}

	//Configure the SYSTICK timer interrupt frequency for every 1ms
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800108a:	f000 ff71 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 800108e:	4603      	mov	r3, r0
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SystemClock_Config_HSE+0x134>)
 8001092:	fba2 2303 	umull	r2, r3, r2, r3
 8001096:	099b      	lsrs	r3, r3, #6
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fc86 	bl	80019aa <HAL_SYSTICK_Config>
	//Configure SYSTICK
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800109e:	2004      	movs	r0, #4
 80010a0:	f000 fc90 	bl	80019c4 <HAL_SYSTICK_CLKSourceConfig>
	//SYSTICK IRQn interrupt configuration
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 fc53 	bl	8001956 <HAL_NVIC_SetPriority>
 80010b0:	e000      	b.n	80010b4 <SystemClock_Config_HSE+0x12c>
			return;
 80010b2:	bf00      	nop

}
 80010b4:	3758      	adds	r7, #88	; 0x58
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	10624dd3 	.word	0x10624dd3

080010c0 <GPIO_Init>:

void GPIO_Init(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <GPIO_Init+0x8c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a1f      	ldr	r2, [pc, #124]	; (800114c <GPIO_Init+0x8c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <GPIO_Init+0x8c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <GPIO_Init+0x8c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a18      	ldr	r2, [pc, #96]	; (800114c <GPIO_Init+0x8c>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <GPIO_Init+0x8c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef ledgpio, buttongpio;

	ledgpio.Pin = GPIO_PIN_5 | GPIO_PIN_8;
 80010fe:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001102:	61fb      	str	r3, [r7, #28]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
	ledgpio.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &ledgpio);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	480f      	ldr	r0, [pc, #60]	; (8001150 <GPIO_Init+0x90>)
 8001114:	f000 fc80 	bl	8001a18 <HAL_GPIO_Init>

	buttongpio.Pin = GPIO_PIN_13;
 8001118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800111c:	60bb      	str	r3, [r7, #8]
	buttongpio.Mode = GPIO_MODE_IT_FALLING;
 800111e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001122:	60fb      	str	r3, [r7, #12]
	buttongpio.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &buttongpio);
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4619      	mov	r1, r3
 800112e:	4809      	ldr	r0, [pc, #36]	; (8001154 <GPIO_Init+0x94>)
 8001130:	f000 fc72 	bl	8001a18 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	210f      	movs	r1, #15
 8001138:	2028      	movs	r0, #40	; 0x28
 800113a:	f000 fc0c 	bl	8001956 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113e:	2028      	movs	r0, #40	; 0x28
 8001140:	f000 fc25 	bl	800198e <HAL_NVIC_EnableIRQ>
}
 8001144:	bf00      	nop
 8001146:	3730      	adds	r7, #48	; 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020800 	.word	0x40020800

08001158 <UART2_Init>:

void UART2_Init(void) {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

	huart2.Instance = USART2; //linking
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <UART2_Init+0x44>)
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <UART2_Init+0x48>)
 8001160:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <UART2_Init+0x44>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <UART2_Init+0x44>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <UART2_Init+0x44>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <UART2_Init+0x44>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <UART2_Init+0x44>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <UART2_Init+0x44>)
 8001184:	2208      	movs	r2, #8
 8001186:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) {
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <UART2_Init+0x44>)
 800118a:	f002 fbe7 	bl	800395c <HAL_UART_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <UART2_Init+0x40>

		//There is a problem
		Error_handler();
 8001194:	f000 f970 	bl	8001478 <Error_handler>
	}
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000224 	.word	0x20000224
 80011a0:	40004400 	.word	0x40004400

080011a4 <RTC_Init>:

void RTC_Init(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

	hrtc.Instance = RTC;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <RTC_Init+0x44>)
 80011aa:	4a10      	ldr	r2, [pc, #64]	; (80011ec <RTC_Init+0x48>)
 80011ac:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <RTC_Init+0x44>)
 80011b0:	2240      	movs	r2, #64	; 0x40
 80011b2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 0x7F; 	//127   (+1 = 128 because division of 1+prescaler)
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <RTC_Init+0x44>)
 80011b6:	227f      	movs	r2, #127	; 0x7f
 80011b8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 0xFF; 	//255   (+1 = 256 because division of 1+prescaler)
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <RTC_Init+0x44>)
 80011bc:	22ff      	movs	r2, #255	; 0xff
 80011be:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <RTC_Init+0x44>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW; //doesn't matter if output disabled
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <RTC_Init+0x44>)
 80011c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011cc:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;   //doesn't matter if output disabled
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <RTC_Init+0x44>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]

	if(HAL_RTC_Init(&hrtc) != HAL_OK) {
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <RTC_Init+0x44>)
 80011d6:	f001 fe79 	bl	8002ecc <HAL_RTC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <RTC_Init+0x40>
		Error_handler();
 80011e0:	f000 f94a 	bl	8001478 <Error_handler>
	}
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000204 	.word	0x20000204
 80011ec:	40002800 	.word	0x40002800

080011f0 <RTC_CalendarConfig>:

void RTC_CalendarConfig(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef RTC_TimeInit;
	RTC_DateTypeDef RTC_DateInit;

	// Configuring the Calendar for Time: 7:59:59 PM  Date: 30 January 2022 Sunday
	// (Sending binary values which will get converted to BCD)
	RTC_TimeInit.Hours = 7;
 80011f6:	2307      	movs	r3, #7
 80011f8:	713b      	strb	r3, [r7, #4]
	RTC_TimeInit.Minutes = 59;
 80011fa:	233b      	movs	r3, #59	; 0x3b
 80011fc:	717b      	strb	r3, [r7, #5]
	RTC_TimeInit.Seconds = 59;
 80011fe:	233b      	movs	r3, #59	; 0x3b
 8001200:	71bb      	strb	r3, [r7, #6]
	RTC_TimeInit.TimeFormat = RTC_HOURFORMAT12_PM;
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	71fb      	strb	r3, [r7, #7]
	if(HAL_RTC_SetTime(&hrtc, &RTC_TimeInit, RTC_FORMAT_BIN) != HAL_OK) {
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	480f      	ldr	r0, [pc, #60]	; (800124c <RTC_CalendarConfig+0x5c>)
 800120e:	f001 feee 	bl	8002fee <HAL_RTC_SetTime>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <RTC_CalendarConfig+0x2c>
		Error_handler();
 8001218:	f000 f92e 	bl	8001478 <Error_handler>
	}

	RTC_DateInit.Date = 30;
 800121c:	231e      	movs	r3, #30
 800121e:	70bb      	strb	r3, [r7, #2]
	RTC_DateInit.Month = RTC_MONTH_JANUARY;
 8001220:	2301      	movs	r3, #1
 8001222:	707b      	strb	r3, [r7, #1]
	RTC_DateInit.Year = 22;  //2000 + year (22) = 2022
 8001224:	2316      	movs	r3, #22
 8001226:	70fb      	strb	r3, [r7, #3]
	RTC_DateInit.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001228:	2307      	movs	r3, #7
 800122a:	703b      	strb	r3, [r7, #0]
	if(HAL_RTC_SetDate(&hrtc, &RTC_DateInit, RTC_FORMAT_BIN) != HAL_OK) {
 800122c:	463b      	mov	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <RTC_CalendarConfig+0x5c>)
 8001234:	f001 fff6 	bl	8003224 <HAL_RTC_SetDate>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <RTC_CalendarConfig+0x52>
		Error_handler();
 800123e:	f000 f91b 	bl	8001478 <Error_handler>
	}
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000204 	.word	0x20000204

08001250 <getAMPM>:

char* getAMPM(uint8_t number) {
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]

	char *AMPM[] = { "AM", "PM", "ER"};
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <getAMPM+0x38>)
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	ca07      	ldmia	r2, {r0, r1, r2}
 8001262:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if(number == RTC_HOURFORMAT12_AM)
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <getAMPM+0x20>
		//AM
		return AMPM[0];
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	e005      	b.n	800127c <getAMPM+0x2c>
	else if(number == RTC_HOURFORMAT12_PM)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b40      	cmp	r3, #64	; 0x40
 8001274:	d101      	bne.n	800127a <getAMPM+0x2a>
		//PM
		return AMPM[1];
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	e000      	b.n	800127c <getAMPM+0x2c>
	else
		//Error
		return AMPM[2];
 800127a:	697b      	ldr	r3, [r7, #20]
}
 800127c:	4618      	mov	r0, r3
 800127e:	371c      	adds	r7, #28
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	08006e2c 	.word	0x08006e2c

0800128c <getDayOfWeek>:

char* getDayOfWeek(uint8_t number) {
 800128c:	b4b0      	push	{r4, r5, r7}
 800128e:	b08b      	sub	sp, #44	; 0x2c
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]

	char *weekday[] = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <getDayOfWeek+0x38>)
 8001298:	f107 040c 	add.w	r4, r7, #12
 800129c:	461d      	mov	r5, r3
 800129e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return weekday[number-1];
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012b4:	4413      	add	r3, r2
 80012b6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	372c      	adds	r7, #44	; 0x2c
 80012be:	46bd      	mov	sp, r7
 80012c0:	bcb0      	pop	{r4, r5, r7}
 80012c2:	4770      	bx	lr
 80012c4:	08006e38 	.word	0x08006e38

080012c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	b08b      	sub	sp, #44	; 0x2c
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]

	//print RTC time and date details
	RTC_TimeTypeDef RTC_TimeRead;
	RTC_DateTypeDef RTC_DateRead;

	RTC_CalendarConfig();
 80012d2:	f7ff ff8d 	bl	80011f0 <RTC_CalendarConfig>

	HAL_RTC_GetTime(&hrtc, &RTC_TimeRead, RTC_FORMAT_BIN);
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	4818      	ldr	r0, [pc, #96]	; (8001340 <HAL_GPIO_EXTI_Callback+0x78>)
 80012e0:	f001 ff42 	bl	8003168 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_DateRead, RTC_FORMAT_BIN);
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	4814      	ldr	r0, [pc, #80]	; (8001340 <HAL_GPIO_EXTI_Callback+0x78>)
 80012ee:	f002 f840 	bl	8003372 <HAL_RTC_GetDate>

	printmsg("Current Time is: %02d:%02d:%02d%s\r\n", RTC_TimeRead.Hours, RTC_TimeRead.Minutes, RTC_TimeRead.Seconds, getAMPM(RTC_TimeRead.TimeFormat));
 80012f2:	7b3b      	ldrb	r3, [r7, #12]
 80012f4:	461c      	mov	r4, r3
 80012f6:	7b7b      	ldrb	r3, [r7, #13]
 80012f8:	461d      	mov	r5, r3
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	461e      	mov	r6, r3
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ffa5 	bl	8001250 <getAMPM>
 8001306:	4603      	mov	r3, r0
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	4633      	mov	r3, r6
 800130c:	462a      	mov	r2, r5
 800130e:	4621      	mov	r1, r4
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001312:	f7ff fdff 	bl	8000f14 <printmsg>
	printmsg("Current Date is: <%s> %02d-%2d-%2d\r\n", getDayOfWeek(RTC_DateRead.WeekDay), RTC_DateRead.Month, RTC_DateRead.Date, RTC_DateRead.Year);
 8001316:	7a3b      	ldrb	r3, [r7, #8]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ffb7 	bl	800128c <getDayOfWeek>
 800131e:	4601      	mov	r1, r0
 8001320:	7a7b      	ldrb	r3, [r7, #9]
 8001322:	461a      	mov	r2, r3
 8001324:	7abb      	ldrb	r3, [r7, #10]
 8001326:	4618      	mov	r0, r3
 8001328:	7afb      	ldrb	r3, [r7, #11]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	4603      	mov	r3, r0
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <HAL_GPIO_EXTI_Callback+0x80>)
 8001330:	f7ff fdf0 	bl	8000f14 <printmsg>

	RTC_AlarmConfig();
 8001334:	f000 f80a 	bl	800134c <RTC_AlarmConfig>
}
 8001338:	bf00      	nop
 800133a:	3724      	adds	r7, #36	; 0x24
 800133c:	46bd      	mov	sp, r7
 800133e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001340:	20000204 	.word	0x20000204
 8001344:	08006e54 	.word	0x08006e54
 8001348:	08006e78 	.word	0x08006e78

0800134c <RTC_AlarmConfig>:

void RTC_AlarmConfig(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0

	RTC_AlarmTypeDef AlarmA_Set;
	memset(&AlarmA_Set, 0, sizeof(AlarmA_Set));
 8001352:	463b      	mov	r3, r7
 8001354:	2228      	movs	r2, #40	; 0x28
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fe39 	bl	8003fd0 <memset>

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800135e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001362:	4815      	ldr	r0, [pc, #84]	; (80013b8 <RTC_AlarmConfig+0x6c>)
 8001364:	f002 f98c 	bl	8003680 <HAL_RTC_DeactivateAlarm>

	//8:00:00 AM Every Sunday
	AlarmA_Set.Alarm = RTC_ALARM_A;
 8001368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
	AlarmA_Set.AlarmTime.Hours = 8;
 800136e:	2308      	movs	r3, #8
 8001370:	703b      	strb	r3, [r7, #0]
	AlarmA_Set.AlarmTime.Minutes = 00;
 8001372:	2300      	movs	r3, #0
 8001374:	707b      	strb	r3, [r7, #1]
	AlarmA_Set.AlarmTime.Seconds = 00;
 8001376:	2300      	movs	r3, #0
 8001378:	70bb      	strb	r3, [r7, #2]
	AlarmA_Set.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800137a:	2300      	movs	r3, #0
 800137c:	70fb      	strb	r3, [r7, #3]
	AlarmA_Set.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800137e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001382:	61fb      	str	r3, [r7, #28]
	AlarmA_Set.AlarmDateWeekDay = RTC_WEEKDAY_SUNDAY;
 8001384:	2307      	movs	r3, #7
 8001386:	f887 3020 	strb.w	r3, [r7, #32]

	//Masking out the "don't-care" fields
	AlarmA_Set.AlarmMask = RTC_ALARMMASK_NONE;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
	AlarmA_Set.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 800138e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001392:	61bb      	str	r3, [r7, #24]
	if(HAL_RTC_SetAlarm_IT(&hrtc, &AlarmA_Set, RTC_FORMAT_BIN) != HAL_OK) {
 8001394:	463b      	mov	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	4619      	mov	r1, r3
 800139a:	4807      	ldr	r0, [pc, #28]	; (80013b8 <RTC_AlarmConfig+0x6c>)
 800139c:	f002 f838 	bl	8003410 <HAL_RTC_SetAlarm_IT>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <RTC_AlarmConfig+0x5e>
		Error_handler();
 80013a6:	f000 f867 	bl	8001478 <Error_handler>
	}
	printmsg("Alarm Set Successful\r\n");
 80013aa:	4804      	ldr	r0, [pc, #16]	; (80013bc <RTC_AlarmConfig+0x70>)
 80013ac:	f7ff fdb2 	bl	8000f14 <printmsg>
}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000204 	.word	0x20000204
 80013bc:	08006ea0 	.word	0x08006ea0

080013c0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c2:	b08b      	sub	sp, #44	; 0x2c
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	6078      	str	r0, [r7, #4]

	RTC_TimeTypeDef RTC_TimeRead;
	RTC_DateTypeDef RTC_DateRead;

	printmsg("Alarm Triggered\r\n");
 80013c8:	4827      	ldr	r0, [pc, #156]	; (8001468 <HAL_RTC_AlarmAEventCallback+0xa8>)
 80013ca:	f7ff fda3 	bl	8000f14 <printmsg>

	HAL_RTC_GetTime(hrtc, &RTC_TimeRead, RTC_FORMAT_BIN);
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	2200      	movs	r2, #0
 80013d4:	4619      	mov	r1, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f001 fec6 	bl	8003168 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &RTC_DateRead, RTC_FORMAT_BIN);
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f001 ffc4 	bl	8003372 <HAL_RTC_GetDate>
	printmsg("Current Time is: %02d:%02d:%02d%s\r\n", RTC_TimeRead.Hours, RTC_TimeRead.Minutes, RTC_TimeRead.Seconds, getAMPM(RTC_TimeRead.TimeFormat));
 80013ea:	7b3b      	ldrb	r3, [r7, #12]
 80013ec:	461c      	mov	r4, r3
 80013ee:	7b7b      	ldrb	r3, [r7, #13]
 80013f0:	461d      	mov	r5, r3
 80013f2:	7bbb      	ldrb	r3, [r7, #14]
 80013f4:	461e      	mov	r6, r3
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff29 	bl	8001250 <getAMPM>
 80013fe:	4603      	mov	r3, r0
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4633      	mov	r3, r6
 8001404:	462a      	mov	r2, r5
 8001406:	4621      	mov	r1, r4
 8001408:	4818      	ldr	r0, [pc, #96]	; (800146c <HAL_RTC_AlarmAEventCallback+0xac>)
 800140a:	f7ff fd83 	bl	8000f14 <printmsg>
	printmsg("Current Date is: <%s> %02d-%2d-%2d\r\n", getDayOfWeek(RTC_DateRead.WeekDay), RTC_DateRead.Month, RTC_DateRead.Date, RTC_DateRead.Year);
 800140e:	7a3b      	ldrb	r3, [r7, #8]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff3b 	bl	800128c <getDayOfWeek>
 8001416:	4601      	mov	r1, r0
 8001418:	7a7b      	ldrb	r3, [r7, #9]
 800141a:	461a      	mov	r2, r3
 800141c:	7abb      	ldrb	r3, [r7, #10]
 800141e:	4618      	mov	r0, r3
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	4603      	mov	r3, r0
 8001426:	4812      	ldr	r0, [pc, #72]	; (8001470 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8001428:	f7ff fd74 	bl	8000f14 <printmsg>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2120      	movs	r1, #32
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8001432:	f000 fc85 	bl	8001d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <HAL_RTC_AlarmAEventCallback+0xb4>)
 800143e:	f000 fc7f 	bl	8001d40 <HAL_GPIO_WritePin>
	HAL_Delay(2000); //ok to use in this example. delay is derived from systick interrupt which has highest priority, so it will preempt this ISR
 8001442:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001446:	f000 f987 	bl	8001758 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2120      	movs	r1, #32
 800144e:	4809      	ldr	r0, [pc, #36]	; (8001474 <HAL_RTC_AlarmAEventCallback+0xb4>)
 8001450:	f000 fc76 	bl	8001d40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <HAL_RTC_AlarmAEventCallback+0xb4>)
 800145c:	f000 fc70 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8001460:	bf00      	nop
 8001462:	3724      	adds	r7, #36	; 0x24
 8001464:	46bd      	mov	sp, r7
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001468:	08006eb8 	.word	0x08006eb8
 800146c:	08006e54 	.word	0x08006e54
 8001470:	08006e78 	.word	0x08006e78
 8001474:	40020000 	.word	0x40020000

08001478 <Error_handler>:

void Error_handler(void) {
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

	while(1);
 800147c:	e7fe      	b.n	800147c <Error_handler+0x4>
	...

08001480 <HAL_MspInit>:
 *      Author: Oliver
 */

#include "main.h"

void HAL_MspInit(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	/* Low level processor specific inits */

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //not required, as this will set to default setting
 8001484:	2003      	movs	r0, #3
 8001486:	f000 fa5b 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//System Control Block (SCB) -> System Handler Control and State Register (SHCSR)
	SCB->SHCSR |= (0x7 << 16);  //Set bits 16,17,18 (MEMFAULTENA, BUSFAULTENA, USGFAULTENA)
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_MspInit+0x40>)
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <HAL_MspInit+0x40>)
 8001490:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001494:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	f06f 000b 	mvn.w	r0, #11
 800149e:	f000 fa5a 	bl	8001956 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	f06f 000a 	mvn.w	r0, #10
 80014aa:	f000 fa54 	bl	8001956 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	f06f 0009 	mvn.w	r0, #9
 80014b6:	f000 fa4e 	bl	8001956 <HAL_NVIC_SetPriority>
	//HAL_Init() in main.c already takes care of SysTick_IRQn priority setting
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	/* Low level inits of the USART2 peripheral */

	//1. Enable the required peripheral clock for the USART2 and GPIOA peripherals
	__HAL_RCC_USART2_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_UART_MspInit+0x88>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a1d      	ldr	r2, [pc, #116]	; (800154c <HAL_UART_MspInit+0x88>)
 80014d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_UART_MspInit+0x88>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_UART_MspInit+0x88>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4a16      	ldr	r2, [pc, #88]	; (800154c <HAL_UART_MspInit+0x88>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6313      	str	r3, [r2, #48]	; 0x30
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_UART_MspInit+0x88>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]

	//2. Pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //USART2_TX
 8001504:	2304      	movs	r3, #4
 8001506:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 800150c:	2301      	movs	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 8001514:	2307      	movs	r3, #7
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	480c      	ldr	r0, [pc, #48]	; (8001550 <HAL_UART_MspInit+0x8c>)
 8001520:	f000 fa7a 	bl	8001a18 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //USART2_RX
 8001524:	2308      	movs	r3, #8
 8001526:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	4619      	mov	r1, r3
 800152e:	4808      	ldr	r0, [pc, #32]	; (8001550 <HAL_UART_MspInit+0x8c>)
 8001530:	f000 fa72 	bl	8001a18 <HAL_GPIO_Init>

	//3. Enable the peripheral IRQ in the NVIC
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001534:	2026      	movs	r0, #38	; 0x26
 8001536:	f000 fa2a 	bl	800198e <HAL_NVIC_EnableIRQ>

	//4. Set the priorities based on application needs
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2026      	movs	r0, #38	; 0x26
 8001540:	f000 fa09 	bl	8001956 <HAL_NVIC_SetPriority>
}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	40020000 	.word	0x40020000

08001554 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b0a6      	sub	sp, #152	; 0x98
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	//All clocks are off during Stop mode, but RTC still works!
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_PeriphCLKInitTypeDef RCC_RTCPeriClkInit;

	//1. Turn on the LSE
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800155c:	2304      	movs	r3, #4
 800155e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001560:	2301      	movs	r3, #1
 8001562:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001564:	2300      	movs	r3, #0
 8001566:	67fb      	str	r3, [r7, #124]	; 0x7c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001568:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800156c:	4618      	mov	r0, r3
 800156e:	f001 fa0f 	bl	8002990 <HAL_RCC_OscConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_RTC_MspInit+0x28>
		Error_handler();
 8001578:	f7ff ff7e 	bl	8001478 <Error_handler>
	}

	//2. Select LSE as RTCCLK
	RCC_RTCPeriClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800157c:	2320      	movs	r3, #32
 800157e:	60bb      	str	r3, [r7, #8]
	RCC_RTCPeriClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001584:	64bb      	str	r3, [r7, #72]	; 0x48
	if(HAL_RCCEx_PeriphCLKConfig(&RCC_RTCPeriClkInit) != HAL_OK) {
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fd24 	bl	8001fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_RTC_MspInit+0x46>
		Error_handler();
 8001596:	f7ff ff6f 	bl	8001478 <Error_handler>
	}

	//3. Enable the RTCCLK
	__HAL_RCC_RTC_ENABLE(); //Calendar starts ticking
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_RTC_MspInit+0x64>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

	//4. Enable the RTC Alarm IRQ in the NVIC
	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 15, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	210f      	movs	r1, #15
 80015a4:	2029      	movs	r0, #41	; 0x29
 80015a6:	f000 f9d6 	bl	8001956 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80015aa:	2029      	movs	r0, #41	; 0x29
 80015ac:	f000 f9ef 	bl	800198e <HAL_NVIC_EnableIRQ>
}
 80015b0:	bf00      	nop
 80015b2:	3798      	adds	r7, #152	; 0x98
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	42470e3c 	.word	0x42470e3c

080015bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <SystemInit+0x58>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	4a13      	ldr	r2, [pc, #76]	; (8001614 <SystemInit+0x58>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <SystemInit+0x5c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a10      	ldr	r2, [pc, #64]	; (8001618 <SystemInit+0x5c>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <SystemInit+0x5c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <SystemInit+0x5c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <SystemInit+0x5c>)
 80015e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80015ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <SystemInit+0x5c>)
 80015f4:	4a09      	ldr	r2, [pc, #36]	; (800161c <SystemInit+0x60>)
 80015f6:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <SystemInit+0x5c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <SystemInit+0x5c>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SystemInit+0x5c>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000ed00 	.word	0xe000ed00
 8001618:	40023800 	.word	0x40023800
 800161c:	24003010 	.word	0x24003010

08001620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001658 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001624:	480d      	ldr	r0, [pc, #52]	; (800165c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001626:	490e      	ldr	r1, [pc, #56]	; (8001660 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001628:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800162c:	e002      	b.n	8001634 <LoopCopyDataInit>

0800162e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001632:	3304      	adds	r3, #4

08001634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001638:	d3f9      	bcc.n	800162e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800163c:	4c0b      	ldr	r4, [pc, #44]	; (800166c <LoopFillZerobss+0x26>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001640:	e001      	b.n	8001646 <LoopFillZerobss>

08001642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001644:	3204      	adds	r2, #4

08001646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001648:	d3fb      	bcc.n	8001642 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800164a:	f7ff ffb7 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164e:	f002 fc9b 	bl	8003f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001652:	f7ff fc85 	bl	8000f60 <main>
  bx  lr    
 8001656:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001664:	080072d4 	.word	0x080072d4
  ldr r2, =_sbss
 8001668:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800166c:	2000027c 	.word	0x2000027c

08001670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <HAL_Init+0x40>)
 800167e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_Init+0x40>)
 800168a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_Init+0x40>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 f94f 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff feea 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f967 	bl	80019aa <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 f92f 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000000 	.word	0x20000000
 8001710:	20000008 	.word	0x20000008
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008
 800173c:	20000268 	.word	0x20000268

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000268 	.word	0x20000268

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_Delay+0x44>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d8f7      	bhi.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000008 	.word	0x20000008

080017a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4907      	ldr	r1, [pc, #28]	; (800183c <__NVIC_EnableIRQ+0x38>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff29 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff3e 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff8e 	bl	8001894 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5d 	bl	8001840 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff31 	bl	8001804 <__NVIC_EnableIRQ>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffa2 	bl	80018fc <SysTick_Config>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d106      	bne.n	80019e0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80019de:	e005      	b.n	80019ec <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019e6:	f023 0304 	bic.w	r3, r3, #4
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001a00:	f000 f802 	bl	8001a08 <HAL_SYSTICK_Callback>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e165      	b.n	8001d00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	f040 8154 	bne.w	8001cfa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d005      	beq.n	8001a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d130      	bne.n	8001acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	2203      	movs	r2, #3
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 0201 	and.w	r2, r3, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d017      	beq.n	8001b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d123      	bne.n	8001b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	08da      	lsrs	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3208      	adds	r2, #8
 8001b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	08da      	lsrs	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3208      	adds	r2, #8
 8001b56:	69b9      	ldr	r1, [r7, #24]
 8001b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0203 	and.w	r2, r3, #3
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80ae 	beq.w	8001cfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b5d      	ldr	r3, [pc, #372]	; (8001d18 <HAL_GPIO_Init+0x300>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a5c      	ldr	r2, [pc, #368]	; (8001d18 <HAL_GPIO_Init+0x300>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b5a      	ldr	r3, [pc, #360]	; (8001d18 <HAL_GPIO_Init+0x300>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bba:	4a58      	ldr	r2, [pc, #352]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_GPIO_Init+0x308>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d025      	beq.n	8001c32 <HAL_GPIO_Init+0x21a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4e      	ldr	r2, [pc, #312]	; (8001d24 <HAL_GPIO_Init+0x30c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d01f      	beq.n	8001c2e <HAL_GPIO_Init+0x216>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4d      	ldr	r2, [pc, #308]	; (8001d28 <HAL_GPIO_Init+0x310>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d019      	beq.n	8001c2a <HAL_GPIO_Init+0x212>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4c      	ldr	r2, [pc, #304]	; (8001d2c <HAL_GPIO_Init+0x314>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_Init+0x20e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4b      	ldr	r2, [pc, #300]	; (8001d30 <HAL_GPIO_Init+0x318>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_Init+0x20a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4a      	ldr	r2, [pc, #296]	; (8001d34 <HAL_GPIO_Init+0x31c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_Init+0x206>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a49      	ldr	r2, [pc, #292]	; (8001d38 <HAL_GPIO_Init+0x320>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_Init+0x202>
 8001c16:	2306      	movs	r3, #6
 8001c18:	e00c      	b.n	8001c34 <HAL_GPIO_Init+0x21c>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	e00a      	b.n	8001c34 <HAL_GPIO_Init+0x21c>
 8001c1e:	2305      	movs	r3, #5
 8001c20:	e008      	b.n	8001c34 <HAL_GPIO_Init+0x21c>
 8001c22:	2304      	movs	r3, #4
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x21c>
 8001c26:	2303      	movs	r3, #3
 8001c28:	e004      	b.n	8001c34 <HAL_GPIO_Init+0x21c>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_Init+0x21c>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_GPIO_Init+0x21c>
 8001c32:	2300      	movs	r3, #0
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f002 0203 	and.w	r2, r2, #3
 8001c3a:	0092      	lsls	r2, r2, #2
 8001c3c:	4093      	lsls	r3, r2
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c44:	4935      	ldr	r1, [pc, #212]	; (8001d1c <HAL_GPIO_Init+0x304>)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c76:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca0:	4a26      	ldr	r2, [pc, #152]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cca:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf4:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <HAL_GPIO_Init+0x324>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b0f      	cmp	r3, #15
 8001d04:	f67f ae96 	bls.w	8001a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40013800 	.word	0x40013800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020400 	.word	0x40020400
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40021400 	.word	0x40021400
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	40013c00 	.word	0x40013c00

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d5c:	e003      	b.n	8001d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fa98 	bl	80012c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40013c00 	.word	0x40013c00

08001da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0cc      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db8:	4b68      	ldr	r3, [pc, #416]	; (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d90c      	bls.n	8001de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b65      	ldr	r3, [pc, #404]	; (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0b8      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d020      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df8:	4b59      	ldr	r3, [pc, #356]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4a58      	ldr	r2, [pc, #352]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e10:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4a52      	ldr	r2, [pc, #328]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e1c:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	494d      	ldr	r1, [pc, #308]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d044      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d119      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e07f      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d107      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e62:	4b3f      	ldr	r3, [pc, #252]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e06f      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e067      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e82:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 0203 	bic.w	r2, r3, #3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	4934      	ldr	r1, [pc, #208]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e94:	f7ff fc54 	bl	8001740 <HAL_GetTick>
 8001e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9c:	f7ff fc50 	bl	8001740 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e04f      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb2:	4b2b      	ldr	r3, [pc, #172]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 020c 	and.w	r2, r3, #12
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d1eb      	bne.n	8001e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d20c      	bcs.n	8001eec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e032      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4916      	ldr	r1, [pc, #88]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	490e      	ldr	r1, [pc, #56]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f2a:	f000 fb7f 	bl	800262c <HAL_RCC_GetSysClockFreq>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	490a      	ldr	r1, [pc, #40]	; (8001f64 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	5ccb      	ldrb	r3, [r1, r3]
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1c8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fbb4 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00
 8001f60:	40023800 	.word	0x40023800
 8001f64:	08006ecc 	.word	0x08006ecc
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000000 	.word	0x20000000

08001f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f8c:	f7ff fff0 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	0a9b      	lsrs	r3, r3, #10
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4903      	ldr	r1, [pc, #12]	; (8001fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	08006edc 	.word	0x08006edc

08001fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fb4:	f7ff ffdc 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	0b5b      	lsrs	r3, r3, #13
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4903      	ldr	r1, [pc, #12]	; (8001fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	08006edc 	.word	0x08006edc

08001fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	; 0x30
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d010      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002010:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002016:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	496c      	ldr	r1, [pc, #432]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800202e:	2301      	movs	r3, #1
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800203e:	4b64      	ldr	r3, [pc, #400]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002044:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	4960      	ldr	r1, [pc, #384]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800205c:	2301      	movs	r3, #1
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d017      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800206c:	4b58      	ldr	r3, [pc, #352]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800206e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4955      	ldr	r1, [pc, #340]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800208a:	d101      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800208c:	2301      	movs	r3, #1
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002098:	2301      	movs	r3, #1
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d017      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020a8:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b6:	4946      	ldr	r1, [pc, #280]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c6:	d101      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80020c8:	2301      	movs	r3, #1
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80020d4:	2301      	movs	r3, #1
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 808a 	beq.w	80021fa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b39      	ldr	r3, [pc, #228]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a38      	ldr	r2, [pc, #224]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002102:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a33      	ldr	r2, [pc, #204]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800210e:	f7ff fb17 	bl	8001740 <HAL_GetTick>
 8002112:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7ff fb13 	bl	8001740 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e278      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002128:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d02f      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214c:	6a3a      	ldr	r2, [r7, #32]
 800214e:	429a      	cmp	r2, r3
 8002150:	d028      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002152:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800215a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800215c:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d114      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff fae1 	bl	8001740 <HAL_GetTick>
 800217e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002180:	e00a      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7ff fadd 	bl	8001740 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e240      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ee      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021b0:	d114      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x204>
 80021b2:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80021c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c6:	4902      	ldr	r1, [pc, #8]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	608b      	str	r3, [r1, #8]
 80021cc:	e00c      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40007000 	.word	0x40007000
 80021d8:	42470e40 	.word	0x42470e40
 80021dc:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4a49      	ldr	r2, [pc, #292]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80021e6:	6093      	str	r3, [r2, #8]
 80021e8:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f4:	4944      	ldr	r1, [pc, #272]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d004      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800220c:	4b3f      	ldr	r3, [pc, #252]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800220e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800221e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002222:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	4937      	ldr	r1, [pc, #220]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800223e:	4b32      	ldr	r3, [pc, #200]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002244:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224c:	492e      	ldr	r1, [pc, #184]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d011      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002266:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	4926      	ldr	r1, [pc, #152]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800227e:	d101      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002280:	2301      	movs	r3, #1
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00a      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002296:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	491a      	ldr	r1, [pc, #104]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d011      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c0:	4911      	ldr	r1, [pc, #68]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022d0:	d101      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80022d2:	2301      	movs	r3, #1
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d005      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022e4:	f040 80ff 	bne.w	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80022ee:	f7ff fa27 	bl	8001740 <HAL_GetTick>
 80022f2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022f4:	e00e      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80022f6:	f7ff fa23 	bl	8001740 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d907      	bls.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e188      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002308:	40023800 	.word	0x40023800
 800230c:	424711e0 	.word	0x424711e0
 8002310:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002314:	4b7e      	ldr	r3, [pc, #504]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1ea      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800233c:	2b00      	cmp	r3, #0
 800233e:	d028      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002344:	2b00      	cmp	r3, #0
 8002346:	d124      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002348:	4b71      	ldr	r3, [pc, #452]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800234a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800234e:	0c1b      	lsrs	r3, r3, #16
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	3301      	adds	r3, #1
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800235a:	4b6d      	ldr	r3, [pc, #436]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800235c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002360:	0e1b      	lsrs	r3, r3, #24
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	019b      	lsls	r3, r3, #6
 8002372:	431a      	orrs	r2, r3
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	085b      	lsrs	r3, r3, #1
 8002378:	3b01      	subs	r3, #1
 800237a:	041b      	lsls	r3, r3, #16
 800237c:	431a      	orrs	r2, r3
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	071b      	lsls	r3, r3, #28
 800238a:	4961      	ldr	r1, [pc, #388]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d035      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023bc:	d130      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80023be:	4b54      	ldr	r3, [pc, #336]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	3301      	adds	r3, #1
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023d0:	4b4f      	ldr	r3, [pc, #316]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d6:	0f1b      	lsrs	r3, r3, #28
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	019b      	lsls	r3, r3, #6
 80023e8:	431a      	orrs	r2, r3
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	085b      	lsrs	r3, r3, #1
 80023ee:	3b01      	subs	r3, #1
 80023f0:	041b      	lsls	r3, r3, #16
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	061b      	lsls	r3, r3, #24
 80023fa:	431a      	orrs	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	071b      	lsls	r3, r3, #28
 8002400:	4943      	ldr	r1, [pc, #268]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002408:	4b41      	ldr	r3, [pc, #260]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800240a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800240e:	f023 021f 	bic.w	r2, r3, #31
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	3b01      	subs	r3, #1
 8002418:	493d      	ldr	r1, [pc, #244]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d029      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002434:	d124      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	3301      	adds	r3, #1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002448:	4b31      	ldr	r3, [pc, #196]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800244a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800244e:	0f1b      	lsrs	r3, r3, #28
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	019b      	lsls	r3, r3, #6
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	3b01      	subs	r3, #1
 800246a:	041b      	lsls	r3, r3, #16
 800246c:	431a      	orrs	r2, r3
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	061b      	lsls	r3, r3, #24
 8002472:	431a      	orrs	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	071b      	lsls	r3, r3, #28
 8002478:	4925      	ldr	r1, [pc, #148]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002488:	2b00      	cmp	r3, #0
 800248a:	d016      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	019b      	lsls	r3, r3, #6
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	085b      	lsrs	r3, r3, #1
 800249e:	3b01      	subs	r3, #1
 80024a0:	041b      	lsls	r3, r3, #16
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	061b      	lsls	r3, r3, #24
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	071b      	lsls	r3, r3, #28
 80024b2:	4917      	ldr	r1, [pc, #92]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80024bc:	2201      	movs	r2, #1
 80024be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024c0:	f7ff f93e 	bl	8001740 <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024c8:	f7ff f93a 	bl	8001740 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e09f      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	f040 8095 	bne.w	8002618 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024ee:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024f4:	f7ff f924 	bl	8001740 <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024fa:	e00f      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80024fc:	f7ff f920 	bl	8001740 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d908      	bls.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e085      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	42470068 	.word	0x42470068
 8002518:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800251c:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002528:	d0e8      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002546:	2b00      	cmp	r3, #0
 8002548:	d02b      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254e:	2b00      	cmp	r3, #0
 8002550:	d127      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002552:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	3301      	adds	r3, #1
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	019b      	lsls	r3, r3, #6
 800256e:	431a      	orrs	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	085b      	lsrs	r3, r3, #1
 8002574:	3b01      	subs	r3, #1
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	431a      	orrs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	061b      	lsls	r3, r3, #24
 8002580:	4928      	ldr	r1, [pc, #160]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002588:	4b26      	ldr	r3, [pc, #152]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800258a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800258e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	3b01      	subs	r3, #1
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	4922      	ldr	r1, [pc, #136]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01d      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x612>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b6:	d118      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	0e1b      	lsrs	r3, r3, #24
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699a      	ldr	r2, [r3, #24]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	019b      	lsls	r3, r3, #6
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	085b      	lsrs	r3, r3, #1
 80025d8:	3b01      	subs	r3, #1
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	431a      	orrs	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	4910      	ldr	r1, [pc, #64]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025f0:	f7ff f8a6 	bl	8001740 <HAL_GetTick>
 80025f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80025f8:	f7ff f8a2 	bl	8001740 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e007      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002616:	d1ef      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3730      	adds	r7, #48	; 0x30
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	42470070 	.word	0x42470070

0800262c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800262c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002630:	b088      	sub	sp, #32
 8002632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002648:	4bce      	ldr	r3, [pc, #824]	; (8002984 <HAL_RCC_GetSysClockFreq+0x358>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b0c      	cmp	r3, #12
 8002652:	f200 818d 	bhi.w	8002970 <HAL_RCC_GetSysClockFreq+0x344>
 8002656:	a201      	add	r2, pc, #4	; (adr r2, 800265c <HAL_RCC_GetSysClockFreq+0x30>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	08002691 	.word	0x08002691
 8002660:	08002971 	.word	0x08002971
 8002664:	08002971 	.word	0x08002971
 8002668:	08002971 	.word	0x08002971
 800266c:	08002697 	.word	0x08002697
 8002670:	08002971 	.word	0x08002971
 8002674:	08002971 	.word	0x08002971
 8002678:	08002971 	.word	0x08002971
 800267c:	0800269d 	.word	0x0800269d
 8002680:	08002971 	.word	0x08002971
 8002684:	08002971 	.word	0x08002971
 8002688:	08002971 	.word	0x08002971
 800268c:	08002811 	.word	0x08002811
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002690:	4bbd      	ldr	r3, [pc, #756]	; (8002988 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002692:	61bb      	str	r3, [r7, #24]
       break;
 8002694:	e16f      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002696:	4bbd      	ldr	r3, [pc, #756]	; (800298c <HAL_RCC_GetSysClockFreq+0x360>)
 8002698:	61bb      	str	r3, [r7, #24]
      break;
 800269a:	e16c      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800269c:	4bb9      	ldr	r3, [pc, #740]	; (8002984 <HAL_RCC_GetSysClockFreq+0x358>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a6:	4bb7      	ldr	r3, [pc, #732]	; (8002984 <HAL_RCC_GetSysClockFreq+0x358>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d053      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b2:	4bb4      	ldr	r3, [pc, #720]	; (8002984 <HAL_RCC_GetSysClockFreq+0x358>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	099b      	lsrs	r3, r3, #6
 80026b8:	461a      	mov	r2, r3
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026c2:	f04f 0100 	mov.w	r1, #0
 80026c6:	ea02 0400 	and.w	r4, r2, r0
 80026ca:	603c      	str	r4, [r7, #0]
 80026cc:	400b      	ands	r3, r1
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	014b      	lsls	r3, r1, #5
 80026e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026e6:	0142      	lsls	r2, r0, #5
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	4623      	mov	r3, r4
 80026ee:	1ac0      	subs	r0, r0, r3
 80026f0:	462b      	mov	r3, r5
 80026f2:	eb61 0103 	sbc.w	r1, r1, r3
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	018b      	lsls	r3, r1, #6
 8002700:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002704:	0182      	lsls	r2, r0, #6
 8002706:	1a12      	subs	r2, r2, r0
 8002708:	eb63 0301 	sbc.w	r3, r3, r1
 800270c:	f04f 0000 	mov.w	r0, #0
 8002710:	f04f 0100 	mov.w	r1, #0
 8002714:	00d9      	lsls	r1, r3, #3
 8002716:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800271a:	00d0      	lsls	r0, r2, #3
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4621      	mov	r1, r4
 8002722:	1852      	adds	r2, r2, r1
 8002724:	4629      	mov	r1, r5
 8002726:	eb43 0101 	adc.w	r1, r3, r1
 800272a:	460b      	mov	r3, r1
 800272c:	f04f 0000 	mov.w	r0, #0
 8002730:	f04f 0100 	mov.w	r1, #0
 8002734:	0259      	lsls	r1, r3, #9
 8002736:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800273a:	0250      	lsls	r0, r2, #9
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	461a      	mov	r2, r3
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	f7fe fa4c 	bl	8000be8 <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4613      	mov	r3, r2
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	e04c      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800275a:	4b8a      	ldr	r3, [pc, #552]	; (8002984 <HAL_RCC_GetSysClockFreq+0x358>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	099b      	lsrs	r3, r3, #6
 8002760:	461a      	mov	r2, r3
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	ea02 0a00 	and.w	sl, r2, r0
 8002772:	ea03 0b01 	and.w	fp, r3, r1
 8002776:	4650      	mov	r0, sl
 8002778:	4659      	mov	r1, fp
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	014b      	lsls	r3, r1, #5
 8002784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002788:	0142      	lsls	r2, r0, #5
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	ebb0 000a 	subs.w	r0, r0, sl
 8002792:	eb61 010b 	sbc.w	r1, r1, fp
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	018b      	lsls	r3, r1, #6
 80027a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027a4:	0182      	lsls	r2, r0, #6
 80027a6:	1a12      	subs	r2, r2, r0
 80027a8:	eb63 0301 	sbc.w	r3, r3, r1
 80027ac:	f04f 0000 	mov.w	r0, #0
 80027b0:	f04f 0100 	mov.w	r1, #0
 80027b4:	00d9      	lsls	r1, r3, #3
 80027b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027ba:	00d0      	lsls	r0, r2, #3
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	eb12 020a 	adds.w	r2, r2, sl
 80027c4:	eb43 030b 	adc.w	r3, r3, fp
 80027c8:	f04f 0000 	mov.w	r0, #0
 80027cc:	f04f 0100 	mov.w	r1, #0
 80027d0:	0299      	lsls	r1, r3, #10
 80027d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027d6:	0290      	lsls	r0, r2, #10
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	f7fe f9fe 	bl	8000be8 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4613      	mov	r3, r2
 80027f2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f4:	4b63      	ldr	r3, [pc, #396]	; (8002984 <HAL_RCC_GetSysClockFreq+0x358>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	61bb      	str	r3, [r7, #24]
      break;
 800280e:	e0b2      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002810:	4b5c      	ldr	r3, [pc, #368]	; (8002984 <HAL_RCC_GetSysClockFreq+0x358>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002818:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800281a:	4b5a      	ldr	r3, [pc, #360]	; (8002984 <HAL_RCC_GetSysClockFreq+0x358>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d04d      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002826:	4b57      	ldr	r3, [pc, #348]	; (8002984 <HAL_RCC_GetSysClockFreq+0x358>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	099b      	lsrs	r3, r3, #6
 800282c:	461a      	mov	r2, r3
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	ea02 0800 	and.w	r8, r2, r0
 800283e:	ea03 0901 	and.w	r9, r3, r1
 8002842:	4640      	mov	r0, r8
 8002844:	4649      	mov	r1, r9
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	014b      	lsls	r3, r1, #5
 8002850:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002854:	0142      	lsls	r2, r0, #5
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	ebb0 0008 	subs.w	r0, r0, r8
 800285e:	eb61 0109 	sbc.w	r1, r1, r9
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	018b      	lsls	r3, r1, #6
 800286c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002870:	0182      	lsls	r2, r0, #6
 8002872:	1a12      	subs	r2, r2, r0
 8002874:	eb63 0301 	sbc.w	r3, r3, r1
 8002878:	f04f 0000 	mov.w	r0, #0
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	00d9      	lsls	r1, r3, #3
 8002882:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002886:	00d0      	lsls	r0, r2, #3
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	eb12 0208 	adds.w	r2, r2, r8
 8002890:	eb43 0309 	adc.w	r3, r3, r9
 8002894:	f04f 0000 	mov.w	r0, #0
 8002898:	f04f 0100 	mov.w	r1, #0
 800289c:	0259      	lsls	r1, r3, #9
 800289e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028a2:	0250      	lsls	r0, r2, #9
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	461a      	mov	r2, r3
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	f7fe f998 	bl	8000be8 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4613      	mov	r3, r2
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	e04a      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c2:	4b30      	ldr	r3, [pc, #192]	; (8002984 <HAL_RCC_GetSysClockFreq+0x358>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	461a      	mov	r2, r3
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	ea02 0400 	and.w	r4, r2, r0
 80028da:	ea03 0501 	and.w	r5, r3, r1
 80028de:	4620      	mov	r0, r4
 80028e0:	4629      	mov	r1, r5
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	014b      	lsls	r3, r1, #5
 80028ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028f0:	0142      	lsls	r2, r0, #5
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	1b00      	subs	r0, r0, r4
 80028f8:	eb61 0105 	sbc.w	r1, r1, r5
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	018b      	lsls	r3, r1, #6
 8002906:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800290a:	0182      	lsls	r2, r0, #6
 800290c:	1a12      	subs	r2, r2, r0
 800290e:	eb63 0301 	sbc.w	r3, r3, r1
 8002912:	f04f 0000 	mov.w	r0, #0
 8002916:	f04f 0100 	mov.w	r1, #0
 800291a:	00d9      	lsls	r1, r3, #3
 800291c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002920:	00d0      	lsls	r0, r2, #3
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	1912      	adds	r2, r2, r4
 8002928:	eb45 0303 	adc.w	r3, r5, r3
 800292c:	f04f 0000 	mov.w	r0, #0
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	0299      	lsls	r1, r3, #10
 8002936:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800293a:	0290      	lsls	r0, r2, #10
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	461a      	mov	r2, r3
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	f7fe f94c 	bl	8000be8 <__aeabi_uldivmod>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4613      	mov	r3, r2
 8002956:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_RCC_GetSysClockFreq+0x358>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	0f1b      	lsrs	r3, r3, #28
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	61bb      	str	r3, [r7, #24]
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002972:	61bb      	str	r3, [r7, #24]
      break;
 8002974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002976:	69bb      	ldr	r3, [r7, #24]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3720      	adds	r7, #32
 800297c:	46bd      	mov	sp, r7
 800297e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	00f42400 	.word	0x00f42400
 800298c:	007a1200 	.word	0x007a1200

08002990 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e28d      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8083 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029b0:	4b94      	ldr	r3, [pc, #592]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d019      	beq.n	80029f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029bc:	4b91      	ldr	r3, [pc, #580]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029c8:	4b8e      	ldr	r3, [pc, #568]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d4:	d00c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d6:	4b8b      	ldr	r3, [pc, #556]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d112      	bne.n	8002a08 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e2:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ee:	d10b      	bne.n	8002a08 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	4b84      	ldr	r3, [pc, #528]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d05b      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x124>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d157      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e25a      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a10:	d106      	bne.n	8002a20 <HAL_RCC_OscConfig+0x90>
 8002a12:	4b7c      	ldr	r3, [pc, #496]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a7b      	ldr	r2, [pc, #492]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e01d      	b.n	8002a5c <HAL_RCC_OscConfig+0xcc>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0xb4>
 8002a2a:	4b76      	ldr	r3, [pc, #472]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a75      	ldr	r2, [pc, #468]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b73      	ldr	r3, [pc, #460]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a72      	ldr	r2, [pc, #456]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e00b      	b.n	8002a5c <HAL_RCC_OscConfig+0xcc>
 8002a44:	4b6f      	ldr	r3, [pc, #444]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a6e      	ldr	r2, [pc, #440]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b6c      	ldr	r3, [pc, #432]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6b      	ldr	r2, [pc, #428]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fe6c 	bl	8001740 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fe68 	bl	8001740 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e21f      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b61      	ldr	r3, [pc, #388]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0xdc>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fe58 	bl	8001740 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe fe54 	bl	8001740 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e20b      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	4b57      	ldr	r3, [pc, #348]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x104>
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d06f      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ac2:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d017      	beq.n	8002afe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ace:	4b4d      	ldr	r3, [pc, #308]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d105      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ada:	4b4a      	ldr	r3, [pc, #296]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae6:	4b47      	ldr	r3, [pc, #284]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aee:	2b0c      	cmp	r3, #12
 8002af0:	d11c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af2:	4b44      	ldr	r3, [pc, #272]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d116      	bne.n	8002b2c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afe:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_RCC_OscConfig+0x186>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d001      	beq.n	8002b16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e1d3      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b16:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4937      	ldr	r1, [pc, #220]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	e03a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b34:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <HAL_RCC_OscConfig+0x278>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3a:	f7fe fe01 	bl	8001740 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b42:	f7fe fdfd 	bl	8001740 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e1b4      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b54:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4925      	ldr	r1, [pc, #148]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]
 8002b74:	e015      	b.n	8002ba2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCC_OscConfig+0x278>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fde0 	bl	8001740 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b84:	f7fe fddc 	bl	8001740 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e193      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d036      	beq.n	8002c1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d016      	beq.n	8002be4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_RCC_OscConfig+0x27c>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fdc0 	bl	8001740 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7fe fdbc 	bl	8001740 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e173      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x234>
 8002be2:	e01b      	b.n	8002c1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_OscConfig+0x27c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bea:	f7fe fda9 	bl	8001740 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf0:	e00e      	b.n	8002c10 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf2:	f7fe fda5 	bl	8001740 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d907      	bls.n	8002c10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e15c      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
 8002c04:	40023800 	.word	0x40023800
 8002c08:	42470000 	.word	0x42470000
 8002c0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	4b8a      	ldr	r3, [pc, #552]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1ea      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8097 	beq.w	8002d58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2e:	4b83      	ldr	r3, [pc, #524]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10f      	bne.n	8002c5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	4b7f      	ldr	r3, [pc, #508]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	4a7e      	ldr	r2, [pc, #504]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4a:	4b7c      	ldr	r3, [pc, #496]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b79      	ldr	r3, [pc, #484]	; (8002e40 <HAL_RCC_OscConfig+0x4b0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d118      	bne.n	8002c98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c66:	4b76      	ldr	r3, [pc, #472]	; (8002e40 <HAL_RCC_OscConfig+0x4b0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a75      	ldr	r2, [pc, #468]	; (8002e40 <HAL_RCC_OscConfig+0x4b0>)
 8002c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c72:	f7fe fd65 	bl	8001740 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7a:	f7fe fd61 	bl	8001740 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e118      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	4b6c      	ldr	r3, [pc, #432]	; (8002e40 <HAL_RCC_OscConfig+0x4b0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x31e>
 8002ca0:	4b66      	ldr	r3, [pc, #408]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a65      	ldr	r2, [pc, #404]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	e01c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x358>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x340>
 8002cb6:	4b61      	ldr	r3, [pc, #388]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	4a60      	ldr	r2, [pc, #384]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc2:	4b5e      	ldr	r3, [pc, #376]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a5d      	ldr	r2, [pc, #372]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x358>
 8002cd0:	4b5a      	ldr	r3, [pc, #360]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a59      	ldr	r2, [pc, #356]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	4b57      	ldr	r3, [pc, #348]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	4a56      	ldr	r2, [pc, #344]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002ce2:	f023 0304 	bic.w	r3, r3, #4
 8002ce6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d015      	beq.n	8002d1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fd26 	bl	8001740 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fd22 	bl	8001740 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0d7      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	4b4b      	ldr	r3, [pc, #300]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0ee      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x368>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fd10 	bl	8001740 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7fe fd0c 	bl	8001740 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e0c1      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3a:	4b40      	ldr	r3, [pc, #256]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ee      	bne.n	8002d24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d105      	bne.n	8002d58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4c:	4b3b      	ldr	r3, [pc, #236]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	4a3a      	ldr	r2, [pc, #232]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80ad 	beq.w	8002ebc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d62:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d060      	beq.n	8002e30 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d145      	bne.n	8002e02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d76:	4b33      	ldr	r3, [pc, #204]	; (8002e44 <HAL_RCC_OscConfig+0x4b4>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fce0 	bl	8001740 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fcdc 	bl	8001740 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e093      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	019b      	lsls	r3, r3, #6
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	041b      	lsls	r3, r3, #16
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	071b      	lsls	r3, r3, #28
 8002dce:	491b      	ldr	r1, [pc, #108]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_RCC_OscConfig+0x4b4>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe fcb1 	bl	8001740 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de2:	f7fe fcad 	bl	8001740 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e064      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x452>
 8002e00:	e05c      	b.n	8002ebc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <HAL_RCC_OscConfig+0x4b4>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fc9a 	bl	8001740 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fc96 	bl	8001740 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e04d      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_RCC_OscConfig+0x4ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x480>
 8002e2e:	e045      	b.n	8002ebc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e040      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40007000 	.word	0x40007000
 8002e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e48:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <HAL_RCC_OscConfig+0x538>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d030      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d129      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d122      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d119      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	3b01      	subs	r3, #1
 8002e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d10f      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d107      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800

08002ecc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e083      	b.n	8002fe6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7f5b      	ldrb	r3, [r3, #29]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe fb30 	bl	8001554 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	22ca      	movs	r2, #202	; 0xca
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2253      	movs	r2, #83	; 0x53
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fcb4 	bl	8003878 <RTC_EnterInitMode>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	22ff      	movs	r2, #255	; 0xff
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2204      	movs	r2, #4
 8002f22:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e05e      	b.n	8002fe6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6899      	ldr	r1, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68d2      	ldr	r2, [r2, #12]
 8002f62:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6919      	ldr	r1, [r3, #16]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	041a      	lsls	r2, r3, #16
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f86:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10e      	bne.n	8002fb4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fc46 	bl	8003828 <HAL_RTC_WaitForSynchro>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	22ff      	movs	r2, #255	; 0xff
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2204      	movs	r2, #4
 8002fae:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e018      	b.n	8002fe6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	22ff      	movs	r2, #255	; 0xff
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fee:	b590      	push	{r4, r7, lr}
 8002ff0:	b087      	sub	sp, #28
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	7f1b      	ldrb	r3, [r3, #28]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_RTC_SetTime+0x1c>
 8003006:	2302      	movs	r3, #2
 8003008:	e0aa      	b.n	8003160 <HAL_RTC_SetTime+0x172>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2202      	movs	r2, #2
 8003014:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d126      	bne.n	800306a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2200      	movs	r2, #0
 800302e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fc4b 	bl	80038d0 <RTC_ByteToBcd2>
 800303a:	4603      	mov	r3, r0
 800303c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	785b      	ldrb	r3, [r3, #1]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fc44 	bl	80038d0 <RTC_ByteToBcd2>
 8003048:	4603      	mov	r3, r0
 800304a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800304c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	789b      	ldrb	r3, [r3, #2]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fc3c 	bl	80038d0 <RTC_ByteToBcd2>
 8003058:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800305a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	78db      	ldrb	r3, [r3, #3]
 8003062:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	e018      	b.n	800309c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2200      	movs	r2, #0
 800307c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	785b      	ldrb	r3, [r3, #1]
 8003088:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800308a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003090:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	78db      	ldrb	r3, [r3, #3]
 8003096:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	22ca      	movs	r2, #202	; 0xca
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2253      	movs	r2, #83	; 0x53
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 fbe3 	bl	8003878 <RTC_EnterInitMode>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2204      	movs	r2, #4
 80030c4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e047      	b.n	8003160 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80030da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80030de:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ee:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6899      	ldr	r1, [r3, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	431a      	orrs	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003116:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d111      	bne.n	800314a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fb7e 	bl	8003828 <HAL_RTC_WaitForSynchro>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	22ff      	movs	r2, #255	; 0xff
 8003138:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2204      	movs	r2, #4
 800313e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e00a      	b.n	8003160 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800315e:	2300      	movs	r3, #0
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd90      	pop	{r4, r7, pc}

08003168 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800319a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800319e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	0c1b      	lsrs	r3, r3, #16
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d11a      	bne.n	800321a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fb8f 	bl	800390c <RTC_Bcd2ToByte>
 80031ee:	4603      	mov	r3, r0
 80031f0:	461a      	mov	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fb86 	bl	800390c <RTC_Bcd2ToByte>
 8003200:	4603      	mov	r3, r0
 8003202:	461a      	mov	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	789b      	ldrb	r3, [r3, #2]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fb7d 	bl	800390c <RTC_Bcd2ToByte>
 8003212:	4603      	mov	r3, r0
 8003214:	461a      	mov	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	7f1b      	ldrb	r3, [r3, #28]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_RTC_SetDate+0x1c>
 800323c:	2302      	movs	r3, #2
 800323e:	e094      	b.n	800336a <HAL_RTC_SetDate+0x146>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2202      	movs	r2, #2
 800324a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10e      	bne.n	8003270 <HAL_RTC_SetDate+0x4c>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	785b      	ldrb	r3, [r3, #1]
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	785b      	ldrb	r3, [r3, #1]
 8003262:	f023 0310 	bic.w	r3, r3, #16
 8003266:	b2db      	uxtb	r3, r3
 8003268:	330a      	adds	r3, #10
 800326a:	b2da      	uxtb	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d11c      	bne.n	80032b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	78db      	ldrb	r3, [r3, #3]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fb28 	bl	80038d0 <RTC_ByteToBcd2>
 8003280:	4603      	mov	r3, r0
 8003282:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fb21 	bl	80038d0 <RTC_ByteToBcd2>
 800328e:	4603      	mov	r3, r0
 8003290:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003292:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	789b      	ldrb	r3, [r3, #2]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fb19 	bl	80038d0 <RTC_ByteToBcd2>
 800329e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80032a0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	e00e      	b.n	80032ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	78db      	ldrb	r3, [r3, #3]
 80032b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80032bc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80032c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	22ca      	movs	r2, #202	; 0xca
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2253      	movs	r2, #83	; 0x53
 80032dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 faca 	bl	8003878 <RTC_EnterInitMode>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	22ff      	movs	r2, #255	; 0xff
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2204      	movs	r2, #4
 80032f6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e033      	b.n	800336a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800330c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003310:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003320:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d111      	bne.n	8003354 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fa79 	bl	8003828 <HAL_RTC_WaitForSynchro>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00b      	beq.n	8003354 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	22ff      	movs	r2, #255	; 0xff
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2204      	movs	r2, #4
 8003348:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e00a      	b.n	800336a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	22ff      	movs	r2, #255	; 0xff
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003368:	2300      	movs	r3, #0
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bd90      	pop	{r4, r7, pc}

08003372 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800338c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003390:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	b2da      	uxtb	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	0b5b      	lsrs	r3, r3, #13
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d11a      	bne.n	8003406 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	78db      	ldrb	r3, [r3, #3]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fa99 	bl	800390c <RTC_Bcd2ToByte>
 80033da:	4603      	mov	r3, r0
 80033dc:	461a      	mov	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fa90 	bl	800390c <RTC_Bcd2ToByte>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	789b      	ldrb	r3, [r3, #2]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fa87 	bl	800390c <RTC_Bcd2ToByte>
 80033fe:	4603      	mov	r3, r0
 8003400:	461a      	mov	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8003424:	4b93      	ldr	r3, [pc, #588]	; (8003674 <HAL_RTC_SetAlarm_IT+0x264>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a93      	ldr	r2, [pc, #588]	; (8003678 <HAL_RTC_SetAlarm_IT+0x268>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	0adb      	lsrs	r3, r3, #11
 8003430:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	7f1b      	ldrb	r3, [r3, #28]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_RTC_SetAlarm_IT+0x36>
 8003442:	2302      	movs	r3, #2
 8003444:	e111      	b.n	800366a <HAL_RTC_SetAlarm_IT+0x25a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2202      	movs	r2, #2
 8003450:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d137      	bne.n	80034c8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2200      	movs	r2, #0
 800346a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fa2d 	bl	80038d0 <RTC_ByteToBcd2>
 8003476:	4603      	mov	r3, r0
 8003478:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	785b      	ldrb	r3, [r3, #1]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fa26 	bl	80038d0 <RTC_ByteToBcd2>
 8003484:	4603      	mov	r3, r0
 8003486:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003488:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	789b      	ldrb	r3, [r3, #2]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fa1e 	bl	80038d0 <RTC_ByteToBcd2>
 8003494:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003496:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	78db      	ldrb	r3, [r3, #3]
 800349e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80034a0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fa10 	bl	80038d0 <RTC_ByteToBcd2>
 80034b0:	4603      	mov	r3, r0
 80034b2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80034b4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80034bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	e023      	b.n	8003510 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2200      	movs	r2, #0
 80034da:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80034e8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80034ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	78db      	ldrb	r3, [r3, #3]
 80034f4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80034f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034fe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003500:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003506:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800350c:	4313      	orrs	r3, r2
 800350e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	22ca      	movs	r2, #202	; 0xca
 8003522:	625a      	str	r2, [r3, #36]	; 0x24
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2253      	movs	r2, #83	; 0x53
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003534:	d141      	bne.n	80035ba <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003544:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003556:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	1e5a      	subs	r2, r3, #1
 800355c:	617a      	str	r2, [r7, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	22ff      	movs	r2, #255	; 0xff
 8003568:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2203      	movs	r2, #3
 800356e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e077      	b.n	800366a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0e7      	beq.n	8003558 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	e040      	b.n	800363c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035c8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80035da:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	1e5a      	subs	r2, r3, #1
 80035e0:	617a      	str	r2, [r7, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	22ff      	movs	r2, #255	; 0xff
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2203      	movs	r2, #3
 80035f2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e035      	b.n	800366a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0e7      	beq.n	80035dc <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800363a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800363c:	4b0f      	ldr	r3, [pc, #60]	; (800367c <HAL_RTC_SetAlarm_IT+0x26c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a0e      	ldr	r2, [pc, #56]	; (800367c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003646:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_RTC_SetAlarm_IT+0x26c>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a0b      	ldr	r2, [pc, #44]	; (800367c <HAL_RTC_SetAlarm_IT+0x26c>)
 800364e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003652:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	22ff      	movs	r2, #255	; 0xff
 800365a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3724      	adds	r7, #36	; 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop
 8003674:	20000000 	.word	0x20000000
 8003678:	10624dd3 	.word	0x10624dd3
 800367c:	40013c00 	.word	0x40013c00

08003680 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7f1b      	ldrb	r3, [r3, #28]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_RTC_DeactivateAlarm+0x1a>
 8003696:	2302      	movs	r3, #2
 8003698:	e07b      	b.n	8003792 <HAL_RTC_DeactivateAlarm+0x112>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	22ca      	movs	r2, #202	; 0xca
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2253      	movs	r2, #83	; 0x53
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036bc:	d12f      	bne.n	800371e <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036cc:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036dc:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036de:	f7fe f82f 	bl	8001740 <HAL_GetTick>
 80036e2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80036e4:	e013      	b.n	800370e <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036e6:	f7fe f82b 	bl	8001740 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f4:	d90b      	bls.n	800370e <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	22ff      	movs	r2, #255	; 0xff
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2203      	movs	r2, #3
 8003702:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e041      	b.n	8003792 <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0e4      	beq.n	80036e6 <HAL_RTC_DeactivateAlarm+0x66>
 800371c:	e02e      	b.n	800377c <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800372c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800373c:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800373e:	f7fd ffff 	bl	8001740 <HAL_GetTick>
 8003742:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8003744:	e013      	b.n	800376e <HAL_RTC_DeactivateAlarm+0xee>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003746:	f7fd fffb 	bl	8001740 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003754:	d90b      	bls.n	800376e <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	22ff      	movs	r2, #255	; 0xff
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2203      	movs	r2, #3
 8003762:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e011      	b.n	8003792 <HAL_RTC_DeactivateAlarm+0x112>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0e4      	beq.n	8003746 <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	22ff      	movs	r2, #255	; 0xff
 8003782:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d012      	beq.n	80037d8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fd fdfd 	bl	80013c0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80037d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d012      	beq.n	800380c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f8a7 	bl	8003948 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f462 7220 	orn	r2, r2, #640	; 0x280
 800380a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <HAL_RTC_AlarmIRQHandler+0x88>)
 800380e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003812:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	775a      	strb	r2, [r3, #29]
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40013c00 	.word	0x40013c00

08003828 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003842:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003844:	f7fd ff7c 	bl	8001740 <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800384a:	e009      	b.n	8003860 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800384c:	f7fd ff78 	bl	8001740 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800385a:	d901      	bls.n	8003860 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e007      	b.n	8003870 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0ee      	beq.n	800384c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d119      	bne.n	80038c6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f04f 32ff 	mov.w	r2, #4294967295
 800389a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800389c:	f7fd ff50 	bl	8001740 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80038a2:	e009      	b.n	80038b8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80038a4:	f7fd ff4c 	bl	8001740 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038b2:	d901      	bls.n	80038b8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e007      	b.n	80038c8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ee      	beq.n	80038a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80038de:	e005      	b.n	80038ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3301      	adds	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	3b0a      	subs	r3, #10
 80038ea:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	2b09      	cmp	r3, #9
 80038f0:	d8f6      	bhi.n	80038e0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	b2db      	uxtb	r3, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	b2db      	uxtb	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4413      	add	r3, r2
 800393a:	b2db      	uxtb	r3, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e03f      	b.n	80039ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd fd9e 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	; 0x24
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800399e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f929 	bl	8003bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b08a      	sub	sp, #40	; 0x28
 80039fa:	af02      	add	r7, sp, #8
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d17c      	bne.n	8003b10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_UART_Transmit+0x2c>
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e075      	b.n	8003b12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_UART_Transmit+0x3e>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e06e      	b.n	8003b12 <HAL_UART_Transmit+0x11c>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2221      	movs	r2, #33	; 0x21
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a4a:	f7fd fe79 	bl	8001740 <HAL_GetTick>
 8003a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a64:	d108      	bne.n	8003a78 <HAL_UART_Transmit+0x82>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e003      	b.n	8003a80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a88:	e02a      	b.n	8003ae0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f840 	bl	8003b1a <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e036      	b.n	8003b12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3302      	adds	r3, #2
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	e007      	b.n	8003ad2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1cf      	bne.n	8003a8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2200      	movs	r2, #0
 8003af2:	2140      	movs	r1, #64	; 0x40
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f810 	bl	8003b1a <UART_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e006      	b.n	8003b12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b090      	sub	sp, #64	; 0x40
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	603b      	str	r3, [r7, #0]
 8003b26:	4613      	mov	r3, r2
 8003b28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2a:	e050      	b.n	8003bce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d04c      	beq.n	8003bce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b3a:	f7fd fe01 	bl	8001740 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d241      	bcs.n	8003bce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	330c      	adds	r3, #12
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b6a:	637a      	str	r2, [r7, #52]	; 0x34
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e5      	bne.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3314      	adds	r3, #20
 8003b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3314      	adds	r3, #20
 8003b9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b9e:	623a      	str	r2, [r7, #32]
 8003ba0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	69f9      	ldr	r1, [r7, #28]
 8003ba4:	6a3a      	ldr	r2, [r7, #32]
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e5      	bne.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e00f      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	bf0c      	ite	eq
 8003bde:	2301      	moveq	r3, #1
 8003be0:	2300      	movne	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	461a      	mov	r2, r3
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d09f      	beq.n	8003b2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3740      	adds	r7, #64	; 0x40
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bfc:	b09f      	sub	sp, #124	; 0x7c
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0e:	68d9      	ldr	r1, [r3, #12]
 8003c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	ea40 0301 	orr.w	r3, r0, r1
 8003c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c3c:	f021 010c 	bic.w	r1, r1, #12
 8003c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c46:	430b      	orrs	r3, r1
 8003c48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c56:	6999      	ldr	r1, [r3, #24]
 8003c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	ea40 0301 	orr.w	r3, r0, r1
 8003c60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4bc5      	ldr	r3, [pc, #788]	; (8003f7c <UART_SetConfig+0x384>)
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d004      	beq.n	8003c76 <UART_SetConfig+0x7e>
 8003c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4bc3      	ldr	r3, [pc, #780]	; (8003f80 <UART_SetConfig+0x388>)
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d103      	bne.n	8003c7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c76:	f7fe f99b 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8003c7a:	6778      	str	r0, [r7, #116]	; 0x74
 8003c7c:	e002      	b.n	8003c84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c7e:	f7fe f983 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 8003c82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8c:	f040 80b6 	bne.w	8003dfc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c92:	461c      	mov	r4, r3
 8003c94:	f04f 0500 	mov.w	r5, #0
 8003c98:	4622      	mov	r2, r4
 8003c9a:	462b      	mov	r3, r5
 8003c9c:	1891      	adds	r1, r2, r2
 8003c9e:	6439      	str	r1, [r7, #64]	; 0x40
 8003ca0:	415b      	adcs	r3, r3
 8003ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ca8:	1912      	adds	r2, r2, r4
 8003caa:	eb45 0303 	adc.w	r3, r5, r3
 8003cae:	f04f 0000 	mov.w	r0, #0
 8003cb2:	f04f 0100 	mov.w	r1, #0
 8003cb6:	00d9      	lsls	r1, r3, #3
 8003cb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cbc:	00d0      	lsls	r0, r2, #3
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	1911      	adds	r1, r2, r4
 8003cc4:	6639      	str	r1, [r7, #96]	; 0x60
 8003cc6:	416b      	adcs	r3, r5
 8003cc8:	667b      	str	r3, [r7, #100]	; 0x64
 8003cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	1891      	adds	r1, r2, r2
 8003cd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cd8:	415b      	adcs	r3, r3
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ce0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ce4:	f7fc ff80 	bl	8000be8 <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4ba5      	ldr	r3, [pc, #660]	; (8003f84 <UART_SetConfig+0x38c>)
 8003cee:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	011e      	lsls	r6, r3, #4
 8003cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf8:	461c      	mov	r4, r3
 8003cfa:	f04f 0500 	mov.w	r5, #0
 8003cfe:	4622      	mov	r2, r4
 8003d00:	462b      	mov	r3, r5
 8003d02:	1891      	adds	r1, r2, r2
 8003d04:	6339      	str	r1, [r7, #48]	; 0x30
 8003d06:	415b      	adcs	r3, r3
 8003d08:	637b      	str	r3, [r7, #52]	; 0x34
 8003d0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d0e:	1912      	adds	r2, r2, r4
 8003d10:	eb45 0303 	adc.w	r3, r5, r3
 8003d14:	f04f 0000 	mov.w	r0, #0
 8003d18:	f04f 0100 	mov.w	r1, #0
 8003d1c:	00d9      	lsls	r1, r3, #3
 8003d1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d22:	00d0      	lsls	r0, r2, #3
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	1911      	adds	r1, r2, r4
 8003d2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d2c:	416b      	adcs	r3, r5
 8003d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	461a      	mov	r2, r3
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	1891      	adds	r1, r2, r2
 8003d3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d3e:	415b      	adcs	r3, r3
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d4a:	f7fc ff4d 	bl	8000be8 <__aeabi_uldivmod>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4b8c      	ldr	r3, [pc, #560]	; (8003f84 <UART_SetConfig+0x38c>)
 8003d54:	fba3 1302 	umull	r1, r3, r3, r2
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	2164      	movs	r1, #100	; 0x64
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	3332      	adds	r3, #50	; 0x32
 8003d66:	4a87      	ldr	r2, [pc, #540]	; (8003f84 <UART_SetConfig+0x38c>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d74:	441e      	add	r6, r3
 8003d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	1894      	adds	r4, r2, r2
 8003d84:	623c      	str	r4, [r7, #32]
 8003d86:	415b      	adcs	r3, r3
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d8e:	1812      	adds	r2, r2, r0
 8003d90:	eb41 0303 	adc.w	r3, r1, r3
 8003d94:	f04f 0400 	mov.w	r4, #0
 8003d98:	f04f 0500 	mov.w	r5, #0
 8003d9c:	00dd      	lsls	r5, r3, #3
 8003d9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003da2:	00d4      	lsls	r4, r2, #3
 8003da4:	4622      	mov	r2, r4
 8003da6:	462b      	mov	r3, r5
 8003da8:	1814      	adds	r4, r2, r0
 8003daa:	653c      	str	r4, [r7, #80]	; 0x50
 8003dac:	414b      	adcs	r3, r1
 8003dae:	657b      	str	r3, [r7, #84]	; 0x54
 8003db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	461a      	mov	r2, r3
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	1891      	adds	r1, r2, r2
 8003dbc:	61b9      	str	r1, [r7, #24]
 8003dbe:	415b      	adcs	r3, r3
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003dca:	f7fc ff0d 	bl	8000be8 <__aeabi_uldivmod>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4b6c      	ldr	r3, [pc, #432]	; (8003f84 <UART_SetConfig+0x38c>)
 8003dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	2164      	movs	r1, #100	; 0x64
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	3332      	adds	r3, #50	; 0x32
 8003de6:	4a67      	ldr	r2, [pc, #412]	; (8003f84 <UART_SetConfig+0x38c>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	095b      	lsrs	r3, r3, #5
 8003dee:	f003 0207 	and.w	r2, r3, #7
 8003df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4432      	add	r2, r6
 8003df8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dfa:	e0b9      	b.n	8003f70 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfe:	461c      	mov	r4, r3
 8003e00:	f04f 0500 	mov.w	r5, #0
 8003e04:	4622      	mov	r2, r4
 8003e06:	462b      	mov	r3, r5
 8003e08:	1891      	adds	r1, r2, r2
 8003e0a:	6139      	str	r1, [r7, #16]
 8003e0c:	415b      	adcs	r3, r3
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e14:	1912      	adds	r2, r2, r4
 8003e16:	eb45 0303 	adc.w	r3, r5, r3
 8003e1a:	f04f 0000 	mov.w	r0, #0
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	00d9      	lsls	r1, r3, #3
 8003e24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e28:	00d0      	lsls	r0, r2, #3
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	eb12 0804 	adds.w	r8, r2, r4
 8003e32:	eb43 0905 	adc.w	r9, r3, r5
 8003e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	008b      	lsls	r3, r1, #2
 8003e4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e4e:	0082      	lsls	r2, r0, #2
 8003e50:	4640      	mov	r0, r8
 8003e52:	4649      	mov	r1, r9
 8003e54:	f7fc fec8 	bl	8000be8 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4b49      	ldr	r3, [pc, #292]	; (8003f84 <UART_SetConfig+0x38c>)
 8003e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	011e      	lsls	r6, r3, #4
 8003e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	1894      	adds	r4, r2, r2
 8003e74:	60bc      	str	r4, [r7, #8]
 8003e76:	415b      	adcs	r3, r3
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e7e:	1812      	adds	r2, r2, r0
 8003e80:	eb41 0303 	adc.w	r3, r1, r3
 8003e84:	f04f 0400 	mov.w	r4, #0
 8003e88:	f04f 0500 	mov.w	r5, #0
 8003e8c:	00dd      	lsls	r5, r3, #3
 8003e8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e92:	00d4      	lsls	r4, r2, #3
 8003e94:	4622      	mov	r2, r4
 8003e96:	462b      	mov	r3, r5
 8003e98:	1814      	adds	r4, r2, r0
 8003e9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003e9c:	414b      	adcs	r3, r1
 8003e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f04f 0100 	mov.w	r1, #0
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	008b      	lsls	r3, r1, #2
 8003eb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eb8:	0082      	lsls	r2, r0, #2
 8003eba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ebe:	f7fc fe93 	bl	8000be8 <__aeabi_uldivmod>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <UART_SetConfig+0x38c>)
 8003ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	2164      	movs	r1, #100	; 0x64
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	3332      	adds	r3, #50	; 0x32
 8003eda:	4a2a      	ldr	r2, [pc, #168]	; (8003f84 <UART_SetConfig+0x38c>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee6:	441e      	add	r6, r3
 8003ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eea:	4618      	mov	r0, r3
 8003eec:	f04f 0100 	mov.w	r1, #0
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	1894      	adds	r4, r2, r2
 8003ef6:	603c      	str	r4, [r7, #0]
 8003ef8:	415b      	adcs	r3, r3
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f00:	1812      	adds	r2, r2, r0
 8003f02:	eb41 0303 	adc.w	r3, r1, r3
 8003f06:	f04f 0400 	mov.w	r4, #0
 8003f0a:	f04f 0500 	mov.w	r5, #0
 8003f0e:	00dd      	lsls	r5, r3, #3
 8003f10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f14:	00d4      	lsls	r4, r2, #3
 8003f16:	4622      	mov	r2, r4
 8003f18:	462b      	mov	r3, r5
 8003f1a:	eb12 0a00 	adds.w	sl, r2, r0
 8003f1e:	eb43 0b01 	adc.w	fp, r3, r1
 8003f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	008b      	lsls	r3, r1, #2
 8003f36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f3a:	0082      	lsls	r2, r0, #2
 8003f3c:	4650      	mov	r0, sl
 8003f3e:	4659      	mov	r1, fp
 8003f40:	f7fc fe52 	bl	8000be8 <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <UART_SetConfig+0x38c>)
 8003f4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2164      	movs	r1, #100	; 0x64
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	3332      	adds	r3, #50	; 0x32
 8003f5c:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <UART_SetConfig+0x38c>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	f003 020f 	and.w	r2, r3, #15
 8003f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4432      	add	r2, r6
 8003f6e:	609a      	str	r2, [r3, #8]
}
 8003f70:	bf00      	nop
 8003f72:	377c      	adds	r7, #124	; 0x7c
 8003f74:	46bd      	mov	sp, r7
 8003f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40011000 	.word	0x40011000
 8003f80:	40011400 	.word	0x40011400
 8003f84:	51eb851f 	.word	0x51eb851f

08003f88 <__libc_init_array>:
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	4d0d      	ldr	r5, [pc, #52]	; (8003fc0 <__libc_init_array+0x38>)
 8003f8c:	4c0d      	ldr	r4, [pc, #52]	; (8003fc4 <__libc_init_array+0x3c>)
 8003f8e:	1b64      	subs	r4, r4, r5
 8003f90:	10a4      	asrs	r4, r4, #2
 8003f92:	2600      	movs	r6, #0
 8003f94:	42a6      	cmp	r6, r4
 8003f96:	d109      	bne.n	8003fac <__libc_init_array+0x24>
 8003f98:	4d0b      	ldr	r5, [pc, #44]	; (8003fc8 <__libc_init_array+0x40>)
 8003f9a:	4c0c      	ldr	r4, [pc, #48]	; (8003fcc <__libc_init_array+0x44>)
 8003f9c:	f002 ff06 	bl	8006dac <_init>
 8003fa0:	1b64      	subs	r4, r4, r5
 8003fa2:	10a4      	asrs	r4, r4, #2
 8003fa4:	2600      	movs	r6, #0
 8003fa6:	42a6      	cmp	r6, r4
 8003fa8:	d105      	bne.n	8003fb6 <__libc_init_array+0x2e>
 8003faa:	bd70      	pop	{r4, r5, r6, pc}
 8003fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb0:	4798      	blx	r3
 8003fb2:	3601      	adds	r6, #1
 8003fb4:	e7ee      	b.n	8003f94 <__libc_init_array+0xc>
 8003fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fba:	4798      	blx	r3
 8003fbc:	3601      	adds	r6, #1
 8003fbe:	e7f2      	b.n	8003fa6 <__libc_init_array+0x1e>
 8003fc0:	080072cc 	.word	0x080072cc
 8003fc4:	080072cc 	.word	0x080072cc
 8003fc8:	080072cc 	.word	0x080072cc
 8003fcc:	080072d0 	.word	0x080072d0

08003fd0 <memset>:
 8003fd0:	4402      	add	r2, r0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d100      	bne.n	8003fda <memset+0xa>
 8003fd8:	4770      	bx	lr
 8003fda:	f803 1b01 	strb.w	r1, [r3], #1
 8003fde:	e7f9      	b.n	8003fd4 <memset+0x4>

08003fe0 <__cvt>:
 8003fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe4:	ec55 4b10 	vmov	r4, r5, d0
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	460e      	mov	r6, r1
 8003fec:	4619      	mov	r1, r3
 8003fee:	462b      	mov	r3, r5
 8003ff0:	bfbb      	ittet	lt
 8003ff2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003ff6:	461d      	movlt	r5, r3
 8003ff8:	2300      	movge	r3, #0
 8003ffa:	232d      	movlt	r3, #45	; 0x2d
 8003ffc:	700b      	strb	r3, [r1, #0]
 8003ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004000:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004004:	4691      	mov	r9, r2
 8004006:	f023 0820 	bic.w	r8, r3, #32
 800400a:	bfbc      	itt	lt
 800400c:	4622      	movlt	r2, r4
 800400e:	4614      	movlt	r4, r2
 8004010:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004014:	d005      	beq.n	8004022 <__cvt+0x42>
 8004016:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800401a:	d100      	bne.n	800401e <__cvt+0x3e>
 800401c:	3601      	adds	r6, #1
 800401e:	2102      	movs	r1, #2
 8004020:	e000      	b.n	8004024 <__cvt+0x44>
 8004022:	2103      	movs	r1, #3
 8004024:	ab03      	add	r3, sp, #12
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	ab02      	add	r3, sp, #8
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	ec45 4b10 	vmov	d0, r4, r5
 8004030:	4653      	mov	r3, sl
 8004032:	4632      	mov	r2, r6
 8004034:	f000 fcec 	bl	8004a10 <_dtoa_r>
 8004038:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800403c:	4607      	mov	r7, r0
 800403e:	d102      	bne.n	8004046 <__cvt+0x66>
 8004040:	f019 0f01 	tst.w	r9, #1
 8004044:	d022      	beq.n	800408c <__cvt+0xac>
 8004046:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800404a:	eb07 0906 	add.w	r9, r7, r6
 800404e:	d110      	bne.n	8004072 <__cvt+0x92>
 8004050:	783b      	ldrb	r3, [r7, #0]
 8004052:	2b30      	cmp	r3, #48	; 0x30
 8004054:	d10a      	bne.n	800406c <__cvt+0x8c>
 8004056:	2200      	movs	r2, #0
 8004058:	2300      	movs	r3, #0
 800405a:	4620      	mov	r0, r4
 800405c:	4629      	mov	r1, r5
 800405e:	f7fc fd53 	bl	8000b08 <__aeabi_dcmpeq>
 8004062:	b918      	cbnz	r0, 800406c <__cvt+0x8c>
 8004064:	f1c6 0601 	rsb	r6, r6, #1
 8004068:	f8ca 6000 	str.w	r6, [sl]
 800406c:	f8da 3000 	ldr.w	r3, [sl]
 8004070:	4499      	add	r9, r3
 8004072:	2200      	movs	r2, #0
 8004074:	2300      	movs	r3, #0
 8004076:	4620      	mov	r0, r4
 8004078:	4629      	mov	r1, r5
 800407a:	f7fc fd45 	bl	8000b08 <__aeabi_dcmpeq>
 800407e:	b108      	cbz	r0, 8004084 <__cvt+0xa4>
 8004080:	f8cd 900c 	str.w	r9, [sp, #12]
 8004084:	2230      	movs	r2, #48	; 0x30
 8004086:	9b03      	ldr	r3, [sp, #12]
 8004088:	454b      	cmp	r3, r9
 800408a:	d307      	bcc.n	800409c <__cvt+0xbc>
 800408c:	9b03      	ldr	r3, [sp, #12]
 800408e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004090:	1bdb      	subs	r3, r3, r7
 8004092:	4638      	mov	r0, r7
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	b004      	add	sp, #16
 8004098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409c:	1c59      	adds	r1, r3, #1
 800409e:	9103      	str	r1, [sp, #12]
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e7f0      	b.n	8004086 <__cvt+0xa6>

080040a4 <__exponent>:
 80040a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040a6:	4603      	mov	r3, r0
 80040a8:	2900      	cmp	r1, #0
 80040aa:	bfb8      	it	lt
 80040ac:	4249      	neglt	r1, r1
 80040ae:	f803 2b02 	strb.w	r2, [r3], #2
 80040b2:	bfb4      	ite	lt
 80040b4:	222d      	movlt	r2, #45	; 0x2d
 80040b6:	222b      	movge	r2, #43	; 0x2b
 80040b8:	2909      	cmp	r1, #9
 80040ba:	7042      	strb	r2, [r0, #1]
 80040bc:	dd2a      	ble.n	8004114 <__exponent+0x70>
 80040be:	f10d 0407 	add.w	r4, sp, #7
 80040c2:	46a4      	mov	ip, r4
 80040c4:	270a      	movs	r7, #10
 80040c6:	46a6      	mov	lr, r4
 80040c8:	460a      	mov	r2, r1
 80040ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80040ce:	fb07 1516 	mls	r5, r7, r6, r1
 80040d2:	3530      	adds	r5, #48	; 0x30
 80040d4:	2a63      	cmp	r2, #99	; 0x63
 80040d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80040da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80040de:	4631      	mov	r1, r6
 80040e0:	dcf1      	bgt.n	80040c6 <__exponent+0x22>
 80040e2:	3130      	adds	r1, #48	; 0x30
 80040e4:	f1ae 0502 	sub.w	r5, lr, #2
 80040e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80040ec:	1c44      	adds	r4, r0, #1
 80040ee:	4629      	mov	r1, r5
 80040f0:	4561      	cmp	r1, ip
 80040f2:	d30a      	bcc.n	800410a <__exponent+0x66>
 80040f4:	f10d 0209 	add.w	r2, sp, #9
 80040f8:	eba2 020e 	sub.w	r2, r2, lr
 80040fc:	4565      	cmp	r5, ip
 80040fe:	bf88      	it	hi
 8004100:	2200      	movhi	r2, #0
 8004102:	4413      	add	r3, r2
 8004104:	1a18      	subs	r0, r3, r0
 8004106:	b003      	add	sp, #12
 8004108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800410a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800410e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004112:	e7ed      	b.n	80040f0 <__exponent+0x4c>
 8004114:	2330      	movs	r3, #48	; 0x30
 8004116:	3130      	adds	r1, #48	; 0x30
 8004118:	7083      	strb	r3, [r0, #2]
 800411a:	70c1      	strb	r1, [r0, #3]
 800411c:	1d03      	adds	r3, r0, #4
 800411e:	e7f1      	b.n	8004104 <__exponent+0x60>

08004120 <_printf_float>:
 8004120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004124:	ed2d 8b02 	vpush	{d8}
 8004128:	b08d      	sub	sp, #52	; 0x34
 800412a:	460c      	mov	r4, r1
 800412c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004130:	4616      	mov	r6, r2
 8004132:	461f      	mov	r7, r3
 8004134:	4605      	mov	r5, r0
 8004136:	f001 fa57 	bl	80055e8 <_localeconv_r>
 800413a:	f8d0 a000 	ldr.w	sl, [r0]
 800413e:	4650      	mov	r0, sl
 8004140:	f7fc f866 	bl	8000210 <strlen>
 8004144:	2300      	movs	r3, #0
 8004146:	930a      	str	r3, [sp, #40]	; 0x28
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	f8d8 3000 	ldr.w	r3, [r8]
 8004150:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004154:	3307      	adds	r3, #7
 8004156:	f023 0307 	bic.w	r3, r3, #7
 800415a:	f103 0208 	add.w	r2, r3, #8
 800415e:	f8c8 2000 	str.w	r2, [r8]
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800416a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800416e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004172:	9307      	str	r3, [sp, #28]
 8004174:	f8cd 8018 	str.w	r8, [sp, #24]
 8004178:	ee08 0a10 	vmov	s16, r0
 800417c:	4b9f      	ldr	r3, [pc, #636]	; (80043fc <_printf_float+0x2dc>)
 800417e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004182:	f04f 32ff 	mov.w	r2, #4294967295
 8004186:	f7fc fcf1 	bl	8000b6c <__aeabi_dcmpun>
 800418a:	bb88      	cbnz	r0, 80041f0 <_printf_float+0xd0>
 800418c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004190:	4b9a      	ldr	r3, [pc, #616]	; (80043fc <_printf_float+0x2dc>)
 8004192:	f04f 32ff 	mov.w	r2, #4294967295
 8004196:	f7fc fccb 	bl	8000b30 <__aeabi_dcmple>
 800419a:	bb48      	cbnz	r0, 80041f0 <_printf_float+0xd0>
 800419c:	2200      	movs	r2, #0
 800419e:	2300      	movs	r3, #0
 80041a0:	4640      	mov	r0, r8
 80041a2:	4649      	mov	r1, r9
 80041a4:	f7fc fcba 	bl	8000b1c <__aeabi_dcmplt>
 80041a8:	b110      	cbz	r0, 80041b0 <_printf_float+0x90>
 80041aa:	232d      	movs	r3, #45	; 0x2d
 80041ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b0:	4b93      	ldr	r3, [pc, #588]	; (8004400 <_printf_float+0x2e0>)
 80041b2:	4894      	ldr	r0, [pc, #592]	; (8004404 <_printf_float+0x2e4>)
 80041b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80041b8:	bf94      	ite	ls
 80041ba:	4698      	movls	r8, r3
 80041bc:	4680      	movhi	r8, r0
 80041be:	2303      	movs	r3, #3
 80041c0:	6123      	str	r3, [r4, #16]
 80041c2:	9b05      	ldr	r3, [sp, #20]
 80041c4:	f023 0204 	bic.w	r2, r3, #4
 80041c8:	6022      	str	r2, [r4, #0]
 80041ca:	f04f 0900 	mov.w	r9, #0
 80041ce:	9700      	str	r7, [sp, #0]
 80041d0:	4633      	mov	r3, r6
 80041d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80041d4:	4621      	mov	r1, r4
 80041d6:	4628      	mov	r0, r5
 80041d8:	f000 f9d8 	bl	800458c <_printf_common>
 80041dc:	3001      	adds	r0, #1
 80041de:	f040 8090 	bne.w	8004302 <_printf_float+0x1e2>
 80041e2:	f04f 30ff 	mov.w	r0, #4294967295
 80041e6:	b00d      	add	sp, #52	; 0x34
 80041e8:	ecbd 8b02 	vpop	{d8}
 80041ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f0:	4642      	mov	r2, r8
 80041f2:	464b      	mov	r3, r9
 80041f4:	4640      	mov	r0, r8
 80041f6:	4649      	mov	r1, r9
 80041f8:	f7fc fcb8 	bl	8000b6c <__aeabi_dcmpun>
 80041fc:	b140      	cbz	r0, 8004210 <_printf_float+0xf0>
 80041fe:	464b      	mov	r3, r9
 8004200:	2b00      	cmp	r3, #0
 8004202:	bfbc      	itt	lt
 8004204:	232d      	movlt	r3, #45	; 0x2d
 8004206:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800420a:	487f      	ldr	r0, [pc, #508]	; (8004408 <_printf_float+0x2e8>)
 800420c:	4b7f      	ldr	r3, [pc, #508]	; (800440c <_printf_float+0x2ec>)
 800420e:	e7d1      	b.n	80041b4 <_printf_float+0x94>
 8004210:	6863      	ldr	r3, [r4, #4]
 8004212:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004216:	9206      	str	r2, [sp, #24]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	d13f      	bne.n	800429c <_printf_float+0x17c>
 800421c:	2306      	movs	r3, #6
 800421e:	6063      	str	r3, [r4, #4]
 8004220:	9b05      	ldr	r3, [sp, #20]
 8004222:	6861      	ldr	r1, [r4, #4]
 8004224:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004228:	2300      	movs	r3, #0
 800422a:	9303      	str	r3, [sp, #12]
 800422c:	ab0a      	add	r3, sp, #40	; 0x28
 800422e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004232:	ab09      	add	r3, sp, #36	; 0x24
 8004234:	ec49 8b10 	vmov	d0, r8, r9
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	6022      	str	r2, [r4, #0]
 800423c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004240:	4628      	mov	r0, r5
 8004242:	f7ff fecd 	bl	8003fe0 <__cvt>
 8004246:	9b06      	ldr	r3, [sp, #24]
 8004248:	9909      	ldr	r1, [sp, #36]	; 0x24
 800424a:	2b47      	cmp	r3, #71	; 0x47
 800424c:	4680      	mov	r8, r0
 800424e:	d108      	bne.n	8004262 <_printf_float+0x142>
 8004250:	1cc8      	adds	r0, r1, #3
 8004252:	db02      	blt.n	800425a <_printf_float+0x13a>
 8004254:	6863      	ldr	r3, [r4, #4]
 8004256:	4299      	cmp	r1, r3
 8004258:	dd41      	ble.n	80042de <_printf_float+0x1be>
 800425a:	f1ab 0b02 	sub.w	fp, fp, #2
 800425e:	fa5f fb8b 	uxtb.w	fp, fp
 8004262:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004266:	d820      	bhi.n	80042aa <_printf_float+0x18a>
 8004268:	3901      	subs	r1, #1
 800426a:	465a      	mov	r2, fp
 800426c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004270:	9109      	str	r1, [sp, #36]	; 0x24
 8004272:	f7ff ff17 	bl	80040a4 <__exponent>
 8004276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004278:	1813      	adds	r3, r2, r0
 800427a:	2a01      	cmp	r2, #1
 800427c:	4681      	mov	r9, r0
 800427e:	6123      	str	r3, [r4, #16]
 8004280:	dc02      	bgt.n	8004288 <_printf_float+0x168>
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	07d2      	lsls	r2, r2, #31
 8004286:	d501      	bpl.n	800428c <_printf_float+0x16c>
 8004288:	3301      	adds	r3, #1
 800428a:	6123      	str	r3, [r4, #16]
 800428c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004290:	2b00      	cmp	r3, #0
 8004292:	d09c      	beq.n	80041ce <_printf_float+0xae>
 8004294:	232d      	movs	r3, #45	; 0x2d
 8004296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800429a:	e798      	b.n	80041ce <_printf_float+0xae>
 800429c:	9a06      	ldr	r2, [sp, #24]
 800429e:	2a47      	cmp	r2, #71	; 0x47
 80042a0:	d1be      	bne.n	8004220 <_printf_float+0x100>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1bc      	bne.n	8004220 <_printf_float+0x100>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e7b9      	b.n	800421e <_printf_float+0xfe>
 80042aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80042ae:	d118      	bne.n	80042e2 <_printf_float+0x1c2>
 80042b0:	2900      	cmp	r1, #0
 80042b2:	6863      	ldr	r3, [r4, #4]
 80042b4:	dd0b      	ble.n	80042ce <_printf_float+0x1ae>
 80042b6:	6121      	str	r1, [r4, #16]
 80042b8:	b913      	cbnz	r3, 80042c0 <_printf_float+0x1a0>
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	07d0      	lsls	r0, r2, #31
 80042be:	d502      	bpl.n	80042c6 <_printf_float+0x1a6>
 80042c0:	3301      	adds	r3, #1
 80042c2:	440b      	add	r3, r1
 80042c4:	6123      	str	r3, [r4, #16]
 80042c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80042c8:	f04f 0900 	mov.w	r9, #0
 80042cc:	e7de      	b.n	800428c <_printf_float+0x16c>
 80042ce:	b913      	cbnz	r3, 80042d6 <_printf_float+0x1b6>
 80042d0:	6822      	ldr	r2, [r4, #0]
 80042d2:	07d2      	lsls	r2, r2, #31
 80042d4:	d501      	bpl.n	80042da <_printf_float+0x1ba>
 80042d6:	3302      	adds	r3, #2
 80042d8:	e7f4      	b.n	80042c4 <_printf_float+0x1a4>
 80042da:	2301      	movs	r3, #1
 80042dc:	e7f2      	b.n	80042c4 <_printf_float+0x1a4>
 80042de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80042e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042e4:	4299      	cmp	r1, r3
 80042e6:	db05      	blt.n	80042f4 <_printf_float+0x1d4>
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	6121      	str	r1, [r4, #16]
 80042ec:	07d8      	lsls	r0, r3, #31
 80042ee:	d5ea      	bpl.n	80042c6 <_printf_float+0x1a6>
 80042f0:	1c4b      	adds	r3, r1, #1
 80042f2:	e7e7      	b.n	80042c4 <_printf_float+0x1a4>
 80042f4:	2900      	cmp	r1, #0
 80042f6:	bfd4      	ite	le
 80042f8:	f1c1 0202 	rsble	r2, r1, #2
 80042fc:	2201      	movgt	r2, #1
 80042fe:	4413      	add	r3, r2
 8004300:	e7e0      	b.n	80042c4 <_printf_float+0x1a4>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	055a      	lsls	r2, r3, #21
 8004306:	d407      	bmi.n	8004318 <_printf_float+0x1f8>
 8004308:	6923      	ldr	r3, [r4, #16]
 800430a:	4642      	mov	r2, r8
 800430c:	4631      	mov	r1, r6
 800430e:	4628      	mov	r0, r5
 8004310:	47b8      	blx	r7
 8004312:	3001      	adds	r0, #1
 8004314:	d12c      	bne.n	8004370 <_printf_float+0x250>
 8004316:	e764      	b.n	80041e2 <_printf_float+0xc2>
 8004318:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800431c:	f240 80e0 	bls.w	80044e0 <_printf_float+0x3c0>
 8004320:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004324:	2200      	movs	r2, #0
 8004326:	2300      	movs	r3, #0
 8004328:	f7fc fbee 	bl	8000b08 <__aeabi_dcmpeq>
 800432c:	2800      	cmp	r0, #0
 800432e:	d034      	beq.n	800439a <_printf_float+0x27a>
 8004330:	4a37      	ldr	r2, [pc, #220]	; (8004410 <_printf_float+0x2f0>)
 8004332:	2301      	movs	r3, #1
 8004334:	4631      	mov	r1, r6
 8004336:	4628      	mov	r0, r5
 8004338:	47b8      	blx	r7
 800433a:	3001      	adds	r0, #1
 800433c:	f43f af51 	beq.w	80041e2 <_printf_float+0xc2>
 8004340:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004344:	429a      	cmp	r2, r3
 8004346:	db02      	blt.n	800434e <_printf_float+0x22e>
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	07d8      	lsls	r0, r3, #31
 800434c:	d510      	bpl.n	8004370 <_printf_float+0x250>
 800434e:	ee18 3a10 	vmov	r3, s16
 8004352:	4652      	mov	r2, sl
 8004354:	4631      	mov	r1, r6
 8004356:	4628      	mov	r0, r5
 8004358:	47b8      	blx	r7
 800435a:	3001      	adds	r0, #1
 800435c:	f43f af41 	beq.w	80041e2 <_printf_float+0xc2>
 8004360:	f04f 0800 	mov.w	r8, #0
 8004364:	f104 091a 	add.w	r9, r4, #26
 8004368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800436a:	3b01      	subs	r3, #1
 800436c:	4543      	cmp	r3, r8
 800436e:	dc09      	bgt.n	8004384 <_printf_float+0x264>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	079b      	lsls	r3, r3, #30
 8004374:	f100 8105 	bmi.w	8004582 <_printf_float+0x462>
 8004378:	68e0      	ldr	r0, [r4, #12]
 800437a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800437c:	4298      	cmp	r0, r3
 800437e:	bfb8      	it	lt
 8004380:	4618      	movlt	r0, r3
 8004382:	e730      	b.n	80041e6 <_printf_float+0xc6>
 8004384:	2301      	movs	r3, #1
 8004386:	464a      	mov	r2, r9
 8004388:	4631      	mov	r1, r6
 800438a:	4628      	mov	r0, r5
 800438c:	47b8      	blx	r7
 800438e:	3001      	adds	r0, #1
 8004390:	f43f af27 	beq.w	80041e2 <_printf_float+0xc2>
 8004394:	f108 0801 	add.w	r8, r8, #1
 8004398:	e7e6      	b.n	8004368 <_printf_float+0x248>
 800439a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	dc39      	bgt.n	8004414 <_printf_float+0x2f4>
 80043a0:	4a1b      	ldr	r2, [pc, #108]	; (8004410 <_printf_float+0x2f0>)
 80043a2:	2301      	movs	r3, #1
 80043a4:	4631      	mov	r1, r6
 80043a6:	4628      	mov	r0, r5
 80043a8:	47b8      	blx	r7
 80043aa:	3001      	adds	r0, #1
 80043ac:	f43f af19 	beq.w	80041e2 <_printf_float+0xc2>
 80043b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043b4:	4313      	orrs	r3, r2
 80043b6:	d102      	bne.n	80043be <_printf_float+0x29e>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	07d9      	lsls	r1, r3, #31
 80043bc:	d5d8      	bpl.n	8004370 <_printf_float+0x250>
 80043be:	ee18 3a10 	vmov	r3, s16
 80043c2:	4652      	mov	r2, sl
 80043c4:	4631      	mov	r1, r6
 80043c6:	4628      	mov	r0, r5
 80043c8:	47b8      	blx	r7
 80043ca:	3001      	adds	r0, #1
 80043cc:	f43f af09 	beq.w	80041e2 <_printf_float+0xc2>
 80043d0:	f04f 0900 	mov.w	r9, #0
 80043d4:	f104 0a1a 	add.w	sl, r4, #26
 80043d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043da:	425b      	negs	r3, r3
 80043dc:	454b      	cmp	r3, r9
 80043de:	dc01      	bgt.n	80043e4 <_printf_float+0x2c4>
 80043e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043e2:	e792      	b.n	800430a <_printf_float+0x1ea>
 80043e4:	2301      	movs	r3, #1
 80043e6:	4652      	mov	r2, sl
 80043e8:	4631      	mov	r1, r6
 80043ea:	4628      	mov	r0, r5
 80043ec:	47b8      	blx	r7
 80043ee:	3001      	adds	r0, #1
 80043f0:	f43f aef7 	beq.w	80041e2 <_printf_float+0xc2>
 80043f4:	f109 0901 	add.w	r9, r9, #1
 80043f8:	e7ee      	b.n	80043d8 <_printf_float+0x2b8>
 80043fa:	bf00      	nop
 80043fc:	7fefffff 	.word	0x7fefffff
 8004400:	08006ee8 	.word	0x08006ee8
 8004404:	08006eec 	.word	0x08006eec
 8004408:	08006ef4 	.word	0x08006ef4
 800440c:	08006ef0 	.word	0x08006ef0
 8004410:	08006ef8 	.word	0x08006ef8
 8004414:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004416:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004418:	429a      	cmp	r2, r3
 800441a:	bfa8      	it	ge
 800441c:	461a      	movge	r2, r3
 800441e:	2a00      	cmp	r2, #0
 8004420:	4691      	mov	r9, r2
 8004422:	dc37      	bgt.n	8004494 <_printf_float+0x374>
 8004424:	f04f 0b00 	mov.w	fp, #0
 8004428:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800442c:	f104 021a 	add.w	r2, r4, #26
 8004430:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004432:	9305      	str	r3, [sp, #20]
 8004434:	eba3 0309 	sub.w	r3, r3, r9
 8004438:	455b      	cmp	r3, fp
 800443a:	dc33      	bgt.n	80044a4 <_printf_float+0x384>
 800443c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004440:	429a      	cmp	r2, r3
 8004442:	db3b      	blt.n	80044bc <_printf_float+0x39c>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	07da      	lsls	r2, r3, #31
 8004448:	d438      	bmi.n	80044bc <_printf_float+0x39c>
 800444a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800444c:	9b05      	ldr	r3, [sp, #20]
 800444e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	eba2 0901 	sub.w	r9, r2, r1
 8004456:	4599      	cmp	r9, r3
 8004458:	bfa8      	it	ge
 800445a:	4699      	movge	r9, r3
 800445c:	f1b9 0f00 	cmp.w	r9, #0
 8004460:	dc35      	bgt.n	80044ce <_printf_float+0x3ae>
 8004462:	f04f 0800 	mov.w	r8, #0
 8004466:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800446a:	f104 0a1a 	add.w	sl, r4, #26
 800446e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	eba3 0309 	sub.w	r3, r3, r9
 8004478:	4543      	cmp	r3, r8
 800447a:	f77f af79 	ble.w	8004370 <_printf_float+0x250>
 800447e:	2301      	movs	r3, #1
 8004480:	4652      	mov	r2, sl
 8004482:	4631      	mov	r1, r6
 8004484:	4628      	mov	r0, r5
 8004486:	47b8      	blx	r7
 8004488:	3001      	adds	r0, #1
 800448a:	f43f aeaa 	beq.w	80041e2 <_printf_float+0xc2>
 800448e:	f108 0801 	add.w	r8, r8, #1
 8004492:	e7ec      	b.n	800446e <_printf_float+0x34e>
 8004494:	4613      	mov	r3, r2
 8004496:	4631      	mov	r1, r6
 8004498:	4642      	mov	r2, r8
 800449a:	4628      	mov	r0, r5
 800449c:	47b8      	blx	r7
 800449e:	3001      	adds	r0, #1
 80044a0:	d1c0      	bne.n	8004424 <_printf_float+0x304>
 80044a2:	e69e      	b.n	80041e2 <_printf_float+0xc2>
 80044a4:	2301      	movs	r3, #1
 80044a6:	4631      	mov	r1, r6
 80044a8:	4628      	mov	r0, r5
 80044aa:	9205      	str	r2, [sp, #20]
 80044ac:	47b8      	blx	r7
 80044ae:	3001      	adds	r0, #1
 80044b0:	f43f ae97 	beq.w	80041e2 <_printf_float+0xc2>
 80044b4:	9a05      	ldr	r2, [sp, #20]
 80044b6:	f10b 0b01 	add.w	fp, fp, #1
 80044ba:	e7b9      	b.n	8004430 <_printf_float+0x310>
 80044bc:	ee18 3a10 	vmov	r3, s16
 80044c0:	4652      	mov	r2, sl
 80044c2:	4631      	mov	r1, r6
 80044c4:	4628      	mov	r0, r5
 80044c6:	47b8      	blx	r7
 80044c8:	3001      	adds	r0, #1
 80044ca:	d1be      	bne.n	800444a <_printf_float+0x32a>
 80044cc:	e689      	b.n	80041e2 <_printf_float+0xc2>
 80044ce:	9a05      	ldr	r2, [sp, #20]
 80044d0:	464b      	mov	r3, r9
 80044d2:	4442      	add	r2, r8
 80044d4:	4631      	mov	r1, r6
 80044d6:	4628      	mov	r0, r5
 80044d8:	47b8      	blx	r7
 80044da:	3001      	adds	r0, #1
 80044dc:	d1c1      	bne.n	8004462 <_printf_float+0x342>
 80044de:	e680      	b.n	80041e2 <_printf_float+0xc2>
 80044e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044e2:	2a01      	cmp	r2, #1
 80044e4:	dc01      	bgt.n	80044ea <_printf_float+0x3ca>
 80044e6:	07db      	lsls	r3, r3, #31
 80044e8:	d538      	bpl.n	800455c <_printf_float+0x43c>
 80044ea:	2301      	movs	r3, #1
 80044ec:	4642      	mov	r2, r8
 80044ee:	4631      	mov	r1, r6
 80044f0:	4628      	mov	r0, r5
 80044f2:	47b8      	blx	r7
 80044f4:	3001      	adds	r0, #1
 80044f6:	f43f ae74 	beq.w	80041e2 <_printf_float+0xc2>
 80044fa:	ee18 3a10 	vmov	r3, s16
 80044fe:	4652      	mov	r2, sl
 8004500:	4631      	mov	r1, r6
 8004502:	4628      	mov	r0, r5
 8004504:	47b8      	blx	r7
 8004506:	3001      	adds	r0, #1
 8004508:	f43f ae6b 	beq.w	80041e2 <_printf_float+0xc2>
 800450c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004510:	2200      	movs	r2, #0
 8004512:	2300      	movs	r3, #0
 8004514:	f7fc faf8 	bl	8000b08 <__aeabi_dcmpeq>
 8004518:	b9d8      	cbnz	r0, 8004552 <_printf_float+0x432>
 800451a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800451c:	f108 0201 	add.w	r2, r8, #1
 8004520:	3b01      	subs	r3, #1
 8004522:	4631      	mov	r1, r6
 8004524:	4628      	mov	r0, r5
 8004526:	47b8      	blx	r7
 8004528:	3001      	adds	r0, #1
 800452a:	d10e      	bne.n	800454a <_printf_float+0x42a>
 800452c:	e659      	b.n	80041e2 <_printf_float+0xc2>
 800452e:	2301      	movs	r3, #1
 8004530:	4652      	mov	r2, sl
 8004532:	4631      	mov	r1, r6
 8004534:	4628      	mov	r0, r5
 8004536:	47b8      	blx	r7
 8004538:	3001      	adds	r0, #1
 800453a:	f43f ae52 	beq.w	80041e2 <_printf_float+0xc2>
 800453e:	f108 0801 	add.w	r8, r8, #1
 8004542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	4543      	cmp	r3, r8
 8004548:	dcf1      	bgt.n	800452e <_printf_float+0x40e>
 800454a:	464b      	mov	r3, r9
 800454c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004550:	e6dc      	b.n	800430c <_printf_float+0x1ec>
 8004552:	f04f 0800 	mov.w	r8, #0
 8004556:	f104 0a1a 	add.w	sl, r4, #26
 800455a:	e7f2      	b.n	8004542 <_printf_float+0x422>
 800455c:	2301      	movs	r3, #1
 800455e:	4642      	mov	r2, r8
 8004560:	e7df      	b.n	8004522 <_printf_float+0x402>
 8004562:	2301      	movs	r3, #1
 8004564:	464a      	mov	r2, r9
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f ae38 	beq.w	80041e2 <_printf_float+0xc2>
 8004572:	f108 0801 	add.w	r8, r8, #1
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800457a:	1a5b      	subs	r3, r3, r1
 800457c:	4543      	cmp	r3, r8
 800457e:	dcf0      	bgt.n	8004562 <_printf_float+0x442>
 8004580:	e6fa      	b.n	8004378 <_printf_float+0x258>
 8004582:	f04f 0800 	mov.w	r8, #0
 8004586:	f104 0919 	add.w	r9, r4, #25
 800458a:	e7f4      	b.n	8004576 <_printf_float+0x456>

0800458c <_printf_common>:
 800458c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004590:	4616      	mov	r6, r2
 8004592:	4699      	mov	r9, r3
 8004594:	688a      	ldr	r2, [r1, #8]
 8004596:	690b      	ldr	r3, [r1, #16]
 8004598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800459c:	4293      	cmp	r3, r2
 800459e:	bfb8      	it	lt
 80045a0:	4613      	movlt	r3, r2
 80045a2:	6033      	str	r3, [r6, #0]
 80045a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045a8:	4607      	mov	r7, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	b10a      	cbz	r2, 80045b2 <_printf_common+0x26>
 80045ae:	3301      	adds	r3, #1
 80045b0:	6033      	str	r3, [r6, #0]
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	0699      	lsls	r1, r3, #26
 80045b6:	bf42      	ittt	mi
 80045b8:	6833      	ldrmi	r3, [r6, #0]
 80045ba:	3302      	addmi	r3, #2
 80045bc:	6033      	strmi	r3, [r6, #0]
 80045be:	6825      	ldr	r5, [r4, #0]
 80045c0:	f015 0506 	ands.w	r5, r5, #6
 80045c4:	d106      	bne.n	80045d4 <_printf_common+0x48>
 80045c6:	f104 0a19 	add.w	sl, r4, #25
 80045ca:	68e3      	ldr	r3, [r4, #12]
 80045cc:	6832      	ldr	r2, [r6, #0]
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	42ab      	cmp	r3, r5
 80045d2:	dc26      	bgt.n	8004622 <_printf_common+0x96>
 80045d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045d8:	1e13      	subs	r3, r2, #0
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	bf18      	it	ne
 80045de:	2301      	movne	r3, #1
 80045e0:	0692      	lsls	r2, r2, #26
 80045e2:	d42b      	bmi.n	800463c <_printf_common+0xb0>
 80045e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045e8:	4649      	mov	r1, r9
 80045ea:	4638      	mov	r0, r7
 80045ec:	47c0      	blx	r8
 80045ee:	3001      	adds	r0, #1
 80045f0:	d01e      	beq.n	8004630 <_printf_common+0xa4>
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	68e5      	ldr	r5, [r4, #12]
 80045f6:	6832      	ldr	r2, [r6, #0]
 80045f8:	f003 0306 	and.w	r3, r3, #6
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	bf08      	it	eq
 8004600:	1aad      	subeq	r5, r5, r2
 8004602:	68a3      	ldr	r3, [r4, #8]
 8004604:	6922      	ldr	r2, [r4, #16]
 8004606:	bf0c      	ite	eq
 8004608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800460c:	2500      	movne	r5, #0
 800460e:	4293      	cmp	r3, r2
 8004610:	bfc4      	itt	gt
 8004612:	1a9b      	subgt	r3, r3, r2
 8004614:	18ed      	addgt	r5, r5, r3
 8004616:	2600      	movs	r6, #0
 8004618:	341a      	adds	r4, #26
 800461a:	42b5      	cmp	r5, r6
 800461c:	d11a      	bne.n	8004654 <_printf_common+0xc8>
 800461e:	2000      	movs	r0, #0
 8004620:	e008      	b.n	8004634 <_printf_common+0xa8>
 8004622:	2301      	movs	r3, #1
 8004624:	4652      	mov	r2, sl
 8004626:	4649      	mov	r1, r9
 8004628:	4638      	mov	r0, r7
 800462a:	47c0      	blx	r8
 800462c:	3001      	adds	r0, #1
 800462e:	d103      	bne.n	8004638 <_printf_common+0xac>
 8004630:	f04f 30ff 	mov.w	r0, #4294967295
 8004634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004638:	3501      	adds	r5, #1
 800463a:	e7c6      	b.n	80045ca <_printf_common+0x3e>
 800463c:	18e1      	adds	r1, r4, r3
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	2030      	movs	r0, #48	; 0x30
 8004642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004646:	4422      	add	r2, r4
 8004648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800464c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004650:	3302      	adds	r3, #2
 8004652:	e7c7      	b.n	80045e4 <_printf_common+0x58>
 8004654:	2301      	movs	r3, #1
 8004656:	4622      	mov	r2, r4
 8004658:	4649      	mov	r1, r9
 800465a:	4638      	mov	r0, r7
 800465c:	47c0      	blx	r8
 800465e:	3001      	adds	r0, #1
 8004660:	d0e6      	beq.n	8004630 <_printf_common+0xa4>
 8004662:	3601      	adds	r6, #1
 8004664:	e7d9      	b.n	800461a <_printf_common+0x8e>
	...

08004668 <_printf_i>:
 8004668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800466c:	460c      	mov	r4, r1
 800466e:	4691      	mov	r9, r2
 8004670:	7e27      	ldrb	r7, [r4, #24]
 8004672:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004674:	2f78      	cmp	r7, #120	; 0x78
 8004676:	4680      	mov	r8, r0
 8004678:	469a      	mov	sl, r3
 800467a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800467e:	d807      	bhi.n	8004690 <_printf_i+0x28>
 8004680:	2f62      	cmp	r7, #98	; 0x62
 8004682:	d80a      	bhi.n	800469a <_printf_i+0x32>
 8004684:	2f00      	cmp	r7, #0
 8004686:	f000 80d8 	beq.w	800483a <_printf_i+0x1d2>
 800468a:	2f58      	cmp	r7, #88	; 0x58
 800468c:	f000 80a3 	beq.w	80047d6 <_printf_i+0x16e>
 8004690:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004698:	e03a      	b.n	8004710 <_printf_i+0xa8>
 800469a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800469e:	2b15      	cmp	r3, #21
 80046a0:	d8f6      	bhi.n	8004690 <_printf_i+0x28>
 80046a2:	a001      	add	r0, pc, #4	; (adr r0, 80046a8 <_printf_i+0x40>)
 80046a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046a8:	08004701 	.word	0x08004701
 80046ac:	08004715 	.word	0x08004715
 80046b0:	08004691 	.word	0x08004691
 80046b4:	08004691 	.word	0x08004691
 80046b8:	08004691 	.word	0x08004691
 80046bc:	08004691 	.word	0x08004691
 80046c0:	08004715 	.word	0x08004715
 80046c4:	08004691 	.word	0x08004691
 80046c8:	08004691 	.word	0x08004691
 80046cc:	08004691 	.word	0x08004691
 80046d0:	08004691 	.word	0x08004691
 80046d4:	08004821 	.word	0x08004821
 80046d8:	08004745 	.word	0x08004745
 80046dc:	08004803 	.word	0x08004803
 80046e0:	08004691 	.word	0x08004691
 80046e4:	08004691 	.word	0x08004691
 80046e8:	08004843 	.word	0x08004843
 80046ec:	08004691 	.word	0x08004691
 80046f0:	08004745 	.word	0x08004745
 80046f4:	08004691 	.word	0x08004691
 80046f8:	08004691 	.word	0x08004691
 80046fc:	0800480b 	.word	0x0800480b
 8004700:	680b      	ldr	r3, [r1, #0]
 8004702:	1d1a      	adds	r2, r3, #4
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	600a      	str	r2, [r1, #0]
 8004708:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800470c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004710:	2301      	movs	r3, #1
 8004712:	e0a3      	b.n	800485c <_printf_i+0x1f4>
 8004714:	6825      	ldr	r5, [r4, #0]
 8004716:	6808      	ldr	r0, [r1, #0]
 8004718:	062e      	lsls	r6, r5, #24
 800471a:	f100 0304 	add.w	r3, r0, #4
 800471e:	d50a      	bpl.n	8004736 <_printf_i+0xce>
 8004720:	6805      	ldr	r5, [r0, #0]
 8004722:	600b      	str	r3, [r1, #0]
 8004724:	2d00      	cmp	r5, #0
 8004726:	da03      	bge.n	8004730 <_printf_i+0xc8>
 8004728:	232d      	movs	r3, #45	; 0x2d
 800472a:	426d      	negs	r5, r5
 800472c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004730:	485e      	ldr	r0, [pc, #376]	; (80048ac <_printf_i+0x244>)
 8004732:	230a      	movs	r3, #10
 8004734:	e019      	b.n	800476a <_printf_i+0x102>
 8004736:	f015 0f40 	tst.w	r5, #64	; 0x40
 800473a:	6805      	ldr	r5, [r0, #0]
 800473c:	600b      	str	r3, [r1, #0]
 800473e:	bf18      	it	ne
 8004740:	b22d      	sxthne	r5, r5
 8004742:	e7ef      	b.n	8004724 <_printf_i+0xbc>
 8004744:	680b      	ldr	r3, [r1, #0]
 8004746:	6825      	ldr	r5, [r4, #0]
 8004748:	1d18      	adds	r0, r3, #4
 800474a:	6008      	str	r0, [r1, #0]
 800474c:	0628      	lsls	r0, r5, #24
 800474e:	d501      	bpl.n	8004754 <_printf_i+0xec>
 8004750:	681d      	ldr	r5, [r3, #0]
 8004752:	e002      	b.n	800475a <_printf_i+0xf2>
 8004754:	0669      	lsls	r1, r5, #25
 8004756:	d5fb      	bpl.n	8004750 <_printf_i+0xe8>
 8004758:	881d      	ldrh	r5, [r3, #0]
 800475a:	4854      	ldr	r0, [pc, #336]	; (80048ac <_printf_i+0x244>)
 800475c:	2f6f      	cmp	r7, #111	; 0x6f
 800475e:	bf0c      	ite	eq
 8004760:	2308      	moveq	r3, #8
 8004762:	230a      	movne	r3, #10
 8004764:	2100      	movs	r1, #0
 8004766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800476a:	6866      	ldr	r6, [r4, #4]
 800476c:	60a6      	str	r6, [r4, #8]
 800476e:	2e00      	cmp	r6, #0
 8004770:	bfa2      	ittt	ge
 8004772:	6821      	ldrge	r1, [r4, #0]
 8004774:	f021 0104 	bicge.w	r1, r1, #4
 8004778:	6021      	strge	r1, [r4, #0]
 800477a:	b90d      	cbnz	r5, 8004780 <_printf_i+0x118>
 800477c:	2e00      	cmp	r6, #0
 800477e:	d04d      	beq.n	800481c <_printf_i+0x1b4>
 8004780:	4616      	mov	r6, r2
 8004782:	fbb5 f1f3 	udiv	r1, r5, r3
 8004786:	fb03 5711 	mls	r7, r3, r1, r5
 800478a:	5dc7      	ldrb	r7, [r0, r7]
 800478c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004790:	462f      	mov	r7, r5
 8004792:	42bb      	cmp	r3, r7
 8004794:	460d      	mov	r5, r1
 8004796:	d9f4      	bls.n	8004782 <_printf_i+0x11a>
 8004798:	2b08      	cmp	r3, #8
 800479a:	d10b      	bne.n	80047b4 <_printf_i+0x14c>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	07df      	lsls	r7, r3, #31
 80047a0:	d508      	bpl.n	80047b4 <_printf_i+0x14c>
 80047a2:	6923      	ldr	r3, [r4, #16]
 80047a4:	6861      	ldr	r1, [r4, #4]
 80047a6:	4299      	cmp	r1, r3
 80047a8:	bfde      	ittt	le
 80047aa:	2330      	movle	r3, #48	; 0x30
 80047ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047b4:	1b92      	subs	r2, r2, r6
 80047b6:	6122      	str	r2, [r4, #16]
 80047b8:	f8cd a000 	str.w	sl, [sp]
 80047bc:	464b      	mov	r3, r9
 80047be:	aa03      	add	r2, sp, #12
 80047c0:	4621      	mov	r1, r4
 80047c2:	4640      	mov	r0, r8
 80047c4:	f7ff fee2 	bl	800458c <_printf_common>
 80047c8:	3001      	adds	r0, #1
 80047ca:	d14c      	bne.n	8004866 <_printf_i+0x1fe>
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	b004      	add	sp, #16
 80047d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d6:	4835      	ldr	r0, [pc, #212]	; (80048ac <_printf_i+0x244>)
 80047d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	680e      	ldr	r6, [r1, #0]
 80047e0:	061f      	lsls	r7, r3, #24
 80047e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80047e6:	600e      	str	r6, [r1, #0]
 80047e8:	d514      	bpl.n	8004814 <_printf_i+0x1ac>
 80047ea:	07d9      	lsls	r1, r3, #31
 80047ec:	bf44      	itt	mi
 80047ee:	f043 0320 	orrmi.w	r3, r3, #32
 80047f2:	6023      	strmi	r3, [r4, #0]
 80047f4:	b91d      	cbnz	r5, 80047fe <_printf_i+0x196>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	f023 0320 	bic.w	r3, r3, #32
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	2310      	movs	r3, #16
 8004800:	e7b0      	b.n	8004764 <_printf_i+0xfc>
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	f043 0320 	orr.w	r3, r3, #32
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	2378      	movs	r3, #120	; 0x78
 800480c:	4828      	ldr	r0, [pc, #160]	; (80048b0 <_printf_i+0x248>)
 800480e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004812:	e7e3      	b.n	80047dc <_printf_i+0x174>
 8004814:	065e      	lsls	r6, r3, #25
 8004816:	bf48      	it	mi
 8004818:	b2ad      	uxthmi	r5, r5
 800481a:	e7e6      	b.n	80047ea <_printf_i+0x182>
 800481c:	4616      	mov	r6, r2
 800481e:	e7bb      	b.n	8004798 <_printf_i+0x130>
 8004820:	680b      	ldr	r3, [r1, #0]
 8004822:	6826      	ldr	r6, [r4, #0]
 8004824:	6960      	ldr	r0, [r4, #20]
 8004826:	1d1d      	adds	r5, r3, #4
 8004828:	600d      	str	r5, [r1, #0]
 800482a:	0635      	lsls	r5, r6, #24
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	d501      	bpl.n	8004834 <_printf_i+0x1cc>
 8004830:	6018      	str	r0, [r3, #0]
 8004832:	e002      	b.n	800483a <_printf_i+0x1d2>
 8004834:	0671      	lsls	r1, r6, #25
 8004836:	d5fb      	bpl.n	8004830 <_printf_i+0x1c8>
 8004838:	8018      	strh	r0, [r3, #0]
 800483a:	2300      	movs	r3, #0
 800483c:	6123      	str	r3, [r4, #16]
 800483e:	4616      	mov	r6, r2
 8004840:	e7ba      	b.n	80047b8 <_printf_i+0x150>
 8004842:	680b      	ldr	r3, [r1, #0]
 8004844:	1d1a      	adds	r2, r3, #4
 8004846:	600a      	str	r2, [r1, #0]
 8004848:	681e      	ldr	r6, [r3, #0]
 800484a:	6862      	ldr	r2, [r4, #4]
 800484c:	2100      	movs	r1, #0
 800484e:	4630      	mov	r0, r6
 8004850:	f7fb fce6 	bl	8000220 <memchr>
 8004854:	b108      	cbz	r0, 800485a <_printf_i+0x1f2>
 8004856:	1b80      	subs	r0, r0, r6
 8004858:	6060      	str	r0, [r4, #4]
 800485a:	6863      	ldr	r3, [r4, #4]
 800485c:	6123      	str	r3, [r4, #16]
 800485e:	2300      	movs	r3, #0
 8004860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004864:	e7a8      	b.n	80047b8 <_printf_i+0x150>
 8004866:	6923      	ldr	r3, [r4, #16]
 8004868:	4632      	mov	r2, r6
 800486a:	4649      	mov	r1, r9
 800486c:	4640      	mov	r0, r8
 800486e:	47d0      	blx	sl
 8004870:	3001      	adds	r0, #1
 8004872:	d0ab      	beq.n	80047cc <_printf_i+0x164>
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	079b      	lsls	r3, r3, #30
 8004878:	d413      	bmi.n	80048a2 <_printf_i+0x23a>
 800487a:	68e0      	ldr	r0, [r4, #12]
 800487c:	9b03      	ldr	r3, [sp, #12]
 800487e:	4298      	cmp	r0, r3
 8004880:	bfb8      	it	lt
 8004882:	4618      	movlt	r0, r3
 8004884:	e7a4      	b.n	80047d0 <_printf_i+0x168>
 8004886:	2301      	movs	r3, #1
 8004888:	4632      	mov	r2, r6
 800488a:	4649      	mov	r1, r9
 800488c:	4640      	mov	r0, r8
 800488e:	47d0      	blx	sl
 8004890:	3001      	adds	r0, #1
 8004892:	d09b      	beq.n	80047cc <_printf_i+0x164>
 8004894:	3501      	adds	r5, #1
 8004896:	68e3      	ldr	r3, [r4, #12]
 8004898:	9903      	ldr	r1, [sp, #12]
 800489a:	1a5b      	subs	r3, r3, r1
 800489c:	42ab      	cmp	r3, r5
 800489e:	dcf2      	bgt.n	8004886 <_printf_i+0x21e>
 80048a0:	e7eb      	b.n	800487a <_printf_i+0x212>
 80048a2:	2500      	movs	r5, #0
 80048a4:	f104 0619 	add.w	r6, r4, #25
 80048a8:	e7f5      	b.n	8004896 <_printf_i+0x22e>
 80048aa:	bf00      	nop
 80048ac:	08006efa 	.word	0x08006efa
 80048b0:	08006f0b 	.word	0x08006f0b

080048b4 <_vsiprintf_r>:
 80048b4:	b500      	push	{lr}
 80048b6:	b09b      	sub	sp, #108	; 0x6c
 80048b8:	9100      	str	r1, [sp, #0]
 80048ba:	9104      	str	r1, [sp, #16]
 80048bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048c0:	9105      	str	r1, [sp, #20]
 80048c2:	9102      	str	r1, [sp, #8]
 80048c4:	4905      	ldr	r1, [pc, #20]	; (80048dc <_vsiprintf_r+0x28>)
 80048c6:	9103      	str	r1, [sp, #12]
 80048c8:	4669      	mov	r1, sp
 80048ca:	f001 fb3b 	bl	8005f44 <_svfiprintf_r>
 80048ce:	9b00      	ldr	r3, [sp, #0]
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	b01b      	add	sp, #108	; 0x6c
 80048d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80048da:	bf00      	nop
 80048dc:	ffff0208 	.word	0xffff0208

080048e0 <vsiprintf>:
 80048e0:	4613      	mov	r3, r2
 80048e2:	460a      	mov	r2, r1
 80048e4:	4601      	mov	r1, r0
 80048e6:	4802      	ldr	r0, [pc, #8]	; (80048f0 <vsiprintf+0x10>)
 80048e8:	6800      	ldr	r0, [r0, #0]
 80048ea:	f7ff bfe3 	b.w	80048b4 <_vsiprintf_r>
 80048ee:	bf00      	nop
 80048f0:	2000000c 	.word	0x2000000c

080048f4 <quorem>:
 80048f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f8:	6903      	ldr	r3, [r0, #16]
 80048fa:	690c      	ldr	r4, [r1, #16]
 80048fc:	42a3      	cmp	r3, r4
 80048fe:	4607      	mov	r7, r0
 8004900:	f2c0 8081 	blt.w	8004a06 <quorem+0x112>
 8004904:	3c01      	subs	r4, #1
 8004906:	f101 0814 	add.w	r8, r1, #20
 800490a:	f100 0514 	add.w	r5, r0, #20
 800490e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800491c:	3301      	adds	r3, #1
 800491e:	429a      	cmp	r2, r3
 8004920:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004924:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004928:	fbb2 f6f3 	udiv	r6, r2, r3
 800492c:	d331      	bcc.n	8004992 <quorem+0x9e>
 800492e:	f04f 0e00 	mov.w	lr, #0
 8004932:	4640      	mov	r0, r8
 8004934:	46ac      	mov	ip, r5
 8004936:	46f2      	mov	sl, lr
 8004938:	f850 2b04 	ldr.w	r2, [r0], #4
 800493c:	b293      	uxth	r3, r2
 800493e:	fb06 e303 	mla	r3, r6, r3, lr
 8004942:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004946:	b29b      	uxth	r3, r3
 8004948:	ebaa 0303 	sub.w	r3, sl, r3
 800494c:	0c12      	lsrs	r2, r2, #16
 800494e:	f8dc a000 	ldr.w	sl, [ip]
 8004952:	fb06 e202 	mla	r2, r6, r2, lr
 8004956:	fa13 f38a 	uxtah	r3, r3, sl
 800495a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800495e:	fa1f fa82 	uxth.w	sl, r2
 8004962:	f8dc 2000 	ldr.w	r2, [ip]
 8004966:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800496a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800496e:	b29b      	uxth	r3, r3
 8004970:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004974:	4581      	cmp	r9, r0
 8004976:	f84c 3b04 	str.w	r3, [ip], #4
 800497a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800497e:	d2db      	bcs.n	8004938 <quorem+0x44>
 8004980:	f855 300b 	ldr.w	r3, [r5, fp]
 8004984:	b92b      	cbnz	r3, 8004992 <quorem+0x9e>
 8004986:	9b01      	ldr	r3, [sp, #4]
 8004988:	3b04      	subs	r3, #4
 800498a:	429d      	cmp	r5, r3
 800498c:	461a      	mov	r2, r3
 800498e:	d32e      	bcc.n	80049ee <quorem+0xfa>
 8004990:	613c      	str	r4, [r7, #16]
 8004992:	4638      	mov	r0, r7
 8004994:	f001 f8c0 	bl	8005b18 <__mcmp>
 8004998:	2800      	cmp	r0, #0
 800499a:	db24      	blt.n	80049e6 <quorem+0xf2>
 800499c:	3601      	adds	r6, #1
 800499e:	4628      	mov	r0, r5
 80049a0:	f04f 0c00 	mov.w	ip, #0
 80049a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80049a8:	f8d0 e000 	ldr.w	lr, [r0]
 80049ac:	b293      	uxth	r3, r2
 80049ae:	ebac 0303 	sub.w	r3, ip, r3
 80049b2:	0c12      	lsrs	r2, r2, #16
 80049b4:	fa13 f38e 	uxtah	r3, r3, lr
 80049b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80049bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049c6:	45c1      	cmp	r9, r8
 80049c8:	f840 3b04 	str.w	r3, [r0], #4
 80049cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80049d0:	d2e8      	bcs.n	80049a4 <quorem+0xb0>
 80049d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049da:	b922      	cbnz	r2, 80049e6 <quorem+0xf2>
 80049dc:	3b04      	subs	r3, #4
 80049de:	429d      	cmp	r5, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	d30a      	bcc.n	80049fa <quorem+0x106>
 80049e4:	613c      	str	r4, [r7, #16]
 80049e6:	4630      	mov	r0, r6
 80049e8:	b003      	add	sp, #12
 80049ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	3b04      	subs	r3, #4
 80049f2:	2a00      	cmp	r2, #0
 80049f4:	d1cc      	bne.n	8004990 <quorem+0x9c>
 80049f6:	3c01      	subs	r4, #1
 80049f8:	e7c7      	b.n	800498a <quorem+0x96>
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	3b04      	subs	r3, #4
 80049fe:	2a00      	cmp	r2, #0
 8004a00:	d1f0      	bne.n	80049e4 <quorem+0xf0>
 8004a02:	3c01      	subs	r4, #1
 8004a04:	e7eb      	b.n	80049de <quorem+0xea>
 8004a06:	2000      	movs	r0, #0
 8004a08:	e7ee      	b.n	80049e8 <quorem+0xf4>
 8004a0a:	0000      	movs	r0, r0
 8004a0c:	0000      	movs	r0, r0
	...

08004a10 <_dtoa_r>:
 8004a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a14:	ed2d 8b02 	vpush	{d8}
 8004a18:	ec57 6b10 	vmov	r6, r7, d0
 8004a1c:	b095      	sub	sp, #84	; 0x54
 8004a1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004a24:	9105      	str	r1, [sp, #20]
 8004a26:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a30:	b975      	cbnz	r5, 8004a50 <_dtoa_r+0x40>
 8004a32:	2010      	movs	r0, #16
 8004a34:	f000 fddc 	bl	80055f0 <malloc>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6260      	str	r0, [r4, #36]	; 0x24
 8004a3c:	b920      	cbnz	r0, 8004a48 <_dtoa_r+0x38>
 8004a3e:	4bb2      	ldr	r3, [pc, #712]	; (8004d08 <_dtoa_r+0x2f8>)
 8004a40:	21ea      	movs	r1, #234	; 0xea
 8004a42:	48b2      	ldr	r0, [pc, #712]	; (8004d0c <_dtoa_r+0x2fc>)
 8004a44:	f001 fb8e 	bl	8006164 <__assert_func>
 8004a48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004a4c:	6005      	str	r5, [r0, #0]
 8004a4e:	60c5      	str	r5, [r0, #12]
 8004a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a52:	6819      	ldr	r1, [r3, #0]
 8004a54:	b151      	cbz	r1, 8004a6c <_dtoa_r+0x5c>
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	604a      	str	r2, [r1, #4]
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	4093      	lsls	r3, r2
 8004a5e:	608b      	str	r3, [r1, #8]
 8004a60:	4620      	mov	r0, r4
 8004a62:	f000 fe1b 	bl	800569c <_Bfree>
 8004a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	1e3b      	subs	r3, r7, #0
 8004a6e:	bfb9      	ittee	lt
 8004a70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a74:	9303      	strlt	r3, [sp, #12]
 8004a76:	2300      	movge	r3, #0
 8004a78:	f8c8 3000 	strge.w	r3, [r8]
 8004a7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004a80:	4ba3      	ldr	r3, [pc, #652]	; (8004d10 <_dtoa_r+0x300>)
 8004a82:	bfbc      	itt	lt
 8004a84:	2201      	movlt	r2, #1
 8004a86:	f8c8 2000 	strlt.w	r2, [r8]
 8004a8a:	ea33 0309 	bics.w	r3, r3, r9
 8004a8e:	d11b      	bne.n	8004ac8 <_dtoa_r+0xb8>
 8004a90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a92:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a9c:	4333      	orrs	r3, r6
 8004a9e:	f000 857a 	beq.w	8005596 <_dtoa_r+0xb86>
 8004aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004aa4:	b963      	cbnz	r3, 8004ac0 <_dtoa_r+0xb0>
 8004aa6:	4b9b      	ldr	r3, [pc, #620]	; (8004d14 <_dtoa_r+0x304>)
 8004aa8:	e024      	b.n	8004af4 <_dtoa_r+0xe4>
 8004aaa:	4b9b      	ldr	r3, [pc, #620]	; (8004d18 <_dtoa_r+0x308>)
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	3308      	adds	r3, #8
 8004ab0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	9800      	ldr	r0, [sp, #0]
 8004ab6:	b015      	add	sp, #84	; 0x54
 8004ab8:	ecbd 8b02 	vpop	{d8}
 8004abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac0:	4b94      	ldr	r3, [pc, #592]	; (8004d14 <_dtoa_r+0x304>)
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	3303      	adds	r3, #3
 8004ac6:	e7f3      	b.n	8004ab0 <_dtoa_r+0xa0>
 8004ac8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004acc:	2200      	movs	r2, #0
 8004ace:	ec51 0b17 	vmov	r0, r1, d7
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004ad8:	f7fc f816 	bl	8000b08 <__aeabi_dcmpeq>
 8004adc:	4680      	mov	r8, r0
 8004ade:	b158      	cbz	r0, 8004af8 <_dtoa_r+0xe8>
 8004ae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8551 	beq.w	8005590 <_dtoa_r+0xb80>
 8004aee:	488b      	ldr	r0, [pc, #556]	; (8004d1c <_dtoa_r+0x30c>)
 8004af0:	6018      	str	r0, [r3, #0]
 8004af2:	1e43      	subs	r3, r0, #1
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	e7dd      	b.n	8004ab4 <_dtoa_r+0xa4>
 8004af8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004afc:	aa12      	add	r2, sp, #72	; 0x48
 8004afe:	a913      	add	r1, sp, #76	; 0x4c
 8004b00:	4620      	mov	r0, r4
 8004b02:	f001 f8ad 	bl	8005c60 <__d2b>
 8004b06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004b0a:	4683      	mov	fp, r0
 8004b0c:	2d00      	cmp	r5, #0
 8004b0e:	d07c      	beq.n	8004c0a <_dtoa_r+0x1fa>
 8004b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004b16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004b1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004b22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004b26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b2a:	4b7d      	ldr	r3, [pc, #500]	; (8004d20 <_dtoa_r+0x310>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	4630      	mov	r0, r6
 8004b30:	4639      	mov	r1, r7
 8004b32:	f7fb fbc9 	bl	80002c8 <__aeabi_dsub>
 8004b36:	a36e      	add	r3, pc, #440	; (adr r3, 8004cf0 <_dtoa_r+0x2e0>)
 8004b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3c:	f7fb fd7c 	bl	8000638 <__aeabi_dmul>
 8004b40:	a36d      	add	r3, pc, #436	; (adr r3, 8004cf8 <_dtoa_r+0x2e8>)
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	f7fb fbc1 	bl	80002cc <__adddf3>
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	460f      	mov	r7, r1
 8004b50:	f7fb fd08 	bl	8000564 <__aeabi_i2d>
 8004b54:	a36a      	add	r3, pc, #424	; (adr r3, 8004d00 <_dtoa_r+0x2f0>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f7fb fd6d 	bl	8000638 <__aeabi_dmul>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4630      	mov	r0, r6
 8004b64:	4639      	mov	r1, r7
 8004b66:	f7fb fbb1 	bl	80002cc <__adddf3>
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	460f      	mov	r7, r1
 8004b6e:	f7fc f813 	bl	8000b98 <__aeabi_d2iz>
 8004b72:	2200      	movs	r2, #0
 8004b74:	4682      	mov	sl, r0
 8004b76:	2300      	movs	r3, #0
 8004b78:	4630      	mov	r0, r6
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	f7fb ffce 	bl	8000b1c <__aeabi_dcmplt>
 8004b80:	b148      	cbz	r0, 8004b96 <_dtoa_r+0x186>
 8004b82:	4650      	mov	r0, sl
 8004b84:	f7fb fcee 	bl	8000564 <__aeabi_i2d>
 8004b88:	4632      	mov	r2, r6
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	f7fb ffbc 	bl	8000b08 <__aeabi_dcmpeq>
 8004b90:	b908      	cbnz	r0, 8004b96 <_dtoa_r+0x186>
 8004b92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b96:	f1ba 0f16 	cmp.w	sl, #22
 8004b9a:	d854      	bhi.n	8004c46 <_dtoa_r+0x236>
 8004b9c:	4b61      	ldr	r3, [pc, #388]	; (8004d24 <_dtoa_r+0x314>)
 8004b9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004baa:	f7fb ffb7 	bl	8000b1c <__aeabi_dcmplt>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d04b      	beq.n	8004c4a <_dtoa_r+0x23a>
 8004bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	930e      	str	r3, [sp, #56]	; 0x38
 8004bba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004bbc:	1b5d      	subs	r5, r3, r5
 8004bbe:	1e6b      	subs	r3, r5, #1
 8004bc0:	9304      	str	r3, [sp, #16]
 8004bc2:	bf43      	ittte	mi
 8004bc4:	2300      	movmi	r3, #0
 8004bc6:	f1c5 0801 	rsbmi	r8, r5, #1
 8004bca:	9304      	strmi	r3, [sp, #16]
 8004bcc:	f04f 0800 	movpl.w	r8, #0
 8004bd0:	f1ba 0f00 	cmp.w	sl, #0
 8004bd4:	db3b      	blt.n	8004c4e <_dtoa_r+0x23e>
 8004bd6:	9b04      	ldr	r3, [sp, #16]
 8004bd8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004bdc:	4453      	add	r3, sl
 8004bde:	9304      	str	r3, [sp, #16]
 8004be0:	2300      	movs	r3, #0
 8004be2:	9306      	str	r3, [sp, #24]
 8004be4:	9b05      	ldr	r3, [sp, #20]
 8004be6:	2b09      	cmp	r3, #9
 8004be8:	d869      	bhi.n	8004cbe <_dtoa_r+0x2ae>
 8004bea:	2b05      	cmp	r3, #5
 8004bec:	bfc4      	itt	gt
 8004bee:	3b04      	subgt	r3, #4
 8004bf0:	9305      	strgt	r3, [sp, #20]
 8004bf2:	9b05      	ldr	r3, [sp, #20]
 8004bf4:	f1a3 0302 	sub.w	r3, r3, #2
 8004bf8:	bfcc      	ite	gt
 8004bfa:	2500      	movgt	r5, #0
 8004bfc:	2501      	movle	r5, #1
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d869      	bhi.n	8004cd6 <_dtoa_r+0x2c6>
 8004c02:	e8df f003 	tbb	[pc, r3]
 8004c06:	4e2c      	.short	0x4e2c
 8004c08:	5a4c      	.short	0x5a4c
 8004c0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004c0e:	441d      	add	r5, r3
 8004c10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	bfc1      	itttt	gt
 8004c18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004c20:	fa09 f303 	lslgt.w	r3, r9, r3
 8004c24:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c28:	bfda      	itte	le
 8004c2a:	f1c3 0320 	rsble	r3, r3, #32
 8004c2e:	fa06 f003 	lslle.w	r0, r6, r3
 8004c32:	4318      	orrgt	r0, r3
 8004c34:	f7fb fc86 	bl	8000544 <__aeabi_ui2d>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004c40:	3d01      	subs	r5, #1
 8004c42:	9310      	str	r3, [sp, #64]	; 0x40
 8004c44:	e771      	b.n	8004b2a <_dtoa_r+0x11a>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e7b6      	b.n	8004bb8 <_dtoa_r+0x1a8>
 8004c4a:	900e      	str	r0, [sp, #56]	; 0x38
 8004c4c:	e7b5      	b.n	8004bba <_dtoa_r+0x1aa>
 8004c4e:	f1ca 0300 	rsb	r3, sl, #0
 8004c52:	9306      	str	r3, [sp, #24]
 8004c54:	2300      	movs	r3, #0
 8004c56:	eba8 080a 	sub.w	r8, r8, sl
 8004c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8004c5c:	e7c2      	b.n	8004be4 <_dtoa_r+0x1d4>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	9308      	str	r3, [sp, #32]
 8004c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	dc39      	bgt.n	8004cdc <_dtoa_r+0x2cc>
 8004c68:	f04f 0901 	mov.w	r9, #1
 8004c6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c70:	464b      	mov	r3, r9
 8004c72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004c76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c78:	2200      	movs	r2, #0
 8004c7a:	6042      	str	r2, [r0, #4]
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	f102 0614 	add.w	r6, r2, #20
 8004c82:	429e      	cmp	r6, r3
 8004c84:	6841      	ldr	r1, [r0, #4]
 8004c86:	d92f      	bls.n	8004ce8 <_dtoa_r+0x2d8>
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f000 fcc7 	bl	800561c <_Balloc>
 8004c8e:	9000      	str	r0, [sp, #0]
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d14b      	bne.n	8004d2c <_dtoa_r+0x31c>
 8004c94:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <_dtoa_r+0x318>)
 8004c96:	4602      	mov	r2, r0
 8004c98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c9c:	e6d1      	b.n	8004a42 <_dtoa_r+0x32>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e7de      	b.n	8004c60 <_dtoa_r+0x250>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9308      	str	r3, [sp, #32]
 8004ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca8:	eb0a 0903 	add.w	r9, sl, r3
 8004cac:	f109 0301 	add.w	r3, r9, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	9301      	str	r3, [sp, #4]
 8004cb4:	bfb8      	it	lt
 8004cb6:	2301      	movlt	r3, #1
 8004cb8:	e7dd      	b.n	8004c76 <_dtoa_r+0x266>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e7f2      	b.n	8004ca4 <_dtoa_r+0x294>
 8004cbe:	2501      	movs	r5, #1
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9305      	str	r3, [sp, #20]
 8004cc4:	9508      	str	r5, [sp, #32]
 8004cc6:	f04f 39ff 	mov.w	r9, #4294967295
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004cd0:	2312      	movs	r3, #18
 8004cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8004cd4:	e7cf      	b.n	8004c76 <_dtoa_r+0x266>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	9308      	str	r3, [sp, #32]
 8004cda:	e7f4      	b.n	8004cc6 <_dtoa_r+0x2b6>
 8004cdc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004ce0:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	e7c6      	b.n	8004c76 <_dtoa_r+0x266>
 8004ce8:	3101      	adds	r1, #1
 8004cea:	6041      	str	r1, [r0, #4]
 8004cec:	0052      	lsls	r2, r2, #1
 8004cee:	e7c6      	b.n	8004c7e <_dtoa_r+0x26e>
 8004cf0:	636f4361 	.word	0x636f4361
 8004cf4:	3fd287a7 	.word	0x3fd287a7
 8004cf8:	8b60c8b3 	.word	0x8b60c8b3
 8004cfc:	3fc68a28 	.word	0x3fc68a28
 8004d00:	509f79fb 	.word	0x509f79fb
 8004d04:	3fd34413 	.word	0x3fd34413
 8004d08:	08006f29 	.word	0x08006f29
 8004d0c:	08006f40 	.word	0x08006f40
 8004d10:	7ff00000 	.word	0x7ff00000
 8004d14:	08006f25 	.word	0x08006f25
 8004d18:	08006f1c 	.word	0x08006f1c
 8004d1c:	08006ef9 	.word	0x08006ef9
 8004d20:	3ff80000 	.word	0x3ff80000
 8004d24:	08007038 	.word	0x08007038
 8004d28:	08006f9f 	.word	0x08006f9f
 8004d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d2e:	9a00      	ldr	r2, [sp, #0]
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	9b01      	ldr	r3, [sp, #4]
 8004d34:	2b0e      	cmp	r3, #14
 8004d36:	f200 80ad 	bhi.w	8004e94 <_dtoa_r+0x484>
 8004d3a:	2d00      	cmp	r5, #0
 8004d3c:	f000 80aa 	beq.w	8004e94 <_dtoa_r+0x484>
 8004d40:	f1ba 0f00 	cmp.w	sl, #0
 8004d44:	dd36      	ble.n	8004db4 <_dtoa_r+0x3a4>
 8004d46:	4ac3      	ldr	r2, [pc, #780]	; (8005054 <_dtoa_r+0x644>)
 8004d48:	f00a 030f 	and.w	r3, sl, #15
 8004d4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d50:	ed93 7b00 	vldr	d7, [r3]
 8004d54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004d58:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004d5c:	eeb0 8a47 	vmov.f32	s16, s14
 8004d60:	eef0 8a67 	vmov.f32	s17, s15
 8004d64:	d016      	beq.n	8004d94 <_dtoa_r+0x384>
 8004d66:	4bbc      	ldr	r3, [pc, #752]	; (8005058 <_dtoa_r+0x648>)
 8004d68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d70:	f7fb fd8c 	bl	800088c <__aeabi_ddiv>
 8004d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d78:	f007 070f 	and.w	r7, r7, #15
 8004d7c:	2503      	movs	r5, #3
 8004d7e:	4eb6      	ldr	r6, [pc, #728]	; (8005058 <_dtoa_r+0x648>)
 8004d80:	b957      	cbnz	r7, 8004d98 <_dtoa_r+0x388>
 8004d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d86:	ec53 2b18 	vmov	r2, r3, d8
 8004d8a:	f7fb fd7f 	bl	800088c <__aeabi_ddiv>
 8004d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d92:	e029      	b.n	8004de8 <_dtoa_r+0x3d8>
 8004d94:	2502      	movs	r5, #2
 8004d96:	e7f2      	b.n	8004d7e <_dtoa_r+0x36e>
 8004d98:	07f9      	lsls	r1, r7, #31
 8004d9a:	d508      	bpl.n	8004dae <_dtoa_r+0x39e>
 8004d9c:	ec51 0b18 	vmov	r0, r1, d8
 8004da0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004da4:	f7fb fc48 	bl	8000638 <__aeabi_dmul>
 8004da8:	ec41 0b18 	vmov	d8, r0, r1
 8004dac:	3501      	adds	r5, #1
 8004dae:	107f      	asrs	r7, r7, #1
 8004db0:	3608      	adds	r6, #8
 8004db2:	e7e5      	b.n	8004d80 <_dtoa_r+0x370>
 8004db4:	f000 80a6 	beq.w	8004f04 <_dtoa_r+0x4f4>
 8004db8:	f1ca 0600 	rsb	r6, sl, #0
 8004dbc:	4ba5      	ldr	r3, [pc, #660]	; (8005054 <_dtoa_r+0x644>)
 8004dbe:	4fa6      	ldr	r7, [pc, #664]	; (8005058 <_dtoa_r+0x648>)
 8004dc0:	f006 020f 	and.w	r2, r6, #15
 8004dc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dd0:	f7fb fc32 	bl	8000638 <__aeabi_dmul>
 8004dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dd8:	1136      	asrs	r6, r6, #4
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2502      	movs	r5, #2
 8004dde:	2e00      	cmp	r6, #0
 8004de0:	f040 8085 	bne.w	8004eee <_dtoa_r+0x4de>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1d2      	bne.n	8004d8e <_dtoa_r+0x37e>
 8004de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 808c 	beq.w	8004f08 <_dtoa_r+0x4f8>
 8004df0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004df4:	4b99      	ldr	r3, [pc, #612]	; (800505c <_dtoa_r+0x64c>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	4630      	mov	r0, r6
 8004dfa:	4639      	mov	r1, r7
 8004dfc:	f7fb fe8e 	bl	8000b1c <__aeabi_dcmplt>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	f000 8081 	beq.w	8004f08 <_dtoa_r+0x4f8>
 8004e06:	9b01      	ldr	r3, [sp, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d07d      	beq.n	8004f08 <_dtoa_r+0x4f8>
 8004e0c:	f1b9 0f00 	cmp.w	r9, #0
 8004e10:	dd3c      	ble.n	8004e8c <_dtoa_r+0x47c>
 8004e12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004e16:	9307      	str	r3, [sp, #28]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	4b91      	ldr	r3, [pc, #580]	; (8005060 <_dtoa_r+0x650>)
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	4639      	mov	r1, r7
 8004e20:	f7fb fc0a 	bl	8000638 <__aeabi_dmul>
 8004e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e28:	3501      	adds	r5, #1
 8004e2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004e2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e32:	4628      	mov	r0, r5
 8004e34:	f7fb fb96 	bl	8000564 <__aeabi_i2d>
 8004e38:	4632      	mov	r2, r6
 8004e3a:	463b      	mov	r3, r7
 8004e3c:	f7fb fbfc 	bl	8000638 <__aeabi_dmul>
 8004e40:	4b88      	ldr	r3, [pc, #544]	; (8005064 <_dtoa_r+0x654>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	f7fb fa42 	bl	80002cc <__adddf3>
 8004e48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e50:	9303      	str	r3, [sp, #12]
 8004e52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d15c      	bne.n	8004f12 <_dtoa_r+0x502>
 8004e58:	4b83      	ldr	r3, [pc, #524]	; (8005068 <_dtoa_r+0x658>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	4639      	mov	r1, r7
 8004e60:	f7fb fa32 	bl	80002c8 <__aeabi_dsub>
 8004e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e68:	4606      	mov	r6, r0
 8004e6a:	460f      	mov	r7, r1
 8004e6c:	f7fb fe74 	bl	8000b58 <__aeabi_dcmpgt>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	f040 8296 	bne.w	80053a2 <_dtoa_r+0x992>
 8004e76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e80:	4639      	mov	r1, r7
 8004e82:	f7fb fe4b 	bl	8000b1c <__aeabi_dcmplt>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	f040 8288 	bne.w	800539c <_dtoa_r+0x98c>
 8004e8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f2c0 8158 	blt.w	800514c <_dtoa_r+0x73c>
 8004e9c:	f1ba 0f0e 	cmp.w	sl, #14
 8004ea0:	f300 8154 	bgt.w	800514c <_dtoa_r+0x73c>
 8004ea4:	4b6b      	ldr	r3, [pc, #428]	; (8005054 <_dtoa_r+0x644>)
 8004ea6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004eaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f280 80e3 	bge.w	800507c <_dtoa_r+0x66c>
 8004eb6:	9b01      	ldr	r3, [sp, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f300 80df 	bgt.w	800507c <_dtoa_r+0x66c>
 8004ebe:	f040 826d 	bne.w	800539c <_dtoa_r+0x98c>
 8004ec2:	4b69      	ldr	r3, [pc, #420]	; (8005068 <_dtoa_r+0x658>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	4649      	mov	r1, r9
 8004eca:	f7fb fbb5 	bl	8000638 <__aeabi_dmul>
 8004ece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ed2:	f7fb fe37 	bl	8000b44 <__aeabi_dcmpge>
 8004ed6:	9e01      	ldr	r6, [sp, #4]
 8004ed8:	4637      	mov	r7, r6
 8004eda:	2800      	cmp	r0, #0
 8004edc:	f040 8243 	bne.w	8005366 <_dtoa_r+0x956>
 8004ee0:	9d00      	ldr	r5, [sp, #0]
 8004ee2:	2331      	movs	r3, #49	; 0x31
 8004ee4:	f805 3b01 	strb.w	r3, [r5], #1
 8004ee8:	f10a 0a01 	add.w	sl, sl, #1
 8004eec:	e23f      	b.n	800536e <_dtoa_r+0x95e>
 8004eee:	07f2      	lsls	r2, r6, #31
 8004ef0:	d505      	bpl.n	8004efe <_dtoa_r+0x4ee>
 8004ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ef6:	f7fb fb9f 	bl	8000638 <__aeabi_dmul>
 8004efa:	3501      	adds	r5, #1
 8004efc:	2301      	movs	r3, #1
 8004efe:	1076      	asrs	r6, r6, #1
 8004f00:	3708      	adds	r7, #8
 8004f02:	e76c      	b.n	8004dde <_dtoa_r+0x3ce>
 8004f04:	2502      	movs	r5, #2
 8004f06:	e76f      	b.n	8004de8 <_dtoa_r+0x3d8>
 8004f08:	9b01      	ldr	r3, [sp, #4]
 8004f0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8004f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f10:	e78d      	b.n	8004e2e <_dtoa_r+0x41e>
 8004f12:	9900      	ldr	r1, [sp, #0]
 8004f14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004f16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f18:	4b4e      	ldr	r3, [pc, #312]	; (8005054 <_dtoa_r+0x644>)
 8004f1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f1e:	4401      	add	r1, r0
 8004f20:	9102      	str	r1, [sp, #8]
 8004f22:	9908      	ldr	r1, [sp, #32]
 8004f24:	eeb0 8a47 	vmov.f32	s16, s14
 8004f28:	eef0 8a67 	vmov.f32	s17, s15
 8004f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f34:	2900      	cmp	r1, #0
 8004f36:	d045      	beq.n	8004fc4 <_dtoa_r+0x5b4>
 8004f38:	494c      	ldr	r1, [pc, #304]	; (800506c <_dtoa_r+0x65c>)
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	f7fb fca6 	bl	800088c <__aeabi_ddiv>
 8004f40:	ec53 2b18 	vmov	r2, r3, d8
 8004f44:	f7fb f9c0 	bl	80002c8 <__aeabi_dsub>
 8004f48:	9d00      	ldr	r5, [sp, #0]
 8004f4a:	ec41 0b18 	vmov	d8, r0, r1
 8004f4e:	4639      	mov	r1, r7
 8004f50:	4630      	mov	r0, r6
 8004f52:	f7fb fe21 	bl	8000b98 <__aeabi_d2iz>
 8004f56:	900c      	str	r0, [sp, #48]	; 0x30
 8004f58:	f7fb fb04 	bl	8000564 <__aeabi_i2d>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4630      	mov	r0, r6
 8004f62:	4639      	mov	r1, r7
 8004f64:	f7fb f9b0 	bl	80002c8 <__aeabi_dsub>
 8004f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f6a:	3330      	adds	r3, #48	; 0x30
 8004f6c:	f805 3b01 	strb.w	r3, [r5], #1
 8004f70:	ec53 2b18 	vmov	r2, r3, d8
 8004f74:	4606      	mov	r6, r0
 8004f76:	460f      	mov	r7, r1
 8004f78:	f7fb fdd0 	bl	8000b1c <__aeabi_dcmplt>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d165      	bne.n	800504c <_dtoa_r+0x63c>
 8004f80:	4632      	mov	r2, r6
 8004f82:	463b      	mov	r3, r7
 8004f84:	4935      	ldr	r1, [pc, #212]	; (800505c <_dtoa_r+0x64c>)
 8004f86:	2000      	movs	r0, #0
 8004f88:	f7fb f99e 	bl	80002c8 <__aeabi_dsub>
 8004f8c:	ec53 2b18 	vmov	r2, r3, d8
 8004f90:	f7fb fdc4 	bl	8000b1c <__aeabi_dcmplt>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	f040 80b9 	bne.w	800510c <_dtoa_r+0x6fc>
 8004f9a:	9b02      	ldr	r3, [sp, #8]
 8004f9c:	429d      	cmp	r5, r3
 8004f9e:	f43f af75 	beq.w	8004e8c <_dtoa_r+0x47c>
 8004fa2:	4b2f      	ldr	r3, [pc, #188]	; (8005060 <_dtoa_r+0x650>)
 8004fa4:	ec51 0b18 	vmov	r0, r1, d8
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f7fb fb45 	bl	8000638 <__aeabi_dmul>
 8004fae:	4b2c      	ldr	r3, [pc, #176]	; (8005060 <_dtoa_r+0x650>)
 8004fb0:	ec41 0b18 	vmov	d8, r0, r1
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	4639      	mov	r1, r7
 8004fba:	f7fb fb3d 	bl	8000638 <__aeabi_dmul>
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	460f      	mov	r7, r1
 8004fc2:	e7c4      	b.n	8004f4e <_dtoa_r+0x53e>
 8004fc4:	ec51 0b17 	vmov	r0, r1, d7
 8004fc8:	f7fb fb36 	bl	8000638 <__aeabi_dmul>
 8004fcc:	9b02      	ldr	r3, [sp, #8]
 8004fce:	9d00      	ldr	r5, [sp, #0]
 8004fd0:	930c      	str	r3, [sp, #48]	; 0x30
 8004fd2:	ec41 0b18 	vmov	d8, r0, r1
 8004fd6:	4639      	mov	r1, r7
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f7fb fddd 	bl	8000b98 <__aeabi_d2iz>
 8004fde:	9011      	str	r0, [sp, #68]	; 0x44
 8004fe0:	f7fb fac0 	bl	8000564 <__aeabi_i2d>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4630      	mov	r0, r6
 8004fea:	4639      	mov	r1, r7
 8004fec:	f7fb f96c 	bl	80002c8 <__aeabi_dsub>
 8004ff0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ff2:	3330      	adds	r3, #48	; 0x30
 8004ff4:	f805 3b01 	strb.w	r3, [r5], #1
 8004ff8:	9b02      	ldr	r3, [sp, #8]
 8004ffa:	429d      	cmp	r5, r3
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	460f      	mov	r7, r1
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	d134      	bne.n	8005070 <_dtoa_r+0x660>
 8005006:	4b19      	ldr	r3, [pc, #100]	; (800506c <_dtoa_r+0x65c>)
 8005008:	ec51 0b18 	vmov	r0, r1, d8
 800500c:	f7fb f95e 	bl	80002cc <__adddf3>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4630      	mov	r0, r6
 8005016:	4639      	mov	r1, r7
 8005018:	f7fb fd9e 	bl	8000b58 <__aeabi_dcmpgt>
 800501c:	2800      	cmp	r0, #0
 800501e:	d175      	bne.n	800510c <_dtoa_r+0x6fc>
 8005020:	ec53 2b18 	vmov	r2, r3, d8
 8005024:	4911      	ldr	r1, [pc, #68]	; (800506c <_dtoa_r+0x65c>)
 8005026:	2000      	movs	r0, #0
 8005028:	f7fb f94e 	bl	80002c8 <__aeabi_dsub>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4630      	mov	r0, r6
 8005032:	4639      	mov	r1, r7
 8005034:	f7fb fd72 	bl	8000b1c <__aeabi_dcmplt>
 8005038:	2800      	cmp	r0, #0
 800503a:	f43f af27 	beq.w	8004e8c <_dtoa_r+0x47c>
 800503e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005040:	1e6b      	subs	r3, r5, #1
 8005042:	930c      	str	r3, [sp, #48]	; 0x30
 8005044:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005048:	2b30      	cmp	r3, #48	; 0x30
 800504a:	d0f8      	beq.n	800503e <_dtoa_r+0x62e>
 800504c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005050:	e04a      	b.n	80050e8 <_dtoa_r+0x6d8>
 8005052:	bf00      	nop
 8005054:	08007038 	.word	0x08007038
 8005058:	08007010 	.word	0x08007010
 800505c:	3ff00000 	.word	0x3ff00000
 8005060:	40240000 	.word	0x40240000
 8005064:	401c0000 	.word	0x401c0000
 8005068:	40140000 	.word	0x40140000
 800506c:	3fe00000 	.word	0x3fe00000
 8005070:	4baf      	ldr	r3, [pc, #700]	; (8005330 <_dtoa_r+0x920>)
 8005072:	f7fb fae1 	bl	8000638 <__aeabi_dmul>
 8005076:	4606      	mov	r6, r0
 8005078:	460f      	mov	r7, r1
 800507a:	e7ac      	b.n	8004fd6 <_dtoa_r+0x5c6>
 800507c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005080:	9d00      	ldr	r5, [sp, #0]
 8005082:	4642      	mov	r2, r8
 8005084:	464b      	mov	r3, r9
 8005086:	4630      	mov	r0, r6
 8005088:	4639      	mov	r1, r7
 800508a:	f7fb fbff 	bl	800088c <__aeabi_ddiv>
 800508e:	f7fb fd83 	bl	8000b98 <__aeabi_d2iz>
 8005092:	9002      	str	r0, [sp, #8]
 8005094:	f7fb fa66 	bl	8000564 <__aeabi_i2d>
 8005098:	4642      	mov	r2, r8
 800509a:	464b      	mov	r3, r9
 800509c:	f7fb facc 	bl	8000638 <__aeabi_dmul>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4630      	mov	r0, r6
 80050a6:	4639      	mov	r1, r7
 80050a8:	f7fb f90e 	bl	80002c8 <__aeabi_dsub>
 80050ac:	9e02      	ldr	r6, [sp, #8]
 80050ae:	9f01      	ldr	r7, [sp, #4]
 80050b0:	3630      	adds	r6, #48	; 0x30
 80050b2:	f805 6b01 	strb.w	r6, [r5], #1
 80050b6:	9e00      	ldr	r6, [sp, #0]
 80050b8:	1bae      	subs	r6, r5, r6
 80050ba:	42b7      	cmp	r7, r6
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	d137      	bne.n	8005132 <_dtoa_r+0x722>
 80050c2:	f7fb f903 	bl	80002cc <__adddf3>
 80050c6:	4642      	mov	r2, r8
 80050c8:	464b      	mov	r3, r9
 80050ca:	4606      	mov	r6, r0
 80050cc:	460f      	mov	r7, r1
 80050ce:	f7fb fd43 	bl	8000b58 <__aeabi_dcmpgt>
 80050d2:	b9c8      	cbnz	r0, 8005108 <_dtoa_r+0x6f8>
 80050d4:	4642      	mov	r2, r8
 80050d6:	464b      	mov	r3, r9
 80050d8:	4630      	mov	r0, r6
 80050da:	4639      	mov	r1, r7
 80050dc:	f7fb fd14 	bl	8000b08 <__aeabi_dcmpeq>
 80050e0:	b110      	cbz	r0, 80050e8 <_dtoa_r+0x6d8>
 80050e2:	9b02      	ldr	r3, [sp, #8]
 80050e4:	07d9      	lsls	r1, r3, #31
 80050e6:	d40f      	bmi.n	8005108 <_dtoa_r+0x6f8>
 80050e8:	4620      	mov	r0, r4
 80050ea:	4659      	mov	r1, fp
 80050ec:	f000 fad6 	bl	800569c <_Bfree>
 80050f0:	2300      	movs	r3, #0
 80050f2:	702b      	strb	r3, [r5, #0]
 80050f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050f6:	f10a 0001 	add.w	r0, sl, #1
 80050fa:	6018      	str	r0, [r3, #0]
 80050fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f43f acd8 	beq.w	8004ab4 <_dtoa_r+0xa4>
 8005104:	601d      	str	r5, [r3, #0]
 8005106:	e4d5      	b.n	8004ab4 <_dtoa_r+0xa4>
 8005108:	f8cd a01c 	str.w	sl, [sp, #28]
 800510c:	462b      	mov	r3, r5
 800510e:	461d      	mov	r5, r3
 8005110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005114:	2a39      	cmp	r2, #57	; 0x39
 8005116:	d108      	bne.n	800512a <_dtoa_r+0x71a>
 8005118:	9a00      	ldr	r2, [sp, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d1f7      	bne.n	800510e <_dtoa_r+0x6fe>
 800511e:	9a07      	ldr	r2, [sp, #28]
 8005120:	9900      	ldr	r1, [sp, #0]
 8005122:	3201      	adds	r2, #1
 8005124:	9207      	str	r2, [sp, #28]
 8005126:	2230      	movs	r2, #48	; 0x30
 8005128:	700a      	strb	r2, [r1, #0]
 800512a:	781a      	ldrb	r2, [r3, #0]
 800512c:	3201      	adds	r2, #1
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e78c      	b.n	800504c <_dtoa_r+0x63c>
 8005132:	4b7f      	ldr	r3, [pc, #508]	; (8005330 <_dtoa_r+0x920>)
 8005134:	2200      	movs	r2, #0
 8005136:	f7fb fa7f 	bl	8000638 <__aeabi_dmul>
 800513a:	2200      	movs	r2, #0
 800513c:	2300      	movs	r3, #0
 800513e:	4606      	mov	r6, r0
 8005140:	460f      	mov	r7, r1
 8005142:	f7fb fce1 	bl	8000b08 <__aeabi_dcmpeq>
 8005146:	2800      	cmp	r0, #0
 8005148:	d09b      	beq.n	8005082 <_dtoa_r+0x672>
 800514a:	e7cd      	b.n	80050e8 <_dtoa_r+0x6d8>
 800514c:	9a08      	ldr	r2, [sp, #32]
 800514e:	2a00      	cmp	r2, #0
 8005150:	f000 80c4 	beq.w	80052dc <_dtoa_r+0x8cc>
 8005154:	9a05      	ldr	r2, [sp, #20]
 8005156:	2a01      	cmp	r2, #1
 8005158:	f300 80a8 	bgt.w	80052ac <_dtoa_r+0x89c>
 800515c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800515e:	2a00      	cmp	r2, #0
 8005160:	f000 80a0 	beq.w	80052a4 <_dtoa_r+0x894>
 8005164:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005168:	9e06      	ldr	r6, [sp, #24]
 800516a:	4645      	mov	r5, r8
 800516c:	9a04      	ldr	r2, [sp, #16]
 800516e:	2101      	movs	r1, #1
 8005170:	441a      	add	r2, r3
 8005172:	4620      	mov	r0, r4
 8005174:	4498      	add	r8, r3
 8005176:	9204      	str	r2, [sp, #16]
 8005178:	f000 fb4c 	bl	8005814 <__i2b>
 800517c:	4607      	mov	r7, r0
 800517e:	2d00      	cmp	r5, #0
 8005180:	dd0b      	ble.n	800519a <_dtoa_r+0x78a>
 8005182:	9b04      	ldr	r3, [sp, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	dd08      	ble.n	800519a <_dtoa_r+0x78a>
 8005188:	42ab      	cmp	r3, r5
 800518a:	9a04      	ldr	r2, [sp, #16]
 800518c:	bfa8      	it	ge
 800518e:	462b      	movge	r3, r5
 8005190:	eba8 0803 	sub.w	r8, r8, r3
 8005194:	1aed      	subs	r5, r5, r3
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	9304      	str	r3, [sp, #16]
 800519a:	9b06      	ldr	r3, [sp, #24]
 800519c:	b1fb      	cbz	r3, 80051de <_dtoa_r+0x7ce>
 800519e:	9b08      	ldr	r3, [sp, #32]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 809f 	beq.w	80052e4 <_dtoa_r+0x8d4>
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	dd11      	ble.n	80051ce <_dtoa_r+0x7be>
 80051aa:	4639      	mov	r1, r7
 80051ac:	4632      	mov	r2, r6
 80051ae:	4620      	mov	r0, r4
 80051b0:	f000 fbec 	bl	800598c <__pow5mult>
 80051b4:	465a      	mov	r2, fp
 80051b6:	4601      	mov	r1, r0
 80051b8:	4607      	mov	r7, r0
 80051ba:	4620      	mov	r0, r4
 80051bc:	f000 fb40 	bl	8005840 <__multiply>
 80051c0:	4659      	mov	r1, fp
 80051c2:	9007      	str	r0, [sp, #28]
 80051c4:	4620      	mov	r0, r4
 80051c6:	f000 fa69 	bl	800569c <_Bfree>
 80051ca:	9b07      	ldr	r3, [sp, #28]
 80051cc:	469b      	mov	fp, r3
 80051ce:	9b06      	ldr	r3, [sp, #24]
 80051d0:	1b9a      	subs	r2, r3, r6
 80051d2:	d004      	beq.n	80051de <_dtoa_r+0x7ce>
 80051d4:	4659      	mov	r1, fp
 80051d6:	4620      	mov	r0, r4
 80051d8:	f000 fbd8 	bl	800598c <__pow5mult>
 80051dc:	4683      	mov	fp, r0
 80051de:	2101      	movs	r1, #1
 80051e0:	4620      	mov	r0, r4
 80051e2:	f000 fb17 	bl	8005814 <__i2b>
 80051e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	4606      	mov	r6, r0
 80051ec:	dd7c      	ble.n	80052e8 <_dtoa_r+0x8d8>
 80051ee:	461a      	mov	r2, r3
 80051f0:	4601      	mov	r1, r0
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 fbca 	bl	800598c <__pow5mult>
 80051f8:	9b05      	ldr	r3, [sp, #20]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	4606      	mov	r6, r0
 80051fe:	dd76      	ble.n	80052ee <_dtoa_r+0x8de>
 8005200:	2300      	movs	r3, #0
 8005202:	9306      	str	r3, [sp, #24]
 8005204:	6933      	ldr	r3, [r6, #16]
 8005206:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800520a:	6918      	ldr	r0, [r3, #16]
 800520c:	f000 fab2 	bl	8005774 <__hi0bits>
 8005210:	f1c0 0020 	rsb	r0, r0, #32
 8005214:	9b04      	ldr	r3, [sp, #16]
 8005216:	4418      	add	r0, r3
 8005218:	f010 001f 	ands.w	r0, r0, #31
 800521c:	f000 8086 	beq.w	800532c <_dtoa_r+0x91c>
 8005220:	f1c0 0320 	rsb	r3, r0, #32
 8005224:	2b04      	cmp	r3, #4
 8005226:	dd7f      	ble.n	8005328 <_dtoa_r+0x918>
 8005228:	f1c0 001c 	rsb	r0, r0, #28
 800522c:	9b04      	ldr	r3, [sp, #16]
 800522e:	4403      	add	r3, r0
 8005230:	4480      	add	r8, r0
 8005232:	4405      	add	r5, r0
 8005234:	9304      	str	r3, [sp, #16]
 8005236:	f1b8 0f00 	cmp.w	r8, #0
 800523a:	dd05      	ble.n	8005248 <_dtoa_r+0x838>
 800523c:	4659      	mov	r1, fp
 800523e:	4642      	mov	r2, r8
 8005240:	4620      	mov	r0, r4
 8005242:	f000 fbfd 	bl	8005a40 <__lshift>
 8005246:	4683      	mov	fp, r0
 8005248:	9b04      	ldr	r3, [sp, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	dd05      	ble.n	800525a <_dtoa_r+0x84a>
 800524e:	4631      	mov	r1, r6
 8005250:	461a      	mov	r2, r3
 8005252:	4620      	mov	r0, r4
 8005254:	f000 fbf4 	bl	8005a40 <__lshift>
 8005258:	4606      	mov	r6, r0
 800525a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800525c:	2b00      	cmp	r3, #0
 800525e:	d069      	beq.n	8005334 <_dtoa_r+0x924>
 8005260:	4631      	mov	r1, r6
 8005262:	4658      	mov	r0, fp
 8005264:	f000 fc58 	bl	8005b18 <__mcmp>
 8005268:	2800      	cmp	r0, #0
 800526a:	da63      	bge.n	8005334 <_dtoa_r+0x924>
 800526c:	2300      	movs	r3, #0
 800526e:	4659      	mov	r1, fp
 8005270:	220a      	movs	r2, #10
 8005272:	4620      	mov	r0, r4
 8005274:	f000 fa34 	bl	80056e0 <__multadd>
 8005278:	9b08      	ldr	r3, [sp, #32]
 800527a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800527e:	4683      	mov	fp, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 818f 	beq.w	80055a4 <_dtoa_r+0xb94>
 8005286:	4639      	mov	r1, r7
 8005288:	2300      	movs	r3, #0
 800528a:	220a      	movs	r2, #10
 800528c:	4620      	mov	r0, r4
 800528e:	f000 fa27 	bl	80056e0 <__multadd>
 8005292:	f1b9 0f00 	cmp.w	r9, #0
 8005296:	4607      	mov	r7, r0
 8005298:	f300 808e 	bgt.w	80053b8 <_dtoa_r+0x9a8>
 800529c:	9b05      	ldr	r3, [sp, #20]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	dc50      	bgt.n	8005344 <_dtoa_r+0x934>
 80052a2:	e089      	b.n	80053b8 <_dtoa_r+0x9a8>
 80052a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052aa:	e75d      	b.n	8005168 <_dtoa_r+0x758>
 80052ac:	9b01      	ldr	r3, [sp, #4]
 80052ae:	1e5e      	subs	r6, r3, #1
 80052b0:	9b06      	ldr	r3, [sp, #24]
 80052b2:	42b3      	cmp	r3, r6
 80052b4:	bfbf      	itttt	lt
 80052b6:	9b06      	ldrlt	r3, [sp, #24]
 80052b8:	9606      	strlt	r6, [sp, #24]
 80052ba:	1af2      	sublt	r2, r6, r3
 80052bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80052be:	bfb6      	itet	lt
 80052c0:	189b      	addlt	r3, r3, r2
 80052c2:	1b9e      	subge	r6, r3, r6
 80052c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80052c6:	9b01      	ldr	r3, [sp, #4]
 80052c8:	bfb8      	it	lt
 80052ca:	2600      	movlt	r6, #0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bfb5      	itete	lt
 80052d0:	eba8 0503 	sublt.w	r5, r8, r3
 80052d4:	9b01      	ldrge	r3, [sp, #4]
 80052d6:	2300      	movlt	r3, #0
 80052d8:	4645      	movge	r5, r8
 80052da:	e747      	b.n	800516c <_dtoa_r+0x75c>
 80052dc:	9e06      	ldr	r6, [sp, #24]
 80052de:	9f08      	ldr	r7, [sp, #32]
 80052e0:	4645      	mov	r5, r8
 80052e2:	e74c      	b.n	800517e <_dtoa_r+0x76e>
 80052e4:	9a06      	ldr	r2, [sp, #24]
 80052e6:	e775      	b.n	80051d4 <_dtoa_r+0x7c4>
 80052e8:	9b05      	ldr	r3, [sp, #20]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	dc18      	bgt.n	8005320 <_dtoa_r+0x910>
 80052ee:	9b02      	ldr	r3, [sp, #8]
 80052f0:	b9b3      	cbnz	r3, 8005320 <_dtoa_r+0x910>
 80052f2:	9b03      	ldr	r3, [sp, #12]
 80052f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f8:	b9a3      	cbnz	r3, 8005324 <_dtoa_r+0x914>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005300:	0d1b      	lsrs	r3, r3, #20
 8005302:	051b      	lsls	r3, r3, #20
 8005304:	b12b      	cbz	r3, 8005312 <_dtoa_r+0x902>
 8005306:	9b04      	ldr	r3, [sp, #16]
 8005308:	3301      	adds	r3, #1
 800530a:	9304      	str	r3, [sp, #16]
 800530c:	f108 0801 	add.w	r8, r8, #1
 8005310:	2301      	movs	r3, #1
 8005312:	9306      	str	r3, [sp, #24]
 8005314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005316:	2b00      	cmp	r3, #0
 8005318:	f47f af74 	bne.w	8005204 <_dtoa_r+0x7f4>
 800531c:	2001      	movs	r0, #1
 800531e:	e779      	b.n	8005214 <_dtoa_r+0x804>
 8005320:	2300      	movs	r3, #0
 8005322:	e7f6      	b.n	8005312 <_dtoa_r+0x902>
 8005324:	9b02      	ldr	r3, [sp, #8]
 8005326:	e7f4      	b.n	8005312 <_dtoa_r+0x902>
 8005328:	d085      	beq.n	8005236 <_dtoa_r+0x826>
 800532a:	4618      	mov	r0, r3
 800532c:	301c      	adds	r0, #28
 800532e:	e77d      	b.n	800522c <_dtoa_r+0x81c>
 8005330:	40240000 	.word	0x40240000
 8005334:	9b01      	ldr	r3, [sp, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	dc38      	bgt.n	80053ac <_dtoa_r+0x99c>
 800533a:	9b05      	ldr	r3, [sp, #20]
 800533c:	2b02      	cmp	r3, #2
 800533e:	dd35      	ble.n	80053ac <_dtoa_r+0x99c>
 8005340:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005344:	f1b9 0f00 	cmp.w	r9, #0
 8005348:	d10d      	bne.n	8005366 <_dtoa_r+0x956>
 800534a:	4631      	mov	r1, r6
 800534c:	464b      	mov	r3, r9
 800534e:	2205      	movs	r2, #5
 8005350:	4620      	mov	r0, r4
 8005352:	f000 f9c5 	bl	80056e0 <__multadd>
 8005356:	4601      	mov	r1, r0
 8005358:	4606      	mov	r6, r0
 800535a:	4658      	mov	r0, fp
 800535c:	f000 fbdc 	bl	8005b18 <__mcmp>
 8005360:	2800      	cmp	r0, #0
 8005362:	f73f adbd 	bgt.w	8004ee0 <_dtoa_r+0x4d0>
 8005366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005368:	9d00      	ldr	r5, [sp, #0]
 800536a:	ea6f 0a03 	mvn.w	sl, r3
 800536e:	f04f 0800 	mov.w	r8, #0
 8005372:	4631      	mov	r1, r6
 8005374:	4620      	mov	r0, r4
 8005376:	f000 f991 	bl	800569c <_Bfree>
 800537a:	2f00      	cmp	r7, #0
 800537c:	f43f aeb4 	beq.w	80050e8 <_dtoa_r+0x6d8>
 8005380:	f1b8 0f00 	cmp.w	r8, #0
 8005384:	d005      	beq.n	8005392 <_dtoa_r+0x982>
 8005386:	45b8      	cmp	r8, r7
 8005388:	d003      	beq.n	8005392 <_dtoa_r+0x982>
 800538a:	4641      	mov	r1, r8
 800538c:	4620      	mov	r0, r4
 800538e:	f000 f985 	bl	800569c <_Bfree>
 8005392:	4639      	mov	r1, r7
 8005394:	4620      	mov	r0, r4
 8005396:	f000 f981 	bl	800569c <_Bfree>
 800539a:	e6a5      	b.n	80050e8 <_dtoa_r+0x6d8>
 800539c:	2600      	movs	r6, #0
 800539e:	4637      	mov	r7, r6
 80053a0:	e7e1      	b.n	8005366 <_dtoa_r+0x956>
 80053a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80053a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80053a8:	4637      	mov	r7, r6
 80053aa:	e599      	b.n	8004ee0 <_dtoa_r+0x4d0>
 80053ac:	9b08      	ldr	r3, [sp, #32]
 80053ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80fd 	beq.w	80055b2 <_dtoa_r+0xba2>
 80053b8:	2d00      	cmp	r5, #0
 80053ba:	dd05      	ble.n	80053c8 <_dtoa_r+0x9b8>
 80053bc:	4639      	mov	r1, r7
 80053be:	462a      	mov	r2, r5
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 fb3d 	bl	8005a40 <__lshift>
 80053c6:	4607      	mov	r7, r0
 80053c8:	9b06      	ldr	r3, [sp, #24]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d05c      	beq.n	8005488 <_dtoa_r+0xa78>
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4620      	mov	r0, r4
 80053d2:	f000 f923 	bl	800561c <_Balloc>
 80053d6:	4605      	mov	r5, r0
 80053d8:	b928      	cbnz	r0, 80053e6 <_dtoa_r+0x9d6>
 80053da:	4b80      	ldr	r3, [pc, #512]	; (80055dc <_dtoa_r+0xbcc>)
 80053dc:	4602      	mov	r2, r0
 80053de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80053e2:	f7ff bb2e 	b.w	8004a42 <_dtoa_r+0x32>
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	3202      	adds	r2, #2
 80053ea:	0092      	lsls	r2, r2, #2
 80053ec:	f107 010c 	add.w	r1, r7, #12
 80053f0:	300c      	adds	r0, #12
 80053f2:	f000 f905 	bl	8005600 <memcpy>
 80053f6:	2201      	movs	r2, #1
 80053f8:	4629      	mov	r1, r5
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 fb20 	bl	8005a40 <__lshift>
 8005400:	9b00      	ldr	r3, [sp, #0]
 8005402:	3301      	adds	r3, #1
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	9b00      	ldr	r3, [sp, #0]
 8005408:	444b      	add	r3, r9
 800540a:	9307      	str	r3, [sp, #28]
 800540c:	9b02      	ldr	r3, [sp, #8]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	46b8      	mov	r8, r7
 8005414:	9306      	str	r3, [sp, #24]
 8005416:	4607      	mov	r7, r0
 8005418:	9b01      	ldr	r3, [sp, #4]
 800541a:	4631      	mov	r1, r6
 800541c:	3b01      	subs	r3, #1
 800541e:	4658      	mov	r0, fp
 8005420:	9302      	str	r3, [sp, #8]
 8005422:	f7ff fa67 	bl	80048f4 <quorem>
 8005426:	4603      	mov	r3, r0
 8005428:	3330      	adds	r3, #48	; 0x30
 800542a:	9004      	str	r0, [sp, #16]
 800542c:	4641      	mov	r1, r8
 800542e:	4658      	mov	r0, fp
 8005430:	9308      	str	r3, [sp, #32]
 8005432:	f000 fb71 	bl	8005b18 <__mcmp>
 8005436:	463a      	mov	r2, r7
 8005438:	4681      	mov	r9, r0
 800543a:	4631      	mov	r1, r6
 800543c:	4620      	mov	r0, r4
 800543e:	f000 fb87 	bl	8005b50 <__mdiff>
 8005442:	68c2      	ldr	r2, [r0, #12]
 8005444:	9b08      	ldr	r3, [sp, #32]
 8005446:	4605      	mov	r5, r0
 8005448:	bb02      	cbnz	r2, 800548c <_dtoa_r+0xa7c>
 800544a:	4601      	mov	r1, r0
 800544c:	4658      	mov	r0, fp
 800544e:	f000 fb63 	bl	8005b18 <__mcmp>
 8005452:	9b08      	ldr	r3, [sp, #32]
 8005454:	4602      	mov	r2, r0
 8005456:	4629      	mov	r1, r5
 8005458:	4620      	mov	r0, r4
 800545a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800545e:	f000 f91d 	bl	800569c <_Bfree>
 8005462:	9b05      	ldr	r3, [sp, #20]
 8005464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005466:	9d01      	ldr	r5, [sp, #4]
 8005468:	ea43 0102 	orr.w	r1, r3, r2
 800546c:	9b06      	ldr	r3, [sp, #24]
 800546e:	430b      	orrs	r3, r1
 8005470:	9b08      	ldr	r3, [sp, #32]
 8005472:	d10d      	bne.n	8005490 <_dtoa_r+0xa80>
 8005474:	2b39      	cmp	r3, #57	; 0x39
 8005476:	d029      	beq.n	80054cc <_dtoa_r+0xabc>
 8005478:	f1b9 0f00 	cmp.w	r9, #0
 800547c:	dd01      	ble.n	8005482 <_dtoa_r+0xa72>
 800547e:	9b04      	ldr	r3, [sp, #16]
 8005480:	3331      	adds	r3, #49	; 0x31
 8005482:	9a02      	ldr	r2, [sp, #8]
 8005484:	7013      	strb	r3, [r2, #0]
 8005486:	e774      	b.n	8005372 <_dtoa_r+0x962>
 8005488:	4638      	mov	r0, r7
 800548a:	e7b9      	b.n	8005400 <_dtoa_r+0x9f0>
 800548c:	2201      	movs	r2, #1
 800548e:	e7e2      	b.n	8005456 <_dtoa_r+0xa46>
 8005490:	f1b9 0f00 	cmp.w	r9, #0
 8005494:	db06      	blt.n	80054a4 <_dtoa_r+0xa94>
 8005496:	9905      	ldr	r1, [sp, #20]
 8005498:	ea41 0909 	orr.w	r9, r1, r9
 800549c:	9906      	ldr	r1, [sp, #24]
 800549e:	ea59 0101 	orrs.w	r1, r9, r1
 80054a2:	d120      	bne.n	80054e6 <_dtoa_r+0xad6>
 80054a4:	2a00      	cmp	r2, #0
 80054a6:	ddec      	ble.n	8005482 <_dtoa_r+0xa72>
 80054a8:	4659      	mov	r1, fp
 80054aa:	2201      	movs	r2, #1
 80054ac:	4620      	mov	r0, r4
 80054ae:	9301      	str	r3, [sp, #4]
 80054b0:	f000 fac6 	bl	8005a40 <__lshift>
 80054b4:	4631      	mov	r1, r6
 80054b6:	4683      	mov	fp, r0
 80054b8:	f000 fb2e 	bl	8005b18 <__mcmp>
 80054bc:	2800      	cmp	r0, #0
 80054be:	9b01      	ldr	r3, [sp, #4]
 80054c0:	dc02      	bgt.n	80054c8 <_dtoa_r+0xab8>
 80054c2:	d1de      	bne.n	8005482 <_dtoa_r+0xa72>
 80054c4:	07da      	lsls	r2, r3, #31
 80054c6:	d5dc      	bpl.n	8005482 <_dtoa_r+0xa72>
 80054c8:	2b39      	cmp	r3, #57	; 0x39
 80054ca:	d1d8      	bne.n	800547e <_dtoa_r+0xa6e>
 80054cc:	9a02      	ldr	r2, [sp, #8]
 80054ce:	2339      	movs	r3, #57	; 0x39
 80054d0:	7013      	strb	r3, [r2, #0]
 80054d2:	462b      	mov	r3, r5
 80054d4:	461d      	mov	r5, r3
 80054d6:	3b01      	subs	r3, #1
 80054d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80054dc:	2a39      	cmp	r2, #57	; 0x39
 80054de:	d050      	beq.n	8005582 <_dtoa_r+0xb72>
 80054e0:	3201      	adds	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
 80054e4:	e745      	b.n	8005372 <_dtoa_r+0x962>
 80054e6:	2a00      	cmp	r2, #0
 80054e8:	dd03      	ble.n	80054f2 <_dtoa_r+0xae2>
 80054ea:	2b39      	cmp	r3, #57	; 0x39
 80054ec:	d0ee      	beq.n	80054cc <_dtoa_r+0xabc>
 80054ee:	3301      	adds	r3, #1
 80054f0:	e7c7      	b.n	8005482 <_dtoa_r+0xa72>
 80054f2:	9a01      	ldr	r2, [sp, #4]
 80054f4:	9907      	ldr	r1, [sp, #28]
 80054f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80054fa:	428a      	cmp	r2, r1
 80054fc:	d02a      	beq.n	8005554 <_dtoa_r+0xb44>
 80054fe:	4659      	mov	r1, fp
 8005500:	2300      	movs	r3, #0
 8005502:	220a      	movs	r2, #10
 8005504:	4620      	mov	r0, r4
 8005506:	f000 f8eb 	bl	80056e0 <__multadd>
 800550a:	45b8      	cmp	r8, r7
 800550c:	4683      	mov	fp, r0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	f04f 020a 	mov.w	r2, #10
 8005516:	4641      	mov	r1, r8
 8005518:	4620      	mov	r0, r4
 800551a:	d107      	bne.n	800552c <_dtoa_r+0xb1c>
 800551c:	f000 f8e0 	bl	80056e0 <__multadd>
 8005520:	4680      	mov	r8, r0
 8005522:	4607      	mov	r7, r0
 8005524:	9b01      	ldr	r3, [sp, #4]
 8005526:	3301      	adds	r3, #1
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	e775      	b.n	8005418 <_dtoa_r+0xa08>
 800552c:	f000 f8d8 	bl	80056e0 <__multadd>
 8005530:	4639      	mov	r1, r7
 8005532:	4680      	mov	r8, r0
 8005534:	2300      	movs	r3, #0
 8005536:	220a      	movs	r2, #10
 8005538:	4620      	mov	r0, r4
 800553a:	f000 f8d1 	bl	80056e0 <__multadd>
 800553e:	4607      	mov	r7, r0
 8005540:	e7f0      	b.n	8005524 <_dtoa_r+0xb14>
 8005542:	f1b9 0f00 	cmp.w	r9, #0
 8005546:	9a00      	ldr	r2, [sp, #0]
 8005548:	bfcc      	ite	gt
 800554a:	464d      	movgt	r5, r9
 800554c:	2501      	movle	r5, #1
 800554e:	4415      	add	r5, r2
 8005550:	f04f 0800 	mov.w	r8, #0
 8005554:	4659      	mov	r1, fp
 8005556:	2201      	movs	r2, #1
 8005558:	4620      	mov	r0, r4
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	f000 fa70 	bl	8005a40 <__lshift>
 8005560:	4631      	mov	r1, r6
 8005562:	4683      	mov	fp, r0
 8005564:	f000 fad8 	bl	8005b18 <__mcmp>
 8005568:	2800      	cmp	r0, #0
 800556a:	dcb2      	bgt.n	80054d2 <_dtoa_r+0xac2>
 800556c:	d102      	bne.n	8005574 <_dtoa_r+0xb64>
 800556e:	9b01      	ldr	r3, [sp, #4]
 8005570:	07db      	lsls	r3, r3, #31
 8005572:	d4ae      	bmi.n	80054d2 <_dtoa_r+0xac2>
 8005574:	462b      	mov	r3, r5
 8005576:	461d      	mov	r5, r3
 8005578:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800557c:	2a30      	cmp	r2, #48	; 0x30
 800557e:	d0fa      	beq.n	8005576 <_dtoa_r+0xb66>
 8005580:	e6f7      	b.n	8005372 <_dtoa_r+0x962>
 8005582:	9a00      	ldr	r2, [sp, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d1a5      	bne.n	80054d4 <_dtoa_r+0xac4>
 8005588:	f10a 0a01 	add.w	sl, sl, #1
 800558c:	2331      	movs	r3, #49	; 0x31
 800558e:	e779      	b.n	8005484 <_dtoa_r+0xa74>
 8005590:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <_dtoa_r+0xbd0>)
 8005592:	f7ff baaf 	b.w	8004af4 <_dtoa_r+0xe4>
 8005596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005598:	2b00      	cmp	r3, #0
 800559a:	f47f aa86 	bne.w	8004aaa <_dtoa_r+0x9a>
 800559e:	4b11      	ldr	r3, [pc, #68]	; (80055e4 <_dtoa_r+0xbd4>)
 80055a0:	f7ff baa8 	b.w	8004af4 <_dtoa_r+0xe4>
 80055a4:	f1b9 0f00 	cmp.w	r9, #0
 80055a8:	dc03      	bgt.n	80055b2 <_dtoa_r+0xba2>
 80055aa:	9b05      	ldr	r3, [sp, #20]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	f73f aec9 	bgt.w	8005344 <_dtoa_r+0x934>
 80055b2:	9d00      	ldr	r5, [sp, #0]
 80055b4:	4631      	mov	r1, r6
 80055b6:	4658      	mov	r0, fp
 80055b8:	f7ff f99c 	bl	80048f4 <quorem>
 80055bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80055c0:	f805 3b01 	strb.w	r3, [r5], #1
 80055c4:	9a00      	ldr	r2, [sp, #0]
 80055c6:	1aaa      	subs	r2, r5, r2
 80055c8:	4591      	cmp	r9, r2
 80055ca:	ddba      	ble.n	8005542 <_dtoa_r+0xb32>
 80055cc:	4659      	mov	r1, fp
 80055ce:	2300      	movs	r3, #0
 80055d0:	220a      	movs	r2, #10
 80055d2:	4620      	mov	r0, r4
 80055d4:	f000 f884 	bl	80056e0 <__multadd>
 80055d8:	4683      	mov	fp, r0
 80055da:	e7eb      	b.n	80055b4 <_dtoa_r+0xba4>
 80055dc:	08006f9f 	.word	0x08006f9f
 80055e0:	08006ef8 	.word	0x08006ef8
 80055e4:	08006f1c 	.word	0x08006f1c

080055e8 <_localeconv_r>:
 80055e8:	4800      	ldr	r0, [pc, #0]	; (80055ec <_localeconv_r+0x4>)
 80055ea:	4770      	bx	lr
 80055ec:	20000160 	.word	0x20000160

080055f0 <malloc>:
 80055f0:	4b02      	ldr	r3, [pc, #8]	; (80055fc <malloc+0xc>)
 80055f2:	4601      	mov	r1, r0
 80055f4:	6818      	ldr	r0, [r3, #0]
 80055f6:	f000 bbef 	b.w	8005dd8 <_malloc_r>
 80055fa:	bf00      	nop
 80055fc:	2000000c 	.word	0x2000000c

08005600 <memcpy>:
 8005600:	440a      	add	r2, r1
 8005602:	4291      	cmp	r1, r2
 8005604:	f100 33ff 	add.w	r3, r0, #4294967295
 8005608:	d100      	bne.n	800560c <memcpy+0xc>
 800560a:	4770      	bx	lr
 800560c:	b510      	push	{r4, lr}
 800560e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005616:	4291      	cmp	r1, r2
 8005618:	d1f9      	bne.n	800560e <memcpy+0xe>
 800561a:	bd10      	pop	{r4, pc}

0800561c <_Balloc>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005620:	4604      	mov	r4, r0
 8005622:	460d      	mov	r5, r1
 8005624:	b976      	cbnz	r6, 8005644 <_Balloc+0x28>
 8005626:	2010      	movs	r0, #16
 8005628:	f7ff ffe2 	bl	80055f0 <malloc>
 800562c:	4602      	mov	r2, r0
 800562e:	6260      	str	r0, [r4, #36]	; 0x24
 8005630:	b920      	cbnz	r0, 800563c <_Balloc+0x20>
 8005632:	4b18      	ldr	r3, [pc, #96]	; (8005694 <_Balloc+0x78>)
 8005634:	4818      	ldr	r0, [pc, #96]	; (8005698 <_Balloc+0x7c>)
 8005636:	2166      	movs	r1, #102	; 0x66
 8005638:	f000 fd94 	bl	8006164 <__assert_func>
 800563c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005640:	6006      	str	r6, [r0, #0]
 8005642:	60c6      	str	r6, [r0, #12]
 8005644:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005646:	68f3      	ldr	r3, [r6, #12]
 8005648:	b183      	cbz	r3, 800566c <_Balloc+0x50>
 800564a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005652:	b9b8      	cbnz	r0, 8005684 <_Balloc+0x68>
 8005654:	2101      	movs	r1, #1
 8005656:	fa01 f605 	lsl.w	r6, r1, r5
 800565a:	1d72      	adds	r2, r6, #5
 800565c:	0092      	lsls	r2, r2, #2
 800565e:	4620      	mov	r0, r4
 8005660:	f000 fb5a 	bl	8005d18 <_calloc_r>
 8005664:	b160      	cbz	r0, 8005680 <_Balloc+0x64>
 8005666:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800566a:	e00e      	b.n	800568a <_Balloc+0x6e>
 800566c:	2221      	movs	r2, #33	; 0x21
 800566e:	2104      	movs	r1, #4
 8005670:	4620      	mov	r0, r4
 8005672:	f000 fb51 	bl	8005d18 <_calloc_r>
 8005676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005678:	60f0      	str	r0, [r6, #12]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e4      	bne.n	800564a <_Balloc+0x2e>
 8005680:	2000      	movs	r0, #0
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	6802      	ldr	r2, [r0, #0]
 8005686:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800568a:	2300      	movs	r3, #0
 800568c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005690:	e7f7      	b.n	8005682 <_Balloc+0x66>
 8005692:	bf00      	nop
 8005694:	08006f29 	.word	0x08006f29
 8005698:	08006fb0 	.word	0x08006fb0

0800569c <_Bfree>:
 800569c:	b570      	push	{r4, r5, r6, lr}
 800569e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056a0:	4605      	mov	r5, r0
 80056a2:	460c      	mov	r4, r1
 80056a4:	b976      	cbnz	r6, 80056c4 <_Bfree+0x28>
 80056a6:	2010      	movs	r0, #16
 80056a8:	f7ff ffa2 	bl	80055f0 <malloc>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6268      	str	r0, [r5, #36]	; 0x24
 80056b0:	b920      	cbnz	r0, 80056bc <_Bfree+0x20>
 80056b2:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <_Bfree+0x3c>)
 80056b4:	4809      	ldr	r0, [pc, #36]	; (80056dc <_Bfree+0x40>)
 80056b6:	218a      	movs	r1, #138	; 0x8a
 80056b8:	f000 fd54 	bl	8006164 <__assert_func>
 80056bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056c0:	6006      	str	r6, [r0, #0]
 80056c2:	60c6      	str	r6, [r0, #12]
 80056c4:	b13c      	cbz	r4, 80056d6 <_Bfree+0x3a>
 80056c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056c8:	6862      	ldr	r2, [r4, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056d0:	6021      	str	r1, [r4, #0]
 80056d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80056d6:	bd70      	pop	{r4, r5, r6, pc}
 80056d8:	08006f29 	.word	0x08006f29
 80056dc:	08006fb0 	.word	0x08006fb0

080056e0 <__multadd>:
 80056e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e4:	690e      	ldr	r6, [r1, #16]
 80056e6:	4607      	mov	r7, r0
 80056e8:	4698      	mov	r8, r3
 80056ea:	460c      	mov	r4, r1
 80056ec:	f101 0014 	add.w	r0, r1, #20
 80056f0:	2300      	movs	r3, #0
 80056f2:	6805      	ldr	r5, [r0, #0]
 80056f4:	b2a9      	uxth	r1, r5
 80056f6:	fb02 8101 	mla	r1, r2, r1, r8
 80056fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80056fe:	0c2d      	lsrs	r5, r5, #16
 8005700:	fb02 c505 	mla	r5, r2, r5, ip
 8005704:	b289      	uxth	r1, r1
 8005706:	3301      	adds	r3, #1
 8005708:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800570c:	429e      	cmp	r6, r3
 800570e:	f840 1b04 	str.w	r1, [r0], #4
 8005712:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005716:	dcec      	bgt.n	80056f2 <__multadd+0x12>
 8005718:	f1b8 0f00 	cmp.w	r8, #0
 800571c:	d022      	beq.n	8005764 <__multadd+0x84>
 800571e:	68a3      	ldr	r3, [r4, #8]
 8005720:	42b3      	cmp	r3, r6
 8005722:	dc19      	bgt.n	8005758 <__multadd+0x78>
 8005724:	6861      	ldr	r1, [r4, #4]
 8005726:	4638      	mov	r0, r7
 8005728:	3101      	adds	r1, #1
 800572a:	f7ff ff77 	bl	800561c <_Balloc>
 800572e:	4605      	mov	r5, r0
 8005730:	b928      	cbnz	r0, 800573e <__multadd+0x5e>
 8005732:	4602      	mov	r2, r0
 8005734:	4b0d      	ldr	r3, [pc, #52]	; (800576c <__multadd+0x8c>)
 8005736:	480e      	ldr	r0, [pc, #56]	; (8005770 <__multadd+0x90>)
 8005738:	21b5      	movs	r1, #181	; 0xb5
 800573a:	f000 fd13 	bl	8006164 <__assert_func>
 800573e:	6922      	ldr	r2, [r4, #16]
 8005740:	3202      	adds	r2, #2
 8005742:	f104 010c 	add.w	r1, r4, #12
 8005746:	0092      	lsls	r2, r2, #2
 8005748:	300c      	adds	r0, #12
 800574a:	f7ff ff59 	bl	8005600 <memcpy>
 800574e:	4621      	mov	r1, r4
 8005750:	4638      	mov	r0, r7
 8005752:	f7ff ffa3 	bl	800569c <_Bfree>
 8005756:	462c      	mov	r4, r5
 8005758:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800575c:	3601      	adds	r6, #1
 800575e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005762:	6126      	str	r6, [r4, #16]
 8005764:	4620      	mov	r0, r4
 8005766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800576a:	bf00      	nop
 800576c:	08006f9f 	.word	0x08006f9f
 8005770:	08006fb0 	.word	0x08006fb0

08005774 <__hi0bits>:
 8005774:	0c03      	lsrs	r3, r0, #16
 8005776:	041b      	lsls	r3, r3, #16
 8005778:	b9d3      	cbnz	r3, 80057b0 <__hi0bits+0x3c>
 800577a:	0400      	lsls	r0, r0, #16
 800577c:	2310      	movs	r3, #16
 800577e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005782:	bf04      	itt	eq
 8005784:	0200      	lsleq	r0, r0, #8
 8005786:	3308      	addeq	r3, #8
 8005788:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800578c:	bf04      	itt	eq
 800578e:	0100      	lsleq	r0, r0, #4
 8005790:	3304      	addeq	r3, #4
 8005792:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005796:	bf04      	itt	eq
 8005798:	0080      	lsleq	r0, r0, #2
 800579a:	3302      	addeq	r3, #2
 800579c:	2800      	cmp	r0, #0
 800579e:	db05      	blt.n	80057ac <__hi0bits+0x38>
 80057a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80057a4:	f103 0301 	add.w	r3, r3, #1
 80057a8:	bf08      	it	eq
 80057aa:	2320      	moveq	r3, #32
 80057ac:	4618      	mov	r0, r3
 80057ae:	4770      	bx	lr
 80057b0:	2300      	movs	r3, #0
 80057b2:	e7e4      	b.n	800577e <__hi0bits+0xa>

080057b4 <__lo0bits>:
 80057b4:	6803      	ldr	r3, [r0, #0]
 80057b6:	f013 0207 	ands.w	r2, r3, #7
 80057ba:	4601      	mov	r1, r0
 80057bc:	d00b      	beq.n	80057d6 <__lo0bits+0x22>
 80057be:	07da      	lsls	r2, r3, #31
 80057c0:	d424      	bmi.n	800580c <__lo0bits+0x58>
 80057c2:	0798      	lsls	r0, r3, #30
 80057c4:	bf49      	itett	mi
 80057c6:	085b      	lsrmi	r3, r3, #1
 80057c8:	089b      	lsrpl	r3, r3, #2
 80057ca:	2001      	movmi	r0, #1
 80057cc:	600b      	strmi	r3, [r1, #0]
 80057ce:	bf5c      	itt	pl
 80057d0:	600b      	strpl	r3, [r1, #0]
 80057d2:	2002      	movpl	r0, #2
 80057d4:	4770      	bx	lr
 80057d6:	b298      	uxth	r0, r3
 80057d8:	b9b0      	cbnz	r0, 8005808 <__lo0bits+0x54>
 80057da:	0c1b      	lsrs	r3, r3, #16
 80057dc:	2010      	movs	r0, #16
 80057de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80057e2:	bf04      	itt	eq
 80057e4:	0a1b      	lsreq	r3, r3, #8
 80057e6:	3008      	addeq	r0, #8
 80057e8:	071a      	lsls	r2, r3, #28
 80057ea:	bf04      	itt	eq
 80057ec:	091b      	lsreq	r3, r3, #4
 80057ee:	3004      	addeq	r0, #4
 80057f0:	079a      	lsls	r2, r3, #30
 80057f2:	bf04      	itt	eq
 80057f4:	089b      	lsreq	r3, r3, #2
 80057f6:	3002      	addeq	r0, #2
 80057f8:	07da      	lsls	r2, r3, #31
 80057fa:	d403      	bmi.n	8005804 <__lo0bits+0x50>
 80057fc:	085b      	lsrs	r3, r3, #1
 80057fe:	f100 0001 	add.w	r0, r0, #1
 8005802:	d005      	beq.n	8005810 <__lo0bits+0x5c>
 8005804:	600b      	str	r3, [r1, #0]
 8005806:	4770      	bx	lr
 8005808:	4610      	mov	r0, r2
 800580a:	e7e8      	b.n	80057de <__lo0bits+0x2a>
 800580c:	2000      	movs	r0, #0
 800580e:	4770      	bx	lr
 8005810:	2020      	movs	r0, #32
 8005812:	4770      	bx	lr

08005814 <__i2b>:
 8005814:	b510      	push	{r4, lr}
 8005816:	460c      	mov	r4, r1
 8005818:	2101      	movs	r1, #1
 800581a:	f7ff feff 	bl	800561c <_Balloc>
 800581e:	4602      	mov	r2, r0
 8005820:	b928      	cbnz	r0, 800582e <__i2b+0x1a>
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <__i2b+0x24>)
 8005824:	4805      	ldr	r0, [pc, #20]	; (800583c <__i2b+0x28>)
 8005826:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800582a:	f000 fc9b 	bl	8006164 <__assert_func>
 800582e:	2301      	movs	r3, #1
 8005830:	6144      	str	r4, [r0, #20]
 8005832:	6103      	str	r3, [r0, #16]
 8005834:	bd10      	pop	{r4, pc}
 8005836:	bf00      	nop
 8005838:	08006f9f 	.word	0x08006f9f
 800583c:	08006fb0 	.word	0x08006fb0

08005840 <__multiply>:
 8005840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	4614      	mov	r4, r2
 8005846:	690a      	ldr	r2, [r1, #16]
 8005848:	6923      	ldr	r3, [r4, #16]
 800584a:	429a      	cmp	r2, r3
 800584c:	bfb8      	it	lt
 800584e:	460b      	movlt	r3, r1
 8005850:	460d      	mov	r5, r1
 8005852:	bfbc      	itt	lt
 8005854:	4625      	movlt	r5, r4
 8005856:	461c      	movlt	r4, r3
 8005858:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800585c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005860:	68ab      	ldr	r3, [r5, #8]
 8005862:	6869      	ldr	r1, [r5, #4]
 8005864:	eb0a 0709 	add.w	r7, sl, r9
 8005868:	42bb      	cmp	r3, r7
 800586a:	b085      	sub	sp, #20
 800586c:	bfb8      	it	lt
 800586e:	3101      	addlt	r1, #1
 8005870:	f7ff fed4 	bl	800561c <_Balloc>
 8005874:	b930      	cbnz	r0, 8005884 <__multiply+0x44>
 8005876:	4602      	mov	r2, r0
 8005878:	4b42      	ldr	r3, [pc, #264]	; (8005984 <__multiply+0x144>)
 800587a:	4843      	ldr	r0, [pc, #268]	; (8005988 <__multiply+0x148>)
 800587c:	f240 115d 	movw	r1, #349	; 0x15d
 8005880:	f000 fc70 	bl	8006164 <__assert_func>
 8005884:	f100 0614 	add.w	r6, r0, #20
 8005888:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800588c:	4633      	mov	r3, r6
 800588e:	2200      	movs	r2, #0
 8005890:	4543      	cmp	r3, r8
 8005892:	d31e      	bcc.n	80058d2 <__multiply+0x92>
 8005894:	f105 0c14 	add.w	ip, r5, #20
 8005898:	f104 0314 	add.w	r3, r4, #20
 800589c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80058a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80058a4:	9202      	str	r2, [sp, #8]
 80058a6:	ebac 0205 	sub.w	r2, ip, r5
 80058aa:	3a15      	subs	r2, #21
 80058ac:	f022 0203 	bic.w	r2, r2, #3
 80058b0:	3204      	adds	r2, #4
 80058b2:	f105 0115 	add.w	r1, r5, #21
 80058b6:	458c      	cmp	ip, r1
 80058b8:	bf38      	it	cc
 80058ba:	2204      	movcc	r2, #4
 80058bc:	9201      	str	r2, [sp, #4]
 80058be:	9a02      	ldr	r2, [sp, #8]
 80058c0:	9303      	str	r3, [sp, #12]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d808      	bhi.n	80058d8 <__multiply+0x98>
 80058c6:	2f00      	cmp	r7, #0
 80058c8:	dc55      	bgt.n	8005976 <__multiply+0x136>
 80058ca:	6107      	str	r7, [r0, #16]
 80058cc:	b005      	add	sp, #20
 80058ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058d2:	f843 2b04 	str.w	r2, [r3], #4
 80058d6:	e7db      	b.n	8005890 <__multiply+0x50>
 80058d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80058dc:	f1ba 0f00 	cmp.w	sl, #0
 80058e0:	d020      	beq.n	8005924 <__multiply+0xe4>
 80058e2:	f105 0e14 	add.w	lr, r5, #20
 80058e6:	46b1      	mov	r9, r6
 80058e8:	2200      	movs	r2, #0
 80058ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 80058ee:	f8d9 b000 	ldr.w	fp, [r9]
 80058f2:	b2a1      	uxth	r1, r4
 80058f4:	fa1f fb8b 	uxth.w	fp, fp
 80058f8:	fb0a b101 	mla	r1, sl, r1, fp
 80058fc:	4411      	add	r1, r2
 80058fe:	f8d9 2000 	ldr.w	r2, [r9]
 8005902:	0c24      	lsrs	r4, r4, #16
 8005904:	0c12      	lsrs	r2, r2, #16
 8005906:	fb0a 2404 	mla	r4, sl, r4, r2
 800590a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800590e:	b289      	uxth	r1, r1
 8005910:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005914:	45f4      	cmp	ip, lr
 8005916:	f849 1b04 	str.w	r1, [r9], #4
 800591a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800591e:	d8e4      	bhi.n	80058ea <__multiply+0xaa>
 8005920:	9901      	ldr	r1, [sp, #4]
 8005922:	5072      	str	r2, [r6, r1]
 8005924:	9a03      	ldr	r2, [sp, #12]
 8005926:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800592a:	3304      	adds	r3, #4
 800592c:	f1b9 0f00 	cmp.w	r9, #0
 8005930:	d01f      	beq.n	8005972 <__multiply+0x132>
 8005932:	6834      	ldr	r4, [r6, #0]
 8005934:	f105 0114 	add.w	r1, r5, #20
 8005938:	46b6      	mov	lr, r6
 800593a:	f04f 0a00 	mov.w	sl, #0
 800593e:	880a      	ldrh	r2, [r1, #0]
 8005940:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005944:	fb09 b202 	mla	r2, r9, r2, fp
 8005948:	4492      	add	sl, r2
 800594a:	b2a4      	uxth	r4, r4
 800594c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005950:	f84e 4b04 	str.w	r4, [lr], #4
 8005954:	f851 4b04 	ldr.w	r4, [r1], #4
 8005958:	f8be 2000 	ldrh.w	r2, [lr]
 800595c:	0c24      	lsrs	r4, r4, #16
 800595e:	fb09 2404 	mla	r4, r9, r4, r2
 8005962:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005966:	458c      	cmp	ip, r1
 8005968:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800596c:	d8e7      	bhi.n	800593e <__multiply+0xfe>
 800596e:	9a01      	ldr	r2, [sp, #4]
 8005970:	50b4      	str	r4, [r6, r2]
 8005972:	3604      	adds	r6, #4
 8005974:	e7a3      	b.n	80058be <__multiply+0x7e>
 8005976:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1a5      	bne.n	80058ca <__multiply+0x8a>
 800597e:	3f01      	subs	r7, #1
 8005980:	e7a1      	b.n	80058c6 <__multiply+0x86>
 8005982:	bf00      	nop
 8005984:	08006f9f 	.word	0x08006f9f
 8005988:	08006fb0 	.word	0x08006fb0

0800598c <__pow5mult>:
 800598c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005990:	4615      	mov	r5, r2
 8005992:	f012 0203 	ands.w	r2, r2, #3
 8005996:	4606      	mov	r6, r0
 8005998:	460f      	mov	r7, r1
 800599a:	d007      	beq.n	80059ac <__pow5mult+0x20>
 800599c:	4c25      	ldr	r4, [pc, #148]	; (8005a34 <__pow5mult+0xa8>)
 800599e:	3a01      	subs	r2, #1
 80059a0:	2300      	movs	r3, #0
 80059a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80059a6:	f7ff fe9b 	bl	80056e0 <__multadd>
 80059aa:	4607      	mov	r7, r0
 80059ac:	10ad      	asrs	r5, r5, #2
 80059ae:	d03d      	beq.n	8005a2c <__pow5mult+0xa0>
 80059b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80059b2:	b97c      	cbnz	r4, 80059d4 <__pow5mult+0x48>
 80059b4:	2010      	movs	r0, #16
 80059b6:	f7ff fe1b 	bl	80055f0 <malloc>
 80059ba:	4602      	mov	r2, r0
 80059bc:	6270      	str	r0, [r6, #36]	; 0x24
 80059be:	b928      	cbnz	r0, 80059cc <__pow5mult+0x40>
 80059c0:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <__pow5mult+0xac>)
 80059c2:	481e      	ldr	r0, [pc, #120]	; (8005a3c <__pow5mult+0xb0>)
 80059c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80059c8:	f000 fbcc 	bl	8006164 <__assert_func>
 80059cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059d0:	6004      	str	r4, [r0, #0]
 80059d2:	60c4      	str	r4, [r0, #12]
 80059d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80059d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059dc:	b94c      	cbnz	r4, 80059f2 <__pow5mult+0x66>
 80059de:	f240 2171 	movw	r1, #625	; 0x271
 80059e2:	4630      	mov	r0, r6
 80059e4:	f7ff ff16 	bl	8005814 <__i2b>
 80059e8:	2300      	movs	r3, #0
 80059ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80059ee:	4604      	mov	r4, r0
 80059f0:	6003      	str	r3, [r0, #0]
 80059f2:	f04f 0900 	mov.w	r9, #0
 80059f6:	07eb      	lsls	r3, r5, #31
 80059f8:	d50a      	bpl.n	8005a10 <__pow5mult+0x84>
 80059fa:	4639      	mov	r1, r7
 80059fc:	4622      	mov	r2, r4
 80059fe:	4630      	mov	r0, r6
 8005a00:	f7ff ff1e 	bl	8005840 <__multiply>
 8005a04:	4639      	mov	r1, r7
 8005a06:	4680      	mov	r8, r0
 8005a08:	4630      	mov	r0, r6
 8005a0a:	f7ff fe47 	bl	800569c <_Bfree>
 8005a0e:	4647      	mov	r7, r8
 8005a10:	106d      	asrs	r5, r5, #1
 8005a12:	d00b      	beq.n	8005a2c <__pow5mult+0xa0>
 8005a14:	6820      	ldr	r0, [r4, #0]
 8005a16:	b938      	cbnz	r0, 8005a28 <__pow5mult+0x9c>
 8005a18:	4622      	mov	r2, r4
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f7ff ff0f 	bl	8005840 <__multiply>
 8005a22:	6020      	str	r0, [r4, #0]
 8005a24:	f8c0 9000 	str.w	r9, [r0]
 8005a28:	4604      	mov	r4, r0
 8005a2a:	e7e4      	b.n	80059f6 <__pow5mult+0x6a>
 8005a2c:	4638      	mov	r0, r7
 8005a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a32:	bf00      	nop
 8005a34:	08007100 	.word	0x08007100
 8005a38:	08006f29 	.word	0x08006f29
 8005a3c:	08006fb0 	.word	0x08006fb0

08005a40 <__lshift>:
 8005a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a44:	460c      	mov	r4, r1
 8005a46:	6849      	ldr	r1, [r1, #4]
 8005a48:	6923      	ldr	r3, [r4, #16]
 8005a4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a4e:	68a3      	ldr	r3, [r4, #8]
 8005a50:	4607      	mov	r7, r0
 8005a52:	4691      	mov	r9, r2
 8005a54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a58:	f108 0601 	add.w	r6, r8, #1
 8005a5c:	42b3      	cmp	r3, r6
 8005a5e:	db0b      	blt.n	8005a78 <__lshift+0x38>
 8005a60:	4638      	mov	r0, r7
 8005a62:	f7ff fddb 	bl	800561c <_Balloc>
 8005a66:	4605      	mov	r5, r0
 8005a68:	b948      	cbnz	r0, 8005a7e <__lshift+0x3e>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	4b28      	ldr	r3, [pc, #160]	; (8005b10 <__lshift+0xd0>)
 8005a6e:	4829      	ldr	r0, [pc, #164]	; (8005b14 <__lshift+0xd4>)
 8005a70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a74:	f000 fb76 	bl	8006164 <__assert_func>
 8005a78:	3101      	adds	r1, #1
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	e7ee      	b.n	8005a5c <__lshift+0x1c>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f100 0114 	add.w	r1, r0, #20
 8005a84:	f100 0210 	add.w	r2, r0, #16
 8005a88:	4618      	mov	r0, r3
 8005a8a:	4553      	cmp	r3, sl
 8005a8c:	db33      	blt.n	8005af6 <__lshift+0xb6>
 8005a8e:	6920      	ldr	r0, [r4, #16]
 8005a90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a94:	f104 0314 	add.w	r3, r4, #20
 8005a98:	f019 091f 	ands.w	r9, r9, #31
 8005a9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005aa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005aa4:	d02b      	beq.n	8005afe <__lshift+0xbe>
 8005aa6:	f1c9 0e20 	rsb	lr, r9, #32
 8005aaa:	468a      	mov	sl, r1
 8005aac:	2200      	movs	r2, #0
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	fa00 f009 	lsl.w	r0, r0, r9
 8005ab4:	4302      	orrs	r2, r0
 8005ab6:	f84a 2b04 	str.w	r2, [sl], #4
 8005aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005abe:	459c      	cmp	ip, r3
 8005ac0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ac4:	d8f3      	bhi.n	8005aae <__lshift+0x6e>
 8005ac6:	ebac 0304 	sub.w	r3, ip, r4
 8005aca:	3b15      	subs	r3, #21
 8005acc:	f023 0303 	bic.w	r3, r3, #3
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	f104 0015 	add.w	r0, r4, #21
 8005ad6:	4584      	cmp	ip, r0
 8005ad8:	bf38      	it	cc
 8005ada:	2304      	movcc	r3, #4
 8005adc:	50ca      	str	r2, [r1, r3]
 8005ade:	b10a      	cbz	r2, 8005ae4 <__lshift+0xa4>
 8005ae0:	f108 0602 	add.w	r6, r8, #2
 8005ae4:	3e01      	subs	r6, #1
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	612e      	str	r6, [r5, #16]
 8005aea:	4621      	mov	r1, r4
 8005aec:	f7ff fdd6 	bl	800569c <_Bfree>
 8005af0:	4628      	mov	r0, r5
 8005af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005afa:	3301      	adds	r3, #1
 8005afc:	e7c5      	b.n	8005a8a <__lshift+0x4a>
 8005afe:	3904      	subs	r1, #4
 8005b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b04:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b08:	459c      	cmp	ip, r3
 8005b0a:	d8f9      	bhi.n	8005b00 <__lshift+0xc0>
 8005b0c:	e7ea      	b.n	8005ae4 <__lshift+0xa4>
 8005b0e:	bf00      	nop
 8005b10:	08006f9f 	.word	0x08006f9f
 8005b14:	08006fb0 	.word	0x08006fb0

08005b18 <__mcmp>:
 8005b18:	b530      	push	{r4, r5, lr}
 8005b1a:	6902      	ldr	r2, [r0, #16]
 8005b1c:	690c      	ldr	r4, [r1, #16]
 8005b1e:	1b12      	subs	r2, r2, r4
 8005b20:	d10e      	bne.n	8005b40 <__mcmp+0x28>
 8005b22:	f100 0314 	add.w	r3, r0, #20
 8005b26:	3114      	adds	r1, #20
 8005b28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005b2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005b30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005b34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005b38:	42a5      	cmp	r5, r4
 8005b3a:	d003      	beq.n	8005b44 <__mcmp+0x2c>
 8005b3c:	d305      	bcc.n	8005b4a <__mcmp+0x32>
 8005b3e:	2201      	movs	r2, #1
 8005b40:	4610      	mov	r0, r2
 8005b42:	bd30      	pop	{r4, r5, pc}
 8005b44:	4283      	cmp	r3, r0
 8005b46:	d3f3      	bcc.n	8005b30 <__mcmp+0x18>
 8005b48:	e7fa      	b.n	8005b40 <__mcmp+0x28>
 8005b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4e:	e7f7      	b.n	8005b40 <__mcmp+0x28>

08005b50 <__mdiff>:
 8005b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	460c      	mov	r4, r1
 8005b56:	4606      	mov	r6, r0
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	4617      	mov	r7, r2
 8005b5e:	f7ff ffdb 	bl	8005b18 <__mcmp>
 8005b62:	1e05      	subs	r5, r0, #0
 8005b64:	d110      	bne.n	8005b88 <__mdiff+0x38>
 8005b66:	4629      	mov	r1, r5
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f7ff fd57 	bl	800561c <_Balloc>
 8005b6e:	b930      	cbnz	r0, 8005b7e <__mdiff+0x2e>
 8005b70:	4b39      	ldr	r3, [pc, #228]	; (8005c58 <__mdiff+0x108>)
 8005b72:	4602      	mov	r2, r0
 8005b74:	f240 2132 	movw	r1, #562	; 0x232
 8005b78:	4838      	ldr	r0, [pc, #224]	; (8005c5c <__mdiff+0x10c>)
 8005b7a:	f000 faf3 	bl	8006164 <__assert_func>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b88:	bfa4      	itt	ge
 8005b8a:	463b      	movge	r3, r7
 8005b8c:	4627      	movge	r7, r4
 8005b8e:	4630      	mov	r0, r6
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	bfa6      	itte	ge
 8005b94:	461c      	movge	r4, r3
 8005b96:	2500      	movge	r5, #0
 8005b98:	2501      	movlt	r5, #1
 8005b9a:	f7ff fd3f 	bl	800561c <_Balloc>
 8005b9e:	b920      	cbnz	r0, 8005baa <__mdiff+0x5a>
 8005ba0:	4b2d      	ldr	r3, [pc, #180]	; (8005c58 <__mdiff+0x108>)
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ba8:	e7e6      	b.n	8005b78 <__mdiff+0x28>
 8005baa:	693e      	ldr	r6, [r7, #16]
 8005bac:	60c5      	str	r5, [r0, #12]
 8005bae:	6925      	ldr	r5, [r4, #16]
 8005bb0:	f107 0114 	add.w	r1, r7, #20
 8005bb4:	f104 0914 	add.w	r9, r4, #20
 8005bb8:	f100 0e14 	add.w	lr, r0, #20
 8005bbc:	f107 0210 	add.w	r2, r7, #16
 8005bc0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005bc4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005bc8:	46f2      	mov	sl, lr
 8005bca:	2700      	movs	r7, #0
 8005bcc:	f859 3b04 	ldr.w	r3, [r9], #4
 8005bd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005bd4:	fa1f f883 	uxth.w	r8, r3
 8005bd8:	fa17 f78b 	uxtah	r7, r7, fp
 8005bdc:	0c1b      	lsrs	r3, r3, #16
 8005bde:	eba7 0808 	sub.w	r8, r7, r8
 8005be2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005be6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005bea:	fa1f f888 	uxth.w	r8, r8
 8005bee:	141f      	asrs	r7, r3, #16
 8005bf0:	454d      	cmp	r5, r9
 8005bf2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005bf6:	f84a 3b04 	str.w	r3, [sl], #4
 8005bfa:	d8e7      	bhi.n	8005bcc <__mdiff+0x7c>
 8005bfc:	1b2b      	subs	r3, r5, r4
 8005bfe:	3b15      	subs	r3, #21
 8005c00:	f023 0303 	bic.w	r3, r3, #3
 8005c04:	3304      	adds	r3, #4
 8005c06:	3415      	adds	r4, #21
 8005c08:	42a5      	cmp	r5, r4
 8005c0a:	bf38      	it	cc
 8005c0c:	2304      	movcc	r3, #4
 8005c0e:	4419      	add	r1, r3
 8005c10:	4473      	add	r3, lr
 8005c12:	469e      	mov	lr, r3
 8005c14:	460d      	mov	r5, r1
 8005c16:	4565      	cmp	r5, ip
 8005c18:	d30e      	bcc.n	8005c38 <__mdiff+0xe8>
 8005c1a:	f10c 0203 	add.w	r2, ip, #3
 8005c1e:	1a52      	subs	r2, r2, r1
 8005c20:	f022 0203 	bic.w	r2, r2, #3
 8005c24:	3903      	subs	r1, #3
 8005c26:	458c      	cmp	ip, r1
 8005c28:	bf38      	it	cc
 8005c2a:	2200      	movcc	r2, #0
 8005c2c:	441a      	add	r2, r3
 8005c2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005c32:	b17b      	cbz	r3, 8005c54 <__mdiff+0x104>
 8005c34:	6106      	str	r6, [r0, #16]
 8005c36:	e7a5      	b.n	8005b84 <__mdiff+0x34>
 8005c38:	f855 8b04 	ldr.w	r8, [r5], #4
 8005c3c:	fa17 f488 	uxtah	r4, r7, r8
 8005c40:	1422      	asrs	r2, r4, #16
 8005c42:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005c46:	b2a4      	uxth	r4, r4
 8005c48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005c4c:	f84e 4b04 	str.w	r4, [lr], #4
 8005c50:	1417      	asrs	r7, r2, #16
 8005c52:	e7e0      	b.n	8005c16 <__mdiff+0xc6>
 8005c54:	3e01      	subs	r6, #1
 8005c56:	e7ea      	b.n	8005c2e <__mdiff+0xde>
 8005c58:	08006f9f 	.word	0x08006f9f
 8005c5c:	08006fb0 	.word	0x08006fb0

08005c60 <__d2b>:
 8005c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c64:	4689      	mov	r9, r1
 8005c66:	2101      	movs	r1, #1
 8005c68:	ec57 6b10 	vmov	r6, r7, d0
 8005c6c:	4690      	mov	r8, r2
 8005c6e:	f7ff fcd5 	bl	800561c <_Balloc>
 8005c72:	4604      	mov	r4, r0
 8005c74:	b930      	cbnz	r0, 8005c84 <__d2b+0x24>
 8005c76:	4602      	mov	r2, r0
 8005c78:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <__d2b+0xb0>)
 8005c7a:	4826      	ldr	r0, [pc, #152]	; (8005d14 <__d2b+0xb4>)
 8005c7c:	f240 310a 	movw	r1, #778	; 0x30a
 8005c80:	f000 fa70 	bl	8006164 <__assert_func>
 8005c84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005c88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c8c:	bb35      	cbnz	r5, 8005cdc <__d2b+0x7c>
 8005c8e:	2e00      	cmp	r6, #0
 8005c90:	9301      	str	r3, [sp, #4]
 8005c92:	d028      	beq.n	8005ce6 <__d2b+0x86>
 8005c94:	4668      	mov	r0, sp
 8005c96:	9600      	str	r6, [sp, #0]
 8005c98:	f7ff fd8c 	bl	80057b4 <__lo0bits>
 8005c9c:	9900      	ldr	r1, [sp, #0]
 8005c9e:	b300      	cbz	r0, 8005ce2 <__d2b+0x82>
 8005ca0:	9a01      	ldr	r2, [sp, #4]
 8005ca2:	f1c0 0320 	rsb	r3, r0, #32
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	430b      	orrs	r3, r1
 8005cac:	40c2      	lsrs	r2, r0
 8005cae:	6163      	str	r3, [r4, #20]
 8005cb0:	9201      	str	r2, [sp, #4]
 8005cb2:	9b01      	ldr	r3, [sp, #4]
 8005cb4:	61a3      	str	r3, [r4, #24]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bf14      	ite	ne
 8005cba:	2202      	movne	r2, #2
 8005cbc:	2201      	moveq	r2, #1
 8005cbe:	6122      	str	r2, [r4, #16]
 8005cc0:	b1d5      	cbz	r5, 8005cf8 <__d2b+0x98>
 8005cc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005cc6:	4405      	add	r5, r0
 8005cc8:	f8c9 5000 	str.w	r5, [r9]
 8005ccc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005cd0:	f8c8 0000 	str.w	r0, [r8]
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	b003      	add	sp, #12
 8005cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ce0:	e7d5      	b.n	8005c8e <__d2b+0x2e>
 8005ce2:	6161      	str	r1, [r4, #20]
 8005ce4:	e7e5      	b.n	8005cb2 <__d2b+0x52>
 8005ce6:	a801      	add	r0, sp, #4
 8005ce8:	f7ff fd64 	bl	80057b4 <__lo0bits>
 8005cec:	9b01      	ldr	r3, [sp, #4]
 8005cee:	6163      	str	r3, [r4, #20]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	6122      	str	r2, [r4, #16]
 8005cf4:	3020      	adds	r0, #32
 8005cf6:	e7e3      	b.n	8005cc0 <__d2b+0x60>
 8005cf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005cfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d00:	f8c9 0000 	str.w	r0, [r9]
 8005d04:	6918      	ldr	r0, [r3, #16]
 8005d06:	f7ff fd35 	bl	8005774 <__hi0bits>
 8005d0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005d0e:	e7df      	b.n	8005cd0 <__d2b+0x70>
 8005d10:	08006f9f 	.word	0x08006f9f
 8005d14:	08006fb0 	.word	0x08006fb0

08005d18 <_calloc_r>:
 8005d18:	b513      	push	{r0, r1, r4, lr}
 8005d1a:	434a      	muls	r2, r1
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	9201      	str	r2, [sp, #4]
 8005d20:	f000 f85a 	bl	8005dd8 <_malloc_r>
 8005d24:	4604      	mov	r4, r0
 8005d26:	b118      	cbz	r0, 8005d30 <_calloc_r+0x18>
 8005d28:	9a01      	ldr	r2, [sp, #4]
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	f7fe f950 	bl	8003fd0 <memset>
 8005d30:	4620      	mov	r0, r4
 8005d32:	b002      	add	sp, #8
 8005d34:	bd10      	pop	{r4, pc}
	...

08005d38 <_free_r>:
 8005d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d3a:	2900      	cmp	r1, #0
 8005d3c:	d048      	beq.n	8005dd0 <_free_r+0x98>
 8005d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d42:	9001      	str	r0, [sp, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f1a1 0404 	sub.w	r4, r1, #4
 8005d4a:	bfb8      	it	lt
 8005d4c:	18e4      	addlt	r4, r4, r3
 8005d4e:	f000 fa65 	bl	800621c <__malloc_lock>
 8005d52:	4a20      	ldr	r2, [pc, #128]	; (8005dd4 <_free_r+0x9c>)
 8005d54:	9801      	ldr	r0, [sp, #4]
 8005d56:	6813      	ldr	r3, [r2, #0]
 8005d58:	4615      	mov	r5, r2
 8005d5a:	b933      	cbnz	r3, 8005d6a <_free_r+0x32>
 8005d5c:	6063      	str	r3, [r4, #4]
 8005d5e:	6014      	str	r4, [r2, #0]
 8005d60:	b003      	add	sp, #12
 8005d62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d66:	f000 ba5f 	b.w	8006228 <__malloc_unlock>
 8005d6a:	42a3      	cmp	r3, r4
 8005d6c:	d90b      	bls.n	8005d86 <_free_r+0x4e>
 8005d6e:	6821      	ldr	r1, [r4, #0]
 8005d70:	1862      	adds	r2, r4, r1
 8005d72:	4293      	cmp	r3, r2
 8005d74:	bf04      	itt	eq
 8005d76:	681a      	ldreq	r2, [r3, #0]
 8005d78:	685b      	ldreq	r3, [r3, #4]
 8005d7a:	6063      	str	r3, [r4, #4]
 8005d7c:	bf04      	itt	eq
 8005d7e:	1852      	addeq	r2, r2, r1
 8005d80:	6022      	streq	r2, [r4, #0]
 8005d82:	602c      	str	r4, [r5, #0]
 8005d84:	e7ec      	b.n	8005d60 <_free_r+0x28>
 8005d86:	461a      	mov	r2, r3
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	b10b      	cbz	r3, 8005d90 <_free_r+0x58>
 8005d8c:	42a3      	cmp	r3, r4
 8005d8e:	d9fa      	bls.n	8005d86 <_free_r+0x4e>
 8005d90:	6811      	ldr	r1, [r2, #0]
 8005d92:	1855      	adds	r5, r2, r1
 8005d94:	42a5      	cmp	r5, r4
 8005d96:	d10b      	bne.n	8005db0 <_free_r+0x78>
 8005d98:	6824      	ldr	r4, [r4, #0]
 8005d9a:	4421      	add	r1, r4
 8005d9c:	1854      	adds	r4, r2, r1
 8005d9e:	42a3      	cmp	r3, r4
 8005da0:	6011      	str	r1, [r2, #0]
 8005da2:	d1dd      	bne.n	8005d60 <_free_r+0x28>
 8005da4:	681c      	ldr	r4, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	6053      	str	r3, [r2, #4]
 8005daa:	4421      	add	r1, r4
 8005dac:	6011      	str	r1, [r2, #0]
 8005dae:	e7d7      	b.n	8005d60 <_free_r+0x28>
 8005db0:	d902      	bls.n	8005db8 <_free_r+0x80>
 8005db2:	230c      	movs	r3, #12
 8005db4:	6003      	str	r3, [r0, #0]
 8005db6:	e7d3      	b.n	8005d60 <_free_r+0x28>
 8005db8:	6825      	ldr	r5, [r4, #0]
 8005dba:	1961      	adds	r1, r4, r5
 8005dbc:	428b      	cmp	r3, r1
 8005dbe:	bf04      	itt	eq
 8005dc0:	6819      	ldreq	r1, [r3, #0]
 8005dc2:	685b      	ldreq	r3, [r3, #4]
 8005dc4:	6063      	str	r3, [r4, #4]
 8005dc6:	bf04      	itt	eq
 8005dc8:	1949      	addeq	r1, r1, r5
 8005dca:	6021      	streq	r1, [r4, #0]
 8005dcc:	6054      	str	r4, [r2, #4]
 8005dce:	e7c7      	b.n	8005d60 <_free_r+0x28>
 8005dd0:	b003      	add	sp, #12
 8005dd2:	bd30      	pop	{r4, r5, pc}
 8005dd4:	200001f8 	.word	0x200001f8

08005dd8 <_malloc_r>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	1ccd      	adds	r5, r1, #3
 8005ddc:	f025 0503 	bic.w	r5, r5, #3
 8005de0:	3508      	adds	r5, #8
 8005de2:	2d0c      	cmp	r5, #12
 8005de4:	bf38      	it	cc
 8005de6:	250c      	movcc	r5, #12
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	4606      	mov	r6, r0
 8005dec:	db01      	blt.n	8005df2 <_malloc_r+0x1a>
 8005dee:	42a9      	cmp	r1, r5
 8005df0:	d903      	bls.n	8005dfa <_malloc_r+0x22>
 8005df2:	230c      	movs	r3, #12
 8005df4:	6033      	str	r3, [r6, #0]
 8005df6:	2000      	movs	r0, #0
 8005df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dfa:	f000 fa0f 	bl	800621c <__malloc_lock>
 8005dfe:	4921      	ldr	r1, [pc, #132]	; (8005e84 <_malloc_r+0xac>)
 8005e00:	680a      	ldr	r2, [r1, #0]
 8005e02:	4614      	mov	r4, r2
 8005e04:	b99c      	cbnz	r4, 8005e2e <_malloc_r+0x56>
 8005e06:	4f20      	ldr	r7, [pc, #128]	; (8005e88 <_malloc_r+0xb0>)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	b923      	cbnz	r3, 8005e16 <_malloc_r+0x3e>
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f000 f998 	bl	8006144 <_sbrk_r>
 8005e14:	6038      	str	r0, [r7, #0]
 8005e16:	4629      	mov	r1, r5
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 f993 	bl	8006144 <_sbrk_r>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	d123      	bne.n	8005e6a <_malloc_r+0x92>
 8005e22:	230c      	movs	r3, #12
 8005e24:	6033      	str	r3, [r6, #0]
 8005e26:	4630      	mov	r0, r6
 8005e28:	f000 f9fe 	bl	8006228 <__malloc_unlock>
 8005e2c:	e7e3      	b.n	8005df6 <_malloc_r+0x1e>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	1b5b      	subs	r3, r3, r5
 8005e32:	d417      	bmi.n	8005e64 <_malloc_r+0x8c>
 8005e34:	2b0b      	cmp	r3, #11
 8005e36:	d903      	bls.n	8005e40 <_malloc_r+0x68>
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	441c      	add	r4, r3
 8005e3c:	6025      	str	r5, [r4, #0]
 8005e3e:	e004      	b.n	8005e4a <_malloc_r+0x72>
 8005e40:	6863      	ldr	r3, [r4, #4]
 8005e42:	42a2      	cmp	r2, r4
 8005e44:	bf0c      	ite	eq
 8005e46:	600b      	streq	r3, [r1, #0]
 8005e48:	6053      	strne	r3, [r2, #4]
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f000 f9ec 	bl	8006228 <__malloc_unlock>
 8005e50:	f104 000b 	add.w	r0, r4, #11
 8005e54:	1d23      	adds	r3, r4, #4
 8005e56:	f020 0007 	bic.w	r0, r0, #7
 8005e5a:	1ac2      	subs	r2, r0, r3
 8005e5c:	d0cc      	beq.n	8005df8 <_malloc_r+0x20>
 8005e5e:	1a1b      	subs	r3, r3, r0
 8005e60:	50a3      	str	r3, [r4, r2]
 8005e62:	e7c9      	b.n	8005df8 <_malloc_r+0x20>
 8005e64:	4622      	mov	r2, r4
 8005e66:	6864      	ldr	r4, [r4, #4]
 8005e68:	e7cc      	b.n	8005e04 <_malloc_r+0x2c>
 8005e6a:	1cc4      	adds	r4, r0, #3
 8005e6c:	f024 0403 	bic.w	r4, r4, #3
 8005e70:	42a0      	cmp	r0, r4
 8005e72:	d0e3      	beq.n	8005e3c <_malloc_r+0x64>
 8005e74:	1a21      	subs	r1, r4, r0
 8005e76:	4630      	mov	r0, r6
 8005e78:	f000 f964 	bl	8006144 <_sbrk_r>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d1dd      	bne.n	8005e3c <_malloc_r+0x64>
 8005e80:	e7cf      	b.n	8005e22 <_malloc_r+0x4a>
 8005e82:	bf00      	nop
 8005e84:	200001f8 	.word	0x200001f8
 8005e88:	200001fc 	.word	0x200001fc

08005e8c <__ssputs_r>:
 8005e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e90:	688e      	ldr	r6, [r1, #8]
 8005e92:	429e      	cmp	r6, r3
 8005e94:	4682      	mov	sl, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	4690      	mov	r8, r2
 8005e9a:	461f      	mov	r7, r3
 8005e9c:	d838      	bhi.n	8005f10 <__ssputs_r+0x84>
 8005e9e:	898a      	ldrh	r2, [r1, #12]
 8005ea0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ea4:	d032      	beq.n	8005f0c <__ssputs_r+0x80>
 8005ea6:	6825      	ldr	r5, [r4, #0]
 8005ea8:	6909      	ldr	r1, [r1, #16]
 8005eaa:	eba5 0901 	sub.w	r9, r5, r1
 8005eae:	6965      	ldr	r5, [r4, #20]
 8005eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005eb8:	3301      	adds	r3, #1
 8005eba:	444b      	add	r3, r9
 8005ebc:	106d      	asrs	r5, r5, #1
 8005ebe:	429d      	cmp	r5, r3
 8005ec0:	bf38      	it	cc
 8005ec2:	461d      	movcc	r5, r3
 8005ec4:	0553      	lsls	r3, r2, #21
 8005ec6:	d531      	bpl.n	8005f2c <__ssputs_r+0xa0>
 8005ec8:	4629      	mov	r1, r5
 8005eca:	f7ff ff85 	bl	8005dd8 <_malloc_r>
 8005ece:	4606      	mov	r6, r0
 8005ed0:	b950      	cbnz	r0, 8005ee8 <__ssputs_r+0x5c>
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	f8ca 3000 	str.w	r3, [sl]
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ede:	81a3      	strh	r3, [r4, #12]
 8005ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee8:	6921      	ldr	r1, [r4, #16]
 8005eea:	464a      	mov	r2, r9
 8005eec:	f7ff fb88 	bl	8005600 <memcpy>
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efa:	81a3      	strh	r3, [r4, #12]
 8005efc:	6126      	str	r6, [r4, #16]
 8005efe:	6165      	str	r5, [r4, #20]
 8005f00:	444e      	add	r6, r9
 8005f02:	eba5 0509 	sub.w	r5, r5, r9
 8005f06:	6026      	str	r6, [r4, #0]
 8005f08:	60a5      	str	r5, [r4, #8]
 8005f0a:	463e      	mov	r6, r7
 8005f0c:	42be      	cmp	r6, r7
 8005f0e:	d900      	bls.n	8005f12 <__ssputs_r+0x86>
 8005f10:	463e      	mov	r6, r7
 8005f12:	4632      	mov	r2, r6
 8005f14:	6820      	ldr	r0, [r4, #0]
 8005f16:	4641      	mov	r1, r8
 8005f18:	f000 f966 	bl	80061e8 <memmove>
 8005f1c:	68a3      	ldr	r3, [r4, #8]
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	1b9b      	subs	r3, r3, r6
 8005f22:	4432      	add	r2, r6
 8005f24:	60a3      	str	r3, [r4, #8]
 8005f26:	6022      	str	r2, [r4, #0]
 8005f28:	2000      	movs	r0, #0
 8005f2a:	e7db      	b.n	8005ee4 <__ssputs_r+0x58>
 8005f2c:	462a      	mov	r2, r5
 8005f2e:	f000 f981 	bl	8006234 <_realloc_r>
 8005f32:	4606      	mov	r6, r0
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d1e1      	bne.n	8005efc <__ssputs_r+0x70>
 8005f38:	6921      	ldr	r1, [r4, #16]
 8005f3a:	4650      	mov	r0, sl
 8005f3c:	f7ff fefc 	bl	8005d38 <_free_r>
 8005f40:	e7c7      	b.n	8005ed2 <__ssputs_r+0x46>
	...

08005f44 <_svfiprintf_r>:
 8005f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f48:	4698      	mov	r8, r3
 8005f4a:	898b      	ldrh	r3, [r1, #12]
 8005f4c:	061b      	lsls	r3, r3, #24
 8005f4e:	b09d      	sub	sp, #116	; 0x74
 8005f50:	4607      	mov	r7, r0
 8005f52:	460d      	mov	r5, r1
 8005f54:	4614      	mov	r4, r2
 8005f56:	d50e      	bpl.n	8005f76 <_svfiprintf_r+0x32>
 8005f58:	690b      	ldr	r3, [r1, #16]
 8005f5a:	b963      	cbnz	r3, 8005f76 <_svfiprintf_r+0x32>
 8005f5c:	2140      	movs	r1, #64	; 0x40
 8005f5e:	f7ff ff3b 	bl	8005dd8 <_malloc_r>
 8005f62:	6028      	str	r0, [r5, #0]
 8005f64:	6128      	str	r0, [r5, #16]
 8005f66:	b920      	cbnz	r0, 8005f72 <_svfiprintf_r+0x2e>
 8005f68:	230c      	movs	r3, #12
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	e0d1      	b.n	8006116 <_svfiprintf_r+0x1d2>
 8005f72:	2340      	movs	r3, #64	; 0x40
 8005f74:	616b      	str	r3, [r5, #20]
 8005f76:	2300      	movs	r3, #0
 8005f78:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7a:	2320      	movs	r3, #32
 8005f7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f84:	2330      	movs	r3, #48	; 0x30
 8005f86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006130 <_svfiprintf_r+0x1ec>
 8005f8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f8e:	f04f 0901 	mov.w	r9, #1
 8005f92:	4623      	mov	r3, r4
 8005f94:	469a      	mov	sl, r3
 8005f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f9a:	b10a      	cbz	r2, 8005fa0 <_svfiprintf_r+0x5c>
 8005f9c:	2a25      	cmp	r2, #37	; 0x25
 8005f9e:	d1f9      	bne.n	8005f94 <_svfiprintf_r+0x50>
 8005fa0:	ebba 0b04 	subs.w	fp, sl, r4
 8005fa4:	d00b      	beq.n	8005fbe <_svfiprintf_r+0x7a>
 8005fa6:	465b      	mov	r3, fp
 8005fa8:	4622      	mov	r2, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	4638      	mov	r0, r7
 8005fae:	f7ff ff6d 	bl	8005e8c <__ssputs_r>
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	f000 80aa 	beq.w	800610c <_svfiprintf_r+0x1c8>
 8005fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fba:	445a      	add	r2, fp
 8005fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8005fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80a2 	beq.w	800610c <_svfiprintf_r+0x1c8>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fd2:	f10a 0a01 	add.w	sl, sl, #1
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	9307      	str	r3, [sp, #28]
 8005fda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fde:	931a      	str	r3, [sp, #104]	; 0x68
 8005fe0:	4654      	mov	r4, sl
 8005fe2:	2205      	movs	r2, #5
 8005fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe8:	4851      	ldr	r0, [pc, #324]	; (8006130 <_svfiprintf_r+0x1ec>)
 8005fea:	f7fa f919 	bl	8000220 <memchr>
 8005fee:	9a04      	ldr	r2, [sp, #16]
 8005ff0:	b9d8      	cbnz	r0, 800602a <_svfiprintf_r+0xe6>
 8005ff2:	06d0      	lsls	r0, r2, #27
 8005ff4:	bf44      	itt	mi
 8005ff6:	2320      	movmi	r3, #32
 8005ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ffc:	0711      	lsls	r1, r2, #28
 8005ffe:	bf44      	itt	mi
 8006000:	232b      	movmi	r3, #43	; 0x2b
 8006002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006006:	f89a 3000 	ldrb.w	r3, [sl]
 800600a:	2b2a      	cmp	r3, #42	; 0x2a
 800600c:	d015      	beq.n	800603a <_svfiprintf_r+0xf6>
 800600e:	9a07      	ldr	r2, [sp, #28]
 8006010:	4654      	mov	r4, sl
 8006012:	2000      	movs	r0, #0
 8006014:	f04f 0c0a 	mov.w	ip, #10
 8006018:	4621      	mov	r1, r4
 800601a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800601e:	3b30      	subs	r3, #48	; 0x30
 8006020:	2b09      	cmp	r3, #9
 8006022:	d94e      	bls.n	80060c2 <_svfiprintf_r+0x17e>
 8006024:	b1b0      	cbz	r0, 8006054 <_svfiprintf_r+0x110>
 8006026:	9207      	str	r2, [sp, #28]
 8006028:	e014      	b.n	8006054 <_svfiprintf_r+0x110>
 800602a:	eba0 0308 	sub.w	r3, r0, r8
 800602e:	fa09 f303 	lsl.w	r3, r9, r3
 8006032:	4313      	orrs	r3, r2
 8006034:	9304      	str	r3, [sp, #16]
 8006036:	46a2      	mov	sl, r4
 8006038:	e7d2      	b.n	8005fe0 <_svfiprintf_r+0x9c>
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	1d19      	adds	r1, r3, #4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	9103      	str	r1, [sp, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	bfbb      	ittet	lt
 8006046:	425b      	neglt	r3, r3
 8006048:	f042 0202 	orrlt.w	r2, r2, #2
 800604c:	9307      	strge	r3, [sp, #28]
 800604e:	9307      	strlt	r3, [sp, #28]
 8006050:	bfb8      	it	lt
 8006052:	9204      	strlt	r2, [sp, #16]
 8006054:	7823      	ldrb	r3, [r4, #0]
 8006056:	2b2e      	cmp	r3, #46	; 0x2e
 8006058:	d10c      	bne.n	8006074 <_svfiprintf_r+0x130>
 800605a:	7863      	ldrb	r3, [r4, #1]
 800605c:	2b2a      	cmp	r3, #42	; 0x2a
 800605e:	d135      	bne.n	80060cc <_svfiprintf_r+0x188>
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	1d1a      	adds	r2, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	9203      	str	r2, [sp, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	bfb8      	it	lt
 800606c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006070:	3402      	adds	r4, #2
 8006072:	9305      	str	r3, [sp, #20]
 8006074:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006140 <_svfiprintf_r+0x1fc>
 8006078:	7821      	ldrb	r1, [r4, #0]
 800607a:	2203      	movs	r2, #3
 800607c:	4650      	mov	r0, sl
 800607e:	f7fa f8cf 	bl	8000220 <memchr>
 8006082:	b140      	cbz	r0, 8006096 <_svfiprintf_r+0x152>
 8006084:	2340      	movs	r3, #64	; 0x40
 8006086:	eba0 000a 	sub.w	r0, r0, sl
 800608a:	fa03 f000 	lsl.w	r0, r3, r0
 800608e:	9b04      	ldr	r3, [sp, #16]
 8006090:	4303      	orrs	r3, r0
 8006092:	3401      	adds	r4, #1
 8006094:	9304      	str	r3, [sp, #16]
 8006096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609a:	4826      	ldr	r0, [pc, #152]	; (8006134 <_svfiprintf_r+0x1f0>)
 800609c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060a0:	2206      	movs	r2, #6
 80060a2:	f7fa f8bd 	bl	8000220 <memchr>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d038      	beq.n	800611c <_svfiprintf_r+0x1d8>
 80060aa:	4b23      	ldr	r3, [pc, #140]	; (8006138 <_svfiprintf_r+0x1f4>)
 80060ac:	bb1b      	cbnz	r3, 80060f6 <_svfiprintf_r+0x1b2>
 80060ae:	9b03      	ldr	r3, [sp, #12]
 80060b0:	3307      	adds	r3, #7
 80060b2:	f023 0307 	bic.w	r3, r3, #7
 80060b6:	3308      	adds	r3, #8
 80060b8:	9303      	str	r3, [sp, #12]
 80060ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060bc:	4433      	add	r3, r6
 80060be:	9309      	str	r3, [sp, #36]	; 0x24
 80060c0:	e767      	b.n	8005f92 <_svfiprintf_r+0x4e>
 80060c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060c6:	460c      	mov	r4, r1
 80060c8:	2001      	movs	r0, #1
 80060ca:	e7a5      	b.n	8006018 <_svfiprintf_r+0xd4>
 80060cc:	2300      	movs	r3, #0
 80060ce:	3401      	adds	r4, #1
 80060d0:	9305      	str	r3, [sp, #20]
 80060d2:	4619      	mov	r1, r3
 80060d4:	f04f 0c0a 	mov.w	ip, #10
 80060d8:	4620      	mov	r0, r4
 80060da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060de:	3a30      	subs	r2, #48	; 0x30
 80060e0:	2a09      	cmp	r2, #9
 80060e2:	d903      	bls.n	80060ec <_svfiprintf_r+0x1a8>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0c5      	beq.n	8006074 <_svfiprintf_r+0x130>
 80060e8:	9105      	str	r1, [sp, #20]
 80060ea:	e7c3      	b.n	8006074 <_svfiprintf_r+0x130>
 80060ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80060f0:	4604      	mov	r4, r0
 80060f2:	2301      	movs	r3, #1
 80060f4:	e7f0      	b.n	80060d8 <_svfiprintf_r+0x194>
 80060f6:	ab03      	add	r3, sp, #12
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	462a      	mov	r2, r5
 80060fc:	4b0f      	ldr	r3, [pc, #60]	; (800613c <_svfiprintf_r+0x1f8>)
 80060fe:	a904      	add	r1, sp, #16
 8006100:	4638      	mov	r0, r7
 8006102:	f7fe f80d 	bl	8004120 <_printf_float>
 8006106:	1c42      	adds	r2, r0, #1
 8006108:	4606      	mov	r6, r0
 800610a:	d1d6      	bne.n	80060ba <_svfiprintf_r+0x176>
 800610c:	89ab      	ldrh	r3, [r5, #12]
 800610e:	065b      	lsls	r3, r3, #25
 8006110:	f53f af2c 	bmi.w	8005f6c <_svfiprintf_r+0x28>
 8006114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006116:	b01d      	add	sp, #116	; 0x74
 8006118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611c:	ab03      	add	r3, sp, #12
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	462a      	mov	r2, r5
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <_svfiprintf_r+0x1f8>)
 8006124:	a904      	add	r1, sp, #16
 8006126:	4638      	mov	r0, r7
 8006128:	f7fe fa9e 	bl	8004668 <_printf_i>
 800612c:	e7eb      	b.n	8006106 <_svfiprintf_r+0x1c2>
 800612e:	bf00      	nop
 8006130:	0800710c 	.word	0x0800710c
 8006134:	08007116 	.word	0x08007116
 8006138:	08004121 	.word	0x08004121
 800613c:	08005e8d 	.word	0x08005e8d
 8006140:	08007112 	.word	0x08007112

08006144 <_sbrk_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	4d06      	ldr	r5, [pc, #24]	; (8006160 <_sbrk_r+0x1c>)
 8006148:	2300      	movs	r3, #0
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	f000 fe14 	bl	8006d7c <_sbrk>
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	d102      	bne.n	800615e <_sbrk_r+0x1a>
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	b103      	cbz	r3, 800615e <_sbrk_r+0x1a>
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	2000026c 	.word	0x2000026c

08006164 <__assert_func>:
 8006164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006166:	4614      	mov	r4, r2
 8006168:	461a      	mov	r2, r3
 800616a:	4b09      	ldr	r3, [pc, #36]	; (8006190 <__assert_func+0x2c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4605      	mov	r5, r0
 8006170:	68d8      	ldr	r0, [r3, #12]
 8006172:	b14c      	cbz	r4, 8006188 <__assert_func+0x24>
 8006174:	4b07      	ldr	r3, [pc, #28]	; (8006194 <__assert_func+0x30>)
 8006176:	9100      	str	r1, [sp, #0]
 8006178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800617c:	4906      	ldr	r1, [pc, #24]	; (8006198 <__assert_func+0x34>)
 800617e:	462b      	mov	r3, r5
 8006180:	f000 f80e 	bl	80061a0 <fiprintf>
 8006184:	f000 faa4 	bl	80066d0 <abort>
 8006188:	4b04      	ldr	r3, [pc, #16]	; (800619c <__assert_func+0x38>)
 800618a:	461c      	mov	r4, r3
 800618c:	e7f3      	b.n	8006176 <__assert_func+0x12>
 800618e:	bf00      	nop
 8006190:	2000000c 	.word	0x2000000c
 8006194:	0800711d 	.word	0x0800711d
 8006198:	0800712a 	.word	0x0800712a
 800619c:	08007158 	.word	0x08007158

080061a0 <fiprintf>:
 80061a0:	b40e      	push	{r1, r2, r3}
 80061a2:	b503      	push	{r0, r1, lr}
 80061a4:	4601      	mov	r1, r0
 80061a6:	ab03      	add	r3, sp, #12
 80061a8:	4805      	ldr	r0, [pc, #20]	; (80061c0 <fiprintf+0x20>)
 80061aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ae:	6800      	ldr	r0, [r0, #0]
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	f000 f88f 	bl	80062d4 <_vfiprintf_r>
 80061b6:	b002      	add	sp, #8
 80061b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061bc:	b003      	add	sp, #12
 80061be:	4770      	bx	lr
 80061c0:	2000000c 	.word	0x2000000c

080061c4 <__ascii_mbtowc>:
 80061c4:	b082      	sub	sp, #8
 80061c6:	b901      	cbnz	r1, 80061ca <__ascii_mbtowc+0x6>
 80061c8:	a901      	add	r1, sp, #4
 80061ca:	b142      	cbz	r2, 80061de <__ascii_mbtowc+0x1a>
 80061cc:	b14b      	cbz	r3, 80061e2 <__ascii_mbtowc+0x1e>
 80061ce:	7813      	ldrb	r3, [r2, #0]
 80061d0:	600b      	str	r3, [r1, #0]
 80061d2:	7812      	ldrb	r2, [r2, #0]
 80061d4:	1e10      	subs	r0, r2, #0
 80061d6:	bf18      	it	ne
 80061d8:	2001      	movne	r0, #1
 80061da:	b002      	add	sp, #8
 80061dc:	4770      	bx	lr
 80061de:	4610      	mov	r0, r2
 80061e0:	e7fb      	b.n	80061da <__ascii_mbtowc+0x16>
 80061e2:	f06f 0001 	mvn.w	r0, #1
 80061e6:	e7f8      	b.n	80061da <__ascii_mbtowc+0x16>

080061e8 <memmove>:
 80061e8:	4288      	cmp	r0, r1
 80061ea:	b510      	push	{r4, lr}
 80061ec:	eb01 0402 	add.w	r4, r1, r2
 80061f0:	d902      	bls.n	80061f8 <memmove+0x10>
 80061f2:	4284      	cmp	r4, r0
 80061f4:	4623      	mov	r3, r4
 80061f6:	d807      	bhi.n	8006208 <memmove+0x20>
 80061f8:	1e43      	subs	r3, r0, #1
 80061fa:	42a1      	cmp	r1, r4
 80061fc:	d008      	beq.n	8006210 <memmove+0x28>
 80061fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006206:	e7f8      	b.n	80061fa <memmove+0x12>
 8006208:	4402      	add	r2, r0
 800620a:	4601      	mov	r1, r0
 800620c:	428a      	cmp	r2, r1
 800620e:	d100      	bne.n	8006212 <memmove+0x2a>
 8006210:	bd10      	pop	{r4, pc}
 8006212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800621a:	e7f7      	b.n	800620c <memmove+0x24>

0800621c <__malloc_lock>:
 800621c:	4801      	ldr	r0, [pc, #4]	; (8006224 <__malloc_lock+0x8>)
 800621e:	f000 bc17 	b.w	8006a50 <__retarget_lock_acquire_recursive>
 8006222:	bf00      	nop
 8006224:	20000274 	.word	0x20000274

08006228 <__malloc_unlock>:
 8006228:	4801      	ldr	r0, [pc, #4]	; (8006230 <__malloc_unlock+0x8>)
 800622a:	f000 bc12 	b.w	8006a52 <__retarget_lock_release_recursive>
 800622e:	bf00      	nop
 8006230:	20000274 	.word	0x20000274

08006234 <_realloc_r>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	4607      	mov	r7, r0
 8006238:	4614      	mov	r4, r2
 800623a:	460e      	mov	r6, r1
 800623c:	b921      	cbnz	r1, 8006248 <_realloc_r+0x14>
 800623e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006242:	4611      	mov	r1, r2
 8006244:	f7ff bdc8 	b.w	8005dd8 <_malloc_r>
 8006248:	b922      	cbnz	r2, 8006254 <_realloc_r+0x20>
 800624a:	f7ff fd75 	bl	8005d38 <_free_r>
 800624e:	4625      	mov	r5, r4
 8006250:	4628      	mov	r0, r5
 8006252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006254:	f000 fc62 	bl	8006b1c <_malloc_usable_size_r>
 8006258:	42a0      	cmp	r0, r4
 800625a:	d20f      	bcs.n	800627c <_realloc_r+0x48>
 800625c:	4621      	mov	r1, r4
 800625e:	4638      	mov	r0, r7
 8006260:	f7ff fdba 	bl	8005dd8 <_malloc_r>
 8006264:	4605      	mov	r5, r0
 8006266:	2800      	cmp	r0, #0
 8006268:	d0f2      	beq.n	8006250 <_realloc_r+0x1c>
 800626a:	4631      	mov	r1, r6
 800626c:	4622      	mov	r2, r4
 800626e:	f7ff f9c7 	bl	8005600 <memcpy>
 8006272:	4631      	mov	r1, r6
 8006274:	4638      	mov	r0, r7
 8006276:	f7ff fd5f 	bl	8005d38 <_free_r>
 800627a:	e7e9      	b.n	8006250 <_realloc_r+0x1c>
 800627c:	4635      	mov	r5, r6
 800627e:	e7e7      	b.n	8006250 <_realloc_r+0x1c>

08006280 <__sfputc_r>:
 8006280:	6893      	ldr	r3, [r2, #8]
 8006282:	3b01      	subs	r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	b410      	push	{r4}
 8006288:	6093      	str	r3, [r2, #8]
 800628a:	da08      	bge.n	800629e <__sfputc_r+0x1e>
 800628c:	6994      	ldr	r4, [r2, #24]
 800628e:	42a3      	cmp	r3, r4
 8006290:	db01      	blt.n	8006296 <__sfputc_r+0x16>
 8006292:	290a      	cmp	r1, #10
 8006294:	d103      	bne.n	800629e <__sfputc_r+0x1e>
 8006296:	f85d 4b04 	ldr.w	r4, [sp], #4
 800629a:	f000 b94b 	b.w	8006534 <__swbuf_r>
 800629e:	6813      	ldr	r3, [r2, #0]
 80062a0:	1c58      	adds	r0, r3, #1
 80062a2:	6010      	str	r0, [r2, #0]
 80062a4:	7019      	strb	r1, [r3, #0]
 80062a6:	4608      	mov	r0, r1
 80062a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <__sfputs_r>:
 80062ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b0:	4606      	mov	r6, r0
 80062b2:	460f      	mov	r7, r1
 80062b4:	4614      	mov	r4, r2
 80062b6:	18d5      	adds	r5, r2, r3
 80062b8:	42ac      	cmp	r4, r5
 80062ba:	d101      	bne.n	80062c0 <__sfputs_r+0x12>
 80062bc:	2000      	movs	r0, #0
 80062be:	e007      	b.n	80062d0 <__sfputs_r+0x22>
 80062c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c4:	463a      	mov	r2, r7
 80062c6:	4630      	mov	r0, r6
 80062c8:	f7ff ffda 	bl	8006280 <__sfputc_r>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d1f3      	bne.n	80062b8 <__sfputs_r+0xa>
 80062d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062d4 <_vfiprintf_r>:
 80062d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	460d      	mov	r5, r1
 80062da:	b09d      	sub	sp, #116	; 0x74
 80062dc:	4614      	mov	r4, r2
 80062de:	4698      	mov	r8, r3
 80062e0:	4606      	mov	r6, r0
 80062e2:	b118      	cbz	r0, 80062ec <_vfiprintf_r+0x18>
 80062e4:	6983      	ldr	r3, [r0, #24]
 80062e6:	b90b      	cbnz	r3, 80062ec <_vfiprintf_r+0x18>
 80062e8:	f000 fb14 	bl	8006914 <__sinit>
 80062ec:	4b89      	ldr	r3, [pc, #548]	; (8006514 <_vfiprintf_r+0x240>)
 80062ee:	429d      	cmp	r5, r3
 80062f0:	d11b      	bne.n	800632a <_vfiprintf_r+0x56>
 80062f2:	6875      	ldr	r5, [r6, #4]
 80062f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f6:	07d9      	lsls	r1, r3, #31
 80062f8:	d405      	bmi.n	8006306 <_vfiprintf_r+0x32>
 80062fa:	89ab      	ldrh	r3, [r5, #12]
 80062fc:	059a      	lsls	r2, r3, #22
 80062fe:	d402      	bmi.n	8006306 <_vfiprintf_r+0x32>
 8006300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006302:	f000 fba5 	bl	8006a50 <__retarget_lock_acquire_recursive>
 8006306:	89ab      	ldrh	r3, [r5, #12]
 8006308:	071b      	lsls	r3, r3, #28
 800630a:	d501      	bpl.n	8006310 <_vfiprintf_r+0x3c>
 800630c:	692b      	ldr	r3, [r5, #16]
 800630e:	b9eb      	cbnz	r3, 800634c <_vfiprintf_r+0x78>
 8006310:	4629      	mov	r1, r5
 8006312:	4630      	mov	r0, r6
 8006314:	f000 f96e 	bl	80065f4 <__swsetup_r>
 8006318:	b1c0      	cbz	r0, 800634c <_vfiprintf_r+0x78>
 800631a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800631c:	07dc      	lsls	r4, r3, #31
 800631e:	d50e      	bpl.n	800633e <_vfiprintf_r+0x6a>
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	b01d      	add	sp, #116	; 0x74
 8006326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632a:	4b7b      	ldr	r3, [pc, #492]	; (8006518 <_vfiprintf_r+0x244>)
 800632c:	429d      	cmp	r5, r3
 800632e:	d101      	bne.n	8006334 <_vfiprintf_r+0x60>
 8006330:	68b5      	ldr	r5, [r6, #8]
 8006332:	e7df      	b.n	80062f4 <_vfiprintf_r+0x20>
 8006334:	4b79      	ldr	r3, [pc, #484]	; (800651c <_vfiprintf_r+0x248>)
 8006336:	429d      	cmp	r5, r3
 8006338:	bf08      	it	eq
 800633a:	68f5      	ldreq	r5, [r6, #12]
 800633c:	e7da      	b.n	80062f4 <_vfiprintf_r+0x20>
 800633e:	89ab      	ldrh	r3, [r5, #12]
 8006340:	0598      	lsls	r0, r3, #22
 8006342:	d4ed      	bmi.n	8006320 <_vfiprintf_r+0x4c>
 8006344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006346:	f000 fb84 	bl	8006a52 <__retarget_lock_release_recursive>
 800634a:	e7e9      	b.n	8006320 <_vfiprintf_r+0x4c>
 800634c:	2300      	movs	r3, #0
 800634e:	9309      	str	r3, [sp, #36]	; 0x24
 8006350:	2320      	movs	r3, #32
 8006352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006356:	f8cd 800c 	str.w	r8, [sp, #12]
 800635a:	2330      	movs	r3, #48	; 0x30
 800635c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006520 <_vfiprintf_r+0x24c>
 8006360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006364:	f04f 0901 	mov.w	r9, #1
 8006368:	4623      	mov	r3, r4
 800636a:	469a      	mov	sl, r3
 800636c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006370:	b10a      	cbz	r2, 8006376 <_vfiprintf_r+0xa2>
 8006372:	2a25      	cmp	r2, #37	; 0x25
 8006374:	d1f9      	bne.n	800636a <_vfiprintf_r+0x96>
 8006376:	ebba 0b04 	subs.w	fp, sl, r4
 800637a:	d00b      	beq.n	8006394 <_vfiprintf_r+0xc0>
 800637c:	465b      	mov	r3, fp
 800637e:	4622      	mov	r2, r4
 8006380:	4629      	mov	r1, r5
 8006382:	4630      	mov	r0, r6
 8006384:	f7ff ff93 	bl	80062ae <__sfputs_r>
 8006388:	3001      	adds	r0, #1
 800638a:	f000 80aa 	beq.w	80064e2 <_vfiprintf_r+0x20e>
 800638e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006390:	445a      	add	r2, fp
 8006392:	9209      	str	r2, [sp, #36]	; 0x24
 8006394:	f89a 3000 	ldrb.w	r3, [sl]
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80a2 	beq.w	80064e2 <_vfiprintf_r+0x20e>
 800639e:	2300      	movs	r3, #0
 80063a0:	f04f 32ff 	mov.w	r2, #4294967295
 80063a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063a8:	f10a 0a01 	add.w	sl, sl, #1
 80063ac:	9304      	str	r3, [sp, #16]
 80063ae:	9307      	str	r3, [sp, #28]
 80063b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063b4:	931a      	str	r3, [sp, #104]	; 0x68
 80063b6:	4654      	mov	r4, sl
 80063b8:	2205      	movs	r2, #5
 80063ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063be:	4858      	ldr	r0, [pc, #352]	; (8006520 <_vfiprintf_r+0x24c>)
 80063c0:	f7f9 ff2e 	bl	8000220 <memchr>
 80063c4:	9a04      	ldr	r2, [sp, #16]
 80063c6:	b9d8      	cbnz	r0, 8006400 <_vfiprintf_r+0x12c>
 80063c8:	06d1      	lsls	r1, r2, #27
 80063ca:	bf44      	itt	mi
 80063cc:	2320      	movmi	r3, #32
 80063ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063d2:	0713      	lsls	r3, r2, #28
 80063d4:	bf44      	itt	mi
 80063d6:	232b      	movmi	r3, #43	; 0x2b
 80063d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063dc:	f89a 3000 	ldrb.w	r3, [sl]
 80063e0:	2b2a      	cmp	r3, #42	; 0x2a
 80063e2:	d015      	beq.n	8006410 <_vfiprintf_r+0x13c>
 80063e4:	9a07      	ldr	r2, [sp, #28]
 80063e6:	4654      	mov	r4, sl
 80063e8:	2000      	movs	r0, #0
 80063ea:	f04f 0c0a 	mov.w	ip, #10
 80063ee:	4621      	mov	r1, r4
 80063f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063f4:	3b30      	subs	r3, #48	; 0x30
 80063f6:	2b09      	cmp	r3, #9
 80063f8:	d94e      	bls.n	8006498 <_vfiprintf_r+0x1c4>
 80063fa:	b1b0      	cbz	r0, 800642a <_vfiprintf_r+0x156>
 80063fc:	9207      	str	r2, [sp, #28]
 80063fe:	e014      	b.n	800642a <_vfiprintf_r+0x156>
 8006400:	eba0 0308 	sub.w	r3, r0, r8
 8006404:	fa09 f303 	lsl.w	r3, r9, r3
 8006408:	4313      	orrs	r3, r2
 800640a:	9304      	str	r3, [sp, #16]
 800640c:	46a2      	mov	sl, r4
 800640e:	e7d2      	b.n	80063b6 <_vfiprintf_r+0xe2>
 8006410:	9b03      	ldr	r3, [sp, #12]
 8006412:	1d19      	adds	r1, r3, #4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	9103      	str	r1, [sp, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	bfbb      	ittet	lt
 800641c:	425b      	neglt	r3, r3
 800641e:	f042 0202 	orrlt.w	r2, r2, #2
 8006422:	9307      	strge	r3, [sp, #28]
 8006424:	9307      	strlt	r3, [sp, #28]
 8006426:	bfb8      	it	lt
 8006428:	9204      	strlt	r2, [sp, #16]
 800642a:	7823      	ldrb	r3, [r4, #0]
 800642c:	2b2e      	cmp	r3, #46	; 0x2e
 800642e:	d10c      	bne.n	800644a <_vfiprintf_r+0x176>
 8006430:	7863      	ldrb	r3, [r4, #1]
 8006432:	2b2a      	cmp	r3, #42	; 0x2a
 8006434:	d135      	bne.n	80064a2 <_vfiprintf_r+0x1ce>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	1d1a      	adds	r2, r3, #4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	9203      	str	r2, [sp, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	bfb8      	it	lt
 8006442:	f04f 33ff 	movlt.w	r3, #4294967295
 8006446:	3402      	adds	r4, #2
 8006448:	9305      	str	r3, [sp, #20]
 800644a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006530 <_vfiprintf_r+0x25c>
 800644e:	7821      	ldrb	r1, [r4, #0]
 8006450:	2203      	movs	r2, #3
 8006452:	4650      	mov	r0, sl
 8006454:	f7f9 fee4 	bl	8000220 <memchr>
 8006458:	b140      	cbz	r0, 800646c <_vfiprintf_r+0x198>
 800645a:	2340      	movs	r3, #64	; 0x40
 800645c:	eba0 000a 	sub.w	r0, r0, sl
 8006460:	fa03 f000 	lsl.w	r0, r3, r0
 8006464:	9b04      	ldr	r3, [sp, #16]
 8006466:	4303      	orrs	r3, r0
 8006468:	3401      	adds	r4, #1
 800646a:	9304      	str	r3, [sp, #16]
 800646c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006470:	482c      	ldr	r0, [pc, #176]	; (8006524 <_vfiprintf_r+0x250>)
 8006472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006476:	2206      	movs	r2, #6
 8006478:	f7f9 fed2 	bl	8000220 <memchr>
 800647c:	2800      	cmp	r0, #0
 800647e:	d03f      	beq.n	8006500 <_vfiprintf_r+0x22c>
 8006480:	4b29      	ldr	r3, [pc, #164]	; (8006528 <_vfiprintf_r+0x254>)
 8006482:	bb1b      	cbnz	r3, 80064cc <_vfiprintf_r+0x1f8>
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	3307      	adds	r3, #7
 8006488:	f023 0307 	bic.w	r3, r3, #7
 800648c:	3308      	adds	r3, #8
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006492:	443b      	add	r3, r7
 8006494:	9309      	str	r3, [sp, #36]	; 0x24
 8006496:	e767      	b.n	8006368 <_vfiprintf_r+0x94>
 8006498:	fb0c 3202 	mla	r2, ip, r2, r3
 800649c:	460c      	mov	r4, r1
 800649e:	2001      	movs	r0, #1
 80064a0:	e7a5      	b.n	80063ee <_vfiprintf_r+0x11a>
 80064a2:	2300      	movs	r3, #0
 80064a4:	3401      	adds	r4, #1
 80064a6:	9305      	str	r3, [sp, #20]
 80064a8:	4619      	mov	r1, r3
 80064aa:	f04f 0c0a 	mov.w	ip, #10
 80064ae:	4620      	mov	r0, r4
 80064b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064b4:	3a30      	subs	r2, #48	; 0x30
 80064b6:	2a09      	cmp	r2, #9
 80064b8:	d903      	bls.n	80064c2 <_vfiprintf_r+0x1ee>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0c5      	beq.n	800644a <_vfiprintf_r+0x176>
 80064be:	9105      	str	r1, [sp, #20]
 80064c0:	e7c3      	b.n	800644a <_vfiprintf_r+0x176>
 80064c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80064c6:	4604      	mov	r4, r0
 80064c8:	2301      	movs	r3, #1
 80064ca:	e7f0      	b.n	80064ae <_vfiprintf_r+0x1da>
 80064cc:	ab03      	add	r3, sp, #12
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	462a      	mov	r2, r5
 80064d2:	4b16      	ldr	r3, [pc, #88]	; (800652c <_vfiprintf_r+0x258>)
 80064d4:	a904      	add	r1, sp, #16
 80064d6:	4630      	mov	r0, r6
 80064d8:	f7fd fe22 	bl	8004120 <_printf_float>
 80064dc:	4607      	mov	r7, r0
 80064de:	1c78      	adds	r0, r7, #1
 80064e0:	d1d6      	bne.n	8006490 <_vfiprintf_r+0x1bc>
 80064e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064e4:	07d9      	lsls	r1, r3, #31
 80064e6:	d405      	bmi.n	80064f4 <_vfiprintf_r+0x220>
 80064e8:	89ab      	ldrh	r3, [r5, #12]
 80064ea:	059a      	lsls	r2, r3, #22
 80064ec:	d402      	bmi.n	80064f4 <_vfiprintf_r+0x220>
 80064ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064f0:	f000 faaf 	bl	8006a52 <__retarget_lock_release_recursive>
 80064f4:	89ab      	ldrh	r3, [r5, #12]
 80064f6:	065b      	lsls	r3, r3, #25
 80064f8:	f53f af12 	bmi.w	8006320 <_vfiprintf_r+0x4c>
 80064fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064fe:	e711      	b.n	8006324 <_vfiprintf_r+0x50>
 8006500:	ab03      	add	r3, sp, #12
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	462a      	mov	r2, r5
 8006506:	4b09      	ldr	r3, [pc, #36]	; (800652c <_vfiprintf_r+0x258>)
 8006508:	a904      	add	r1, sp, #16
 800650a:	4630      	mov	r0, r6
 800650c:	f7fe f8ac 	bl	8004668 <_printf_i>
 8006510:	e7e4      	b.n	80064dc <_vfiprintf_r+0x208>
 8006512:	bf00      	nop
 8006514:	08007284 	.word	0x08007284
 8006518:	080072a4 	.word	0x080072a4
 800651c:	08007264 	.word	0x08007264
 8006520:	0800710c 	.word	0x0800710c
 8006524:	08007116 	.word	0x08007116
 8006528:	08004121 	.word	0x08004121
 800652c:	080062af 	.word	0x080062af
 8006530:	08007112 	.word	0x08007112

08006534 <__swbuf_r>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	460e      	mov	r6, r1
 8006538:	4614      	mov	r4, r2
 800653a:	4605      	mov	r5, r0
 800653c:	b118      	cbz	r0, 8006546 <__swbuf_r+0x12>
 800653e:	6983      	ldr	r3, [r0, #24]
 8006540:	b90b      	cbnz	r3, 8006546 <__swbuf_r+0x12>
 8006542:	f000 f9e7 	bl	8006914 <__sinit>
 8006546:	4b21      	ldr	r3, [pc, #132]	; (80065cc <__swbuf_r+0x98>)
 8006548:	429c      	cmp	r4, r3
 800654a:	d12b      	bne.n	80065a4 <__swbuf_r+0x70>
 800654c:	686c      	ldr	r4, [r5, #4]
 800654e:	69a3      	ldr	r3, [r4, #24]
 8006550:	60a3      	str	r3, [r4, #8]
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	071a      	lsls	r2, r3, #28
 8006556:	d52f      	bpl.n	80065b8 <__swbuf_r+0x84>
 8006558:	6923      	ldr	r3, [r4, #16]
 800655a:	b36b      	cbz	r3, 80065b8 <__swbuf_r+0x84>
 800655c:	6923      	ldr	r3, [r4, #16]
 800655e:	6820      	ldr	r0, [r4, #0]
 8006560:	1ac0      	subs	r0, r0, r3
 8006562:	6963      	ldr	r3, [r4, #20]
 8006564:	b2f6      	uxtb	r6, r6
 8006566:	4283      	cmp	r3, r0
 8006568:	4637      	mov	r7, r6
 800656a:	dc04      	bgt.n	8006576 <__swbuf_r+0x42>
 800656c:	4621      	mov	r1, r4
 800656e:	4628      	mov	r0, r5
 8006570:	f000 f93c 	bl	80067ec <_fflush_r>
 8006574:	bb30      	cbnz	r0, 80065c4 <__swbuf_r+0x90>
 8006576:	68a3      	ldr	r3, [r4, #8]
 8006578:	3b01      	subs	r3, #1
 800657a:	60a3      	str	r3, [r4, #8]
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	6022      	str	r2, [r4, #0]
 8006582:	701e      	strb	r6, [r3, #0]
 8006584:	6963      	ldr	r3, [r4, #20]
 8006586:	3001      	adds	r0, #1
 8006588:	4283      	cmp	r3, r0
 800658a:	d004      	beq.n	8006596 <__swbuf_r+0x62>
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	07db      	lsls	r3, r3, #31
 8006590:	d506      	bpl.n	80065a0 <__swbuf_r+0x6c>
 8006592:	2e0a      	cmp	r6, #10
 8006594:	d104      	bne.n	80065a0 <__swbuf_r+0x6c>
 8006596:	4621      	mov	r1, r4
 8006598:	4628      	mov	r0, r5
 800659a:	f000 f927 	bl	80067ec <_fflush_r>
 800659e:	b988      	cbnz	r0, 80065c4 <__swbuf_r+0x90>
 80065a0:	4638      	mov	r0, r7
 80065a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <__swbuf_r+0x9c>)
 80065a6:	429c      	cmp	r4, r3
 80065a8:	d101      	bne.n	80065ae <__swbuf_r+0x7a>
 80065aa:	68ac      	ldr	r4, [r5, #8]
 80065ac:	e7cf      	b.n	800654e <__swbuf_r+0x1a>
 80065ae:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <__swbuf_r+0xa0>)
 80065b0:	429c      	cmp	r4, r3
 80065b2:	bf08      	it	eq
 80065b4:	68ec      	ldreq	r4, [r5, #12]
 80065b6:	e7ca      	b.n	800654e <__swbuf_r+0x1a>
 80065b8:	4621      	mov	r1, r4
 80065ba:	4628      	mov	r0, r5
 80065bc:	f000 f81a 	bl	80065f4 <__swsetup_r>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d0cb      	beq.n	800655c <__swbuf_r+0x28>
 80065c4:	f04f 37ff 	mov.w	r7, #4294967295
 80065c8:	e7ea      	b.n	80065a0 <__swbuf_r+0x6c>
 80065ca:	bf00      	nop
 80065cc:	08007284 	.word	0x08007284
 80065d0:	080072a4 	.word	0x080072a4
 80065d4:	08007264 	.word	0x08007264

080065d8 <__ascii_wctomb>:
 80065d8:	b149      	cbz	r1, 80065ee <__ascii_wctomb+0x16>
 80065da:	2aff      	cmp	r2, #255	; 0xff
 80065dc:	bf85      	ittet	hi
 80065de:	238a      	movhi	r3, #138	; 0x8a
 80065e0:	6003      	strhi	r3, [r0, #0]
 80065e2:	700a      	strbls	r2, [r1, #0]
 80065e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80065e8:	bf98      	it	ls
 80065ea:	2001      	movls	r0, #1
 80065ec:	4770      	bx	lr
 80065ee:	4608      	mov	r0, r1
 80065f0:	4770      	bx	lr
	...

080065f4 <__swsetup_r>:
 80065f4:	4b32      	ldr	r3, [pc, #200]	; (80066c0 <__swsetup_r+0xcc>)
 80065f6:	b570      	push	{r4, r5, r6, lr}
 80065f8:	681d      	ldr	r5, [r3, #0]
 80065fa:	4606      	mov	r6, r0
 80065fc:	460c      	mov	r4, r1
 80065fe:	b125      	cbz	r5, 800660a <__swsetup_r+0x16>
 8006600:	69ab      	ldr	r3, [r5, #24]
 8006602:	b913      	cbnz	r3, 800660a <__swsetup_r+0x16>
 8006604:	4628      	mov	r0, r5
 8006606:	f000 f985 	bl	8006914 <__sinit>
 800660a:	4b2e      	ldr	r3, [pc, #184]	; (80066c4 <__swsetup_r+0xd0>)
 800660c:	429c      	cmp	r4, r3
 800660e:	d10f      	bne.n	8006630 <__swsetup_r+0x3c>
 8006610:	686c      	ldr	r4, [r5, #4]
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006618:	0719      	lsls	r1, r3, #28
 800661a:	d42c      	bmi.n	8006676 <__swsetup_r+0x82>
 800661c:	06dd      	lsls	r5, r3, #27
 800661e:	d411      	bmi.n	8006644 <__swsetup_r+0x50>
 8006620:	2309      	movs	r3, #9
 8006622:	6033      	str	r3, [r6, #0]
 8006624:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006628:	81a3      	strh	r3, [r4, #12]
 800662a:	f04f 30ff 	mov.w	r0, #4294967295
 800662e:	e03e      	b.n	80066ae <__swsetup_r+0xba>
 8006630:	4b25      	ldr	r3, [pc, #148]	; (80066c8 <__swsetup_r+0xd4>)
 8006632:	429c      	cmp	r4, r3
 8006634:	d101      	bne.n	800663a <__swsetup_r+0x46>
 8006636:	68ac      	ldr	r4, [r5, #8]
 8006638:	e7eb      	b.n	8006612 <__swsetup_r+0x1e>
 800663a:	4b24      	ldr	r3, [pc, #144]	; (80066cc <__swsetup_r+0xd8>)
 800663c:	429c      	cmp	r4, r3
 800663e:	bf08      	it	eq
 8006640:	68ec      	ldreq	r4, [r5, #12]
 8006642:	e7e6      	b.n	8006612 <__swsetup_r+0x1e>
 8006644:	0758      	lsls	r0, r3, #29
 8006646:	d512      	bpl.n	800666e <__swsetup_r+0x7a>
 8006648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800664a:	b141      	cbz	r1, 800665e <__swsetup_r+0x6a>
 800664c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006650:	4299      	cmp	r1, r3
 8006652:	d002      	beq.n	800665a <__swsetup_r+0x66>
 8006654:	4630      	mov	r0, r6
 8006656:	f7ff fb6f 	bl	8005d38 <_free_r>
 800665a:	2300      	movs	r3, #0
 800665c:	6363      	str	r3, [r4, #52]	; 0x34
 800665e:	89a3      	ldrh	r3, [r4, #12]
 8006660:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006664:	81a3      	strh	r3, [r4, #12]
 8006666:	2300      	movs	r3, #0
 8006668:	6063      	str	r3, [r4, #4]
 800666a:	6923      	ldr	r3, [r4, #16]
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	89a3      	ldrh	r3, [r4, #12]
 8006670:	f043 0308 	orr.w	r3, r3, #8
 8006674:	81a3      	strh	r3, [r4, #12]
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	b94b      	cbnz	r3, 800668e <__swsetup_r+0x9a>
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006684:	d003      	beq.n	800668e <__swsetup_r+0x9a>
 8006686:	4621      	mov	r1, r4
 8006688:	4630      	mov	r0, r6
 800668a:	f000 fa07 	bl	8006a9c <__smakebuf_r>
 800668e:	89a0      	ldrh	r0, [r4, #12]
 8006690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006694:	f010 0301 	ands.w	r3, r0, #1
 8006698:	d00a      	beq.n	80066b0 <__swsetup_r+0xbc>
 800669a:	2300      	movs	r3, #0
 800669c:	60a3      	str	r3, [r4, #8]
 800669e:	6963      	ldr	r3, [r4, #20]
 80066a0:	425b      	negs	r3, r3
 80066a2:	61a3      	str	r3, [r4, #24]
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	b943      	cbnz	r3, 80066ba <__swsetup_r+0xc6>
 80066a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066ac:	d1ba      	bne.n	8006624 <__swsetup_r+0x30>
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	0781      	lsls	r1, r0, #30
 80066b2:	bf58      	it	pl
 80066b4:	6963      	ldrpl	r3, [r4, #20]
 80066b6:	60a3      	str	r3, [r4, #8]
 80066b8:	e7f4      	b.n	80066a4 <__swsetup_r+0xb0>
 80066ba:	2000      	movs	r0, #0
 80066bc:	e7f7      	b.n	80066ae <__swsetup_r+0xba>
 80066be:	bf00      	nop
 80066c0:	2000000c 	.word	0x2000000c
 80066c4:	08007284 	.word	0x08007284
 80066c8:	080072a4 	.word	0x080072a4
 80066cc:	08007264 	.word	0x08007264

080066d0 <abort>:
 80066d0:	b508      	push	{r3, lr}
 80066d2:	2006      	movs	r0, #6
 80066d4:	f000 fa52 	bl	8006b7c <raise>
 80066d8:	2001      	movs	r0, #1
 80066da:	f000 fb65 	bl	8006da8 <_exit>
	...

080066e0 <__sflush_r>:
 80066e0:	898a      	ldrh	r2, [r1, #12]
 80066e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e6:	4605      	mov	r5, r0
 80066e8:	0710      	lsls	r0, r2, #28
 80066ea:	460c      	mov	r4, r1
 80066ec:	d458      	bmi.n	80067a0 <__sflush_r+0xc0>
 80066ee:	684b      	ldr	r3, [r1, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	dc05      	bgt.n	8006700 <__sflush_r+0x20>
 80066f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dc02      	bgt.n	8006700 <__sflush_r+0x20>
 80066fa:	2000      	movs	r0, #0
 80066fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006702:	2e00      	cmp	r6, #0
 8006704:	d0f9      	beq.n	80066fa <__sflush_r+0x1a>
 8006706:	2300      	movs	r3, #0
 8006708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800670c:	682f      	ldr	r7, [r5, #0]
 800670e:	602b      	str	r3, [r5, #0]
 8006710:	d032      	beq.n	8006778 <__sflush_r+0x98>
 8006712:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	075a      	lsls	r2, r3, #29
 8006718:	d505      	bpl.n	8006726 <__sflush_r+0x46>
 800671a:	6863      	ldr	r3, [r4, #4]
 800671c:	1ac0      	subs	r0, r0, r3
 800671e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006720:	b10b      	cbz	r3, 8006726 <__sflush_r+0x46>
 8006722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006724:	1ac0      	subs	r0, r0, r3
 8006726:	2300      	movs	r3, #0
 8006728:	4602      	mov	r2, r0
 800672a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800672c:	6a21      	ldr	r1, [r4, #32]
 800672e:	4628      	mov	r0, r5
 8006730:	47b0      	blx	r6
 8006732:	1c43      	adds	r3, r0, #1
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	d106      	bne.n	8006746 <__sflush_r+0x66>
 8006738:	6829      	ldr	r1, [r5, #0]
 800673a:	291d      	cmp	r1, #29
 800673c:	d82c      	bhi.n	8006798 <__sflush_r+0xb8>
 800673e:	4a2a      	ldr	r2, [pc, #168]	; (80067e8 <__sflush_r+0x108>)
 8006740:	40ca      	lsrs	r2, r1
 8006742:	07d6      	lsls	r6, r2, #31
 8006744:	d528      	bpl.n	8006798 <__sflush_r+0xb8>
 8006746:	2200      	movs	r2, #0
 8006748:	6062      	str	r2, [r4, #4]
 800674a:	04d9      	lsls	r1, r3, #19
 800674c:	6922      	ldr	r2, [r4, #16]
 800674e:	6022      	str	r2, [r4, #0]
 8006750:	d504      	bpl.n	800675c <__sflush_r+0x7c>
 8006752:	1c42      	adds	r2, r0, #1
 8006754:	d101      	bne.n	800675a <__sflush_r+0x7a>
 8006756:	682b      	ldr	r3, [r5, #0]
 8006758:	b903      	cbnz	r3, 800675c <__sflush_r+0x7c>
 800675a:	6560      	str	r0, [r4, #84]	; 0x54
 800675c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800675e:	602f      	str	r7, [r5, #0]
 8006760:	2900      	cmp	r1, #0
 8006762:	d0ca      	beq.n	80066fa <__sflush_r+0x1a>
 8006764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006768:	4299      	cmp	r1, r3
 800676a:	d002      	beq.n	8006772 <__sflush_r+0x92>
 800676c:	4628      	mov	r0, r5
 800676e:	f7ff fae3 	bl	8005d38 <_free_r>
 8006772:	2000      	movs	r0, #0
 8006774:	6360      	str	r0, [r4, #52]	; 0x34
 8006776:	e7c1      	b.n	80066fc <__sflush_r+0x1c>
 8006778:	6a21      	ldr	r1, [r4, #32]
 800677a:	2301      	movs	r3, #1
 800677c:	4628      	mov	r0, r5
 800677e:	47b0      	blx	r6
 8006780:	1c41      	adds	r1, r0, #1
 8006782:	d1c7      	bne.n	8006714 <__sflush_r+0x34>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0c4      	beq.n	8006714 <__sflush_r+0x34>
 800678a:	2b1d      	cmp	r3, #29
 800678c:	d001      	beq.n	8006792 <__sflush_r+0xb2>
 800678e:	2b16      	cmp	r3, #22
 8006790:	d101      	bne.n	8006796 <__sflush_r+0xb6>
 8006792:	602f      	str	r7, [r5, #0]
 8006794:	e7b1      	b.n	80066fa <__sflush_r+0x1a>
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	e7ad      	b.n	80066fc <__sflush_r+0x1c>
 80067a0:	690f      	ldr	r7, [r1, #16]
 80067a2:	2f00      	cmp	r7, #0
 80067a4:	d0a9      	beq.n	80066fa <__sflush_r+0x1a>
 80067a6:	0793      	lsls	r3, r2, #30
 80067a8:	680e      	ldr	r6, [r1, #0]
 80067aa:	bf08      	it	eq
 80067ac:	694b      	ldreq	r3, [r1, #20]
 80067ae:	600f      	str	r7, [r1, #0]
 80067b0:	bf18      	it	ne
 80067b2:	2300      	movne	r3, #0
 80067b4:	eba6 0807 	sub.w	r8, r6, r7
 80067b8:	608b      	str	r3, [r1, #8]
 80067ba:	f1b8 0f00 	cmp.w	r8, #0
 80067be:	dd9c      	ble.n	80066fa <__sflush_r+0x1a>
 80067c0:	6a21      	ldr	r1, [r4, #32]
 80067c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067c4:	4643      	mov	r3, r8
 80067c6:	463a      	mov	r2, r7
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b0      	blx	r6
 80067cc:	2800      	cmp	r0, #0
 80067ce:	dc06      	bgt.n	80067de <__sflush_r+0xfe>
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067d6:	81a3      	strh	r3, [r4, #12]
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	e78e      	b.n	80066fc <__sflush_r+0x1c>
 80067de:	4407      	add	r7, r0
 80067e0:	eba8 0800 	sub.w	r8, r8, r0
 80067e4:	e7e9      	b.n	80067ba <__sflush_r+0xda>
 80067e6:	bf00      	nop
 80067e8:	20400001 	.word	0x20400001

080067ec <_fflush_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	690b      	ldr	r3, [r1, #16]
 80067f0:	4605      	mov	r5, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	b913      	cbnz	r3, 80067fc <_fflush_r+0x10>
 80067f6:	2500      	movs	r5, #0
 80067f8:	4628      	mov	r0, r5
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	b118      	cbz	r0, 8006806 <_fflush_r+0x1a>
 80067fe:	6983      	ldr	r3, [r0, #24]
 8006800:	b90b      	cbnz	r3, 8006806 <_fflush_r+0x1a>
 8006802:	f000 f887 	bl	8006914 <__sinit>
 8006806:	4b14      	ldr	r3, [pc, #80]	; (8006858 <_fflush_r+0x6c>)
 8006808:	429c      	cmp	r4, r3
 800680a:	d11b      	bne.n	8006844 <_fflush_r+0x58>
 800680c:	686c      	ldr	r4, [r5, #4]
 800680e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0ef      	beq.n	80067f6 <_fflush_r+0xa>
 8006816:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006818:	07d0      	lsls	r0, r2, #31
 800681a:	d404      	bmi.n	8006826 <_fflush_r+0x3a>
 800681c:	0599      	lsls	r1, r3, #22
 800681e:	d402      	bmi.n	8006826 <_fflush_r+0x3a>
 8006820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006822:	f000 f915 	bl	8006a50 <__retarget_lock_acquire_recursive>
 8006826:	4628      	mov	r0, r5
 8006828:	4621      	mov	r1, r4
 800682a:	f7ff ff59 	bl	80066e0 <__sflush_r>
 800682e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006830:	07da      	lsls	r2, r3, #31
 8006832:	4605      	mov	r5, r0
 8006834:	d4e0      	bmi.n	80067f8 <_fflush_r+0xc>
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	059b      	lsls	r3, r3, #22
 800683a:	d4dd      	bmi.n	80067f8 <_fflush_r+0xc>
 800683c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800683e:	f000 f908 	bl	8006a52 <__retarget_lock_release_recursive>
 8006842:	e7d9      	b.n	80067f8 <_fflush_r+0xc>
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <_fflush_r+0x70>)
 8006846:	429c      	cmp	r4, r3
 8006848:	d101      	bne.n	800684e <_fflush_r+0x62>
 800684a:	68ac      	ldr	r4, [r5, #8]
 800684c:	e7df      	b.n	800680e <_fflush_r+0x22>
 800684e:	4b04      	ldr	r3, [pc, #16]	; (8006860 <_fflush_r+0x74>)
 8006850:	429c      	cmp	r4, r3
 8006852:	bf08      	it	eq
 8006854:	68ec      	ldreq	r4, [r5, #12]
 8006856:	e7da      	b.n	800680e <_fflush_r+0x22>
 8006858:	08007284 	.word	0x08007284
 800685c:	080072a4 	.word	0x080072a4
 8006860:	08007264 	.word	0x08007264

08006864 <std>:
 8006864:	2300      	movs	r3, #0
 8006866:	b510      	push	{r4, lr}
 8006868:	4604      	mov	r4, r0
 800686a:	e9c0 3300 	strd	r3, r3, [r0]
 800686e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006872:	6083      	str	r3, [r0, #8]
 8006874:	8181      	strh	r1, [r0, #12]
 8006876:	6643      	str	r3, [r0, #100]	; 0x64
 8006878:	81c2      	strh	r2, [r0, #14]
 800687a:	6183      	str	r3, [r0, #24]
 800687c:	4619      	mov	r1, r3
 800687e:	2208      	movs	r2, #8
 8006880:	305c      	adds	r0, #92	; 0x5c
 8006882:	f7fd fba5 	bl	8003fd0 <memset>
 8006886:	4b05      	ldr	r3, [pc, #20]	; (800689c <std+0x38>)
 8006888:	6263      	str	r3, [r4, #36]	; 0x24
 800688a:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <std+0x3c>)
 800688c:	62a3      	str	r3, [r4, #40]	; 0x28
 800688e:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <std+0x40>)
 8006890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006892:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <std+0x44>)
 8006894:	6224      	str	r4, [r4, #32]
 8006896:	6323      	str	r3, [r4, #48]	; 0x30
 8006898:	bd10      	pop	{r4, pc}
 800689a:	bf00      	nop
 800689c:	08006bb5 	.word	0x08006bb5
 80068a0:	08006bd7 	.word	0x08006bd7
 80068a4:	08006c0f 	.word	0x08006c0f
 80068a8:	08006c33 	.word	0x08006c33

080068ac <_cleanup_r>:
 80068ac:	4901      	ldr	r1, [pc, #4]	; (80068b4 <_cleanup_r+0x8>)
 80068ae:	f000 b8af 	b.w	8006a10 <_fwalk_reent>
 80068b2:	bf00      	nop
 80068b4:	080067ed 	.word	0x080067ed

080068b8 <__sfmoreglue>:
 80068b8:	b570      	push	{r4, r5, r6, lr}
 80068ba:	1e4a      	subs	r2, r1, #1
 80068bc:	2568      	movs	r5, #104	; 0x68
 80068be:	4355      	muls	r5, r2
 80068c0:	460e      	mov	r6, r1
 80068c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068c6:	f7ff fa87 	bl	8005dd8 <_malloc_r>
 80068ca:	4604      	mov	r4, r0
 80068cc:	b140      	cbz	r0, 80068e0 <__sfmoreglue+0x28>
 80068ce:	2100      	movs	r1, #0
 80068d0:	e9c0 1600 	strd	r1, r6, [r0]
 80068d4:	300c      	adds	r0, #12
 80068d6:	60a0      	str	r0, [r4, #8]
 80068d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068dc:	f7fd fb78 	bl	8003fd0 <memset>
 80068e0:	4620      	mov	r0, r4
 80068e2:	bd70      	pop	{r4, r5, r6, pc}

080068e4 <__sfp_lock_acquire>:
 80068e4:	4801      	ldr	r0, [pc, #4]	; (80068ec <__sfp_lock_acquire+0x8>)
 80068e6:	f000 b8b3 	b.w	8006a50 <__retarget_lock_acquire_recursive>
 80068ea:	bf00      	nop
 80068ec:	20000278 	.word	0x20000278

080068f0 <__sfp_lock_release>:
 80068f0:	4801      	ldr	r0, [pc, #4]	; (80068f8 <__sfp_lock_release+0x8>)
 80068f2:	f000 b8ae 	b.w	8006a52 <__retarget_lock_release_recursive>
 80068f6:	bf00      	nop
 80068f8:	20000278 	.word	0x20000278

080068fc <__sinit_lock_acquire>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__sinit_lock_acquire+0x8>)
 80068fe:	f000 b8a7 	b.w	8006a50 <__retarget_lock_acquire_recursive>
 8006902:	bf00      	nop
 8006904:	20000273 	.word	0x20000273

08006908 <__sinit_lock_release>:
 8006908:	4801      	ldr	r0, [pc, #4]	; (8006910 <__sinit_lock_release+0x8>)
 800690a:	f000 b8a2 	b.w	8006a52 <__retarget_lock_release_recursive>
 800690e:	bf00      	nop
 8006910:	20000273 	.word	0x20000273

08006914 <__sinit>:
 8006914:	b510      	push	{r4, lr}
 8006916:	4604      	mov	r4, r0
 8006918:	f7ff fff0 	bl	80068fc <__sinit_lock_acquire>
 800691c:	69a3      	ldr	r3, [r4, #24]
 800691e:	b11b      	cbz	r3, 8006928 <__sinit+0x14>
 8006920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006924:	f7ff bff0 	b.w	8006908 <__sinit_lock_release>
 8006928:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800692c:	6523      	str	r3, [r4, #80]	; 0x50
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <__sinit+0x68>)
 8006930:	4a13      	ldr	r2, [pc, #76]	; (8006980 <__sinit+0x6c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	62a2      	str	r2, [r4, #40]	; 0x28
 8006936:	42a3      	cmp	r3, r4
 8006938:	bf04      	itt	eq
 800693a:	2301      	moveq	r3, #1
 800693c:	61a3      	streq	r3, [r4, #24]
 800693e:	4620      	mov	r0, r4
 8006940:	f000 f820 	bl	8006984 <__sfp>
 8006944:	6060      	str	r0, [r4, #4]
 8006946:	4620      	mov	r0, r4
 8006948:	f000 f81c 	bl	8006984 <__sfp>
 800694c:	60a0      	str	r0, [r4, #8]
 800694e:	4620      	mov	r0, r4
 8006950:	f000 f818 	bl	8006984 <__sfp>
 8006954:	2200      	movs	r2, #0
 8006956:	60e0      	str	r0, [r4, #12]
 8006958:	2104      	movs	r1, #4
 800695a:	6860      	ldr	r0, [r4, #4]
 800695c:	f7ff ff82 	bl	8006864 <std>
 8006960:	68a0      	ldr	r0, [r4, #8]
 8006962:	2201      	movs	r2, #1
 8006964:	2109      	movs	r1, #9
 8006966:	f7ff ff7d 	bl	8006864 <std>
 800696a:	68e0      	ldr	r0, [r4, #12]
 800696c:	2202      	movs	r2, #2
 800696e:	2112      	movs	r1, #18
 8006970:	f7ff ff78 	bl	8006864 <std>
 8006974:	2301      	movs	r3, #1
 8006976:	61a3      	str	r3, [r4, #24]
 8006978:	e7d2      	b.n	8006920 <__sinit+0xc>
 800697a:	bf00      	nop
 800697c:	08006ee4 	.word	0x08006ee4
 8006980:	080068ad 	.word	0x080068ad

08006984 <__sfp>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	4607      	mov	r7, r0
 8006988:	f7ff ffac 	bl	80068e4 <__sfp_lock_acquire>
 800698c:	4b1e      	ldr	r3, [pc, #120]	; (8006a08 <__sfp+0x84>)
 800698e:	681e      	ldr	r6, [r3, #0]
 8006990:	69b3      	ldr	r3, [r6, #24]
 8006992:	b913      	cbnz	r3, 800699a <__sfp+0x16>
 8006994:	4630      	mov	r0, r6
 8006996:	f7ff ffbd 	bl	8006914 <__sinit>
 800699a:	3648      	adds	r6, #72	; 0x48
 800699c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	d503      	bpl.n	80069ac <__sfp+0x28>
 80069a4:	6833      	ldr	r3, [r6, #0]
 80069a6:	b30b      	cbz	r3, 80069ec <__sfp+0x68>
 80069a8:	6836      	ldr	r6, [r6, #0]
 80069aa:	e7f7      	b.n	800699c <__sfp+0x18>
 80069ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069b0:	b9d5      	cbnz	r5, 80069e8 <__sfp+0x64>
 80069b2:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <__sfp+0x88>)
 80069b4:	60e3      	str	r3, [r4, #12]
 80069b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069ba:	6665      	str	r5, [r4, #100]	; 0x64
 80069bc:	f000 f847 	bl	8006a4e <__retarget_lock_init_recursive>
 80069c0:	f7ff ff96 	bl	80068f0 <__sfp_lock_release>
 80069c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069cc:	6025      	str	r5, [r4, #0]
 80069ce:	61a5      	str	r5, [r4, #24]
 80069d0:	2208      	movs	r2, #8
 80069d2:	4629      	mov	r1, r5
 80069d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069d8:	f7fd fafa 	bl	8003fd0 <memset>
 80069dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069e4:	4620      	mov	r0, r4
 80069e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069e8:	3468      	adds	r4, #104	; 0x68
 80069ea:	e7d9      	b.n	80069a0 <__sfp+0x1c>
 80069ec:	2104      	movs	r1, #4
 80069ee:	4638      	mov	r0, r7
 80069f0:	f7ff ff62 	bl	80068b8 <__sfmoreglue>
 80069f4:	4604      	mov	r4, r0
 80069f6:	6030      	str	r0, [r6, #0]
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d1d5      	bne.n	80069a8 <__sfp+0x24>
 80069fc:	f7ff ff78 	bl	80068f0 <__sfp_lock_release>
 8006a00:	230c      	movs	r3, #12
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	e7ee      	b.n	80069e4 <__sfp+0x60>
 8006a06:	bf00      	nop
 8006a08:	08006ee4 	.word	0x08006ee4
 8006a0c:	ffff0001 	.word	0xffff0001

08006a10 <_fwalk_reent>:
 8006a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a14:	4606      	mov	r6, r0
 8006a16:	4688      	mov	r8, r1
 8006a18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a1c:	2700      	movs	r7, #0
 8006a1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a22:	f1b9 0901 	subs.w	r9, r9, #1
 8006a26:	d505      	bpl.n	8006a34 <_fwalk_reent+0x24>
 8006a28:	6824      	ldr	r4, [r4, #0]
 8006a2a:	2c00      	cmp	r4, #0
 8006a2c:	d1f7      	bne.n	8006a1e <_fwalk_reent+0xe>
 8006a2e:	4638      	mov	r0, r7
 8006a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a34:	89ab      	ldrh	r3, [r5, #12]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d907      	bls.n	8006a4a <_fwalk_reent+0x3a>
 8006a3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	d003      	beq.n	8006a4a <_fwalk_reent+0x3a>
 8006a42:	4629      	mov	r1, r5
 8006a44:	4630      	mov	r0, r6
 8006a46:	47c0      	blx	r8
 8006a48:	4307      	orrs	r7, r0
 8006a4a:	3568      	adds	r5, #104	; 0x68
 8006a4c:	e7e9      	b.n	8006a22 <_fwalk_reent+0x12>

08006a4e <__retarget_lock_init_recursive>:
 8006a4e:	4770      	bx	lr

08006a50 <__retarget_lock_acquire_recursive>:
 8006a50:	4770      	bx	lr

08006a52 <__retarget_lock_release_recursive>:
 8006a52:	4770      	bx	lr

08006a54 <__swhatbuf_r>:
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	460e      	mov	r6, r1
 8006a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	b096      	sub	sp, #88	; 0x58
 8006a60:	4614      	mov	r4, r2
 8006a62:	461d      	mov	r5, r3
 8006a64:	da07      	bge.n	8006a76 <__swhatbuf_r+0x22>
 8006a66:	2300      	movs	r3, #0
 8006a68:	602b      	str	r3, [r5, #0]
 8006a6a:	89b3      	ldrh	r3, [r6, #12]
 8006a6c:	061a      	lsls	r2, r3, #24
 8006a6e:	d410      	bmi.n	8006a92 <__swhatbuf_r+0x3e>
 8006a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a74:	e00e      	b.n	8006a94 <__swhatbuf_r+0x40>
 8006a76:	466a      	mov	r2, sp
 8006a78:	f000 f902 	bl	8006c80 <_fstat_r>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	dbf2      	blt.n	8006a66 <__swhatbuf_r+0x12>
 8006a80:	9a01      	ldr	r2, [sp, #4]
 8006a82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a8a:	425a      	negs	r2, r3
 8006a8c:	415a      	adcs	r2, r3
 8006a8e:	602a      	str	r2, [r5, #0]
 8006a90:	e7ee      	b.n	8006a70 <__swhatbuf_r+0x1c>
 8006a92:	2340      	movs	r3, #64	; 0x40
 8006a94:	2000      	movs	r0, #0
 8006a96:	6023      	str	r3, [r4, #0]
 8006a98:	b016      	add	sp, #88	; 0x58
 8006a9a:	bd70      	pop	{r4, r5, r6, pc}

08006a9c <__smakebuf_r>:
 8006a9c:	898b      	ldrh	r3, [r1, #12]
 8006a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006aa0:	079d      	lsls	r5, r3, #30
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	d507      	bpl.n	8006ab8 <__smakebuf_r+0x1c>
 8006aa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	6123      	str	r3, [r4, #16]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	6163      	str	r3, [r4, #20]
 8006ab4:	b002      	add	sp, #8
 8006ab6:	bd70      	pop	{r4, r5, r6, pc}
 8006ab8:	ab01      	add	r3, sp, #4
 8006aba:	466a      	mov	r2, sp
 8006abc:	f7ff ffca 	bl	8006a54 <__swhatbuf_r>
 8006ac0:	9900      	ldr	r1, [sp, #0]
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7ff f987 	bl	8005dd8 <_malloc_r>
 8006aca:	b948      	cbnz	r0, 8006ae0 <__smakebuf_r+0x44>
 8006acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ad0:	059a      	lsls	r2, r3, #22
 8006ad2:	d4ef      	bmi.n	8006ab4 <__smakebuf_r+0x18>
 8006ad4:	f023 0303 	bic.w	r3, r3, #3
 8006ad8:	f043 0302 	orr.w	r3, r3, #2
 8006adc:	81a3      	strh	r3, [r4, #12]
 8006ade:	e7e3      	b.n	8006aa8 <__smakebuf_r+0xc>
 8006ae0:	4b0d      	ldr	r3, [pc, #52]	; (8006b18 <__smakebuf_r+0x7c>)
 8006ae2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	6020      	str	r0, [r4, #0]
 8006ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	9b00      	ldr	r3, [sp, #0]
 8006af0:	6163      	str	r3, [r4, #20]
 8006af2:	9b01      	ldr	r3, [sp, #4]
 8006af4:	6120      	str	r0, [r4, #16]
 8006af6:	b15b      	cbz	r3, 8006b10 <__smakebuf_r+0x74>
 8006af8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006afc:	4630      	mov	r0, r6
 8006afe:	f000 f8d1 	bl	8006ca4 <_isatty_r>
 8006b02:	b128      	cbz	r0, 8006b10 <__smakebuf_r+0x74>
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	f043 0301 	orr.w	r3, r3, #1
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	89a0      	ldrh	r0, [r4, #12]
 8006b12:	4305      	orrs	r5, r0
 8006b14:	81a5      	strh	r5, [r4, #12]
 8006b16:	e7cd      	b.n	8006ab4 <__smakebuf_r+0x18>
 8006b18:	080068ad 	.word	0x080068ad

08006b1c <_malloc_usable_size_r>:
 8006b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b20:	1f18      	subs	r0, r3, #4
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	bfbc      	itt	lt
 8006b26:	580b      	ldrlt	r3, [r1, r0]
 8006b28:	18c0      	addlt	r0, r0, r3
 8006b2a:	4770      	bx	lr

08006b2c <_raise_r>:
 8006b2c:	291f      	cmp	r1, #31
 8006b2e:	b538      	push	{r3, r4, r5, lr}
 8006b30:	4604      	mov	r4, r0
 8006b32:	460d      	mov	r5, r1
 8006b34:	d904      	bls.n	8006b40 <_raise_r+0x14>
 8006b36:	2316      	movs	r3, #22
 8006b38:	6003      	str	r3, [r0, #0]
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b42:	b112      	cbz	r2, 8006b4a <_raise_r+0x1e>
 8006b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b48:	b94b      	cbnz	r3, 8006b5e <_raise_r+0x32>
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f000 f830 	bl	8006bb0 <_getpid_r>
 8006b50:	462a      	mov	r2, r5
 8006b52:	4601      	mov	r1, r0
 8006b54:	4620      	mov	r0, r4
 8006b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b5a:	f000 b817 	b.w	8006b8c <_kill_r>
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d00a      	beq.n	8006b78 <_raise_r+0x4c>
 8006b62:	1c59      	adds	r1, r3, #1
 8006b64:	d103      	bne.n	8006b6e <_raise_r+0x42>
 8006b66:	2316      	movs	r3, #22
 8006b68:	6003      	str	r3, [r0, #0]
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	e7e7      	b.n	8006b3e <_raise_r+0x12>
 8006b6e:	2400      	movs	r4, #0
 8006b70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b74:	4628      	mov	r0, r5
 8006b76:	4798      	blx	r3
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e7e0      	b.n	8006b3e <_raise_r+0x12>

08006b7c <raise>:
 8006b7c:	4b02      	ldr	r3, [pc, #8]	; (8006b88 <raise+0xc>)
 8006b7e:	4601      	mov	r1, r0
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	f7ff bfd3 	b.w	8006b2c <_raise_r>
 8006b86:	bf00      	nop
 8006b88:	2000000c 	.word	0x2000000c

08006b8c <_kill_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d07      	ldr	r5, [pc, #28]	; (8006bac <_kill_r+0x20>)
 8006b90:	2300      	movs	r3, #0
 8006b92:	4604      	mov	r4, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	4611      	mov	r1, r2
 8006b98:	602b      	str	r3, [r5, #0]
 8006b9a:	f000 f8d7 	bl	8006d4c <_kill>
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	d102      	bne.n	8006ba8 <_kill_r+0x1c>
 8006ba2:	682b      	ldr	r3, [r5, #0]
 8006ba4:	b103      	cbz	r3, 8006ba8 <_kill_r+0x1c>
 8006ba6:	6023      	str	r3, [r4, #0]
 8006ba8:	bd38      	pop	{r3, r4, r5, pc}
 8006baa:	bf00      	nop
 8006bac:	2000026c 	.word	0x2000026c

08006bb0 <_getpid_r>:
 8006bb0:	f000 b8bc 	b.w	8006d2c <_getpid>

08006bb4 <__sread>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bbc:	f000 f894 	bl	8006ce8 <_read_r>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	bfab      	itete	ge
 8006bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006bc8:	181b      	addge	r3, r3, r0
 8006bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bce:	bfac      	ite	ge
 8006bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bd2:	81a3      	strhlt	r3, [r4, #12]
 8006bd4:	bd10      	pop	{r4, pc}

08006bd6 <__swrite>:
 8006bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bda:	461f      	mov	r7, r3
 8006bdc:	898b      	ldrh	r3, [r1, #12]
 8006bde:	05db      	lsls	r3, r3, #23
 8006be0:	4605      	mov	r5, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	4616      	mov	r6, r2
 8006be6:	d505      	bpl.n	8006bf4 <__swrite+0x1e>
 8006be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bec:	2302      	movs	r3, #2
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f000 f868 	bl	8006cc4 <_lseek_r>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	4632      	mov	r2, r6
 8006c02:	463b      	mov	r3, r7
 8006c04:	4628      	mov	r0, r5
 8006c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0a:	f000 b817 	b.w	8006c3c <_write_r>

08006c0e <__sseek>:
 8006c0e:	b510      	push	{r4, lr}
 8006c10:	460c      	mov	r4, r1
 8006c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c16:	f000 f855 	bl	8006cc4 <_lseek_r>
 8006c1a:	1c43      	adds	r3, r0, #1
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	bf15      	itete	ne
 8006c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c2a:	81a3      	strheq	r3, [r4, #12]
 8006c2c:	bf18      	it	ne
 8006c2e:	81a3      	strhne	r3, [r4, #12]
 8006c30:	bd10      	pop	{r4, pc}

08006c32 <__sclose>:
 8006c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c36:	f000 b813 	b.w	8006c60 <_close_r>
	...

08006c3c <_write_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d07      	ldr	r5, [pc, #28]	; (8006c5c <_write_r+0x20>)
 8006c40:	4604      	mov	r4, r0
 8006c42:	4608      	mov	r0, r1
 8006c44:	4611      	mov	r1, r2
 8006c46:	2200      	movs	r2, #0
 8006c48:	602a      	str	r2, [r5, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f000 f8a4 	bl	8006d98 <_write>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d102      	bne.n	8006c5a <_write_r+0x1e>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	b103      	cbz	r3, 8006c5a <_write_r+0x1e>
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	2000026c 	.word	0x2000026c

08006c60 <_close_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4d06      	ldr	r5, [pc, #24]	; (8006c7c <_close_r+0x1c>)
 8006c64:	2300      	movs	r3, #0
 8006c66:	4604      	mov	r4, r0
 8006c68:	4608      	mov	r0, r1
 8006c6a:	602b      	str	r3, [r5, #0]
 8006c6c:	f000 f84e 	bl	8006d0c <_close>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_close_r+0x1a>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_close_r+0x1a>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	2000026c 	.word	0x2000026c

08006c80 <_fstat_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	; (8006ca0 <_fstat_r+0x20>)
 8006c84:	2300      	movs	r3, #0
 8006c86:	4604      	mov	r4, r0
 8006c88:	4608      	mov	r0, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	f000 f845 	bl	8006d1c <_fstat>
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	d102      	bne.n	8006c9c <_fstat_r+0x1c>
 8006c96:	682b      	ldr	r3, [r5, #0]
 8006c98:	b103      	cbz	r3, 8006c9c <_fstat_r+0x1c>
 8006c9a:	6023      	str	r3, [r4, #0]
 8006c9c:	bd38      	pop	{r3, r4, r5, pc}
 8006c9e:	bf00      	nop
 8006ca0:	2000026c 	.word	0x2000026c

08006ca4 <_isatty_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4d06      	ldr	r5, [pc, #24]	; (8006cc0 <_isatty_r+0x1c>)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4604      	mov	r4, r0
 8006cac:	4608      	mov	r0, r1
 8006cae:	602b      	str	r3, [r5, #0]
 8006cb0:	f000 f844 	bl	8006d3c <_isatty>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	d102      	bne.n	8006cbe <_isatty_r+0x1a>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	b103      	cbz	r3, 8006cbe <_isatty_r+0x1a>
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	2000026c 	.word	0x2000026c

08006cc4 <_lseek_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4d07      	ldr	r5, [pc, #28]	; (8006ce4 <_lseek_r+0x20>)
 8006cc8:	4604      	mov	r4, r0
 8006cca:	4608      	mov	r0, r1
 8006ccc:	4611      	mov	r1, r2
 8006cce:	2200      	movs	r2, #0
 8006cd0:	602a      	str	r2, [r5, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f000 f842 	bl	8006d5c <_lseek>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	d102      	bne.n	8006ce2 <_lseek_r+0x1e>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	b103      	cbz	r3, 8006ce2 <_lseek_r+0x1e>
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	bd38      	pop	{r3, r4, r5, pc}
 8006ce4:	2000026c 	.word	0x2000026c

08006ce8 <_read_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	4d07      	ldr	r5, [pc, #28]	; (8006d08 <_read_r+0x20>)
 8006cec:	4604      	mov	r4, r0
 8006cee:	4608      	mov	r0, r1
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	602a      	str	r2, [r5, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f000 f838 	bl	8006d6c <_read>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_read_r+0x1e>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_read_r+0x1e>
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	2000026c 	.word	0x2000026c

08006d0c <_close>:
 8006d0c:	4b02      	ldr	r3, [pc, #8]	; (8006d18 <_close+0xc>)
 8006d0e:	2258      	movs	r2, #88	; 0x58
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	f04f 30ff 	mov.w	r0, #4294967295
 8006d16:	4770      	bx	lr
 8006d18:	2000026c 	.word	0x2000026c

08006d1c <_fstat>:
 8006d1c:	4b02      	ldr	r3, [pc, #8]	; (8006d28 <_fstat+0xc>)
 8006d1e:	2258      	movs	r2, #88	; 0x58
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	f04f 30ff 	mov.w	r0, #4294967295
 8006d26:	4770      	bx	lr
 8006d28:	2000026c 	.word	0x2000026c

08006d2c <_getpid>:
 8006d2c:	4b02      	ldr	r3, [pc, #8]	; (8006d38 <_getpid+0xc>)
 8006d2e:	2258      	movs	r2, #88	; 0x58
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	f04f 30ff 	mov.w	r0, #4294967295
 8006d36:	4770      	bx	lr
 8006d38:	2000026c 	.word	0x2000026c

08006d3c <_isatty>:
 8006d3c:	4b02      	ldr	r3, [pc, #8]	; (8006d48 <_isatty+0xc>)
 8006d3e:	2258      	movs	r2, #88	; 0x58
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	2000      	movs	r0, #0
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	2000026c 	.word	0x2000026c

08006d4c <_kill>:
 8006d4c:	4b02      	ldr	r3, [pc, #8]	; (8006d58 <_kill+0xc>)
 8006d4e:	2258      	movs	r2, #88	; 0x58
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	f04f 30ff 	mov.w	r0, #4294967295
 8006d56:	4770      	bx	lr
 8006d58:	2000026c 	.word	0x2000026c

08006d5c <_lseek>:
 8006d5c:	4b02      	ldr	r3, [pc, #8]	; (8006d68 <_lseek+0xc>)
 8006d5e:	2258      	movs	r2, #88	; 0x58
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f04f 30ff 	mov.w	r0, #4294967295
 8006d66:	4770      	bx	lr
 8006d68:	2000026c 	.word	0x2000026c

08006d6c <_read>:
 8006d6c:	4b02      	ldr	r3, [pc, #8]	; (8006d78 <_read+0xc>)
 8006d6e:	2258      	movs	r2, #88	; 0x58
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	f04f 30ff 	mov.w	r0, #4294967295
 8006d76:	4770      	bx	lr
 8006d78:	2000026c 	.word	0x2000026c

08006d7c <_sbrk>:
 8006d7c:	4b04      	ldr	r3, [pc, #16]	; (8006d90 <_sbrk+0x14>)
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	4602      	mov	r2, r0
 8006d82:	b909      	cbnz	r1, 8006d88 <_sbrk+0xc>
 8006d84:	4903      	ldr	r1, [pc, #12]	; (8006d94 <_sbrk+0x18>)
 8006d86:	6019      	str	r1, [r3, #0]
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	4402      	add	r2, r0
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	4770      	bx	lr
 8006d90:	20000200 	.word	0x20000200
 8006d94:	20000280 	.word	0x20000280

08006d98 <_write>:
 8006d98:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <_write+0xc>)
 8006d9a:	2258      	movs	r2, #88	; 0x58
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006da2:	4770      	bx	lr
 8006da4:	2000026c 	.word	0x2000026c

08006da8 <_exit>:
 8006da8:	e7fe      	b.n	8006da8 <_exit>
	...

08006dac <_init>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	bf00      	nop
 8006db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db2:	bc08      	pop	{r3}
 8006db4:	469e      	mov	lr, r3
 8006db6:	4770      	bx	lr

08006db8 <_fini>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr
