
WFI_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000484c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08004a20  08004a20  00014a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e0c  08004e0c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e14  08004e14  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08004e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  200001f8  08005014  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08005014  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bb3  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000135a  00000000  00000000  00028ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  0002a138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021bcd  00000000  00000000  0002a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00007fe6  00000000  00000000  0004c2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d1120  00000000  00000000  000542db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001253fb  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000570  00000000  00000000  00125450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000284c  00000000  00000000  001259c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0012820c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001282d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004a04 	.word	0x08004a04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08004a04 	.word	0x08004a04

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <SysTick_Handler>:
 *      Author: Oliver
 */

#include "main.h"

void SysTick_Handler(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8000ee4:	f000 f9f2 	bl	80012cc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000ee8:	f000 fb21 	bl	800152e <HAL_SYSTICK_IRQHandler>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ef4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ef8:	f000 fcd4 	bl	80018a4 <HAL_GPIO_EXTI_IRQHandler>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <main>:

UART_HandleTypeDef huart2;

extern uint8_t some_data[];

int main(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

	HAL_Init();
 8000f04:	f000 f990 	bl	8001228 <HAL_Init>

	//SystemClock_Config_HSE(SYS_CLOCK_FREQ_50MHZ);

	GPIO_Init();
 8000f08:	f000 f82a 	bl	8000f60 <GPIO_Init>
	UART2_Init();
 8000f0c:	f000 f878 	bl	8001000 <UART2_Init>

	GPIO_AnalogConfig();
 8000f10:	f000 f802 	bl	8000f18 <GPIO_AnalogConfig>

	while(1);
 8000f14:	e7fe      	b.n	8000f14 <main+0x14>
	...

08000f18 <GPIO_AnalogConfig>:
	//SYSTICK IRQn interrupt configuration
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

}

void GPIO_AnalogConfig(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GpioA, GpioC;

	uint32_t gpio_pins = 	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | \
 8000f1e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
							GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
							GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | \
							GPIO_PIN_14 | GPIO_PIN_15;


	GpioA.Pin = gpio_pins;
 8000f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f26:	61bb      	str	r3, [r7, #24]
	GpioA.Mode = GPIO_MODE_ANALOG;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GpioA);
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	4619      	mov	r1, r3
 8000f32:	4809      	ldr	r0, [pc, #36]	; (8000f58 <GPIO_AnalogConfig+0x40>)
 8000f34:	f000 fb08 	bl	8001548 <HAL_GPIO_Init>

	gpio_pins = 			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | \
 8000f38:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
							GPIO_PIN_3| GPIO_PIN_4 | GPIO_PIN_5  | \
							GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | \
							GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
							GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;

	GpioC.Pin = gpio_pins;
 8000f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f40:	607b      	str	r3, [r7, #4]
	GpioC.Mode = GPIO_MODE_ANALOG;
 8000f42:	2303      	movs	r3, #3
 8000f44:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOC, &GpioC);
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4804      	ldr	r0, [pc, #16]	; (8000f5c <GPIO_AnalogConfig+0x44>)
 8000f4c:	f000 fafc 	bl	8001548 <HAL_GPIO_Init>
}
 8000f50:	bf00      	nop
 8000f52:	3730      	adds	r7, #48	; 0x30
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020800 	.word	0x40020800

08000f60 <GPIO_Init>:

void GPIO_Init(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <GPIO_Init+0x94>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a21      	ldr	r2, [pc, #132]	; (8000ff4 <GPIO_Init+0x94>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <GPIO_Init+0x94>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <GPIO_Init+0x94>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <GPIO_Init+0x94>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <GPIO_Init+0x94>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
	__HAL_RCC_GPIOA_CLK_SLEEP_DISABLE();
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <GPIO_Init+0x94>)
 8000fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <GPIO_Init+0x94>)
 8000fa4:	f023 0301 	bic.w	r3, r3, #1
 8000fa8:	6513      	str	r3, [r2, #80]	; 0x50
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &ledgpio);
#endif

	buttongpio.Pin = GPIO_PIN_13;
 8000faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fae:	60bb      	str	r3, [r7, #8]
	buttongpio.Mode = GPIO_MODE_IT_FALLING; //interrupt falling-edge
 8000fb0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fb4:	60fb      	str	r3, [r7, #12]
	buttongpio.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &buttongpio);
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <GPIO_Init+0x98>)
 8000fc2:	f000 fac1 	bl	8001548 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	210f      	movs	r1, #15
 8000fca:	2028      	movs	r0, #40	; 0x28
 8000fcc:	f000 fa79 	bl	80014c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fd0:	2028      	movs	r0, #40	; 0x28
 8000fd2:	f000 fa92 	bl	80014fa <HAL_NVIC_EnableIRQ>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fdc:	4807      	ldr	r0, [pc, #28]	; (8000ffc <GPIO_Init+0x9c>)
 8000fde:	f000 fc47 	bl	8001870 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <GPIO_Init+0x9c>)
 8000fe8:	f000 fc42 	bl	8001870 <HAL_GPIO_WritePin>
}
 8000fec:	bf00      	nop
 8000fee:	3730      	adds	r7, #48	; 0x30
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020000 	.word	0x40020000

08001000 <UART2_Init>:

void UART2_Init(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

	huart2.Instance = USART2; //linking
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <UART2_Init+0x44>)
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <UART2_Init+0x48>)
 8001008:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 230400;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <UART2_Init+0x44>)
 800100c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001010:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <UART2_Init+0x44>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <UART2_Init+0x44>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <UART2_Init+0x44>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <UART2_Init+0x44>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <UART2_Init+0x44>)
 800102c:	2208      	movs	r2, #8
 800102e:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) {
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <UART2_Init+0x44>)
 8001032:	f000 fc83 	bl	800193c <HAL_UART_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <UART2_Init+0x40>

		//There is a problem
		Error_handler();
 800103c:	f000 f824 	bl	8001088 <Error_handler>
	}
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000220 	.word	0x20000220
 8001048:	40004400 	.word	0x40004400

0800104c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]

	if(HAL_UART_Transmit(&huart2, (uint8_t*)some_data, (uint16_t)strlen((char*)some_data), HAL_MAX_DELAY) != HAL_OK) {
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <HAL_GPIO_EXTI_Callback+0x34>)
 8001058:	f7ff f8da 	bl	8000210 <strlen>
 800105c:	4603      	mov	r3, r0
 800105e:	b29a      	uxth	r2, r3
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	4906      	ldr	r1, [pc, #24]	; (8001080 <HAL_GPIO_EXTI_Callback+0x34>)
 8001066:	4807      	ldr	r0, [pc, #28]	; (8001084 <HAL_GPIO_EXTI_Callback+0x38>)
 8001068:	f000 fcb5 	bl	80019d6 <HAL_UART_Transmit>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_GPIO_EXTI_Callback+0x2a>
		Error_handler();
 8001072:	f000 f809 	bl	8001088 <Error_handler>
	}
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000000 	.word	0x20000000
 8001084:	20000220 	.word	0x20000220

08001088 <Error_handler>:

void Error_handler(void) {
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

	while(1);
 800108c:	e7fe      	b.n	800108c <Error_handler+0x4>
	...

08001090 <HAL_MspInit>:
 *      Author: Oliver
 */

#include "main.h"

void HAL_MspInit(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	/* Low level processor specific inits */

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //not required, as this will set to default setting
 8001094:	2003      	movs	r0, #3
 8001096:	f000 fa09 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//System Control Block (SCB) -> System Handler Control and State Register (SHCSR)
	SCB->SHCSR |= (0x7 << 16);  //Set bits 16,17,18 (MEMFAULTENA, BUSFAULTENA, USGFAULTENA)
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_MspInit+0x40>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109e:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <HAL_MspInit+0x40>)
 80010a0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80010a4:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	f06f 000b 	mvn.w	r0, #11
 80010ae:	f000 fa08 	bl	80014c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	f06f 000a 	mvn.w	r0, #10
 80010ba:	f000 fa02 	bl	80014c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	f06f 0009 	mvn.w	r0, #9
 80010c6:	f000 f9fc 	bl	80014c2 <HAL_NVIC_SetPriority>
	//HAL_Init() in main.c already takes care of SysTick_IRQn priority setting
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	/* Low level inits of the USART2 peripheral */

	//1. Enable the required peripheral clock for the USART2 and GPIOA peripherals
	__HAL_RCC_USART2_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <HAL_UART_MspInit+0x94>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <HAL_UART_MspInit+0x94>)
 80010e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ea:	6413      	str	r3, [r2, #64]	; 0x40
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <HAL_UART_MspInit+0x94>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART2_CLK_SLEEP_DISABLE(); //automatically disables/reenables UART2 clock during sleep and active periods.
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <HAL_UART_MspInit+0x94>)
 80010fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fc:	4a1a      	ldr	r2, [pc, #104]	; (8001168 <HAL_UART_MspInit+0x94>)
 80010fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001102:	6613      	str	r3, [r2, #96]	; 0x60

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_UART_MspInit+0x94>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4a16      	ldr	r2, [pc, #88]	; (8001168 <HAL_UART_MspInit+0x94>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6313      	str	r3, [r2, #48]	; 0x30
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_UART_MspInit+0x94>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

	//2. Pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //USART2_TX
 8001120:	2304      	movs	r3, #4
 8001122:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8001128:	2301      	movs	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 8001130:	2307      	movs	r3, #7
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	480c      	ldr	r0, [pc, #48]	; (800116c <HAL_UART_MspInit+0x98>)
 800113c:	f000 fa04 	bl	8001548 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //USART2_RX
 8001140:	2308      	movs	r3, #8
 8001142:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	4808      	ldr	r0, [pc, #32]	; (800116c <HAL_UART_MspInit+0x98>)
 800114c:	f000 f9fc 	bl	8001548 <HAL_GPIO_Init>

	//3. Enable the peripheral IRQ in the NVIC
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001150:	2026      	movs	r0, #38	; 0x26
 8001152:	f000 f9d2 	bl	80014fa <HAL_NVIC_EnableIRQ>

	//4. Set the priorities based on application needs
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2026      	movs	r0, #38	; 0x26
 800115c:	f000 f9b1 	bl	80014c2 <HAL_NVIC_SetPriority>
}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000

08001170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <SystemInit+0x58>)
 8001176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <SystemInit+0x58>)
 800117c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <SystemInit+0x5c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a10      	ldr	r2, [pc, #64]	; (80011cc <SystemInit+0x5c>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <SystemInit+0x5c>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <SystemInit+0x5c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <SystemInit+0x5c>)
 800119c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80011a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <SystemInit+0x5c>)
 80011a8:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <SystemInit+0x60>)
 80011aa:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <SystemInit+0x5c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <SystemInit+0x5c>)
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b6:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SystemInit+0x5c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	40023800 	.word	0x40023800
 80011d0:	24003010 	.word	0x24003010

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011fe:	f7ff ffb7 	bl	8001170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f000 feb1 	bl	8001f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fe7b 	bl	8000f00 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001218:	08004e1c 	.word	0x08004e1c
  ldr r2, =_sbss
 800121c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001220:	20000278 	.word	0x20000278

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f92b 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff ff18 	bl	8001090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f943 	bl	8001516 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f90b 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000001c 	.word	0x2000001c
 80012c4:	20000024 	.word	0x20000024
 80012c8:	20000020 	.word	0x20000020

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000024 	.word	0x20000024
 80012f0:	20000264 	.word	0x20000264

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000264 	.word	0x20000264

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff29 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff3e 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff8e 	bl	8001400 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff31 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001532:	f000 f802 	bl	800153a <HAL_SYSTICK_Callback>
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e165      	b.n	8001830 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8154 	bne.w	800182a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d005      	beq.n	800159a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001596:	2b02      	cmp	r3, #2
 8001598:	d130      	bne.n	80015fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 0201 	and.w	r2, r3, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b03      	cmp	r3, #3
 8001606:	d017      	beq.n	8001638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d123      	bne.n	800168c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3208      	adds	r2, #8
 800164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	69b9      	ldr	r1, [r7, #24]
 8001688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0203 	and.w	r2, r3, #3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80ae 	beq.w	800182a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <HAL_GPIO_Init+0x300>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a5c      	ldr	r2, [pc, #368]	; (8001848 <HAL_GPIO_Init+0x300>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b5a      	ldr	r3, [pc, #360]	; (8001848 <HAL_GPIO_Init+0x300>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ea:	4a58      	ldr	r2, [pc, #352]	; (800184c <HAL_GPIO_Init+0x304>)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4f      	ldr	r2, [pc, #316]	; (8001850 <HAL_GPIO_Init+0x308>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d025      	beq.n	8001762 <HAL_GPIO_Init+0x21a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4e      	ldr	r2, [pc, #312]	; (8001854 <HAL_GPIO_Init+0x30c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d01f      	beq.n	800175e <HAL_GPIO_Init+0x216>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4d      	ldr	r2, [pc, #308]	; (8001858 <HAL_GPIO_Init+0x310>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d019      	beq.n	800175a <HAL_GPIO_Init+0x212>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4c      	ldr	r2, [pc, #304]	; (800185c <HAL_GPIO_Init+0x314>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <HAL_GPIO_Init+0x20e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4b      	ldr	r2, [pc, #300]	; (8001860 <HAL_GPIO_Init+0x318>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00d      	beq.n	8001752 <HAL_GPIO_Init+0x20a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4a      	ldr	r2, [pc, #296]	; (8001864 <HAL_GPIO_Init+0x31c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d007      	beq.n	800174e <HAL_GPIO_Init+0x206>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a49      	ldr	r2, [pc, #292]	; (8001868 <HAL_GPIO_Init+0x320>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_GPIO_Init+0x202>
 8001746:	2306      	movs	r3, #6
 8001748:	e00c      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 800174a:	2307      	movs	r3, #7
 800174c:	e00a      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 800174e:	2305      	movs	r3, #5
 8001750:	e008      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 8001752:	2304      	movs	r3, #4
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 8001756:	2303      	movs	r3, #3
 8001758:	e004      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 800175a:	2302      	movs	r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_GPIO_Init+0x21c>
 8001762:	2300      	movs	r3, #0
 8001764:	69fa      	ldr	r2, [r7, #28]
 8001766:	f002 0203 	and.w	r2, r2, #3
 800176a:	0092      	lsls	r2, r2, #2
 800176c:	4093      	lsls	r3, r2
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001774:	4935      	ldr	r1, [pc, #212]	; (800184c <HAL_GPIO_Init+0x304>)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001782:	4b3a      	ldr	r3, [pc, #232]	; (800186c <HAL_GPIO_Init+0x324>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a6:	4a31      	ldr	r2, [pc, #196]	; (800186c <HAL_GPIO_Init+0x324>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017ac:	4b2f      	ldr	r3, [pc, #188]	; (800186c <HAL_GPIO_Init+0x324>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d0:	4a26      	ldr	r2, [pc, #152]	; (800186c <HAL_GPIO_Init+0x324>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d6:	4b25      	ldr	r3, [pc, #148]	; (800186c <HAL_GPIO_Init+0x324>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <HAL_GPIO_Init+0x324>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_GPIO_Init+0x324>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001824:	4a11      	ldr	r2, [pc, #68]	; (800186c <HAL_GPIO_Init+0x324>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3301      	adds	r3, #1
 800182e:	61fb      	str	r3, [r7, #28]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	2b0f      	cmp	r3, #15
 8001834:	f67f ae96 	bls.w	8001564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40013800 	.word	0x40013800
 8001850:	40020000 	.word	0x40020000
 8001854:	40020400 	.word	0x40020400
 8001858:	40020800 	.word	0x40020800
 800185c:	40020c00 	.word	0x40020c00
 8001860:	40021000 	.word	0x40021000
 8001864:	40021400 	.word	0x40021400
 8001868:	40021800 	.word	0x40021800
 800186c:	40013c00 	.word	0x40013c00

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800188c:	e003      	b.n	8001896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	041a      	lsls	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d006      	beq.n	80018c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fbc2 	bl	800104c <HAL_GPIO_EXTI_Callback>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40013c00 	.word	0x40013c00

080018d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	2000001c 	.word	0x2000001c

080018ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018f0:	f7ff fff0 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_GetPCLK1Freq+0x20>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	0a9b      	lsrs	r3, r3, #10
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	4903      	ldr	r1, [pc, #12]	; (8001910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	08004a20 	.word	0x08004a20

08001914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001918:	f7ff ffdc 	bl	80018d4 <HAL_RCC_GetHCLKFreq>
 800191c:	4602      	mov	r2, r0
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	0b5b      	lsrs	r3, r3, #13
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	4903      	ldr	r1, [pc, #12]	; (8001938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800192a:	5ccb      	ldrb	r3, [r1, r3]
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800
 8001938:	08004a20 	.word	0x08004a20

0800193c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e03f      	b.n	80019ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fbb6 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2224      	movs	r2, #36	; 0x24
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800197e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f929 	bl	8001bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695a      	ldr	r2, [r3, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2220      	movs	r2, #32
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2220      	movs	r2, #32
 80019c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b08a      	sub	sp, #40	; 0x28
 80019da:	af02      	add	r7, sp, #8
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	d17c      	bne.n	8001af0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <HAL_UART_Transmit+0x2c>
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e075      	b.n	8001af2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_UART_Transmit+0x3e>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e06e      	b.n	8001af2 <HAL_UART_Transmit+0x11c>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2221      	movs	r2, #33	; 0x21
 8001a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a2a:	f7ff fc63 	bl	80012f4 <HAL_GetTick>
 8001a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	88fa      	ldrh	r2, [r7, #6]
 8001a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	88fa      	ldrh	r2, [r7, #6]
 8001a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a44:	d108      	bne.n	8001a58 <HAL_UART_Transmit+0x82>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d104      	bne.n	8001a58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	e003      	b.n	8001a60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a68:	e02a      	b.n	8001ac0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2200      	movs	r2, #0
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 f840 	bl	8001afa <UART_WaitOnFlagUntilTimeout>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e036      	b.n	8001af2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10b      	bne.n	8001aa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	e007      	b.n	8001ab2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	781a      	ldrb	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1cf      	bne.n	8001a6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2140      	movs	r1, #64	; 0x40
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f810 	bl	8001afa <UART_WaitOnFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e006      	b.n	8001af2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001af0:	2302      	movs	r3, #2
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b090      	sub	sp, #64	; 0x40
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	4613      	mov	r3, r2
 8001b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b0a:	e050      	b.n	8001bae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b12:	d04c      	beq.n	8001bae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8001b1a:	f7ff fbeb 	bl	80012f4 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d241      	bcs.n	8001bae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	330c      	adds	r3, #12
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b34:	e853 3f00 	ldrex	r3, [r3]
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	330c      	adds	r3, #12
 8001b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b4a:	637a      	str	r2, [r7, #52]	; 0x34
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b52:	e841 2300 	strex	r3, r2, [r1]
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1e5      	bne.n	8001b2a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	3314      	adds	r3, #20
 8001b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	e853 3f00 	ldrex	r3, [r3]
 8001b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3314      	adds	r3, #20
 8001b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b7e:	623a      	str	r2, [r7, #32]
 8001b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b82:	69f9      	ldr	r1, [r7, #28]
 8001b84:	6a3a      	ldr	r2, [r7, #32]
 8001b86:	e841 2300 	strex	r3, r2, [r1]
 8001b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1e5      	bne.n	8001b5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2220      	movs	r2, #32
 8001b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e00f      	b.n	8001bce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	bf0c      	ite	eq
 8001bbe:	2301      	moveq	r3, #1
 8001bc0:	2300      	movne	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d09f      	beq.n	8001b0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3740      	adds	r7, #64	; 0x40
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bdc:	b09f      	sub	sp, #124	; 0x7c
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bee:	68d9      	ldr	r1, [r3, #12]
 8001bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	ea40 0301 	orr.w	r3, r0, r1
 8001bf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001c1c:	f021 010c 	bic.w	r1, r1, #12
 8001c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c26:	430b      	orrs	r3, r1
 8001c28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c36:	6999      	ldr	r1, [r3, #24]
 8001c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	ea40 0301 	orr.w	r3, r0, r1
 8001c40:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4bc5      	ldr	r3, [pc, #788]	; (8001f5c <UART_SetConfig+0x384>)
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d004      	beq.n	8001c56 <UART_SetConfig+0x7e>
 8001c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4bc3      	ldr	r3, [pc, #780]	; (8001f60 <UART_SetConfig+0x388>)
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d103      	bne.n	8001c5e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c56:	f7ff fe5d 	bl	8001914 <HAL_RCC_GetPCLK2Freq>
 8001c5a:	6778      	str	r0, [r7, #116]	; 0x74
 8001c5c:	e002      	b.n	8001c64 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c5e:	f7ff fe45 	bl	80018ec <HAL_RCC_GetPCLK1Freq>
 8001c62:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c6c:	f040 80b6 	bne.w	8001ddc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c72:	461c      	mov	r4, r3
 8001c74:	f04f 0500 	mov.w	r5, #0
 8001c78:	4622      	mov	r2, r4
 8001c7a:	462b      	mov	r3, r5
 8001c7c:	1891      	adds	r1, r2, r2
 8001c7e:	6439      	str	r1, [r7, #64]	; 0x40
 8001c80:	415b      	adcs	r3, r3
 8001c82:	647b      	str	r3, [r7, #68]	; 0x44
 8001c84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c88:	1912      	adds	r2, r2, r4
 8001c8a:	eb45 0303 	adc.w	r3, r5, r3
 8001c8e:	f04f 0000 	mov.w	r0, #0
 8001c92:	f04f 0100 	mov.w	r1, #0
 8001c96:	00d9      	lsls	r1, r3, #3
 8001c98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c9c:	00d0      	lsls	r0, r2, #3
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	1911      	adds	r1, r2, r4
 8001ca4:	6639      	str	r1, [r7, #96]	; 0x60
 8001ca6:	416b      	adcs	r3, r5
 8001ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8001caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	1891      	adds	r1, r2, r2
 8001cb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8001cb8:	415b      	adcs	r3, r3
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001cc0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001cc4:	f7fe ff90 	bl	8000be8 <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4ba5      	ldr	r3, [pc, #660]	; (8001f64 <UART_SetConfig+0x38c>)
 8001cce:	fba3 2302 	umull	r2, r3, r3, r2
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	011e      	lsls	r6, r3, #4
 8001cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cd8:	461c      	mov	r4, r3
 8001cda:	f04f 0500 	mov.w	r5, #0
 8001cde:	4622      	mov	r2, r4
 8001ce0:	462b      	mov	r3, r5
 8001ce2:	1891      	adds	r1, r2, r2
 8001ce4:	6339      	str	r1, [r7, #48]	; 0x30
 8001ce6:	415b      	adcs	r3, r3
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cee:	1912      	adds	r2, r2, r4
 8001cf0:	eb45 0303 	adc.w	r3, r5, r3
 8001cf4:	f04f 0000 	mov.w	r0, #0
 8001cf8:	f04f 0100 	mov.w	r1, #0
 8001cfc:	00d9      	lsls	r1, r3, #3
 8001cfe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d02:	00d0      	lsls	r0, r2, #3
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	1911      	adds	r1, r2, r4
 8001d0a:	65b9      	str	r1, [r7, #88]	; 0x58
 8001d0c:	416b      	adcs	r3, r5
 8001d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	461a      	mov	r2, r3
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	1891      	adds	r1, r2, r2
 8001d1c:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d1e:	415b      	adcs	r3, r3
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d26:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001d2a:	f7fe ff5d 	bl	8000be8 <__aeabi_uldivmod>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4b8c      	ldr	r3, [pc, #560]	; (8001f64 <UART_SetConfig+0x38c>)
 8001d34:	fba3 1302 	umull	r1, r3, r3, r2
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	2164      	movs	r1, #100	; 0x64
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	3332      	adds	r3, #50	; 0x32
 8001d46:	4a87      	ldr	r2, [pc, #540]	; (8001f64 <UART_SetConfig+0x38c>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d54:	441e      	add	r6, r3
 8001d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f04f 0100 	mov.w	r1, #0
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	1894      	adds	r4, r2, r2
 8001d64:	623c      	str	r4, [r7, #32]
 8001d66:	415b      	adcs	r3, r3
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d6e:	1812      	adds	r2, r2, r0
 8001d70:	eb41 0303 	adc.w	r3, r1, r3
 8001d74:	f04f 0400 	mov.w	r4, #0
 8001d78:	f04f 0500 	mov.w	r5, #0
 8001d7c:	00dd      	lsls	r5, r3, #3
 8001d7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001d82:	00d4      	lsls	r4, r2, #3
 8001d84:	4622      	mov	r2, r4
 8001d86:	462b      	mov	r3, r5
 8001d88:	1814      	adds	r4, r2, r0
 8001d8a:	653c      	str	r4, [r7, #80]	; 0x50
 8001d8c:	414b      	adcs	r3, r1
 8001d8e:	657b      	str	r3, [r7, #84]	; 0x54
 8001d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	461a      	mov	r2, r3
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	1891      	adds	r1, r2, r2
 8001d9c:	61b9      	str	r1, [r7, #24]
 8001d9e:	415b      	adcs	r3, r3
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001da6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001daa:	f7fe ff1d 	bl	8000be8 <__aeabi_uldivmod>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <UART_SetConfig+0x38c>)
 8001db4:	fba3 1302 	umull	r1, r3, r3, r2
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	2164      	movs	r1, #100	; 0x64
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	3332      	adds	r3, #50	; 0x32
 8001dc6:	4a67      	ldr	r2, [pc, #412]	; (8001f64 <UART_SetConfig+0x38c>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	f003 0207 	and.w	r2, r3, #7
 8001dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4432      	add	r2, r6
 8001dd8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001dda:	e0b9      	b.n	8001f50 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dde:	461c      	mov	r4, r3
 8001de0:	f04f 0500 	mov.w	r5, #0
 8001de4:	4622      	mov	r2, r4
 8001de6:	462b      	mov	r3, r5
 8001de8:	1891      	adds	r1, r2, r2
 8001dea:	6139      	str	r1, [r7, #16]
 8001dec:	415b      	adcs	r3, r3
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001df4:	1912      	adds	r2, r2, r4
 8001df6:	eb45 0303 	adc.w	r3, r5, r3
 8001dfa:	f04f 0000 	mov.w	r0, #0
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	00d9      	lsls	r1, r3, #3
 8001e04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e08:	00d0      	lsls	r0, r2, #3
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	eb12 0804 	adds.w	r8, r2, r4
 8001e12:	eb43 0905 	adc.w	r9, r3, r5
 8001e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f04f 0100 	mov.w	r1, #0
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	008b      	lsls	r3, r1, #2
 8001e2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001e2e:	0082      	lsls	r2, r0, #2
 8001e30:	4640      	mov	r0, r8
 8001e32:	4649      	mov	r1, r9
 8001e34:	f7fe fed8 	bl	8000be8 <__aeabi_uldivmod>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <UART_SetConfig+0x38c>)
 8001e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	011e      	lsls	r6, r3, #4
 8001e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f04f 0100 	mov.w	r1, #0
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	1894      	adds	r4, r2, r2
 8001e54:	60bc      	str	r4, [r7, #8]
 8001e56:	415b      	adcs	r3, r3
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e5e:	1812      	adds	r2, r2, r0
 8001e60:	eb41 0303 	adc.w	r3, r1, r3
 8001e64:	f04f 0400 	mov.w	r4, #0
 8001e68:	f04f 0500 	mov.w	r5, #0
 8001e6c:	00dd      	lsls	r5, r3, #3
 8001e6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001e72:	00d4      	lsls	r4, r2, #3
 8001e74:	4622      	mov	r2, r4
 8001e76:	462b      	mov	r3, r5
 8001e78:	1814      	adds	r4, r2, r0
 8001e7a:	64bc      	str	r4, [r7, #72]	; 0x48
 8001e7c:	414b      	adcs	r3, r1
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f04f 0100 	mov.w	r1, #0
 8001e8a:	f04f 0200 	mov.w	r2, #0
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	008b      	lsls	r3, r1, #2
 8001e94:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001e98:	0082      	lsls	r2, r0, #2
 8001e9a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001e9e:	f7fe fea3 	bl	8000be8 <__aeabi_uldivmod>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <UART_SetConfig+0x38c>)
 8001ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8001eac:	095b      	lsrs	r3, r3, #5
 8001eae:	2164      	movs	r1, #100	; 0x64
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	3332      	adds	r3, #50	; 0x32
 8001eba:	4a2a      	ldr	r2, [pc, #168]	; (8001f64 <UART_SetConfig+0x38c>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec6:	441e      	add	r6, r3
 8001ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f04f 0100 	mov.w	r1, #0
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	1894      	adds	r4, r2, r2
 8001ed6:	603c      	str	r4, [r7, #0]
 8001ed8:	415b      	adcs	r3, r3
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ee0:	1812      	adds	r2, r2, r0
 8001ee2:	eb41 0303 	adc.w	r3, r1, r3
 8001ee6:	f04f 0400 	mov.w	r4, #0
 8001eea:	f04f 0500 	mov.w	r5, #0
 8001eee:	00dd      	lsls	r5, r3, #3
 8001ef0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001ef4:	00d4      	lsls	r4, r2, #3
 8001ef6:	4622      	mov	r2, r4
 8001ef8:	462b      	mov	r3, r5
 8001efa:	eb12 0a00 	adds.w	sl, r2, r0
 8001efe:	eb43 0b01 	adc.w	fp, r3, r1
 8001f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	008b      	lsls	r3, r1, #2
 8001f16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f1a:	0082      	lsls	r2, r0, #2
 8001f1c:	4650      	mov	r0, sl
 8001f1e:	4659      	mov	r1, fp
 8001f20:	f7fe fe62 	bl	8000be8 <__aeabi_uldivmod>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <UART_SetConfig+0x38c>)
 8001f2a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2164      	movs	r1, #100	; 0x64
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	3332      	adds	r3, #50	; 0x32
 8001f3c:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <UART_SetConfig+0x38c>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	f003 020f 	and.w	r2, r3, #15
 8001f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4432      	add	r2, r6
 8001f4e:	609a      	str	r2, [r3, #8]
}
 8001f50:	bf00      	nop
 8001f52:	377c      	adds	r7, #124	; 0x7c
 8001f54:	46bd      	mov	sp, r7
 8001f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	40011400 	.word	0x40011400
 8001f64:	51eb851f 	.word	0x51eb851f

08001f68 <__libc_init_array>:
 8001f68:	b570      	push	{r4, r5, r6, lr}
 8001f6a:	4d0d      	ldr	r5, [pc, #52]	; (8001fa0 <__libc_init_array+0x38>)
 8001f6c:	4c0d      	ldr	r4, [pc, #52]	; (8001fa4 <__libc_init_array+0x3c>)
 8001f6e:	1b64      	subs	r4, r4, r5
 8001f70:	10a4      	asrs	r4, r4, #2
 8001f72:	2600      	movs	r6, #0
 8001f74:	42a6      	cmp	r6, r4
 8001f76:	d109      	bne.n	8001f8c <__libc_init_array+0x24>
 8001f78:	4d0b      	ldr	r5, [pc, #44]	; (8001fa8 <__libc_init_array+0x40>)
 8001f7a:	4c0c      	ldr	r4, [pc, #48]	; (8001fac <__libc_init_array+0x44>)
 8001f7c:	f002 fd42 	bl	8004a04 <_init>
 8001f80:	1b64      	subs	r4, r4, r5
 8001f82:	10a4      	asrs	r4, r4, #2
 8001f84:	2600      	movs	r6, #0
 8001f86:	42a6      	cmp	r6, r4
 8001f88:	d105      	bne.n	8001f96 <__libc_init_array+0x2e>
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}
 8001f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f90:	4798      	blx	r3
 8001f92:	3601      	adds	r6, #1
 8001f94:	e7ee      	b.n	8001f74 <__libc_init_array+0xc>
 8001f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f9a:	4798      	blx	r3
 8001f9c:	3601      	adds	r6, #1
 8001f9e:	e7f2      	b.n	8001f86 <__libc_init_array+0x1e>
 8001fa0:	08004e14 	.word	0x08004e14
 8001fa4:	08004e14 	.word	0x08004e14
 8001fa8:	08004e14 	.word	0x08004e14
 8001fac:	08004e18 	.word	0x08004e18

08001fb0 <memset>:
 8001fb0:	4402      	add	r2, r0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d100      	bne.n	8001fba <memset+0xa>
 8001fb8:	4770      	bx	lr
 8001fba:	f803 1b01 	strb.w	r1, [r3], #1
 8001fbe:	e7f9      	b.n	8001fb4 <memset+0x4>

08001fc0 <__cvt>:
 8001fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fc4:	ec55 4b10 	vmov	r4, r5, d0
 8001fc8:	2d00      	cmp	r5, #0
 8001fca:	460e      	mov	r6, r1
 8001fcc:	4619      	mov	r1, r3
 8001fce:	462b      	mov	r3, r5
 8001fd0:	bfbb      	ittet	lt
 8001fd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001fd6:	461d      	movlt	r5, r3
 8001fd8:	2300      	movge	r3, #0
 8001fda:	232d      	movlt	r3, #45	; 0x2d
 8001fdc:	700b      	strb	r3, [r1, #0]
 8001fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001fe0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001fe4:	4691      	mov	r9, r2
 8001fe6:	f023 0820 	bic.w	r8, r3, #32
 8001fea:	bfbc      	itt	lt
 8001fec:	4622      	movlt	r2, r4
 8001fee:	4614      	movlt	r4, r2
 8001ff0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001ff4:	d005      	beq.n	8002002 <__cvt+0x42>
 8001ff6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8001ffa:	d100      	bne.n	8001ffe <__cvt+0x3e>
 8001ffc:	3601      	adds	r6, #1
 8001ffe:	2102      	movs	r1, #2
 8002000:	e000      	b.n	8002004 <__cvt+0x44>
 8002002:	2103      	movs	r1, #3
 8002004:	ab03      	add	r3, sp, #12
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	ab02      	add	r3, sp, #8
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	ec45 4b10 	vmov	d0, r4, r5
 8002010:	4653      	mov	r3, sl
 8002012:	4632      	mov	r2, r6
 8002014:	f000 fccc 	bl	80029b0 <_dtoa_r>
 8002018:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800201c:	4607      	mov	r7, r0
 800201e:	d102      	bne.n	8002026 <__cvt+0x66>
 8002020:	f019 0f01 	tst.w	r9, #1
 8002024:	d022      	beq.n	800206c <__cvt+0xac>
 8002026:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800202a:	eb07 0906 	add.w	r9, r7, r6
 800202e:	d110      	bne.n	8002052 <__cvt+0x92>
 8002030:	783b      	ldrb	r3, [r7, #0]
 8002032:	2b30      	cmp	r3, #48	; 0x30
 8002034:	d10a      	bne.n	800204c <__cvt+0x8c>
 8002036:	2200      	movs	r2, #0
 8002038:	2300      	movs	r3, #0
 800203a:	4620      	mov	r0, r4
 800203c:	4629      	mov	r1, r5
 800203e:	f7fe fd63 	bl	8000b08 <__aeabi_dcmpeq>
 8002042:	b918      	cbnz	r0, 800204c <__cvt+0x8c>
 8002044:	f1c6 0601 	rsb	r6, r6, #1
 8002048:	f8ca 6000 	str.w	r6, [sl]
 800204c:	f8da 3000 	ldr.w	r3, [sl]
 8002050:	4499      	add	r9, r3
 8002052:	2200      	movs	r2, #0
 8002054:	2300      	movs	r3, #0
 8002056:	4620      	mov	r0, r4
 8002058:	4629      	mov	r1, r5
 800205a:	f7fe fd55 	bl	8000b08 <__aeabi_dcmpeq>
 800205e:	b108      	cbz	r0, 8002064 <__cvt+0xa4>
 8002060:	f8cd 900c 	str.w	r9, [sp, #12]
 8002064:	2230      	movs	r2, #48	; 0x30
 8002066:	9b03      	ldr	r3, [sp, #12]
 8002068:	454b      	cmp	r3, r9
 800206a:	d307      	bcc.n	800207c <__cvt+0xbc>
 800206c:	9b03      	ldr	r3, [sp, #12]
 800206e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002070:	1bdb      	subs	r3, r3, r7
 8002072:	4638      	mov	r0, r7
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	b004      	add	sp, #16
 8002078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800207c:	1c59      	adds	r1, r3, #1
 800207e:	9103      	str	r1, [sp, #12]
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	e7f0      	b.n	8002066 <__cvt+0xa6>

08002084 <__exponent>:
 8002084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002086:	4603      	mov	r3, r0
 8002088:	2900      	cmp	r1, #0
 800208a:	bfb8      	it	lt
 800208c:	4249      	neglt	r1, r1
 800208e:	f803 2b02 	strb.w	r2, [r3], #2
 8002092:	bfb4      	ite	lt
 8002094:	222d      	movlt	r2, #45	; 0x2d
 8002096:	222b      	movge	r2, #43	; 0x2b
 8002098:	2909      	cmp	r1, #9
 800209a:	7042      	strb	r2, [r0, #1]
 800209c:	dd2a      	ble.n	80020f4 <__exponent+0x70>
 800209e:	f10d 0407 	add.w	r4, sp, #7
 80020a2:	46a4      	mov	ip, r4
 80020a4:	270a      	movs	r7, #10
 80020a6:	46a6      	mov	lr, r4
 80020a8:	460a      	mov	r2, r1
 80020aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80020ae:	fb07 1516 	mls	r5, r7, r6, r1
 80020b2:	3530      	adds	r5, #48	; 0x30
 80020b4:	2a63      	cmp	r2, #99	; 0x63
 80020b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80020ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80020be:	4631      	mov	r1, r6
 80020c0:	dcf1      	bgt.n	80020a6 <__exponent+0x22>
 80020c2:	3130      	adds	r1, #48	; 0x30
 80020c4:	f1ae 0502 	sub.w	r5, lr, #2
 80020c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80020cc:	1c44      	adds	r4, r0, #1
 80020ce:	4629      	mov	r1, r5
 80020d0:	4561      	cmp	r1, ip
 80020d2:	d30a      	bcc.n	80020ea <__exponent+0x66>
 80020d4:	f10d 0209 	add.w	r2, sp, #9
 80020d8:	eba2 020e 	sub.w	r2, r2, lr
 80020dc:	4565      	cmp	r5, ip
 80020de:	bf88      	it	hi
 80020e0:	2200      	movhi	r2, #0
 80020e2:	4413      	add	r3, r2
 80020e4:	1a18      	subs	r0, r3, r0
 80020e6:	b003      	add	sp, #12
 80020e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80020f2:	e7ed      	b.n	80020d0 <__exponent+0x4c>
 80020f4:	2330      	movs	r3, #48	; 0x30
 80020f6:	3130      	adds	r1, #48	; 0x30
 80020f8:	7083      	strb	r3, [r0, #2]
 80020fa:	70c1      	strb	r1, [r0, #3]
 80020fc:	1d03      	adds	r3, r0, #4
 80020fe:	e7f1      	b.n	80020e4 <__exponent+0x60>

08002100 <_printf_float>:
 8002100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002104:	ed2d 8b02 	vpush	{d8}
 8002108:	b08d      	sub	sp, #52	; 0x34
 800210a:	460c      	mov	r4, r1
 800210c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002110:	4616      	mov	r6, r2
 8002112:	461f      	mov	r7, r3
 8002114:	4605      	mov	r5, r0
 8002116:	f001 fa37 	bl	8003588 <_localeconv_r>
 800211a:	f8d0 a000 	ldr.w	sl, [r0]
 800211e:	4650      	mov	r0, sl
 8002120:	f7fe f876 	bl	8000210 <strlen>
 8002124:	2300      	movs	r3, #0
 8002126:	930a      	str	r3, [sp, #40]	; 0x28
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	9305      	str	r3, [sp, #20]
 800212c:	f8d8 3000 	ldr.w	r3, [r8]
 8002130:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002134:	3307      	adds	r3, #7
 8002136:	f023 0307 	bic.w	r3, r3, #7
 800213a:	f103 0208 	add.w	r2, r3, #8
 800213e:	f8c8 2000 	str.w	r2, [r8]
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800214a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800214e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002152:	9307      	str	r3, [sp, #28]
 8002154:	f8cd 8018 	str.w	r8, [sp, #24]
 8002158:	ee08 0a10 	vmov	s16, r0
 800215c:	4b9f      	ldr	r3, [pc, #636]	; (80023dc <_printf_float+0x2dc>)
 800215e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002162:	f04f 32ff 	mov.w	r2, #4294967295
 8002166:	f7fe fd01 	bl	8000b6c <__aeabi_dcmpun>
 800216a:	bb88      	cbnz	r0, 80021d0 <_printf_float+0xd0>
 800216c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002170:	4b9a      	ldr	r3, [pc, #616]	; (80023dc <_printf_float+0x2dc>)
 8002172:	f04f 32ff 	mov.w	r2, #4294967295
 8002176:	f7fe fcdb 	bl	8000b30 <__aeabi_dcmple>
 800217a:	bb48      	cbnz	r0, 80021d0 <_printf_float+0xd0>
 800217c:	2200      	movs	r2, #0
 800217e:	2300      	movs	r3, #0
 8002180:	4640      	mov	r0, r8
 8002182:	4649      	mov	r1, r9
 8002184:	f7fe fcca 	bl	8000b1c <__aeabi_dcmplt>
 8002188:	b110      	cbz	r0, 8002190 <_printf_float+0x90>
 800218a:	232d      	movs	r3, #45	; 0x2d
 800218c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002190:	4b93      	ldr	r3, [pc, #588]	; (80023e0 <_printf_float+0x2e0>)
 8002192:	4894      	ldr	r0, [pc, #592]	; (80023e4 <_printf_float+0x2e4>)
 8002194:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002198:	bf94      	ite	ls
 800219a:	4698      	movls	r8, r3
 800219c:	4680      	movhi	r8, r0
 800219e:	2303      	movs	r3, #3
 80021a0:	6123      	str	r3, [r4, #16]
 80021a2:	9b05      	ldr	r3, [sp, #20]
 80021a4:	f023 0204 	bic.w	r2, r3, #4
 80021a8:	6022      	str	r2, [r4, #0]
 80021aa:	f04f 0900 	mov.w	r9, #0
 80021ae:	9700      	str	r7, [sp, #0]
 80021b0:	4633      	mov	r3, r6
 80021b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80021b4:	4621      	mov	r1, r4
 80021b6:	4628      	mov	r0, r5
 80021b8:	f000 f9d8 	bl	800256c <_printf_common>
 80021bc:	3001      	adds	r0, #1
 80021be:	f040 8090 	bne.w	80022e2 <_printf_float+0x1e2>
 80021c2:	f04f 30ff 	mov.w	r0, #4294967295
 80021c6:	b00d      	add	sp, #52	; 0x34
 80021c8:	ecbd 8b02 	vpop	{d8}
 80021cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021d0:	4642      	mov	r2, r8
 80021d2:	464b      	mov	r3, r9
 80021d4:	4640      	mov	r0, r8
 80021d6:	4649      	mov	r1, r9
 80021d8:	f7fe fcc8 	bl	8000b6c <__aeabi_dcmpun>
 80021dc:	b140      	cbz	r0, 80021f0 <_printf_float+0xf0>
 80021de:	464b      	mov	r3, r9
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bfbc      	itt	lt
 80021e4:	232d      	movlt	r3, #45	; 0x2d
 80021e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80021ea:	487f      	ldr	r0, [pc, #508]	; (80023e8 <_printf_float+0x2e8>)
 80021ec:	4b7f      	ldr	r3, [pc, #508]	; (80023ec <_printf_float+0x2ec>)
 80021ee:	e7d1      	b.n	8002194 <_printf_float+0x94>
 80021f0:	6863      	ldr	r3, [r4, #4]
 80021f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80021f6:	9206      	str	r2, [sp, #24]
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	d13f      	bne.n	800227c <_printf_float+0x17c>
 80021fc:	2306      	movs	r3, #6
 80021fe:	6063      	str	r3, [r4, #4]
 8002200:	9b05      	ldr	r3, [sp, #20]
 8002202:	6861      	ldr	r1, [r4, #4]
 8002204:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002208:	2300      	movs	r3, #0
 800220a:	9303      	str	r3, [sp, #12]
 800220c:	ab0a      	add	r3, sp, #40	; 0x28
 800220e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002212:	ab09      	add	r3, sp, #36	; 0x24
 8002214:	ec49 8b10 	vmov	d0, r8, r9
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	6022      	str	r2, [r4, #0]
 800221c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002220:	4628      	mov	r0, r5
 8002222:	f7ff fecd 	bl	8001fc0 <__cvt>
 8002226:	9b06      	ldr	r3, [sp, #24]
 8002228:	9909      	ldr	r1, [sp, #36]	; 0x24
 800222a:	2b47      	cmp	r3, #71	; 0x47
 800222c:	4680      	mov	r8, r0
 800222e:	d108      	bne.n	8002242 <_printf_float+0x142>
 8002230:	1cc8      	adds	r0, r1, #3
 8002232:	db02      	blt.n	800223a <_printf_float+0x13a>
 8002234:	6863      	ldr	r3, [r4, #4]
 8002236:	4299      	cmp	r1, r3
 8002238:	dd41      	ble.n	80022be <_printf_float+0x1be>
 800223a:	f1ab 0b02 	sub.w	fp, fp, #2
 800223e:	fa5f fb8b 	uxtb.w	fp, fp
 8002242:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002246:	d820      	bhi.n	800228a <_printf_float+0x18a>
 8002248:	3901      	subs	r1, #1
 800224a:	465a      	mov	r2, fp
 800224c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002250:	9109      	str	r1, [sp, #36]	; 0x24
 8002252:	f7ff ff17 	bl	8002084 <__exponent>
 8002256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002258:	1813      	adds	r3, r2, r0
 800225a:	2a01      	cmp	r2, #1
 800225c:	4681      	mov	r9, r0
 800225e:	6123      	str	r3, [r4, #16]
 8002260:	dc02      	bgt.n	8002268 <_printf_float+0x168>
 8002262:	6822      	ldr	r2, [r4, #0]
 8002264:	07d2      	lsls	r2, r2, #31
 8002266:	d501      	bpl.n	800226c <_printf_float+0x16c>
 8002268:	3301      	adds	r3, #1
 800226a:	6123      	str	r3, [r4, #16]
 800226c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002270:	2b00      	cmp	r3, #0
 8002272:	d09c      	beq.n	80021ae <_printf_float+0xae>
 8002274:	232d      	movs	r3, #45	; 0x2d
 8002276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800227a:	e798      	b.n	80021ae <_printf_float+0xae>
 800227c:	9a06      	ldr	r2, [sp, #24]
 800227e:	2a47      	cmp	r2, #71	; 0x47
 8002280:	d1be      	bne.n	8002200 <_printf_float+0x100>
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1bc      	bne.n	8002200 <_printf_float+0x100>
 8002286:	2301      	movs	r3, #1
 8002288:	e7b9      	b.n	80021fe <_printf_float+0xfe>
 800228a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800228e:	d118      	bne.n	80022c2 <_printf_float+0x1c2>
 8002290:	2900      	cmp	r1, #0
 8002292:	6863      	ldr	r3, [r4, #4]
 8002294:	dd0b      	ble.n	80022ae <_printf_float+0x1ae>
 8002296:	6121      	str	r1, [r4, #16]
 8002298:	b913      	cbnz	r3, 80022a0 <_printf_float+0x1a0>
 800229a:	6822      	ldr	r2, [r4, #0]
 800229c:	07d0      	lsls	r0, r2, #31
 800229e:	d502      	bpl.n	80022a6 <_printf_float+0x1a6>
 80022a0:	3301      	adds	r3, #1
 80022a2:	440b      	add	r3, r1
 80022a4:	6123      	str	r3, [r4, #16]
 80022a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80022a8:	f04f 0900 	mov.w	r9, #0
 80022ac:	e7de      	b.n	800226c <_printf_float+0x16c>
 80022ae:	b913      	cbnz	r3, 80022b6 <_printf_float+0x1b6>
 80022b0:	6822      	ldr	r2, [r4, #0]
 80022b2:	07d2      	lsls	r2, r2, #31
 80022b4:	d501      	bpl.n	80022ba <_printf_float+0x1ba>
 80022b6:	3302      	adds	r3, #2
 80022b8:	e7f4      	b.n	80022a4 <_printf_float+0x1a4>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e7f2      	b.n	80022a4 <_printf_float+0x1a4>
 80022be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80022c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022c4:	4299      	cmp	r1, r3
 80022c6:	db05      	blt.n	80022d4 <_printf_float+0x1d4>
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	6121      	str	r1, [r4, #16]
 80022cc:	07d8      	lsls	r0, r3, #31
 80022ce:	d5ea      	bpl.n	80022a6 <_printf_float+0x1a6>
 80022d0:	1c4b      	adds	r3, r1, #1
 80022d2:	e7e7      	b.n	80022a4 <_printf_float+0x1a4>
 80022d4:	2900      	cmp	r1, #0
 80022d6:	bfd4      	ite	le
 80022d8:	f1c1 0202 	rsble	r2, r1, #2
 80022dc:	2201      	movgt	r2, #1
 80022de:	4413      	add	r3, r2
 80022e0:	e7e0      	b.n	80022a4 <_printf_float+0x1a4>
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	055a      	lsls	r2, r3, #21
 80022e6:	d407      	bmi.n	80022f8 <_printf_float+0x1f8>
 80022e8:	6923      	ldr	r3, [r4, #16]
 80022ea:	4642      	mov	r2, r8
 80022ec:	4631      	mov	r1, r6
 80022ee:	4628      	mov	r0, r5
 80022f0:	47b8      	blx	r7
 80022f2:	3001      	adds	r0, #1
 80022f4:	d12c      	bne.n	8002350 <_printf_float+0x250>
 80022f6:	e764      	b.n	80021c2 <_printf_float+0xc2>
 80022f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80022fc:	f240 80e0 	bls.w	80024c0 <_printf_float+0x3c0>
 8002300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002304:	2200      	movs	r2, #0
 8002306:	2300      	movs	r3, #0
 8002308:	f7fe fbfe 	bl	8000b08 <__aeabi_dcmpeq>
 800230c:	2800      	cmp	r0, #0
 800230e:	d034      	beq.n	800237a <_printf_float+0x27a>
 8002310:	4a37      	ldr	r2, [pc, #220]	; (80023f0 <_printf_float+0x2f0>)
 8002312:	2301      	movs	r3, #1
 8002314:	4631      	mov	r1, r6
 8002316:	4628      	mov	r0, r5
 8002318:	47b8      	blx	r7
 800231a:	3001      	adds	r0, #1
 800231c:	f43f af51 	beq.w	80021c2 <_printf_float+0xc2>
 8002320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002324:	429a      	cmp	r2, r3
 8002326:	db02      	blt.n	800232e <_printf_float+0x22e>
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	07d8      	lsls	r0, r3, #31
 800232c:	d510      	bpl.n	8002350 <_printf_float+0x250>
 800232e:	ee18 3a10 	vmov	r3, s16
 8002332:	4652      	mov	r2, sl
 8002334:	4631      	mov	r1, r6
 8002336:	4628      	mov	r0, r5
 8002338:	47b8      	blx	r7
 800233a:	3001      	adds	r0, #1
 800233c:	f43f af41 	beq.w	80021c2 <_printf_float+0xc2>
 8002340:	f04f 0800 	mov.w	r8, #0
 8002344:	f104 091a 	add.w	r9, r4, #26
 8002348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800234a:	3b01      	subs	r3, #1
 800234c:	4543      	cmp	r3, r8
 800234e:	dc09      	bgt.n	8002364 <_printf_float+0x264>
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	079b      	lsls	r3, r3, #30
 8002354:	f100 8105 	bmi.w	8002562 <_printf_float+0x462>
 8002358:	68e0      	ldr	r0, [r4, #12]
 800235a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800235c:	4298      	cmp	r0, r3
 800235e:	bfb8      	it	lt
 8002360:	4618      	movlt	r0, r3
 8002362:	e730      	b.n	80021c6 <_printf_float+0xc6>
 8002364:	2301      	movs	r3, #1
 8002366:	464a      	mov	r2, r9
 8002368:	4631      	mov	r1, r6
 800236a:	4628      	mov	r0, r5
 800236c:	47b8      	blx	r7
 800236e:	3001      	adds	r0, #1
 8002370:	f43f af27 	beq.w	80021c2 <_printf_float+0xc2>
 8002374:	f108 0801 	add.w	r8, r8, #1
 8002378:	e7e6      	b.n	8002348 <_printf_float+0x248>
 800237a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800237c:	2b00      	cmp	r3, #0
 800237e:	dc39      	bgt.n	80023f4 <_printf_float+0x2f4>
 8002380:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <_printf_float+0x2f0>)
 8002382:	2301      	movs	r3, #1
 8002384:	4631      	mov	r1, r6
 8002386:	4628      	mov	r0, r5
 8002388:	47b8      	blx	r7
 800238a:	3001      	adds	r0, #1
 800238c:	f43f af19 	beq.w	80021c2 <_printf_float+0xc2>
 8002390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002394:	4313      	orrs	r3, r2
 8002396:	d102      	bne.n	800239e <_printf_float+0x29e>
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	07d9      	lsls	r1, r3, #31
 800239c:	d5d8      	bpl.n	8002350 <_printf_float+0x250>
 800239e:	ee18 3a10 	vmov	r3, s16
 80023a2:	4652      	mov	r2, sl
 80023a4:	4631      	mov	r1, r6
 80023a6:	4628      	mov	r0, r5
 80023a8:	47b8      	blx	r7
 80023aa:	3001      	adds	r0, #1
 80023ac:	f43f af09 	beq.w	80021c2 <_printf_float+0xc2>
 80023b0:	f04f 0900 	mov.w	r9, #0
 80023b4:	f104 0a1a 	add.w	sl, r4, #26
 80023b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023ba:	425b      	negs	r3, r3
 80023bc:	454b      	cmp	r3, r9
 80023be:	dc01      	bgt.n	80023c4 <_printf_float+0x2c4>
 80023c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023c2:	e792      	b.n	80022ea <_printf_float+0x1ea>
 80023c4:	2301      	movs	r3, #1
 80023c6:	4652      	mov	r2, sl
 80023c8:	4631      	mov	r1, r6
 80023ca:	4628      	mov	r0, r5
 80023cc:	47b8      	blx	r7
 80023ce:	3001      	adds	r0, #1
 80023d0:	f43f aef7 	beq.w	80021c2 <_printf_float+0xc2>
 80023d4:	f109 0901 	add.w	r9, r9, #1
 80023d8:	e7ee      	b.n	80023b8 <_printf_float+0x2b8>
 80023da:	bf00      	nop
 80023dc:	7fefffff 	.word	0x7fefffff
 80023e0:	08004a2c 	.word	0x08004a2c
 80023e4:	08004a30 	.word	0x08004a30
 80023e8:	08004a38 	.word	0x08004a38
 80023ec:	08004a34 	.word	0x08004a34
 80023f0:	08004a3c 	.word	0x08004a3c
 80023f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80023f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023f8:	429a      	cmp	r2, r3
 80023fa:	bfa8      	it	ge
 80023fc:	461a      	movge	r2, r3
 80023fe:	2a00      	cmp	r2, #0
 8002400:	4691      	mov	r9, r2
 8002402:	dc37      	bgt.n	8002474 <_printf_float+0x374>
 8002404:	f04f 0b00 	mov.w	fp, #0
 8002408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800240c:	f104 021a 	add.w	r2, r4, #26
 8002410:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002412:	9305      	str	r3, [sp, #20]
 8002414:	eba3 0309 	sub.w	r3, r3, r9
 8002418:	455b      	cmp	r3, fp
 800241a:	dc33      	bgt.n	8002484 <_printf_float+0x384>
 800241c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002420:	429a      	cmp	r2, r3
 8002422:	db3b      	blt.n	800249c <_printf_float+0x39c>
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	07da      	lsls	r2, r3, #31
 8002428:	d438      	bmi.n	800249c <_printf_float+0x39c>
 800242a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800242c:	9b05      	ldr	r3, [sp, #20]
 800242e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	eba2 0901 	sub.w	r9, r2, r1
 8002436:	4599      	cmp	r9, r3
 8002438:	bfa8      	it	ge
 800243a:	4699      	movge	r9, r3
 800243c:	f1b9 0f00 	cmp.w	r9, #0
 8002440:	dc35      	bgt.n	80024ae <_printf_float+0x3ae>
 8002442:	f04f 0800 	mov.w	r8, #0
 8002446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800244a:	f104 0a1a 	add.w	sl, r4, #26
 800244e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	eba3 0309 	sub.w	r3, r3, r9
 8002458:	4543      	cmp	r3, r8
 800245a:	f77f af79 	ble.w	8002350 <_printf_float+0x250>
 800245e:	2301      	movs	r3, #1
 8002460:	4652      	mov	r2, sl
 8002462:	4631      	mov	r1, r6
 8002464:	4628      	mov	r0, r5
 8002466:	47b8      	blx	r7
 8002468:	3001      	adds	r0, #1
 800246a:	f43f aeaa 	beq.w	80021c2 <_printf_float+0xc2>
 800246e:	f108 0801 	add.w	r8, r8, #1
 8002472:	e7ec      	b.n	800244e <_printf_float+0x34e>
 8002474:	4613      	mov	r3, r2
 8002476:	4631      	mov	r1, r6
 8002478:	4642      	mov	r2, r8
 800247a:	4628      	mov	r0, r5
 800247c:	47b8      	blx	r7
 800247e:	3001      	adds	r0, #1
 8002480:	d1c0      	bne.n	8002404 <_printf_float+0x304>
 8002482:	e69e      	b.n	80021c2 <_printf_float+0xc2>
 8002484:	2301      	movs	r3, #1
 8002486:	4631      	mov	r1, r6
 8002488:	4628      	mov	r0, r5
 800248a:	9205      	str	r2, [sp, #20]
 800248c:	47b8      	blx	r7
 800248e:	3001      	adds	r0, #1
 8002490:	f43f ae97 	beq.w	80021c2 <_printf_float+0xc2>
 8002494:	9a05      	ldr	r2, [sp, #20]
 8002496:	f10b 0b01 	add.w	fp, fp, #1
 800249a:	e7b9      	b.n	8002410 <_printf_float+0x310>
 800249c:	ee18 3a10 	vmov	r3, s16
 80024a0:	4652      	mov	r2, sl
 80024a2:	4631      	mov	r1, r6
 80024a4:	4628      	mov	r0, r5
 80024a6:	47b8      	blx	r7
 80024a8:	3001      	adds	r0, #1
 80024aa:	d1be      	bne.n	800242a <_printf_float+0x32a>
 80024ac:	e689      	b.n	80021c2 <_printf_float+0xc2>
 80024ae:	9a05      	ldr	r2, [sp, #20]
 80024b0:	464b      	mov	r3, r9
 80024b2:	4442      	add	r2, r8
 80024b4:	4631      	mov	r1, r6
 80024b6:	4628      	mov	r0, r5
 80024b8:	47b8      	blx	r7
 80024ba:	3001      	adds	r0, #1
 80024bc:	d1c1      	bne.n	8002442 <_printf_float+0x342>
 80024be:	e680      	b.n	80021c2 <_printf_float+0xc2>
 80024c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024c2:	2a01      	cmp	r2, #1
 80024c4:	dc01      	bgt.n	80024ca <_printf_float+0x3ca>
 80024c6:	07db      	lsls	r3, r3, #31
 80024c8:	d538      	bpl.n	800253c <_printf_float+0x43c>
 80024ca:	2301      	movs	r3, #1
 80024cc:	4642      	mov	r2, r8
 80024ce:	4631      	mov	r1, r6
 80024d0:	4628      	mov	r0, r5
 80024d2:	47b8      	blx	r7
 80024d4:	3001      	adds	r0, #1
 80024d6:	f43f ae74 	beq.w	80021c2 <_printf_float+0xc2>
 80024da:	ee18 3a10 	vmov	r3, s16
 80024de:	4652      	mov	r2, sl
 80024e0:	4631      	mov	r1, r6
 80024e2:	4628      	mov	r0, r5
 80024e4:	47b8      	blx	r7
 80024e6:	3001      	adds	r0, #1
 80024e8:	f43f ae6b 	beq.w	80021c2 <_printf_float+0xc2>
 80024ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80024f0:	2200      	movs	r2, #0
 80024f2:	2300      	movs	r3, #0
 80024f4:	f7fe fb08 	bl	8000b08 <__aeabi_dcmpeq>
 80024f8:	b9d8      	cbnz	r0, 8002532 <_printf_float+0x432>
 80024fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024fc:	f108 0201 	add.w	r2, r8, #1
 8002500:	3b01      	subs	r3, #1
 8002502:	4631      	mov	r1, r6
 8002504:	4628      	mov	r0, r5
 8002506:	47b8      	blx	r7
 8002508:	3001      	adds	r0, #1
 800250a:	d10e      	bne.n	800252a <_printf_float+0x42a>
 800250c:	e659      	b.n	80021c2 <_printf_float+0xc2>
 800250e:	2301      	movs	r3, #1
 8002510:	4652      	mov	r2, sl
 8002512:	4631      	mov	r1, r6
 8002514:	4628      	mov	r0, r5
 8002516:	47b8      	blx	r7
 8002518:	3001      	adds	r0, #1
 800251a:	f43f ae52 	beq.w	80021c2 <_printf_float+0xc2>
 800251e:	f108 0801 	add.w	r8, r8, #1
 8002522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002524:	3b01      	subs	r3, #1
 8002526:	4543      	cmp	r3, r8
 8002528:	dcf1      	bgt.n	800250e <_printf_float+0x40e>
 800252a:	464b      	mov	r3, r9
 800252c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002530:	e6dc      	b.n	80022ec <_printf_float+0x1ec>
 8002532:	f04f 0800 	mov.w	r8, #0
 8002536:	f104 0a1a 	add.w	sl, r4, #26
 800253a:	e7f2      	b.n	8002522 <_printf_float+0x422>
 800253c:	2301      	movs	r3, #1
 800253e:	4642      	mov	r2, r8
 8002540:	e7df      	b.n	8002502 <_printf_float+0x402>
 8002542:	2301      	movs	r3, #1
 8002544:	464a      	mov	r2, r9
 8002546:	4631      	mov	r1, r6
 8002548:	4628      	mov	r0, r5
 800254a:	47b8      	blx	r7
 800254c:	3001      	adds	r0, #1
 800254e:	f43f ae38 	beq.w	80021c2 <_printf_float+0xc2>
 8002552:	f108 0801 	add.w	r8, r8, #1
 8002556:	68e3      	ldr	r3, [r4, #12]
 8002558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800255a:	1a5b      	subs	r3, r3, r1
 800255c:	4543      	cmp	r3, r8
 800255e:	dcf0      	bgt.n	8002542 <_printf_float+0x442>
 8002560:	e6fa      	b.n	8002358 <_printf_float+0x258>
 8002562:	f04f 0800 	mov.w	r8, #0
 8002566:	f104 0919 	add.w	r9, r4, #25
 800256a:	e7f4      	b.n	8002556 <_printf_float+0x456>

0800256c <_printf_common>:
 800256c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002570:	4616      	mov	r6, r2
 8002572:	4699      	mov	r9, r3
 8002574:	688a      	ldr	r2, [r1, #8]
 8002576:	690b      	ldr	r3, [r1, #16]
 8002578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800257c:	4293      	cmp	r3, r2
 800257e:	bfb8      	it	lt
 8002580:	4613      	movlt	r3, r2
 8002582:	6033      	str	r3, [r6, #0]
 8002584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002588:	4607      	mov	r7, r0
 800258a:	460c      	mov	r4, r1
 800258c:	b10a      	cbz	r2, 8002592 <_printf_common+0x26>
 800258e:	3301      	adds	r3, #1
 8002590:	6033      	str	r3, [r6, #0]
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	0699      	lsls	r1, r3, #26
 8002596:	bf42      	ittt	mi
 8002598:	6833      	ldrmi	r3, [r6, #0]
 800259a:	3302      	addmi	r3, #2
 800259c:	6033      	strmi	r3, [r6, #0]
 800259e:	6825      	ldr	r5, [r4, #0]
 80025a0:	f015 0506 	ands.w	r5, r5, #6
 80025a4:	d106      	bne.n	80025b4 <_printf_common+0x48>
 80025a6:	f104 0a19 	add.w	sl, r4, #25
 80025aa:	68e3      	ldr	r3, [r4, #12]
 80025ac:	6832      	ldr	r2, [r6, #0]
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	42ab      	cmp	r3, r5
 80025b2:	dc26      	bgt.n	8002602 <_printf_common+0x96>
 80025b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80025b8:	1e13      	subs	r3, r2, #0
 80025ba:	6822      	ldr	r2, [r4, #0]
 80025bc:	bf18      	it	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	0692      	lsls	r2, r2, #26
 80025c2:	d42b      	bmi.n	800261c <_printf_common+0xb0>
 80025c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025c8:	4649      	mov	r1, r9
 80025ca:	4638      	mov	r0, r7
 80025cc:	47c0      	blx	r8
 80025ce:	3001      	adds	r0, #1
 80025d0:	d01e      	beq.n	8002610 <_printf_common+0xa4>
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	68e5      	ldr	r5, [r4, #12]
 80025d6:	6832      	ldr	r2, [r6, #0]
 80025d8:	f003 0306 	and.w	r3, r3, #6
 80025dc:	2b04      	cmp	r3, #4
 80025de:	bf08      	it	eq
 80025e0:	1aad      	subeq	r5, r5, r2
 80025e2:	68a3      	ldr	r3, [r4, #8]
 80025e4:	6922      	ldr	r2, [r4, #16]
 80025e6:	bf0c      	ite	eq
 80025e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025ec:	2500      	movne	r5, #0
 80025ee:	4293      	cmp	r3, r2
 80025f0:	bfc4      	itt	gt
 80025f2:	1a9b      	subgt	r3, r3, r2
 80025f4:	18ed      	addgt	r5, r5, r3
 80025f6:	2600      	movs	r6, #0
 80025f8:	341a      	adds	r4, #26
 80025fa:	42b5      	cmp	r5, r6
 80025fc:	d11a      	bne.n	8002634 <_printf_common+0xc8>
 80025fe:	2000      	movs	r0, #0
 8002600:	e008      	b.n	8002614 <_printf_common+0xa8>
 8002602:	2301      	movs	r3, #1
 8002604:	4652      	mov	r2, sl
 8002606:	4649      	mov	r1, r9
 8002608:	4638      	mov	r0, r7
 800260a:	47c0      	blx	r8
 800260c:	3001      	adds	r0, #1
 800260e:	d103      	bne.n	8002618 <_printf_common+0xac>
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002618:	3501      	adds	r5, #1
 800261a:	e7c6      	b.n	80025aa <_printf_common+0x3e>
 800261c:	18e1      	adds	r1, r4, r3
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	2030      	movs	r0, #48	; 0x30
 8002622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002626:	4422      	add	r2, r4
 8002628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800262c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002630:	3302      	adds	r3, #2
 8002632:	e7c7      	b.n	80025c4 <_printf_common+0x58>
 8002634:	2301      	movs	r3, #1
 8002636:	4622      	mov	r2, r4
 8002638:	4649      	mov	r1, r9
 800263a:	4638      	mov	r0, r7
 800263c:	47c0      	blx	r8
 800263e:	3001      	adds	r0, #1
 8002640:	d0e6      	beq.n	8002610 <_printf_common+0xa4>
 8002642:	3601      	adds	r6, #1
 8002644:	e7d9      	b.n	80025fa <_printf_common+0x8e>
	...

08002648 <_printf_i>:
 8002648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800264c:	460c      	mov	r4, r1
 800264e:	4691      	mov	r9, r2
 8002650:	7e27      	ldrb	r7, [r4, #24]
 8002652:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002654:	2f78      	cmp	r7, #120	; 0x78
 8002656:	4680      	mov	r8, r0
 8002658:	469a      	mov	sl, r3
 800265a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800265e:	d807      	bhi.n	8002670 <_printf_i+0x28>
 8002660:	2f62      	cmp	r7, #98	; 0x62
 8002662:	d80a      	bhi.n	800267a <_printf_i+0x32>
 8002664:	2f00      	cmp	r7, #0
 8002666:	f000 80d8 	beq.w	800281a <_printf_i+0x1d2>
 800266a:	2f58      	cmp	r7, #88	; 0x58
 800266c:	f000 80a3 	beq.w	80027b6 <_printf_i+0x16e>
 8002670:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002678:	e03a      	b.n	80026f0 <_printf_i+0xa8>
 800267a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800267e:	2b15      	cmp	r3, #21
 8002680:	d8f6      	bhi.n	8002670 <_printf_i+0x28>
 8002682:	a001      	add	r0, pc, #4	; (adr r0, 8002688 <_printf_i+0x40>)
 8002684:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002688:	080026e1 	.word	0x080026e1
 800268c:	080026f5 	.word	0x080026f5
 8002690:	08002671 	.word	0x08002671
 8002694:	08002671 	.word	0x08002671
 8002698:	08002671 	.word	0x08002671
 800269c:	08002671 	.word	0x08002671
 80026a0:	080026f5 	.word	0x080026f5
 80026a4:	08002671 	.word	0x08002671
 80026a8:	08002671 	.word	0x08002671
 80026ac:	08002671 	.word	0x08002671
 80026b0:	08002671 	.word	0x08002671
 80026b4:	08002801 	.word	0x08002801
 80026b8:	08002725 	.word	0x08002725
 80026bc:	080027e3 	.word	0x080027e3
 80026c0:	08002671 	.word	0x08002671
 80026c4:	08002671 	.word	0x08002671
 80026c8:	08002823 	.word	0x08002823
 80026cc:	08002671 	.word	0x08002671
 80026d0:	08002725 	.word	0x08002725
 80026d4:	08002671 	.word	0x08002671
 80026d8:	08002671 	.word	0x08002671
 80026dc:	080027eb 	.word	0x080027eb
 80026e0:	680b      	ldr	r3, [r1, #0]
 80026e2:	1d1a      	adds	r2, r3, #4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	600a      	str	r2, [r1, #0]
 80026e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80026ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0a3      	b.n	800283c <_printf_i+0x1f4>
 80026f4:	6825      	ldr	r5, [r4, #0]
 80026f6:	6808      	ldr	r0, [r1, #0]
 80026f8:	062e      	lsls	r6, r5, #24
 80026fa:	f100 0304 	add.w	r3, r0, #4
 80026fe:	d50a      	bpl.n	8002716 <_printf_i+0xce>
 8002700:	6805      	ldr	r5, [r0, #0]
 8002702:	600b      	str	r3, [r1, #0]
 8002704:	2d00      	cmp	r5, #0
 8002706:	da03      	bge.n	8002710 <_printf_i+0xc8>
 8002708:	232d      	movs	r3, #45	; 0x2d
 800270a:	426d      	negs	r5, r5
 800270c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002710:	485e      	ldr	r0, [pc, #376]	; (800288c <_printf_i+0x244>)
 8002712:	230a      	movs	r3, #10
 8002714:	e019      	b.n	800274a <_printf_i+0x102>
 8002716:	f015 0f40 	tst.w	r5, #64	; 0x40
 800271a:	6805      	ldr	r5, [r0, #0]
 800271c:	600b      	str	r3, [r1, #0]
 800271e:	bf18      	it	ne
 8002720:	b22d      	sxthne	r5, r5
 8002722:	e7ef      	b.n	8002704 <_printf_i+0xbc>
 8002724:	680b      	ldr	r3, [r1, #0]
 8002726:	6825      	ldr	r5, [r4, #0]
 8002728:	1d18      	adds	r0, r3, #4
 800272a:	6008      	str	r0, [r1, #0]
 800272c:	0628      	lsls	r0, r5, #24
 800272e:	d501      	bpl.n	8002734 <_printf_i+0xec>
 8002730:	681d      	ldr	r5, [r3, #0]
 8002732:	e002      	b.n	800273a <_printf_i+0xf2>
 8002734:	0669      	lsls	r1, r5, #25
 8002736:	d5fb      	bpl.n	8002730 <_printf_i+0xe8>
 8002738:	881d      	ldrh	r5, [r3, #0]
 800273a:	4854      	ldr	r0, [pc, #336]	; (800288c <_printf_i+0x244>)
 800273c:	2f6f      	cmp	r7, #111	; 0x6f
 800273e:	bf0c      	ite	eq
 8002740:	2308      	moveq	r3, #8
 8002742:	230a      	movne	r3, #10
 8002744:	2100      	movs	r1, #0
 8002746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800274a:	6866      	ldr	r6, [r4, #4]
 800274c:	60a6      	str	r6, [r4, #8]
 800274e:	2e00      	cmp	r6, #0
 8002750:	bfa2      	ittt	ge
 8002752:	6821      	ldrge	r1, [r4, #0]
 8002754:	f021 0104 	bicge.w	r1, r1, #4
 8002758:	6021      	strge	r1, [r4, #0]
 800275a:	b90d      	cbnz	r5, 8002760 <_printf_i+0x118>
 800275c:	2e00      	cmp	r6, #0
 800275e:	d04d      	beq.n	80027fc <_printf_i+0x1b4>
 8002760:	4616      	mov	r6, r2
 8002762:	fbb5 f1f3 	udiv	r1, r5, r3
 8002766:	fb03 5711 	mls	r7, r3, r1, r5
 800276a:	5dc7      	ldrb	r7, [r0, r7]
 800276c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002770:	462f      	mov	r7, r5
 8002772:	42bb      	cmp	r3, r7
 8002774:	460d      	mov	r5, r1
 8002776:	d9f4      	bls.n	8002762 <_printf_i+0x11a>
 8002778:	2b08      	cmp	r3, #8
 800277a:	d10b      	bne.n	8002794 <_printf_i+0x14c>
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	07df      	lsls	r7, r3, #31
 8002780:	d508      	bpl.n	8002794 <_printf_i+0x14c>
 8002782:	6923      	ldr	r3, [r4, #16]
 8002784:	6861      	ldr	r1, [r4, #4]
 8002786:	4299      	cmp	r1, r3
 8002788:	bfde      	ittt	le
 800278a:	2330      	movle	r3, #48	; 0x30
 800278c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002790:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002794:	1b92      	subs	r2, r2, r6
 8002796:	6122      	str	r2, [r4, #16]
 8002798:	f8cd a000 	str.w	sl, [sp]
 800279c:	464b      	mov	r3, r9
 800279e:	aa03      	add	r2, sp, #12
 80027a0:	4621      	mov	r1, r4
 80027a2:	4640      	mov	r0, r8
 80027a4:	f7ff fee2 	bl	800256c <_printf_common>
 80027a8:	3001      	adds	r0, #1
 80027aa:	d14c      	bne.n	8002846 <_printf_i+0x1fe>
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	b004      	add	sp, #16
 80027b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027b6:	4835      	ldr	r0, [pc, #212]	; (800288c <_printf_i+0x244>)
 80027b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	680e      	ldr	r6, [r1, #0]
 80027c0:	061f      	lsls	r7, r3, #24
 80027c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80027c6:	600e      	str	r6, [r1, #0]
 80027c8:	d514      	bpl.n	80027f4 <_printf_i+0x1ac>
 80027ca:	07d9      	lsls	r1, r3, #31
 80027cc:	bf44      	itt	mi
 80027ce:	f043 0320 	orrmi.w	r3, r3, #32
 80027d2:	6023      	strmi	r3, [r4, #0]
 80027d4:	b91d      	cbnz	r5, 80027de <_printf_i+0x196>
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	f023 0320 	bic.w	r3, r3, #32
 80027dc:	6023      	str	r3, [r4, #0]
 80027de:	2310      	movs	r3, #16
 80027e0:	e7b0      	b.n	8002744 <_printf_i+0xfc>
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	f043 0320 	orr.w	r3, r3, #32
 80027e8:	6023      	str	r3, [r4, #0]
 80027ea:	2378      	movs	r3, #120	; 0x78
 80027ec:	4828      	ldr	r0, [pc, #160]	; (8002890 <_printf_i+0x248>)
 80027ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80027f2:	e7e3      	b.n	80027bc <_printf_i+0x174>
 80027f4:	065e      	lsls	r6, r3, #25
 80027f6:	bf48      	it	mi
 80027f8:	b2ad      	uxthmi	r5, r5
 80027fa:	e7e6      	b.n	80027ca <_printf_i+0x182>
 80027fc:	4616      	mov	r6, r2
 80027fe:	e7bb      	b.n	8002778 <_printf_i+0x130>
 8002800:	680b      	ldr	r3, [r1, #0]
 8002802:	6826      	ldr	r6, [r4, #0]
 8002804:	6960      	ldr	r0, [r4, #20]
 8002806:	1d1d      	adds	r5, r3, #4
 8002808:	600d      	str	r5, [r1, #0]
 800280a:	0635      	lsls	r5, r6, #24
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	d501      	bpl.n	8002814 <_printf_i+0x1cc>
 8002810:	6018      	str	r0, [r3, #0]
 8002812:	e002      	b.n	800281a <_printf_i+0x1d2>
 8002814:	0671      	lsls	r1, r6, #25
 8002816:	d5fb      	bpl.n	8002810 <_printf_i+0x1c8>
 8002818:	8018      	strh	r0, [r3, #0]
 800281a:	2300      	movs	r3, #0
 800281c:	6123      	str	r3, [r4, #16]
 800281e:	4616      	mov	r6, r2
 8002820:	e7ba      	b.n	8002798 <_printf_i+0x150>
 8002822:	680b      	ldr	r3, [r1, #0]
 8002824:	1d1a      	adds	r2, r3, #4
 8002826:	600a      	str	r2, [r1, #0]
 8002828:	681e      	ldr	r6, [r3, #0]
 800282a:	6862      	ldr	r2, [r4, #4]
 800282c:	2100      	movs	r1, #0
 800282e:	4630      	mov	r0, r6
 8002830:	f7fd fcf6 	bl	8000220 <memchr>
 8002834:	b108      	cbz	r0, 800283a <_printf_i+0x1f2>
 8002836:	1b80      	subs	r0, r0, r6
 8002838:	6060      	str	r0, [r4, #4]
 800283a:	6863      	ldr	r3, [r4, #4]
 800283c:	6123      	str	r3, [r4, #16]
 800283e:	2300      	movs	r3, #0
 8002840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002844:	e7a8      	b.n	8002798 <_printf_i+0x150>
 8002846:	6923      	ldr	r3, [r4, #16]
 8002848:	4632      	mov	r2, r6
 800284a:	4649      	mov	r1, r9
 800284c:	4640      	mov	r0, r8
 800284e:	47d0      	blx	sl
 8002850:	3001      	adds	r0, #1
 8002852:	d0ab      	beq.n	80027ac <_printf_i+0x164>
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	079b      	lsls	r3, r3, #30
 8002858:	d413      	bmi.n	8002882 <_printf_i+0x23a>
 800285a:	68e0      	ldr	r0, [r4, #12]
 800285c:	9b03      	ldr	r3, [sp, #12]
 800285e:	4298      	cmp	r0, r3
 8002860:	bfb8      	it	lt
 8002862:	4618      	movlt	r0, r3
 8002864:	e7a4      	b.n	80027b0 <_printf_i+0x168>
 8002866:	2301      	movs	r3, #1
 8002868:	4632      	mov	r2, r6
 800286a:	4649      	mov	r1, r9
 800286c:	4640      	mov	r0, r8
 800286e:	47d0      	blx	sl
 8002870:	3001      	adds	r0, #1
 8002872:	d09b      	beq.n	80027ac <_printf_i+0x164>
 8002874:	3501      	adds	r5, #1
 8002876:	68e3      	ldr	r3, [r4, #12]
 8002878:	9903      	ldr	r1, [sp, #12]
 800287a:	1a5b      	subs	r3, r3, r1
 800287c:	42ab      	cmp	r3, r5
 800287e:	dcf2      	bgt.n	8002866 <_printf_i+0x21e>
 8002880:	e7eb      	b.n	800285a <_printf_i+0x212>
 8002882:	2500      	movs	r5, #0
 8002884:	f104 0619 	add.w	r6, r4, #25
 8002888:	e7f5      	b.n	8002876 <_printf_i+0x22e>
 800288a:	bf00      	nop
 800288c:	08004a3e 	.word	0x08004a3e
 8002890:	08004a4f 	.word	0x08004a4f

08002894 <quorem>:
 8002894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002898:	6903      	ldr	r3, [r0, #16]
 800289a:	690c      	ldr	r4, [r1, #16]
 800289c:	42a3      	cmp	r3, r4
 800289e:	4607      	mov	r7, r0
 80028a0:	f2c0 8081 	blt.w	80029a6 <quorem+0x112>
 80028a4:	3c01      	subs	r4, #1
 80028a6:	f101 0814 	add.w	r8, r1, #20
 80028aa:	f100 0514 	add.w	r5, r0, #20
 80028ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80028b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80028bc:	3301      	adds	r3, #1
 80028be:	429a      	cmp	r2, r3
 80028c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80028c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80028c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80028cc:	d331      	bcc.n	8002932 <quorem+0x9e>
 80028ce:	f04f 0e00 	mov.w	lr, #0
 80028d2:	4640      	mov	r0, r8
 80028d4:	46ac      	mov	ip, r5
 80028d6:	46f2      	mov	sl, lr
 80028d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80028dc:	b293      	uxth	r3, r2
 80028de:	fb06 e303 	mla	r3, r6, r3, lr
 80028e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	ebaa 0303 	sub.w	r3, sl, r3
 80028ec:	0c12      	lsrs	r2, r2, #16
 80028ee:	f8dc a000 	ldr.w	sl, [ip]
 80028f2:	fb06 e202 	mla	r2, r6, r2, lr
 80028f6:	fa13 f38a 	uxtah	r3, r3, sl
 80028fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80028fe:	fa1f fa82 	uxth.w	sl, r2
 8002902:	f8dc 2000 	ldr.w	r2, [ip]
 8002906:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800290a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800290e:	b29b      	uxth	r3, r3
 8002910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002914:	4581      	cmp	r9, r0
 8002916:	f84c 3b04 	str.w	r3, [ip], #4
 800291a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800291e:	d2db      	bcs.n	80028d8 <quorem+0x44>
 8002920:	f855 300b 	ldr.w	r3, [r5, fp]
 8002924:	b92b      	cbnz	r3, 8002932 <quorem+0x9e>
 8002926:	9b01      	ldr	r3, [sp, #4]
 8002928:	3b04      	subs	r3, #4
 800292a:	429d      	cmp	r5, r3
 800292c:	461a      	mov	r2, r3
 800292e:	d32e      	bcc.n	800298e <quorem+0xfa>
 8002930:	613c      	str	r4, [r7, #16]
 8002932:	4638      	mov	r0, r7
 8002934:	f001 f8c0 	bl	8003ab8 <__mcmp>
 8002938:	2800      	cmp	r0, #0
 800293a:	db24      	blt.n	8002986 <quorem+0xf2>
 800293c:	3601      	adds	r6, #1
 800293e:	4628      	mov	r0, r5
 8002940:	f04f 0c00 	mov.w	ip, #0
 8002944:	f858 2b04 	ldr.w	r2, [r8], #4
 8002948:	f8d0 e000 	ldr.w	lr, [r0]
 800294c:	b293      	uxth	r3, r2
 800294e:	ebac 0303 	sub.w	r3, ip, r3
 8002952:	0c12      	lsrs	r2, r2, #16
 8002954:	fa13 f38e 	uxtah	r3, r3, lr
 8002958:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800295c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002960:	b29b      	uxth	r3, r3
 8002962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002966:	45c1      	cmp	r9, r8
 8002968:	f840 3b04 	str.w	r3, [r0], #4
 800296c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002970:	d2e8      	bcs.n	8002944 <quorem+0xb0>
 8002972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800297a:	b922      	cbnz	r2, 8002986 <quorem+0xf2>
 800297c:	3b04      	subs	r3, #4
 800297e:	429d      	cmp	r5, r3
 8002980:	461a      	mov	r2, r3
 8002982:	d30a      	bcc.n	800299a <quorem+0x106>
 8002984:	613c      	str	r4, [r7, #16]
 8002986:	4630      	mov	r0, r6
 8002988:	b003      	add	sp, #12
 800298a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	3b04      	subs	r3, #4
 8002992:	2a00      	cmp	r2, #0
 8002994:	d1cc      	bne.n	8002930 <quorem+0x9c>
 8002996:	3c01      	subs	r4, #1
 8002998:	e7c7      	b.n	800292a <quorem+0x96>
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	3b04      	subs	r3, #4
 800299e:	2a00      	cmp	r2, #0
 80029a0:	d1f0      	bne.n	8002984 <quorem+0xf0>
 80029a2:	3c01      	subs	r4, #1
 80029a4:	e7eb      	b.n	800297e <quorem+0xea>
 80029a6:	2000      	movs	r0, #0
 80029a8:	e7ee      	b.n	8002988 <quorem+0xf4>
 80029aa:	0000      	movs	r0, r0
 80029ac:	0000      	movs	r0, r0
	...

080029b0 <_dtoa_r>:
 80029b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029b4:	ed2d 8b02 	vpush	{d8}
 80029b8:	ec57 6b10 	vmov	r6, r7, d0
 80029bc:	b095      	sub	sp, #84	; 0x54
 80029be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80029c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80029c4:	9105      	str	r1, [sp, #20]
 80029c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80029ca:	4604      	mov	r4, r0
 80029cc:	9209      	str	r2, [sp, #36]	; 0x24
 80029ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80029d0:	b975      	cbnz	r5, 80029f0 <_dtoa_r+0x40>
 80029d2:	2010      	movs	r0, #16
 80029d4:	f000 fddc 	bl	8003590 <malloc>
 80029d8:	4602      	mov	r2, r0
 80029da:	6260      	str	r0, [r4, #36]	; 0x24
 80029dc:	b920      	cbnz	r0, 80029e8 <_dtoa_r+0x38>
 80029de:	4bb2      	ldr	r3, [pc, #712]	; (8002ca8 <_dtoa_r+0x2f8>)
 80029e0:	21ea      	movs	r1, #234	; 0xea
 80029e2:	48b2      	ldr	r0, [pc, #712]	; (8002cac <_dtoa_r+0x2fc>)
 80029e4:	f001 fa32 	bl	8003e4c <__assert_func>
 80029e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80029ec:	6005      	str	r5, [r0, #0]
 80029ee:	60c5      	str	r5, [r0, #12]
 80029f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029f2:	6819      	ldr	r1, [r3, #0]
 80029f4:	b151      	cbz	r1, 8002a0c <_dtoa_r+0x5c>
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	604a      	str	r2, [r1, #4]
 80029fa:	2301      	movs	r3, #1
 80029fc:	4093      	lsls	r3, r2
 80029fe:	608b      	str	r3, [r1, #8]
 8002a00:	4620      	mov	r0, r4
 8002a02:	f000 fe1b 	bl	800363c <_Bfree>
 8002a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	1e3b      	subs	r3, r7, #0
 8002a0e:	bfb9      	ittee	lt
 8002a10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002a14:	9303      	strlt	r3, [sp, #12]
 8002a16:	2300      	movge	r3, #0
 8002a18:	f8c8 3000 	strge.w	r3, [r8]
 8002a1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002a20:	4ba3      	ldr	r3, [pc, #652]	; (8002cb0 <_dtoa_r+0x300>)
 8002a22:	bfbc      	itt	lt
 8002a24:	2201      	movlt	r2, #1
 8002a26:	f8c8 2000 	strlt.w	r2, [r8]
 8002a2a:	ea33 0309 	bics.w	r3, r3, r9
 8002a2e:	d11b      	bne.n	8002a68 <_dtoa_r+0xb8>
 8002a30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002a32:	f242 730f 	movw	r3, #9999	; 0x270f
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002a3c:	4333      	orrs	r3, r6
 8002a3e:	f000 857a 	beq.w	8003536 <_dtoa_r+0xb86>
 8002a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002a44:	b963      	cbnz	r3, 8002a60 <_dtoa_r+0xb0>
 8002a46:	4b9b      	ldr	r3, [pc, #620]	; (8002cb4 <_dtoa_r+0x304>)
 8002a48:	e024      	b.n	8002a94 <_dtoa_r+0xe4>
 8002a4a:	4b9b      	ldr	r3, [pc, #620]	; (8002cb8 <_dtoa_r+0x308>)
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	3308      	adds	r3, #8
 8002a50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	9800      	ldr	r0, [sp, #0]
 8002a56:	b015      	add	sp, #84	; 0x54
 8002a58:	ecbd 8b02 	vpop	{d8}
 8002a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a60:	4b94      	ldr	r3, [pc, #592]	; (8002cb4 <_dtoa_r+0x304>)
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	3303      	adds	r3, #3
 8002a66:	e7f3      	b.n	8002a50 <_dtoa_r+0xa0>
 8002a68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	ec51 0b17 	vmov	r0, r1, d7
 8002a72:	2300      	movs	r3, #0
 8002a74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002a78:	f7fe f846 	bl	8000b08 <__aeabi_dcmpeq>
 8002a7c:	4680      	mov	r8, r0
 8002a7e:	b158      	cbz	r0, 8002a98 <_dtoa_r+0xe8>
 8002a80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002a82:	2301      	movs	r3, #1
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8551 	beq.w	8003530 <_dtoa_r+0xb80>
 8002a8e:	488b      	ldr	r0, [pc, #556]	; (8002cbc <_dtoa_r+0x30c>)
 8002a90:	6018      	str	r0, [r3, #0]
 8002a92:	1e43      	subs	r3, r0, #1
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	e7dd      	b.n	8002a54 <_dtoa_r+0xa4>
 8002a98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8002a9c:	aa12      	add	r2, sp, #72	; 0x48
 8002a9e:	a913      	add	r1, sp, #76	; 0x4c
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f001 f8ad 	bl	8003c00 <__d2b>
 8002aa6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8002aaa:	4683      	mov	fp, r0
 8002aac:	2d00      	cmp	r5, #0
 8002aae:	d07c      	beq.n	8002baa <_dtoa_r+0x1fa>
 8002ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ab2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8002abe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8002ac2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8002ac6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002aca:	4b7d      	ldr	r3, [pc, #500]	; (8002cc0 <_dtoa_r+0x310>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	4630      	mov	r0, r6
 8002ad0:	4639      	mov	r1, r7
 8002ad2:	f7fd fbf9 	bl	80002c8 <__aeabi_dsub>
 8002ad6:	a36e      	add	r3, pc, #440	; (adr r3, 8002c90 <_dtoa_r+0x2e0>)
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	f7fd fdac 	bl	8000638 <__aeabi_dmul>
 8002ae0:	a36d      	add	r3, pc, #436	; (adr r3, 8002c98 <_dtoa_r+0x2e8>)
 8002ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae6:	f7fd fbf1 	bl	80002cc <__adddf3>
 8002aea:	4606      	mov	r6, r0
 8002aec:	4628      	mov	r0, r5
 8002aee:	460f      	mov	r7, r1
 8002af0:	f7fd fd38 	bl	8000564 <__aeabi_i2d>
 8002af4:	a36a      	add	r3, pc, #424	; (adr r3, 8002ca0 <_dtoa_r+0x2f0>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	f7fd fd9d 	bl	8000638 <__aeabi_dmul>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4630      	mov	r0, r6
 8002b04:	4639      	mov	r1, r7
 8002b06:	f7fd fbe1 	bl	80002cc <__adddf3>
 8002b0a:	4606      	mov	r6, r0
 8002b0c:	460f      	mov	r7, r1
 8002b0e:	f7fe f843 	bl	8000b98 <__aeabi_d2iz>
 8002b12:	2200      	movs	r2, #0
 8002b14:	4682      	mov	sl, r0
 8002b16:	2300      	movs	r3, #0
 8002b18:	4630      	mov	r0, r6
 8002b1a:	4639      	mov	r1, r7
 8002b1c:	f7fd fffe 	bl	8000b1c <__aeabi_dcmplt>
 8002b20:	b148      	cbz	r0, 8002b36 <_dtoa_r+0x186>
 8002b22:	4650      	mov	r0, sl
 8002b24:	f7fd fd1e 	bl	8000564 <__aeabi_i2d>
 8002b28:	4632      	mov	r2, r6
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	f7fd ffec 	bl	8000b08 <__aeabi_dcmpeq>
 8002b30:	b908      	cbnz	r0, 8002b36 <_dtoa_r+0x186>
 8002b32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002b36:	f1ba 0f16 	cmp.w	sl, #22
 8002b3a:	d854      	bhi.n	8002be6 <_dtoa_r+0x236>
 8002b3c:	4b61      	ldr	r3, [pc, #388]	; (8002cc4 <_dtoa_r+0x314>)
 8002b3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002b4a:	f7fd ffe7 	bl	8000b1c <__aeabi_dcmplt>
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	d04b      	beq.n	8002bea <_dtoa_r+0x23a>
 8002b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002b56:	2300      	movs	r3, #0
 8002b58:	930e      	str	r3, [sp, #56]	; 0x38
 8002b5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002b5c:	1b5d      	subs	r5, r3, r5
 8002b5e:	1e6b      	subs	r3, r5, #1
 8002b60:	9304      	str	r3, [sp, #16]
 8002b62:	bf43      	ittte	mi
 8002b64:	2300      	movmi	r3, #0
 8002b66:	f1c5 0801 	rsbmi	r8, r5, #1
 8002b6a:	9304      	strmi	r3, [sp, #16]
 8002b6c:	f04f 0800 	movpl.w	r8, #0
 8002b70:	f1ba 0f00 	cmp.w	sl, #0
 8002b74:	db3b      	blt.n	8002bee <_dtoa_r+0x23e>
 8002b76:	9b04      	ldr	r3, [sp, #16]
 8002b78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8002b7c:	4453      	add	r3, sl
 8002b7e:	9304      	str	r3, [sp, #16]
 8002b80:	2300      	movs	r3, #0
 8002b82:	9306      	str	r3, [sp, #24]
 8002b84:	9b05      	ldr	r3, [sp, #20]
 8002b86:	2b09      	cmp	r3, #9
 8002b88:	d869      	bhi.n	8002c5e <_dtoa_r+0x2ae>
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	bfc4      	itt	gt
 8002b8e:	3b04      	subgt	r3, #4
 8002b90:	9305      	strgt	r3, [sp, #20]
 8002b92:	9b05      	ldr	r3, [sp, #20]
 8002b94:	f1a3 0302 	sub.w	r3, r3, #2
 8002b98:	bfcc      	ite	gt
 8002b9a:	2500      	movgt	r5, #0
 8002b9c:	2501      	movle	r5, #1
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d869      	bhi.n	8002c76 <_dtoa_r+0x2c6>
 8002ba2:	e8df f003 	tbb	[pc, r3]
 8002ba6:	4e2c      	.short	0x4e2c
 8002ba8:	5a4c      	.short	0x5a4c
 8002baa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8002bae:	441d      	add	r5, r3
 8002bb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	bfc1      	itttt	gt
 8002bb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002bbc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8002bc0:	fa09 f303 	lslgt.w	r3, r9, r3
 8002bc4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002bc8:	bfda      	itte	le
 8002bca:	f1c3 0320 	rsble	r3, r3, #32
 8002bce:	fa06 f003 	lslle.w	r0, r6, r3
 8002bd2:	4318      	orrgt	r0, r3
 8002bd4:	f7fd fcb6 	bl	8000544 <__aeabi_ui2d>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	4606      	mov	r6, r0
 8002bdc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8002be0:	3d01      	subs	r5, #1
 8002be2:	9310      	str	r3, [sp, #64]	; 0x40
 8002be4:	e771      	b.n	8002aca <_dtoa_r+0x11a>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e7b6      	b.n	8002b58 <_dtoa_r+0x1a8>
 8002bea:	900e      	str	r0, [sp, #56]	; 0x38
 8002bec:	e7b5      	b.n	8002b5a <_dtoa_r+0x1aa>
 8002bee:	f1ca 0300 	rsb	r3, sl, #0
 8002bf2:	9306      	str	r3, [sp, #24]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	eba8 080a 	sub.w	r8, r8, sl
 8002bfa:	930d      	str	r3, [sp, #52]	; 0x34
 8002bfc:	e7c2      	b.n	8002b84 <_dtoa_r+0x1d4>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9308      	str	r3, [sp, #32]
 8002c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	dc39      	bgt.n	8002c7c <_dtoa_r+0x2cc>
 8002c08:	f04f 0901 	mov.w	r9, #1
 8002c0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8002c10:	464b      	mov	r3, r9
 8002c12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8002c16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c18:	2200      	movs	r2, #0
 8002c1a:	6042      	str	r2, [r0, #4]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	f102 0614 	add.w	r6, r2, #20
 8002c22:	429e      	cmp	r6, r3
 8002c24:	6841      	ldr	r1, [r0, #4]
 8002c26:	d92f      	bls.n	8002c88 <_dtoa_r+0x2d8>
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f000 fcc7 	bl	80035bc <_Balloc>
 8002c2e:	9000      	str	r0, [sp, #0]
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d14b      	bne.n	8002ccc <_dtoa_r+0x31c>
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <_dtoa_r+0x318>)
 8002c36:	4602      	mov	r2, r0
 8002c38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002c3c:	e6d1      	b.n	80029e2 <_dtoa_r+0x32>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e7de      	b.n	8002c00 <_dtoa_r+0x250>
 8002c42:	2300      	movs	r3, #0
 8002c44:	9308      	str	r3, [sp, #32]
 8002c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c48:	eb0a 0903 	add.w	r9, sl, r3
 8002c4c:	f109 0301 	add.w	r3, r9, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	bfb8      	it	lt
 8002c56:	2301      	movlt	r3, #1
 8002c58:	e7dd      	b.n	8002c16 <_dtoa_r+0x266>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e7f2      	b.n	8002c44 <_dtoa_r+0x294>
 8002c5e:	2501      	movs	r5, #1
 8002c60:	2300      	movs	r3, #0
 8002c62:	9305      	str	r3, [sp, #20]
 8002c64:	9508      	str	r5, [sp, #32]
 8002c66:	f04f 39ff 	mov.w	r9, #4294967295
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8002c70:	2312      	movs	r3, #18
 8002c72:	9209      	str	r2, [sp, #36]	; 0x24
 8002c74:	e7cf      	b.n	8002c16 <_dtoa_r+0x266>
 8002c76:	2301      	movs	r3, #1
 8002c78:	9308      	str	r3, [sp, #32]
 8002c7a:	e7f4      	b.n	8002c66 <_dtoa_r+0x2b6>
 8002c7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8002c80:	f8cd 9004 	str.w	r9, [sp, #4]
 8002c84:	464b      	mov	r3, r9
 8002c86:	e7c6      	b.n	8002c16 <_dtoa_r+0x266>
 8002c88:	3101      	adds	r1, #1
 8002c8a:	6041      	str	r1, [r0, #4]
 8002c8c:	0052      	lsls	r2, r2, #1
 8002c8e:	e7c6      	b.n	8002c1e <_dtoa_r+0x26e>
 8002c90:	636f4361 	.word	0x636f4361
 8002c94:	3fd287a7 	.word	0x3fd287a7
 8002c98:	8b60c8b3 	.word	0x8b60c8b3
 8002c9c:	3fc68a28 	.word	0x3fc68a28
 8002ca0:	509f79fb 	.word	0x509f79fb
 8002ca4:	3fd34413 	.word	0x3fd34413
 8002ca8:	08004a6d 	.word	0x08004a6d
 8002cac:	08004a84 	.word	0x08004a84
 8002cb0:	7ff00000 	.word	0x7ff00000
 8002cb4:	08004a69 	.word	0x08004a69
 8002cb8:	08004a60 	.word	0x08004a60
 8002cbc:	08004a3d 	.word	0x08004a3d
 8002cc0:	3ff80000 	.word	0x3ff80000
 8002cc4:	08004b80 	.word	0x08004b80
 8002cc8:	08004ae3 	.word	0x08004ae3
 8002ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cce:	9a00      	ldr	r2, [sp, #0]
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	9b01      	ldr	r3, [sp, #4]
 8002cd4:	2b0e      	cmp	r3, #14
 8002cd6:	f200 80ad 	bhi.w	8002e34 <_dtoa_r+0x484>
 8002cda:	2d00      	cmp	r5, #0
 8002cdc:	f000 80aa 	beq.w	8002e34 <_dtoa_r+0x484>
 8002ce0:	f1ba 0f00 	cmp.w	sl, #0
 8002ce4:	dd36      	ble.n	8002d54 <_dtoa_r+0x3a4>
 8002ce6:	4ac3      	ldr	r2, [pc, #780]	; (8002ff4 <_dtoa_r+0x644>)
 8002ce8:	f00a 030f 	and.w	r3, sl, #15
 8002cec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002cf0:	ed93 7b00 	vldr	d7, [r3]
 8002cf4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8002cf8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8002cfc:	eeb0 8a47 	vmov.f32	s16, s14
 8002d00:	eef0 8a67 	vmov.f32	s17, s15
 8002d04:	d016      	beq.n	8002d34 <_dtoa_r+0x384>
 8002d06:	4bbc      	ldr	r3, [pc, #752]	; (8002ff8 <_dtoa_r+0x648>)
 8002d08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002d0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002d10:	f7fd fdbc 	bl	800088c <__aeabi_ddiv>
 8002d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d18:	f007 070f 	and.w	r7, r7, #15
 8002d1c:	2503      	movs	r5, #3
 8002d1e:	4eb6      	ldr	r6, [pc, #728]	; (8002ff8 <_dtoa_r+0x648>)
 8002d20:	b957      	cbnz	r7, 8002d38 <_dtoa_r+0x388>
 8002d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d26:	ec53 2b18 	vmov	r2, r3, d8
 8002d2a:	f7fd fdaf 	bl	800088c <__aeabi_ddiv>
 8002d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d32:	e029      	b.n	8002d88 <_dtoa_r+0x3d8>
 8002d34:	2502      	movs	r5, #2
 8002d36:	e7f2      	b.n	8002d1e <_dtoa_r+0x36e>
 8002d38:	07f9      	lsls	r1, r7, #31
 8002d3a:	d508      	bpl.n	8002d4e <_dtoa_r+0x39e>
 8002d3c:	ec51 0b18 	vmov	r0, r1, d8
 8002d40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002d44:	f7fd fc78 	bl	8000638 <__aeabi_dmul>
 8002d48:	ec41 0b18 	vmov	d8, r0, r1
 8002d4c:	3501      	adds	r5, #1
 8002d4e:	107f      	asrs	r7, r7, #1
 8002d50:	3608      	adds	r6, #8
 8002d52:	e7e5      	b.n	8002d20 <_dtoa_r+0x370>
 8002d54:	f000 80a6 	beq.w	8002ea4 <_dtoa_r+0x4f4>
 8002d58:	f1ca 0600 	rsb	r6, sl, #0
 8002d5c:	4ba5      	ldr	r3, [pc, #660]	; (8002ff4 <_dtoa_r+0x644>)
 8002d5e:	4fa6      	ldr	r7, [pc, #664]	; (8002ff8 <_dtoa_r+0x648>)
 8002d60:	f006 020f 	and.w	r2, r6, #15
 8002d64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002d70:	f7fd fc62 	bl	8000638 <__aeabi_dmul>
 8002d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d78:	1136      	asrs	r6, r6, #4
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2502      	movs	r5, #2
 8002d7e:	2e00      	cmp	r6, #0
 8002d80:	f040 8085 	bne.w	8002e8e <_dtoa_r+0x4de>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1d2      	bne.n	8002d2e <_dtoa_r+0x37e>
 8002d88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 808c 	beq.w	8002ea8 <_dtoa_r+0x4f8>
 8002d90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002d94:	4b99      	ldr	r3, [pc, #612]	; (8002ffc <_dtoa_r+0x64c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	4630      	mov	r0, r6
 8002d9a:	4639      	mov	r1, r7
 8002d9c:	f7fd febe 	bl	8000b1c <__aeabi_dcmplt>
 8002da0:	2800      	cmp	r0, #0
 8002da2:	f000 8081 	beq.w	8002ea8 <_dtoa_r+0x4f8>
 8002da6:	9b01      	ldr	r3, [sp, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d07d      	beq.n	8002ea8 <_dtoa_r+0x4f8>
 8002dac:	f1b9 0f00 	cmp.w	r9, #0
 8002db0:	dd3c      	ble.n	8002e2c <_dtoa_r+0x47c>
 8002db2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002db6:	9307      	str	r3, [sp, #28]
 8002db8:	2200      	movs	r2, #0
 8002dba:	4b91      	ldr	r3, [pc, #580]	; (8003000 <_dtoa_r+0x650>)
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	4639      	mov	r1, r7
 8002dc0:	f7fd fc3a 	bl	8000638 <__aeabi_dmul>
 8002dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dc8:	3501      	adds	r5, #1
 8002dca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8002dce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	f7fd fbc6 	bl	8000564 <__aeabi_i2d>
 8002dd8:	4632      	mov	r2, r6
 8002dda:	463b      	mov	r3, r7
 8002ddc:	f7fd fc2c 	bl	8000638 <__aeabi_dmul>
 8002de0:	4b88      	ldr	r3, [pc, #544]	; (8003004 <_dtoa_r+0x654>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	f7fd fa72 	bl	80002cc <__adddf3>
 8002de8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8002dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002df0:	9303      	str	r3, [sp, #12]
 8002df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d15c      	bne.n	8002eb2 <_dtoa_r+0x502>
 8002df8:	4b83      	ldr	r3, [pc, #524]	; (8003008 <_dtoa_r+0x658>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4630      	mov	r0, r6
 8002dfe:	4639      	mov	r1, r7
 8002e00:	f7fd fa62 	bl	80002c8 <__aeabi_dsub>
 8002e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002e08:	4606      	mov	r6, r0
 8002e0a:	460f      	mov	r7, r1
 8002e0c:	f7fd fea4 	bl	8000b58 <__aeabi_dcmpgt>
 8002e10:	2800      	cmp	r0, #0
 8002e12:	f040 8296 	bne.w	8003342 <_dtoa_r+0x992>
 8002e16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8002e1a:	4630      	mov	r0, r6
 8002e1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002e20:	4639      	mov	r1, r7
 8002e22:	f7fd fe7b 	bl	8000b1c <__aeabi_dcmplt>
 8002e26:	2800      	cmp	r0, #0
 8002e28:	f040 8288 	bne.w	800333c <_dtoa_r+0x98c>
 8002e2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002e30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f2c0 8158 	blt.w	80030ec <_dtoa_r+0x73c>
 8002e3c:	f1ba 0f0e 	cmp.w	sl, #14
 8002e40:	f300 8154 	bgt.w	80030ec <_dtoa_r+0x73c>
 8002e44:	4b6b      	ldr	r3, [pc, #428]	; (8002ff4 <_dtoa_r+0x644>)
 8002e46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002e4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f280 80e3 	bge.w	800301c <_dtoa_r+0x66c>
 8002e56:	9b01      	ldr	r3, [sp, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f300 80df 	bgt.w	800301c <_dtoa_r+0x66c>
 8002e5e:	f040 826d 	bne.w	800333c <_dtoa_r+0x98c>
 8002e62:	4b69      	ldr	r3, [pc, #420]	; (8003008 <_dtoa_r+0x658>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	4640      	mov	r0, r8
 8002e68:	4649      	mov	r1, r9
 8002e6a:	f7fd fbe5 	bl	8000638 <__aeabi_dmul>
 8002e6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002e72:	f7fd fe67 	bl	8000b44 <__aeabi_dcmpge>
 8002e76:	9e01      	ldr	r6, [sp, #4]
 8002e78:	4637      	mov	r7, r6
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	f040 8243 	bne.w	8003306 <_dtoa_r+0x956>
 8002e80:	9d00      	ldr	r5, [sp, #0]
 8002e82:	2331      	movs	r3, #49	; 0x31
 8002e84:	f805 3b01 	strb.w	r3, [r5], #1
 8002e88:	f10a 0a01 	add.w	sl, sl, #1
 8002e8c:	e23f      	b.n	800330e <_dtoa_r+0x95e>
 8002e8e:	07f2      	lsls	r2, r6, #31
 8002e90:	d505      	bpl.n	8002e9e <_dtoa_r+0x4ee>
 8002e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e96:	f7fd fbcf 	bl	8000638 <__aeabi_dmul>
 8002e9a:	3501      	adds	r5, #1
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	1076      	asrs	r6, r6, #1
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	e76c      	b.n	8002d7e <_dtoa_r+0x3ce>
 8002ea4:	2502      	movs	r5, #2
 8002ea6:	e76f      	b.n	8002d88 <_dtoa_r+0x3d8>
 8002ea8:	9b01      	ldr	r3, [sp, #4]
 8002eaa:	f8cd a01c 	str.w	sl, [sp, #28]
 8002eae:	930c      	str	r3, [sp, #48]	; 0x30
 8002eb0:	e78d      	b.n	8002dce <_dtoa_r+0x41e>
 8002eb2:	9900      	ldr	r1, [sp, #0]
 8002eb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002eb8:	4b4e      	ldr	r3, [pc, #312]	; (8002ff4 <_dtoa_r+0x644>)
 8002eba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002ebe:	4401      	add	r1, r0
 8002ec0:	9102      	str	r1, [sp, #8]
 8002ec2:	9908      	ldr	r1, [sp, #32]
 8002ec4:	eeb0 8a47 	vmov.f32	s16, s14
 8002ec8:	eef0 8a67 	vmov.f32	s17, s15
 8002ecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ed0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002ed4:	2900      	cmp	r1, #0
 8002ed6:	d045      	beq.n	8002f64 <_dtoa_r+0x5b4>
 8002ed8:	494c      	ldr	r1, [pc, #304]	; (800300c <_dtoa_r+0x65c>)
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7fd fcd6 	bl	800088c <__aeabi_ddiv>
 8002ee0:	ec53 2b18 	vmov	r2, r3, d8
 8002ee4:	f7fd f9f0 	bl	80002c8 <__aeabi_dsub>
 8002ee8:	9d00      	ldr	r5, [sp, #0]
 8002eea:	ec41 0b18 	vmov	d8, r0, r1
 8002eee:	4639      	mov	r1, r7
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	f7fd fe51 	bl	8000b98 <__aeabi_d2iz>
 8002ef6:	900c      	str	r0, [sp, #48]	; 0x30
 8002ef8:	f7fd fb34 	bl	8000564 <__aeabi_i2d>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4630      	mov	r0, r6
 8002f02:	4639      	mov	r1, r7
 8002f04:	f7fd f9e0 	bl	80002c8 <__aeabi_dsub>
 8002f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f0a:	3330      	adds	r3, #48	; 0x30
 8002f0c:	f805 3b01 	strb.w	r3, [r5], #1
 8002f10:	ec53 2b18 	vmov	r2, r3, d8
 8002f14:	4606      	mov	r6, r0
 8002f16:	460f      	mov	r7, r1
 8002f18:	f7fd fe00 	bl	8000b1c <__aeabi_dcmplt>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d165      	bne.n	8002fec <_dtoa_r+0x63c>
 8002f20:	4632      	mov	r2, r6
 8002f22:	463b      	mov	r3, r7
 8002f24:	4935      	ldr	r1, [pc, #212]	; (8002ffc <_dtoa_r+0x64c>)
 8002f26:	2000      	movs	r0, #0
 8002f28:	f7fd f9ce 	bl	80002c8 <__aeabi_dsub>
 8002f2c:	ec53 2b18 	vmov	r2, r3, d8
 8002f30:	f7fd fdf4 	bl	8000b1c <__aeabi_dcmplt>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	f040 80b9 	bne.w	80030ac <_dtoa_r+0x6fc>
 8002f3a:	9b02      	ldr	r3, [sp, #8]
 8002f3c:	429d      	cmp	r5, r3
 8002f3e:	f43f af75 	beq.w	8002e2c <_dtoa_r+0x47c>
 8002f42:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <_dtoa_r+0x650>)
 8002f44:	ec51 0b18 	vmov	r0, r1, d8
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f7fd fb75 	bl	8000638 <__aeabi_dmul>
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <_dtoa_r+0x650>)
 8002f50:	ec41 0b18 	vmov	d8, r0, r1
 8002f54:	2200      	movs	r2, #0
 8002f56:	4630      	mov	r0, r6
 8002f58:	4639      	mov	r1, r7
 8002f5a:	f7fd fb6d 	bl	8000638 <__aeabi_dmul>
 8002f5e:	4606      	mov	r6, r0
 8002f60:	460f      	mov	r7, r1
 8002f62:	e7c4      	b.n	8002eee <_dtoa_r+0x53e>
 8002f64:	ec51 0b17 	vmov	r0, r1, d7
 8002f68:	f7fd fb66 	bl	8000638 <__aeabi_dmul>
 8002f6c:	9b02      	ldr	r3, [sp, #8]
 8002f6e:	9d00      	ldr	r5, [sp, #0]
 8002f70:	930c      	str	r3, [sp, #48]	; 0x30
 8002f72:	ec41 0b18 	vmov	d8, r0, r1
 8002f76:	4639      	mov	r1, r7
 8002f78:	4630      	mov	r0, r6
 8002f7a:	f7fd fe0d 	bl	8000b98 <__aeabi_d2iz>
 8002f7e:	9011      	str	r0, [sp, #68]	; 0x44
 8002f80:	f7fd faf0 	bl	8000564 <__aeabi_i2d>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4630      	mov	r0, r6
 8002f8a:	4639      	mov	r1, r7
 8002f8c:	f7fd f99c 	bl	80002c8 <__aeabi_dsub>
 8002f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002f92:	3330      	adds	r3, #48	; 0x30
 8002f94:	f805 3b01 	strb.w	r3, [r5], #1
 8002f98:	9b02      	ldr	r3, [sp, #8]
 8002f9a:	429d      	cmp	r5, r3
 8002f9c:	4606      	mov	r6, r0
 8002f9e:	460f      	mov	r7, r1
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	d134      	bne.n	8003010 <_dtoa_r+0x660>
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <_dtoa_r+0x65c>)
 8002fa8:	ec51 0b18 	vmov	r0, r1, d8
 8002fac:	f7fd f98e 	bl	80002cc <__adddf3>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	4639      	mov	r1, r7
 8002fb8:	f7fd fdce 	bl	8000b58 <__aeabi_dcmpgt>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d175      	bne.n	80030ac <_dtoa_r+0x6fc>
 8002fc0:	ec53 2b18 	vmov	r2, r3, d8
 8002fc4:	4911      	ldr	r1, [pc, #68]	; (800300c <_dtoa_r+0x65c>)
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fd f97e 	bl	80002c8 <__aeabi_dsub>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	4639      	mov	r1, r7
 8002fd4:	f7fd fda2 	bl	8000b1c <__aeabi_dcmplt>
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	f43f af27 	beq.w	8002e2c <_dtoa_r+0x47c>
 8002fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002fe0:	1e6b      	subs	r3, r5, #1
 8002fe2:	930c      	str	r3, [sp, #48]	; 0x30
 8002fe4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8002fe8:	2b30      	cmp	r3, #48	; 0x30
 8002fea:	d0f8      	beq.n	8002fde <_dtoa_r+0x62e>
 8002fec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8002ff0:	e04a      	b.n	8003088 <_dtoa_r+0x6d8>
 8002ff2:	bf00      	nop
 8002ff4:	08004b80 	.word	0x08004b80
 8002ff8:	08004b58 	.word	0x08004b58
 8002ffc:	3ff00000 	.word	0x3ff00000
 8003000:	40240000 	.word	0x40240000
 8003004:	401c0000 	.word	0x401c0000
 8003008:	40140000 	.word	0x40140000
 800300c:	3fe00000 	.word	0x3fe00000
 8003010:	4baf      	ldr	r3, [pc, #700]	; (80032d0 <_dtoa_r+0x920>)
 8003012:	f7fd fb11 	bl	8000638 <__aeabi_dmul>
 8003016:	4606      	mov	r6, r0
 8003018:	460f      	mov	r7, r1
 800301a:	e7ac      	b.n	8002f76 <_dtoa_r+0x5c6>
 800301c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003020:	9d00      	ldr	r5, [sp, #0]
 8003022:	4642      	mov	r2, r8
 8003024:	464b      	mov	r3, r9
 8003026:	4630      	mov	r0, r6
 8003028:	4639      	mov	r1, r7
 800302a:	f7fd fc2f 	bl	800088c <__aeabi_ddiv>
 800302e:	f7fd fdb3 	bl	8000b98 <__aeabi_d2iz>
 8003032:	9002      	str	r0, [sp, #8]
 8003034:	f7fd fa96 	bl	8000564 <__aeabi_i2d>
 8003038:	4642      	mov	r2, r8
 800303a:	464b      	mov	r3, r9
 800303c:	f7fd fafc 	bl	8000638 <__aeabi_dmul>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4630      	mov	r0, r6
 8003046:	4639      	mov	r1, r7
 8003048:	f7fd f93e 	bl	80002c8 <__aeabi_dsub>
 800304c:	9e02      	ldr	r6, [sp, #8]
 800304e:	9f01      	ldr	r7, [sp, #4]
 8003050:	3630      	adds	r6, #48	; 0x30
 8003052:	f805 6b01 	strb.w	r6, [r5], #1
 8003056:	9e00      	ldr	r6, [sp, #0]
 8003058:	1bae      	subs	r6, r5, r6
 800305a:	42b7      	cmp	r7, r6
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	d137      	bne.n	80030d2 <_dtoa_r+0x722>
 8003062:	f7fd f933 	bl	80002cc <__adddf3>
 8003066:	4642      	mov	r2, r8
 8003068:	464b      	mov	r3, r9
 800306a:	4606      	mov	r6, r0
 800306c:	460f      	mov	r7, r1
 800306e:	f7fd fd73 	bl	8000b58 <__aeabi_dcmpgt>
 8003072:	b9c8      	cbnz	r0, 80030a8 <_dtoa_r+0x6f8>
 8003074:	4642      	mov	r2, r8
 8003076:	464b      	mov	r3, r9
 8003078:	4630      	mov	r0, r6
 800307a:	4639      	mov	r1, r7
 800307c:	f7fd fd44 	bl	8000b08 <__aeabi_dcmpeq>
 8003080:	b110      	cbz	r0, 8003088 <_dtoa_r+0x6d8>
 8003082:	9b02      	ldr	r3, [sp, #8]
 8003084:	07d9      	lsls	r1, r3, #31
 8003086:	d40f      	bmi.n	80030a8 <_dtoa_r+0x6f8>
 8003088:	4620      	mov	r0, r4
 800308a:	4659      	mov	r1, fp
 800308c:	f000 fad6 	bl	800363c <_Bfree>
 8003090:	2300      	movs	r3, #0
 8003092:	702b      	strb	r3, [r5, #0]
 8003094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003096:	f10a 0001 	add.w	r0, sl, #1
 800309a:	6018      	str	r0, [r3, #0]
 800309c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f43f acd8 	beq.w	8002a54 <_dtoa_r+0xa4>
 80030a4:	601d      	str	r5, [r3, #0]
 80030a6:	e4d5      	b.n	8002a54 <_dtoa_r+0xa4>
 80030a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80030ac:	462b      	mov	r3, r5
 80030ae:	461d      	mov	r5, r3
 80030b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80030b4:	2a39      	cmp	r2, #57	; 0x39
 80030b6:	d108      	bne.n	80030ca <_dtoa_r+0x71a>
 80030b8:	9a00      	ldr	r2, [sp, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d1f7      	bne.n	80030ae <_dtoa_r+0x6fe>
 80030be:	9a07      	ldr	r2, [sp, #28]
 80030c0:	9900      	ldr	r1, [sp, #0]
 80030c2:	3201      	adds	r2, #1
 80030c4:	9207      	str	r2, [sp, #28]
 80030c6:	2230      	movs	r2, #48	; 0x30
 80030c8:	700a      	strb	r2, [r1, #0]
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	3201      	adds	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e78c      	b.n	8002fec <_dtoa_r+0x63c>
 80030d2:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <_dtoa_r+0x920>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	f7fd faaf 	bl	8000638 <__aeabi_dmul>
 80030da:	2200      	movs	r2, #0
 80030dc:	2300      	movs	r3, #0
 80030de:	4606      	mov	r6, r0
 80030e0:	460f      	mov	r7, r1
 80030e2:	f7fd fd11 	bl	8000b08 <__aeabi_dcmpeq>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d09b      	beq.n	8003022 <_dtoa_r+0x672>
 80030ea:	e7cd      	b.n	8003088 <_dtoa_r+0x6d8>
 80030ec:	9a08      	ldr	r2, [sp, #32]
 80030ee:	2a00      	cmp	r2, #0
 80030f0:	f000 80c4 	beq.w	800327c <_dtoa_r+0x8cc>
 80030f4:	9a05      	ldr	r2, [sp, #20]
 80030f6:	2a01      	cmp	r2, #1
 80030f8:	f300 80a8 	bgt.w	800324c <_dtoa_r+0x89c>
 80030fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80030fe:	2a00      	cmp	r2, #0
 8003100:	f000 80a0 	beq.w	8003244 <_dtoa_r+0x894>
 8003104:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003108:	9e06      	ldr	r6, [sp, #24]
 800310a:	4645      	mov	r5, r8
 800310c:	9a04      	ldr	r2, [sp, #16]
 800310e:	2101      	movs	r1, #1
 8003110:	441a      	add	r2, r3
 8003112:	4620      	mov	r0, r4
 8003114:	4498      	add	r8, r3
 8003116:	9204      	str	r2, [sp, #16]
 8003118:	f000 fb4c 	bl	80037b4 <__i2b>
 800311c:	4607      	mov	r7, r0
 800311e:	2d00      	cmp	r5, #0
 8003120:	dd0b      	ble.n	800313a <_dtoa_r+0x78a>
 8003122:	9b04      	ldr	r3, [sp, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	dd08      	ble.n	800313a <_dtoa_r+0x78a>
 8003128:	42ab      	cmp	r3, r5
 800312a:	9a04      	ldr	r2, [sp, #16]
 800312c:	bfa8      	it	ge
 800312e:	462b      	movge	r3, r5
 8003130:	eba8 0803 	sub.w	r8, r8, r3
 8003134:	1aed      	subs	r5, r5, r3
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	9304      	str	r3, [sp, #16]
 800313a:	9b06      	ldr	r3, [sp, #24]
 800313c:	b1fb      	cbz	r3, 800317e <_dtoa_r+0x7ce>
 800313e:	9b08      	ldr	r3, [sp, #32]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 809f 	beq.w	8003284 <_dtoa_r+0x8d4>
 8003146:	2e00      	cmp	r6, #0
 8003148:	dd11      	ble.n	800316e <_dtoa_r+0x7be>
 800314a:	4639      	mov	r1, r7
 800314c:	4632      	mov	r2, r6
 800314e:	4620      	mov	r0, r4
 8003150:	f000 fbec 	bl	800392c <__pow5mult>
 8003154:	465a      	mov	r2, fp
 8003156:	4601      	mov	r1, r0
 8003158:	4607      	mov	r7, r0
 800315a:	4620      	mov	r0, r4
 800315c:	f000 fb40 	bl	80037e0 <__multiply>
 8003160:	4659      	mov	r1, fp
 8003162:	9007      	str	r0, [sp, #28]
 8003164:	4620      	mov	r0, r4
 8003166:	f000 fa69 	bl	800363c <_Bfree>
 800316a:	9b07      	ldr	r3, [sp, #28]
 800316c:	469b      	mov	fp, r3
 800316e:	9b06      	ldr	r3, [sp, #24]
 8003170:	1b9a      	subs	r2, r3, r6
 8003172:	d004      	beq.n	800317e <_dtoa_r+0x7ce>
 8003174:	4659      	mov	r1, fp
 8003176:	4620      	mov	r0, r4
 8003178:	f000 fbd8 	bl	800392c <__pow5mult>
 800317c:	4683      	mov	fp, r0
 800317e:	2101      	movs	r1, #1
 8003180:	4620      	mov	r0, r4
 8003182:	f000 fb17 	bl	80037b4 <__i2b>
 8003186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003188:	2b00      	cmp	r3, #0
 800318a:	4606      	mov	r6, r0
 800318c:	dd7c      	ble.n	8003288 <_dtoa_r+0x8d8>
 800318e:	461a      	mov	r2, r3
 8003190:	4601      	mov	r1, r0
 8003192:	4620      	mov	r0, r4
 8003194:	f000 fbca 	bl	800392c <__pow5mult>
 8003198:	9b05      	ldr	r3, [sp, #20]
 800319a:	2b01      	cmp	r3, #1
 800319c:	4606      	mov	r6, r0
 800319e:	dd76      	ble.n	800328e <_dtoa_r+0x8de>
 80031a0:	2300      	movs	r3, #0
 80031a2:	9306      	str	r3, [sp, #24]
 80031a4:	6933      	ldr	r3, [r6, #16]
 80031a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80031aa:	6918      	ldr	r0, [r3, #16]
 80031ac:	f000 fab2 	bl	8003714 <__hi0bits>
 80031b0:	f1c0 0020 	rsb	r0, r0, #32
 80031b4:	9b04      	ldr	r3, [sp, #16]
 80031b6:	4418      	add	r0, r3
 80031b8:	f010 001f 	ands.w	r0, r0, #31
 80031bc:	f000 8086 	beq.w	80032cc <_dtoa_r+0x91c>
 80031c0:	f1c0 0320 	rsb	r3, r0, #32
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	dd7f      	ble.n	80032c8 <_dtoa_r+0x918>
 80031c8:	f1c0 001c 	rsb	r0, r0, #28
 80031cc:	9b04      	ldr	r3, [sp, #16]
 80031ce:	4403      	add	r3, r0
 80031d0:	4480      	add	r8, r0
 80031d2:	4405      	add	r5, r0
 80031d4:	9304      	str	r3, [sp, #16]
 80031d6:	f1b8 0f00 	cmp.w	r8, #0
 80031da:	dd05      	ble.n	80031e8 <_dtoa_r+0x838>
 80031dc:	4659      	mov	r1, fp
 80031de:	4642      	mov	r2, r8
 80031e0:	4620      	mov	r0, r4
 80031e2:	f000 fbfd 	bl	80039e0 <__lshift>
 80031e6:	4683      	mov	fp, r0
 80031e8:	9b04      	ldr	r3, [sp, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	dd05      	ble.n	80031fa <_dtoa_r+0x84a>
 80031ee:	4631      	mov	r1, r6
 80031f0:	461a      	mov	r2, r3
 80031f2:	4620      	mov	r0, r4
 80031f4:	f000 fbf4 	bl	80039e0 <__lshift>
 80031f8:	4606      	mov	r6, r0
 80031fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d069      	beq.n	80032d4 <_dtoa_r+0x924>
 8003200:	4631      	mov	r1, r6
 8003202:	4658      	mov	r0, fp
 8003204:	f000 fc58 	bl	8003ab8 <__mcmp>
 8003208:	2800      	cmp	r0, #0
 800320a:	da63      	bge.n	80032d4 <_dtoa_r+0x924>
 800320c:	2300      	movs	r3, #0
 800320e:	4659      	mov	r1, fp
 8003210:	220a      	movs	r2, #10
 8003212:	4620      	mov	r0, r4
 8003214:	f000 fa34 	bl	8003680 <__multadd>
 8003218:	9b08      	ldr	r3, [sp, #32]
 800321a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800321e:	4683      	mov	fp, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 818f 	beq.w	8003544 <_dtoa_r+0xb94>
 8003226:	4639      	mov	r1, r7
 8003228:	2300      	movs	r3, #0
 800322a:	220a      	movs	r2, #10
 800322c:	4620      	mov	r0, r4
 800322e:	f000 fa27 	bl	8003680 <__multadd>
 8003232:	f1b9 0f00 	cmp.w	r9, #0
 8003236:	4607      	mov	r7, r0
 8003238:	f300 808e 	bgt.w	8003358 <_dtoa_r+0x9a8>
 800323c:	9b05      	ldr	r3, [sp, #20]
 800323e:	2b02      	cmp	r3, #2
 8003240:	dc50      	bgt.n	80032e4 <_dtoa_r+0x934>
 8003242:	e089      	b.n	8003358 <_dtoa_r+0x9a8>
 8003244:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003246:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800324a:	e75d      	b.n	8003108 <_dtoa_r+0x758>
 800324c:	9b01      	ldr	r3, [sp, #4]
 800324e:	1e5e      	subs	r6, r3, #1
 8003250:	9b06      	ldr	r3, [sp, #24]
 8003252:	42b3      	cmp	r3, r6
 8003254:	bfbf      	itttt	lt
 8003256:	9b06      	ldrlt	r3, [sp, #24]
 8003258:	9606      	strlt	r6, [sp, #24]
 800325a:	1af2      	sublt	r2, r6, r3
 800325c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800325e:	bfb6      	itet	lt
 8003260:	189b      	addlt	r3, r3, r2
 8003262:	1b9e      	subge	r6, r3, r6
 8003264:	930d      	strlt	r3, [sp, #52]	; 0x34
 8003266:	9b01      	ldr	r3, [sp, #4]
 8003268:	bfb8      	it	lt
 800326a:	2600      	movlt	r6, #0
 800326c:	2b00      	cmp	r3, #0
 800326e:	bfb5      	itete	lt
 8003270:	eba8 0503 	sublt.w	r5, r8, r3
 8003274:	9b01      	ldrge	r3, [sp, #4]
 8003276:	2300      	movlt	r3, #0
 8003278:	4645      	movge	r5, r8
 800327a:	e747      	b.n	800310c <_dtoa_r+0x75c>
 800327c:	9e06      	ldr	r6, [sp, #24]
 800327e:	9f08      	ldr	r7, [sp, #32]
 8003280:	4645      	mov	r5, r8
 8003282:	e74c      	b.n	800311e <_dtoa_r+0x76e>
 8003284:	9a06      	ldr	r2, [sp, #24]
 8003286:	e775      	b.n	8003174 <_dtoa_r+0x7c4>
 8003288:	9b05      	ldr	r3, [sp, #20]
 800328a:	2b01      	cmp	r3, #1
 800328c:	dc18      	bgt.n	80032c0 <_dtoa_r+0x910>
 800328e:	9b02      	ldr	r3, [sp, #8]
 8003290:	b9b3      	cbnz	r3, 80032c0 <_dtoa_r+0x910>
 8003292:	9b03      	ldr	r3, [sp, #12]
 8003294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003298:	b9a3      	cbnz	r3, 80032c4 <_dtoa_r+0x914>
 800329a:	9b03      	ldr	r3, [sp, #12]
 800329c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032a0:	0d1b      	lsrs	r3, r3, #20
 80032a2:	051b      	lsls	r3, r3, #20
 80032a4:	b12b      	cbz	r3, 80032b2 <_dtoa_r+0x902>
 80032a6:	9b04      	ldr	r3, [sp, #16]
 80032a8:	3301      	adds	r3, #1
 80032aa:	9304      	str	r3, [sp, #16]
 80032ac:	f108 0801 	add.w	r8, r8, #1
 80032b0:	2301      	movs	r3, #1
 80032b2:	9306      	str	r3, [sp, #24]
 80032b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f47f af74 	bne.w	80031a4 <_dtoa_r+0x7f4>
 80032bc:	2001      	movs	r0, #1
 80032be:	e779      	b.n	80031b4 <_dtoa_r+0x804>
 80032c0:	2300      	movs	r3, #0
 80032c2:	e7f6      	b.n	80032b2 <_dtoa_r+0x902>
 80032c4:	9b02      	ldr	r3, [sp, #8]
 80032c6:	e7f4      	b.n	80032b2 <_dtoa_r+0x902>
 80032c8:	d085      	beq.n	80031d6 <_dtoa_r+0x826>
 80032ca:	4618      	mov	r0, r3
 80032cc:	301c      	adds	r0, #28
 80032ce:	e77d      	b.n	80031cc <_dtoa_r+0x81c>
 80032d0:	40240000 	.word	0x40240000
 80032d4:	9b01      	ldr	r3, [sp, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	dc38      	bgt.n	800334c <_dtoa_r+0x99c>
 80032da:	9b05      	ldr	r3, [sp, #20]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	dd35      	ble.n	800334c <_dtoa_r+0x99c>
 80032e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80032e4:	f1b9 0f00 	cmp.w	r9, #0
 80032e8:	d10d      	bne.n	8003306 <_dtoa_r+0x956>
 80032ea:	4631      	mov	r1, r6
 80032ec:	464b      	mov	r3, r9
 80032ee:	2205      	movs	r2, #5
 80032f0:	4620      	mov	r0, r4
 80032f2:	f000 f9c5 	bl	8003680 <__multadd>
 80032f6:	4601      	mov	r1, r0
 80032f8:	4606      	mov	r6, r0
 80032fa:	4658      	mov	r0, fp
 80032fc:	f000 fbdc 	bl	8003ab8 <__mcmp>
 8003300:	2800      	cmp	r0, #0
 8003302:	f73f adbd 	bgt.w	8002e80 <_dtoa_r+0x4d0>
 8003306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003308:	9d00      	ldr	r5, [sp, #0]
 800330a:	ea6f 0a03 	mvn.w	sl, r3
 800330e:	f04f 0800 	mov.w	r8, #0
 8003312:	4631      	mov	r1, r6
 8003314:	4620      	mov	r0, r4
 8003316:	f000 f991 	bl	800363c <_Bfree>
 800331a:	2f00      	cmp	r7, #0
 800331c:	f43f aeb4 	beq.w	8003088 <_dtoa_r+0x6d8>
 8003320:	f1b8 0f00 	cmp.w	r8, #0
 8003324:	d005      	beq.n	8003332 <_dtoa_r+0x982>
 8003326:	45b8      	cmp	r8, r7
 8003328:	d003      	beq.n	8003332 <_dtoa_r+0x982>
 800332a:	4641      	mov	r1, r8
 800332c:	4620      	mov	r0, r4
 800332e:	f000 f985 	bl	800363c <_Bfree>
 8003332:	4639      	mov	r1, r7
 8003334:	4620      	mov	r0, r4
 8003336:	f000 f981 	bl	800363c <_Bfree>
 800333a:	e6a5      	b.n	8003088 <_dtoa_r+0x6d8>
 800333c:	2600      	movs	r6, #0
 800333e:	4637      	mov	r7, r6
 8003340:	e7e1      	b.n	8003306 <_dtoa_r+0x956>
 8003342:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003344:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003348:	4637      	mov	r7, r6
 800334a:	e599      	b.n	8002e80 <_dtoa_r+0x4d0>
 800334c:	9b08      	ldr	r3, [sp, #32]
 800334e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 80fd 	beq.w	8003552 <_dtoa_r+0xba2>
 8003358:	2d00      	cmp	r5, #0
 800335a:	dd05      	ble.n	8003368 <_dtoa_r+0x9b8>
 800335c:	4639      	mov	r1, r7
 800335e:	462a      	mov	r2, r5
 8003360:	4620      	mov	r0, r4
 8003362:	f000 fb3d 	bl	80039e0 <__lshift>
 8003366:	4607      	mov	r7, r0
 8003368:	9b06      	ldr	r3, [sp, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d05c      	beq.n	8003428 <_dtoa_r+0xa78>
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4620      	mov	r0, r4
 8003372:	f000 f923 	bl	80035bc <_Balloc>
 8003376:	4605      	mov	r5, r0
 8003378:	b928      	cbnz	r0, 8003386 <_dtoa_r+0x9d6>
 800337a:	4b80      	ldr	r3, [pc, #512]	; (800357c <_dtoa_r+0xbcc>)
 800337c:	4602      	mov	r2, r0
 800337e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003382:	f7ff bb2e 	b.w	80029e2 <_dtoa_r+0x32>
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	3202      	adds	r2, #2
 800338a:	0092      	lsls	r2, r2, #2
 800338c:	f107 010c 	add.w	r1, r7, #12
 8003390:	300c      	adds	r0, #12
 8003392:	f000 f905 	bl	80035a0 <memcpy>
 8003396:	2201      	movs	r2, #1
 8003398:	4629      	mov	r1, r5
 800339a:	4620      	mov	r0, r4
 800339c:	f000 fb20 	bl	80039e0 <__lshift>
 80033a0:	9b00      	ldr	r3, [sp, #0]
 80033a2:	3301      	adds	r3, #1
 80033a4:	9301      	str	r3, [sp, #4]
 80033a6:	9b00      	ldr	r3, [sp, #0]
 80033a8:	444b      	add	r3, r9
 80033aa:	9307      	str	r3, [sp, #28]
 80033ac:	9b02      	ldr	r3, [sp, #8]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	46b8      	mov	r8, r7
 80033b4:	9306      	str	r3, [sp, #24]
 80033b6:	4607      	mov	r7, r0
 80033b8:	9b01      	ldr	r3, [sp, #4]
 80033ba:	4631      	mov	r1, r6
 80033bc:	3b01      	subs	r3, #1
 80033be:	4658      	mov	r0, fp
 80033c0:	9302      	str	r3, [sp, #8]
 80033c2:	f7ff fa67 	bl	8002894 <quorem>
 80033c6:	4603      	mov	r3, r0
 80033c8:	3330      	adds	r3, #48	; 0x30
 80033ca:	9004      	str	r0, [sp, #16]
 80033cc:	4641      	mov	r1, r8
 80033ce:	4658      	mov	r0, fp
 80033d0:	9308      	str	r3, [sp, #32]
 80033d2:	f000 fb71 	bl	8003ab8 <__mcmp>
 80033d6:	463a      	mov	r2, r7
 80033d8:	4681      	mov	r9, r0
 80033da:	4631      	mov	r1, r6
 80033dc:	4620      	mov	r0, r4
 80033de:	f000 fb87 	bl	8003af0 <__mdiff>
 80033e2:	68c2      	ldr	r2, [r0, #12]
 80033e4:	9b08      	ldr	r3, [sp, #32]
 80033e6:	4605      	mov	r5, r0
 80033e8:	bb02      	cbnz	r2, 800342c <_dtoa_r+0xa7c>
 80033ea:	4601      	mov	r1, r0
 80033ec:	4658      	mov	r0, fp
 80033ee:	f000 fb63 	bl	8003ab8 <__mcmp>
 80033f2:	9b08      	ldr	r3, [sp, #32]
 80033f4:	4602      	mov	r2, r0
 80033f6:	4629      	mov	r1, r5
 80033f8:	4620      	mov	r0, r4
 80033fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80033fe:	f000 f91d 	bl	800363c <_Bfree>
 8003402:	9b05      	ldr	r3, [sp, #20]
 8003404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003406:	9d01      	ldr	r5, [sp, #4]
 8003408:	ea43 0102 	orr.w	r1, r3, r2
 800340c:	9b06      	ldr	r3, [sp, #24]
 800340e:	430b      	orrs	r3, r1
 8003410:	9b08      	ldr	r3, [sp, #32]
 8003412:	d10d      	bne.n	8003430 <_dtoa_r+0xa80>
 8003414:	2b39      	cmp	r3, #57	; 0x39
 8003416:	d029      	beq.n	800346c <_dtoa_r+0xabc>
 8003418:	f1b9 0f00 	cmp.w	r9, #0
 800341c:	dd01      	ble.n	8003422 <_dtoa_r+0xa72>
 800341e:	9b04      	ldr	r3, [sp, #16]
 8003420:	3331      	adds	r3, #49	; 0x31
 8003422:	9a02      	ldr	r2, [sp, #8]
 8003424:	7013      	strb	r3, [r2, #0]
 8003426:	e774      	b.n	8003312 <_dtoa_r+0x962>
 8003428:	4638      	mov	r0, r7
 800342a:	e7b9      	b.n	80033a0 <_dtoa_r+0x9f0>
 800342c:	2201      	movs	r2, #1
 800342e:	e7e2      	b.n	80033f6 <_dtoa_r+0xa46>
 8003430:	f1b9 0f00 	cmp.w	r9, #0
 8003434:	db06      	blt.n	8003444 <_dtoa_r+0xa94>
 8003436:	9905      	ldr	r1, [sp, #20]
 8003438:	ea41 0909 	orr.w	r9, r1, r9
 800343c:	9906      	ldr	r1, [sp, #24]
 800343e:	ea59 0101 	orrs.w	r1, r9, r1
 8003442:	d120      	bne.n	8003486 <_dtoa_r+0xad6>
 8003444:	2a00      	cmp	r2, #0
 8003446:	ddec      	ble.n	8003422 <_dtoa_r+0xa72>
 8003448:	4659      	mov	r1, fp
 800344a:	2201      	movs	r2, #1
 800344c:	4620      	mov	r0, r4
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	f000 fac6 	bl	80039e0 <__lshift>
 8003454:	4631      	mov	r1, r6
 8003456:	4683      	mov	fp, r0
 8003458:	f000 fb2e 	bl	8003ab8 <__mcmp>
 800345c:	2800      	cmp	r0, #0
 800345e:	9b01      	ldr	r3, [sp, #4]
 8003460:	dc02      	bgt.n	8003468 <_dtoa_r+0xab8>
 8003462:	d1de      	bne.n	8003422 <_dtoa_r+0xa72>
 8003464:	07da      	lsls	r2, r3, #31
 8003466:	d5dc      	bpl.n	8003422 <_dtoa_r+0xa72>
 8003468:	2b39      	cmp	r3, #57	; 0x39
 800346a:	d1d8      	bne.n	800341e <_dtoa_r+0xa6e>
 800346c:	9a02      	ldr	r2, [sp, #8]
 800346e:	2339      	movs	r3, #57	; 0x39
 8003470:	7013      	strb	r3, [r2, #0]
 8003472:	462b      	mov	r3, r5
 8003474:	461d      	mov	r5, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800347c:	2a39      	cmp	r2, #57	; 0x39
 800347e:	d050      	beq.n	8003522 <_dtoa_r+0xb72>
 8003480:	3201      	adds	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	e745      	b.n	8003312 <_dtoa_r+0x962>
 8003486:	2a00      	cmp	r2, #0
 8003488:	dd03      	ble.n	8003492 <_dtoa_r+0xae2>
 800348a:	2b39      	cmp	r3, #57	; 0x39
 800348c:	d0ee      	beq.n	800346c <_dtoa_r+0xabc>
 800348e:	3301      	adds	r3, #1
 8003490:	e7c7      	b.n	8003422 <_dtoa_r+0xa72>
 8003492:	9a01      	ldr	r2, [sp, #4]
 8003494:	9907      	ldr	r1, [sp, #28]
 8003496:	f802 3c01 	strb.w	r3, [r2, #-1]
 800349a:	428a      	cmp	r2, r1
 800349c:	d02a      	beq.n	80034f4 <_dtoa_r+0xb44>
 800349e:	4659      	mov	r1, fp
 80034a0:	2300      	movs	r3, #0
 80034a2:	220a      	movs	r2, #10
 80034a4:	4620      	mov	r0, r4
 80034a6:	f000 f8eb 	bl	8003680 <__multadd>
 80034aa:	45b8      	cmp	r8, r7
 80034ac:	4683      	mov	fp, r0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	f04f 020a 	mov.w	r2, #10
 80034b6:	4641      	mov	r1, r8
 80034b8:	4620      	mov	r0, r4
 80034ba:	d107      	bne.n	80034cc <_dtoa_r+0xb1c>
 80034bc:	f000 f8e0 	bl	8003680 <__multadd>
 80034c0:	4680      	mov	r8, r0
 80034c2:	4607      	mov	r7, r0
 80034c4:	9b01      	ldr	r3, [sp, #4]
 80034c6:	3301      	adds	r3, #1
 80034c8:	9301      	str	r3, [sp, #4]
 80034ca:	e775      	b.n	80033b8 <_dtoa_r+0xa08>
 80034cc:	f000 f8d8 	bl	8003680 <__multadd>
 80034d0:	4639      	mov	r1, r7
 80034d2:	4680      	mov	r8, r0
 80034d4:	2300      	movs	r3, #0
 80034d6:	220a      	movs	r2, #10
 80034d8:	4620      	mov	r0, r4
 80034da:	f000 f8d1 	bl	8003680 <__multadd>
 80034de:	4607      	mov	r7, r0
 80034e0:	e7f0      	b.n	80034c4 <_dtoa_r+0xb14>
 80034e2:	f1b9 0f00 	cmp.w	r9, #0
 80034e6:	9a00      	ldr	r2, [sp, #0]
 80034e8:	bfcc      	ite	gt
 80034ea:	464d      	movgt	r5, r9
 80034ec:	2501      	movle	r5, #1
 80034ee:	4415      	add	r5, r2
 80034f0:	f04f 0800 	mov.w	r8, #0
 80034f4:	4659      	mov	r1, fp
 80034f6:	2201      	movs	r2, #1
 80034f8:	4620      	mov	r0, r4
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	f000 fa70 	bl	80039e0 <__lshift>
 8003500:	4631      	mov	r1, r6
 8003502:	4683      	mov	fp, r0
 8003504:	f000 fad8 	bl	8003ab8 <__mcmp>
 8003508:	2800      	cmp	r0, #0
 800350a:	dcb2      	bgt.n	8003472 <_dtoa_r+0xac2>
 800350c:	d102      	bne.n	8003514 <_dtoa_r+0xb64>
 800350e:	9b01      	ldr	r3, [sp, #4]
 8003510:	07db      	lsls	r3, r3, #31
 8003512:	d4ae      	bmi.n	8003472 <_dtoa_r+0xac2>
 8003514:	462b      	mov	r3, r5
 8003516:	461d      	mov	r5, r3
 8003518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800351c:	2a30      	cmp	r2, #48	; 0x30
 800351e:	d0fa      	beq.n	8003516 <_dtoa_r+0xb66>
 8003520:	e6f7      	b.n	8003312 <_dtoa_r+0x962>
 8003522:	9a00      	ldr	r2, [sp, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d1a5      	bne.n	8003474 <_dtoa_r+0xac4>
 8003528:	f10a 0a01 	add.w	sl, sl, #1
 800352c:	2331      	movs	r3, #49	; 0x31
 800352e:	e779      	b.n	8003424 <_dtoa_r+0xa74>
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <_dtoa_r+0xbd0>)
 8003532:	f7ff baaf 	b.w	8002a94 <_dtoa_r+0xe4>
 8003536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003538:	2b00      	cmp	r3, #0
 800353a:	f47f aa86 	bne.w	8002a4a <_dtoa_r+0x9a>
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <_dtoa_r+0xbd4>)
 8003540:	f7ff baa8 	b.w	8002a94 <_dtoa_r+0xe4>
 8003544:	f1b9 0f00 	cmp.w	r9, #0
 8003548:	dc03      	bgt.n	8003552 <_dtoa_r+0xba2>
 800354a:	9b05      	ldr	r3, [sp, #20]
 800354c:	2b02      	cmp	r3, #2
 800354e:	f73f aec9 	bgt.w	80032e4 <_dtoa_r+0x934>
 8003552:	9d00      	ldr	r5, [sp, #0]
 8003554:	4631      	mov	r1, r6
 8003556:	4658      	mov	r0, fp
 8003558:	f7ff f99c 	bl	8002894 <quorem>
 800355c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003560:	f805 3b01 	strb.w	r3, [r5], #1
 8003564:	9a00      	ldr	r2, [sp, #0]
 8003566:	1aaa      	subs	r2, r5, r2
 8003568:	4591      	cmp	r9, r2
 800356a:	ddba      	ble.n	80034e2 <_dtoa_r+0xb32>
 800356c:	4659      	mov	r1, fp
 800356e:	2300      	movs	r3, #0
 8003570:	220a      	movs	r2, #10
 8003572:	4620      	mov	r0, r4
 8003574:	f000 f884 	bl	8003680 <__multadd>
 8003578:	4683      	mov	fp, r0
 800357a:	e7eb      	b.n	8003554 <_dtoa_r+0xba4>
 800357c:	08004ae3 	.word	0x08004ae3
 8003580:	08004a3c 	.word	0x08004a3c
 8003584:	08004a60 	.word	0x08004a60

08003588 <_localeconv_r>:
 8003588:	4800      	ldr	r0, [pc, #0]	; (800358c <_localeconv_r+0x4>)
 800358a:	4770      	bx	lr
 800358c:	2000017c 	.word	0x2000017c

08003590 <malloc>:
 8003590:	4b02      	ldr	r3, [pc, #8]	; (800359c <malloc+0xc>)
 8003592:	4601      	mov	r1, r0
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	f000 bbef 	b.w	8003d78 <_malloc_r>
 800359a:	bf00      	nop
 800359c:	20000028 	.word	0x20000028

080035a0 <memcpy>:
 80035a0:	440a      	add	r2, r1
 80035a2:	4291      	cmp	r1, r2
 80035a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80035a8:	d100      	bne.n	80035ac <memcpy+0xc>
 80035aa:	4770      	bx	lr
 80035ac:	b510      	push	{r4, lr}
 80035ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035b6:	4291      	cmp	r1, r2
 80035b8:	d1f9      	bne.n	80035ae <memcpy+0xe>
 80035ba:	bd10      	pop	{r4, pc}

080035bc <_Balloc>:
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80035c0:	4604      	mov	r4, r0
 80035c2:	460d      	mov	r5, r1
 80035c4:	b976      	cbnz	r6, 80035e4 <_Balloc+0x28>
 80035c6:	2010      	movs	r0, #16
 80035c8:	f7ff ffe2 	bl	8003590 <malloc>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6260      	str	r0, [r4, #36]	; 0x24
 80035d0:	b920      	cbnz	r0, 80035dc <_Balloc+0x20>
 80035d2:	4b18      	ldr	r3, [pc, #96]	; (8003634 <_Balloc+0x78>)
 80035d4:	4818      	ldr	r0, [pc, #96]	; (8003638 <_Balloc+0x7c>)
 80035d6:	2166      	movs	r1, #102	; 0x66
 80035d8:	f000 fc38 	bl	8003e4c <__assert_func>
 80035dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80035e0:	6006      	str	r6, [r0, #0]
 80035e2:	60c6      	str	r6, [r0, #12]
 80035e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80035e6:	68f3      	ldr	r3, [r6, #12]
 80035e8:	b183      	cbz	r3, 800360c <_Balloc+0x50>
 80035ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80035f2:	b9b8      	cbnz	r0, 8003624 <_Balloc+0x68>
 80035f4:	2101      	movs	r1, #1
 80035f6:	fa01 f605 	lsl.w	r6, r1, r5
 80035fa:	1d72      	adds	r2, r6, #5
 80035fc:	0092      	lsls	r2, r2, #2
 80035fe:	4620      	mov	r0, r4
 8003600:	f000 fb5a 	bl	8003cb8 <_calloc_r>
 8003604:	b160      	cbz	r0, 8003620 <_Balloc+0x64>
 8003606:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800360a:	e00e      	b.n	800362a <_Balloc+0x6e>
 800360c:	2221      	movs	r2, #33	; 0x21
 800360e:	2104      	movs	r1, #4
 8003610:	4620      	mov	r0, r4
 8003612:	f000 fb51 	bl	8003cb8 <_calloc_r>
 8003616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003618:	60f0      	str	r0, [r6, #12]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e4      	bne.n	80035ea <_Balloc+0x2e>
 8003620:	2000      	movs	r0, #0
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	6802      	ldr	r2, [r0, #0]
 8003626:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800362a:	2300      	movs	r3, #0
 800362c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003630:	e7f7      	b.n	8003622 <_Balloc+0x66>
 8003632:	bf00      	nop
 8003634:	08004a6d 	.word	0x08004a6d
 8003638:	08004af4 	.word	0x08004af4

0800363c <_Bfree>:
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003640:	4605      	mov	r5, r0
 8003642:	460c      	mov	r4, r1
 8003644:	b976      	cbnz	r6, 8003664 <_Bfree+0x28>
 8003646:	2010      	movs	r0, #16
 8003648:	f7ff ffa2 	bl	8003590 <malloc>
 800364c:	4602      	mov	r2, r0
 800364e:	6268      	str	r0, [r5, #36]	; 0x24
 8003650:	b920      	cbnz	r0, 800365c <_Bfree+0x20>
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <_Bfree+0x3c>)
 8003654:	4809      	ldr	r0, [pc, #36]	; (800367c <_Bfree+0x40>)
 8003656:	218a      	movs	r1, #138	; 0x8a
 8003658:	f000 fbf8 	bl	8003e4c <__assert_func>
 800365c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003660:	6006      	str	r6, [r0, #0]
 8003662:	60c6      	str	r6, [r0, #12]
 8003664:	b13c      	cbz	r4, 8003676 <_Bfree+0x3a>
 8003666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003668:	6862      	ldr	r2, [r4, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003670:	6021      	str	r1, [r4, #0]
 8003672:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003676:	bd70      	pop	{r4, r5, r6, pc}
 8003678:	08004a6d 	.word	0x08004a6d
 800367c:	08004af4 	.word	0x08004af4

08003680 <__multadd>:
 8003680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003684:	690e      	ldr	r6, [r1, #16]
 8003686:	4607      	mov	r7, r0
 8003688:	4698      	mov	r8, r3
 800368a:	460c      	mov	r4, r1
 800368c:	f101 0014 	add.w	r0, r1, #20
 8003690:	2300      	movs	r3, #0
 8003692:	6805      	ldr	r5, [r0, #0]
 8003694:	b2a9      	uxth	r1, r5
 8003696:	fb02 8101 	mla	r1, r2, r1, r8
 800369a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800369e:	0c2d      	lsrs	r5, r5, #16
 80036a0:	fb02 c505 	mla	r5, r2, r5, ip
 80036a4:	b289      	uxth	r1, r1
 80036a6:	3301      	adds	r3, #1
 80036a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80036ac:	429e      	cmp	r6, r3
 80036ae:	f840 1b04 	str.w	r1, [r0], #4
 80036b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80036b6:	dcec      	bgt.n	8003692 <__multadd+0x12>
 80036b8:	f1b8 0f00 	cmp.w	r8, #0
 80036bc:	d022      	beq.n	8003704 <__multadd+0x84>
 80036be:	68a3      	ldr	r3, [r4, #8]
 80036c0:	42b3      	cmp	r3, r6
 80036c2:	dc19      	bgt.n	80036f8 <__multadd+0x78>
 80036c4:	6861      	ldr	r1, [r4, #4]
 80036c6:	4638      	mov	r0, r7
 80036c8:	3101      	adds	r1, #1
 80036ca:	f7ff ff77 	bl	80035bc <_Balloc>
 80036ce:	4605      	mov	r5, r0
 80036d0:	b928      	cbnz	r0, 80036de <__multadd+0x5e>
 80036d2:	4602      	mov	r2, r0
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <__multadd+0x8c>)
 80036d6:	480e      	ldr	r0, [pc, #56]	; (8003710 <__multadd+0x90>)
 80036d8:	21b5      	movs	r1, #181	; 0xb5
 80036da:	f000 fbb7 	bl	8003e4c <__assert_func>
 80036de:	6922      	ldr	r2, [r4, #16]
 80036e0:	3202      	adds	r2, #2
 80036e2:	f104 010c 	add.w	r1, r4, #12
 80036e6:	0092      	lsls	r2, r2, #2
 80036e8:	300c      	adds	r0, #12
 80036ea:	f7ff ff59 	bl	80035a0 <memcpy>
 80036ee:	4621      	mov	r1, r4
 80036f0:	4638      	mov	r0, r7
 80036f2:	f7ff ffa3 	bl	800363c <_Bfree>
 80036f6:	462c      	mov	r4, r5
 80036f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80036fc:	3601      	adds	r6, #1
 80036fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8003702:	6126      	str	r6, [r4, #16]
 8003704:	4620      	mov	r0, r4
 8003706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800370a:	bf00      	nop
 800370c:	08004ae3 	.word	0x08004ae3
 8003710:	08004af4 	.word	0x08004af4

08003714 <__hi0bits>:
 8003714:	0c03      	lsrs	r3, r0, #16
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	b9d3      	cbnz	r3, 8003750 <__hi0bits+0x3c>
 800371a:	0400      	lsls	r0, r0, #16
 800371c:	2310      	movs	r3, #16
 800371e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003722:	bf04      	itt	eq
 8003724:	0200      	lsleq	r0, r0, #8
 8003726:	3308      	addeq	r3, #8
 8003728:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800372c:	bf04      	itt	eq
 800372e:	0100      	lsleq	r0, r0, #4
 8003730:	3304      	addeq	r3, #4
 8003732:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003736:	bf04      	itt	eq
 8003738:	0080      	lsleq	r0, r0, #2
 800373a:	3302      	addeq	r3, #2
 800373c:	2800      	cmp	r0, #0
 800373e:	db05      	blt.n	800374c <__hi0bits+0x38>
 8003740:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003744:	f103 0301 	add.w	r3, r3, #1
 8003748:	bf08      	it	eq
 800374a:	2320      	moveq	r3, #32
 800374c:	4618      	mov	r0, r3
 800374e:	4770      	bx	lr
 8003750:	2300      	movs	r3, #0
 8003752:	e7e4      	b.n	800371e <__hi0bits+0xa>

08003754 <__lo0bits>:
 8003754:	6803      	ldr	r3, [r0, #0]
 8003756:	f013 0207 	ands.w	r2, r3, #7
 800375a:	4601      	mov	r1, r0
 800375c:	d00b      	beq.n	8003776 <__lo0bits+0x22>
 800375e:	07da      	lsls	r2, r3, #31
 8003760:	d424      	bmi.n	80037ac <__lo0bits+0x58>
 8003762:	0798      	lsls	r0, r3, #30
 8003764:	bf49      	itett	mi
 8003766:	085b      	lsrmi	r3, r3, #1
 8003768:	089b      	lsrpl	r3, r3, #2
 800376a:	2001      	movmi	r0, #1
 800376c:	600b      	strmi	r3, [r1, #0]
 800376e:	bf5c      	itt	pl
 8003770:	600b      	strpl	r3, [r1, #0]
 8003772:	2002      	movpl	r0, #2
 8003774:	4770      	bx	lr
 8003776:	b298      	uxth	r0, r3
 8003778:	b9b0      	cbnz	r0, 80037a8 <__lo0bits+0x54>
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	2010      	movs	r0, #16
 800377e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003782:	bf04      	itt	eq
 8003784:	0a1b      	lsreq	r3, r3, #8
 8003786:	3008      	addeq	r0, #8
 8003788:	071a      	lsls	r2, r3, #28
 800378a:	bf04      	itt	eq
 800378c:	091b      	lsreq	r3, r3, #4
 800378e:	3004      	addeq	r0, #4
 8003790:	079a      	lsls	r2, r3, #30
 8003792:	bf04      	itt	eq
 8003794:	089b      	lsreq	r3, r3, #2
 8003796:	3002      	addeq	r0, #2
 8003798:	07da      	lsls	r2, r3, #31
 800379a:	d403      	bmi.n	80037a4 <__lo0bits+0x50>
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	f100 0001 	add.w	r0, r0, #1
 80037a2:	d005      	beq.n	80037b0 <__lo0bits+0x5c>
 80037a4:	600b      	str	r3, [r1, #0]
 80037a6:	4770      	bx	lr
 80037a8:	4610      	mov	r0, r2
 80037aa:	e7e8      	b.n	800377e <__lo0bits+0x2a>
 80037ac:	2000      	movs	r0, #0
 80037ae:	4770      	bx	lr
 80037b0:	2020      	movs	r0, #32
 80037b2:	4770      	bx	lr

080037b4 <__i2b>:
 80037b4:	b510      	push	{r4, lr}
 80037b6:	460c      	mov	r4, r1
 80037b8:	2101      	movs	r1, #1
 80037ba:	f7ff feff 	bl	80035bc <_Balloc>
 80037be:	4602      	mov	r2, r0
 80037c0:	b928      	cbnz	r0, 80037ce <__i2b+0x1a>
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <__i2b+0x24>)
 80037c4:	4805      	ldr	r0, [pc, #20]	; (80037dc <__i2b+0x28>)
 80037c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80037ca:	f000 fb3f 	bl	8003e4c <__assert_func>
 80037ce:	2301      	movs	r3, #1
 80037d0:	6144      	str	r4, [r0, #20]
 80037d2:	6103      	str	r3, [r0, #16]
 80037d4:	bd10      	pop	{r4, pc}
 80037d6:	bf00      	nop
 80037d8:	08004ae3 	.word	0x08004ae3
 80037dc:	08004af4 	.word	0x08004af4

080037e0 <__multiply>:
 80037e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e4:	4614      	mov	r4, r2
 80037e6:	690a      	ldr	r2, [r1, #16]
 80037e8:	6923      	ldr	r3, [r4, #16]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	bfb8      	it	lt
 80037ee:	460b      	movlt	r3, r1
 80037f0:	460d      	mov	r5, r1
 80037f2:	bfbc      	itt	lt
 80037f4:	4625      	movlt	r5, r4
 80037f6:	461c      	movlt	r4, r3
 80037f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80037fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003800:	68ab      	ldr	r3, [r5, #8]
 8003802:	6869      	ldr	r1, [r5, #4]
 8003804:	eb0a 0709 	add.w	r7, sl, r9
 8003808:	42bb      	cmp	r3, r7
 800380a:	b085      	sub	sp, #20
 800380c:	bfb8      	it	lt
 800380e:	3101      	addlt	r1, #1
 8003810:	f7ff fed4 	bl	80035bc <_Balloc>
 8003814:	b930      	cbnz	r0, 8003824 <__multiply+0x44>
 8003816:	4602      	mov	r2, r0
 8003818:	4b42      	ldr	r3, [pc, #264]	; (8003924 <__multiply+0x144>)
 800381a:	4843      	ldr	r0, [pc, #268]	; (8003928 <__multiply+0x148>)
 800381c:	f240 115d 	movw	r1, #349	; 0x15d
 8003820:	f000 fb14 	bl	8003e4c <__assert_func>
 8003824:	f100 0614 	add.w	r6, r0, #20
 8003828:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800382c:	4633      	mov	r3, r6
 800382e:	2200      	movs	r2, #0
 8003830:	4543      	cmp	r3, r8
 8003832:	d31e      	bcc.n	8003872 <__multiply+0x92>
 8003834:	f105 0c14 	add.w	ip, r5, #20
 8003838:	f104 0314 	add.w	r3, r4, #20
 800383c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003840:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8003844:	9202      	str	r2, [sp, #8]
 8003846:	ebac 0205 	sub.w	r2, ip, r5
 800384a:	3a15      	subs	r2, #21
 800384c:	f022 0203 	bic.w	r2, r2, #3
 8003850:	3204      	adds	r2, #4
 8003852:	f105 0115 	add.w	r1, r5, #21
 8003856:	458c      	cmp	ip, r1
 8003858:	bf38      	it	cc
 800385a:	2204      	movcc	r2, #4
 800385c:	9201      	str	r2, [sp, #4]
 800385e:	9a02      	ldr	r2, [sp, #8]
 8003860:	9303      	str	r3, [sp, #12]
 8003862:	429a      	cmp	r2, r3
 8003864:	d808      	bhi.n	8003878 <__multiply+0x98>
 8003866:	2f00      	cmp	r7, #0
 8003868:	dc55      	bgt.n	8003916 <__multiply+0x136>
 800386a:	6107      	str	r7, [r0, #16]
 800386c:	b005      	add	sp, #20
 800386e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003872:	f843 2b04 	str.w	r2, [r3], #4
 8003876:	e7db      	b.n	8003830 <__multiply+0x50>
 8003878:	f8b3 a000 	ldrh.w	sl, [r3]
 800387c:	f1ba 0f00 	cmp.w	sl, #0
 8003880:	d020      	beq.n	80038c4 <__multiply+0xe4>
 8003882:	f105 0e14 	add.w	lr, r5, #20
 8003886:	46b1      	mov	r9, r6
 8003888:	2200      	movs	r2, #0
 800388a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800388e:	f8d9 b000 	ldr.w	fp, [r9]
 8003892:	b2a1      	uxth	r1, r4
 8003894:	fa1f fb8b 	uxth.w	fp, fp
 8003898:	fb0a b101 	mla	r1, sl, r1, fp
 800389c:	4411      	add	r1, r2
 800389e:	f8d9 2000 	ldr.w	r2, [r9]
 80038a2:	0c24      	lsrs	r4, r4, #16
 80038a4:	0c12      	lsrs	r2, r2, #16
 80038a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80038aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80038ae:	b289      	uxth	r1, r1
 80038b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80038b4:	45f4      	cmp	ip, lr
 80038b6:	f849 1b04 	str.w	r1, [r9], #4
 80038ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80038be:	d8e4      	bhi.n	800388a <__multiply+0xaa>
 80038c0:	9901      	ldr	r1, [sp, #4]
 80038c2:	5072      	str	r2, [r6, r1]
 80038c4:	9a03      	ldr	r2, [sp, #12]
 80038c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80038ca:	3304      	adds	r3, #4
 80038cc:	f1b9 0f00 	cmp.w	r9, #0
 80038d0:	d01f      	beq.n	8003912 <__multiply+0x132>
 80038d2:	6834      	ldr	r4, [r6, #0]
 80038d4:	f105 0114 	add.w	r1, r5, #20
 80038d8:	46b6      	mov	lr, r6
 80038da:	f04f 0a00 	mov.w	sl, #0
 80038de:	880a      	ldrh	r2, [r1, #0]
 80038e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80038e4:	fb09 b202 	mla	r2, r9, r2, fp
 80038e8:	4492      	add	sl, r2
 80038ea:	b2a4      	uxth	r4, r4
 80038ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80038f0:	f84e 4b04 	str.w	r4, [lr], #4
 80038f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80038f8:	f8be 2000 	ldrh.w	r2, [lr]
 80038fc:	0c24      	lsrs	r4, r4, #16
 80038fe:	fb09 2404 	mla	r4, r9, r4, r2
 8003902:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8003906:	458c      	cmp	ip, r1
 8003908:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800390c:	d8e7      	bhi.n	80038de <__multiply+0xfe>
 800390e:	9a01      	ldr	r2, [sp, #4]
 8003910:	50b4      	str	r4, [r6, r2]
 8003912:	3604      	adds	r6, #4
 8003914:	e7a3      	b.n	800385e <__multiply+0x7e>
 8003916:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1a5      	bne.n	800386a <__multiply+0x8a>
 800391e:	3f01      	subs	r7, #1
 8003920:	e7a1      	b.n	8003866 <__multiply+0x86>
 8003922:	bf00      	nop
 8003924:	08004ae3 	.word	0x08004ae3
 8003928:	08004af4 	.word	0x08004af4

0800392c <__pow5mult>:
 800392c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003930:	4615      	mov	r5, r2
 8003932:	f012 0203 	ands.w	r2, r2, #3
 8003936:	4606      	mov	r6, r0
 8003938:	460f      	mov	r7, r1
 800393a:	d007      	beq.n	800394c <__pow5mult+0x20>
 800393c:	4c25      	ldr	r4, [pc, #148]	; (80039d4 <__pow5mult+0xa8>)
 800393e:	3a01      	subs	r2, #1
 8003940:	2300      	movs	r3, #0
 8003942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003946:	f7ff fe9b 	bl	8003680 <__multadd>
 800394a:	4607      	mov	r7, r0
 800394c:	10ad      	asrs	r5, r5, #2
 800394e:	d03d      	beq.n	80039cc <__pow5mult+0xa0>
 8003950:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003952:	b97c      	cbnz	r4, 8003974 <__pow5mult+0x48>
 8003954:	2010      	movs	r0, #16
 8003956:	f7ff fe1b 	bl	8003590 <malloc>
 800395a:	4602      	mov	r2, r0
 800395c:	6270      	str	r0, [r6, #36]	; 0x24
 800395e:	b928      	cbnz	r0, 800396c <__pow5mult+0x40>
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <__pow5mult+0xac>)
 8003962:	481e      	ldr	r0, [pc, #120]	; (80039dc <__pow5mult+0xb0>)
 8003964:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003968:	f000 fa70 	bl	8003e4c <__assert_func>
 800396c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003970:	6004      	str	r4, [r0, #0]
 8003972:	60c4      	str	r4, [r0, #12]
 8003974:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800397c:	b94c      	cbnz	r4, 8003992 <__pow5mult+0x66>
 800397e:	f240 2171 	movw	r1, #625	; 0x271
 8003982:	4630      	mov	r0, r6
 8003984:	f7ff ff16 	bl	80037b4 <__i2b>
 8003988:	2300      	movs	r3, #0
 800398a:	f8c8 0008 	str.w	r0, [r8, #8]
 800398e:	4604      	mov	r4, r0
 8003990:	6003      	str	r3, [r0, #0]
 8003992:	f04f 0900 	mov.w	r9, #0
 8003996:	07eb      	lsls	r3, r5, #31
 8003998:	d50a      	bpl.n	80039b0 <__pow5mult+0x84>
 800399a:	4639      	mov	r1, r7
 800399c:	4622      	mov	r2, r4
 800399e:	4630      	mov	r0, r6
 80039a0:	f7ff ff1e 	bl	80037e0 <__multiply>
 80039a4:	4639      	mov	r1, r7
 80039a6:	4680      	mov	r8, r0
 80039a8:	4630      	mov	r0, r6
 80039aa:	f7ff fe47 	bl	800363c <_Bfree>
 80039ae:	4647      	mov	r7, r8
 80039b0:	106d      	asrs	r5, r5, #1
 80039b2:	d00b      	beq.n	80039cc <__pow5mult+0xa0>
 80039b4:	6820      	ldr	r0, [r4, #0]
 80039b6:	b938      	cbnz	r0, 80039c8 <__pow5mult+0x9c>
 80039b8:	4622      	mov	r2, r4
 80039ba:	4621      	mov	r1, r4
 80039bc:	4630      	mov	r0, r6
 80039be:	f7ff ff0f 	bl	80037e0 <__multiply>
 80039c2:	6020      	str	r0, [r4, #0]
 80039c4:	f8c0 9000 	str.w	r9, [r0]
 80039c8:	4604      	mov	r4, r0
 80039ca:	e7e4      	b.n	8003996 <__pow5mult+0x6a>
 80039cc:	4638      	mov	r0, r7
 80039ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039d2:	bf00      	nop
 80039d4:	08004c48 	.word	0x08004c48
 80039d8:	08004a6d 	.word	0x08004a6d
 80039dc:	08004af4 	.word	0x08004af4

080039e0 <__lshift>:
 80039e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e4:	460c      	mov	r4, r1
 80039e6:	6849      	ldr	r1, [r1, #4]
 80039e8:	6923      	ldr	r3, [r4, #16]
 80039ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80039ee:	68a3      	ldr	r3, [r4, #8]
 80039f0:	4607      	mov	r7, r0
 80039f2:	4691      	mov	r9, r2
 80039f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80039f8:	f108 0601 	add.w	r6, r8, #1
 80039fc:	42b3      	cmp	r3, r6
 80039fe:	db0b      	blt.n	8003a18 <__lshift+0x38>
 8003a00:	4638      	mov	r0, r7
 8003a02:	f7ff fddb 	bl	80035bc <_Balloc>
 8003a06:	4605      	mov	r5, r0
 8003a08:	b948      	cbnz	r0, 8003a1e <__lshift+0x3e>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <__lshift+0xd0>)
 8003a0e:	4829      	ldr	r0, [pc, #164]	; (8003ab4 <__lshift+0xd4>)
 8003a10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003a14:	f000 fa1a 	bl	8003e4c <__assert_func>
 8003a18:	3101      	adds	r1, #1
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	e7ee      	b.n	80039fc <__lshift+0x1c>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f100 0114 	add.w	r1, r0, #20
 8003a24:	f100 0210 	add.w	r2, r0, #16
 8003a28:	4618      	mov	r0, r3
 8003a2a:	4553      	cmp	r3, sl
 8003a2c:	db33      	blt.n	8003a96 <__lshift+0xb6>
 8003a2e:	6920      	ldr	r0, [r4, #16]
 8003a30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003a34:	f104 0314 	add.w	r3, r4, #20
 8003a38:	f019 091f 	ands.w	r9, r9, #31
 8003a3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003a40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003a44:	d02b      	beq.n	8003a9e <__lshift+0xbe>
 8003a46:	f1c9 0e20 	rsb	lr, r9, #32
 8003a4a:	468a      	mov	sl, r1
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	fa00 f009 	lsl.w	r0, r0, r9
 8003a54:	4302      	orrs	r2, r0
 8003a56:	f84a 2b04 	str.w	r2, [sl], #4
 8003a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a5e:	459c      	cmp	ip, r3
 8003a60:	fa22 f20e 	lsr.w	r2, r2, lr
 8003a64:	d8f3      	bhi.n	8003a4e <__lshift+0x6e>
 8003a66:	ebac 0304 	sub.w	r3, ip, r4
 8003a6a:	3b15      	subs	r3, #21
 8003a6c:	f023 0303 	bic.w	r3, r3, #3
 8003a70:	3304      	adds	r3, #4
 8003a72:	f104 0015 	add.w	r0, r4, #21
 8003a76:	4584      	cmp	ip, r0
 8003a78:	bf38      	it	cc
 8003a7a:	2304      	movcc	r3, #4
 8003a7c:	50ca      	str	r2, [r1, r3]
 8003a7e:	b10a      	cbz	r2, 8003a84 <__lshift+0xa4>
 8003a80:	f108 0602 	add.w	r6, r8, #2
 8003a84:	3e01      	subs	r6, #1
 8003a86:	4638      	mov	r0, r7
 8003a88:	612e      	str	r6, [r5, #16]
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	f7ff fdd6 	bl	800363c <_Bfree>
 8003a90:	4628      	mov	r0, r5
 8003a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a96:	f842 0f04 	str.w	r0, [r2, #4]!
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	e7c5      	b.n	8003a2a <__lshift+0x4a>
 8003a9e:	3904      	subs	r1, #4
 8003aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003aa4:	f841 2f04 	str.w	r2, [r1, #4]!
 8003aa8:	459c      	cmp	ip, r3
 8003aaa:	d8f9      	bhi.n	8003aa0 <__lshift+0xc0>
 8003aac:	e7ea      	b.n	8003a84 <__lshift+0xa4>
 8003aae:	bf00      	nop
 8003ab0:	08004ae3 	.word	0x08004ae3
 8003ab4:	08004af4 	.word	0x08004af4

08003ab8 <__mcmp>:
 8003ab8:	b530      	push	{r4, r5, lr}
 8003aba:	6902      	ldr	r2, [r0, #16]
 8003abc:	690c      	ldr	r4, [r1, #16]
 8003abe:	1b12      	subs	r2, r2, r4
 8003ac0:	d10e      	bne.n	8003ae0 <__mcmp+0x28>
 8003ac2:	f100 0314 	add.w	r3, r0, #20
 8003ac6:	3114      	adds	r1, #20
 8003ac8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003acc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003ad0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003ad4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003ad8:	42a5      	cmp	r5, r4
 8003ada:	d003      	beq.n	8003ae4 <__mcmp+0x2c>
 8003adc:	d305      	bcc.n	8003aea <__mcmp+0x32>
 8003ade:	2201      	movs	r2, #1
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	bd30      	pop	{r4, r5, pc}
 8003ae4:	4283      	cmp	r3, r0
 8003ae6:	d3f3      	bcc.n	8003ad0 <__mcmp+0x18>
 8003ae8:	e7fa      	b.n	8003ae0 <__mcmp+0x28>
 8003aea:	f04f 32ff 	mov.w	r2, #4294967295
 8003aee:	e7f7      	b.n	8003ae0 <__mcmp+0x28>

08003af0 <__mdiff>:
 8003af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af4:	460c      	mov	r4, r1
 8003af6:	4606      	mov	r6, r0
 8003af8:	4611      	mov	r1, r2
 8003afa:	4620      	mov	r0, r4
 8003afc:	4617      	mov	r7, r2
 8003afe:	f7ff ffdb 	bl	8003ab8 <__mcmp>
 8003b02:	1e05      	subs	r5, r0, #0
 8003b04:	d110      	bne.n	8003b28 <__mdiff+0x38>
 8003b06:	4629      	mov	r1, r5
 8003b08:	4630      	mov	r0, r6
 8003b0a:	f7ff fd57 	bl	80035bc <_Balloc>
 8003b0e:	b930      	cbnz	r0, 8003b1e <__mdiff+0x2e>
 8003b10:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <__mdiff+0x108>)
 8003b12:	4602      	mov	r2, r0
 8003b14:	f240 2132 	movw	r1, #562	; 0x232
 8003b18:	4838      	ldr	r0, [pc, #224]	; (8003bfc <__mdiff+0x10c>)
 8003b1a:	f000 f997 	bl	8003e4c <__assert_func>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b28:	bfa4      	itt	ge
 8003b2a:	463b      	movge	r3, r7
 8003b2c:	4627      	movge	r7, r4
 8003b2e:	4630      	mov	r0, r6
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	bfa6      	itte	ge
 8003b34:	461c      	movge	r4, r3
 8003b36:	2500      	movge	r5, #0
 8003b38:	2501      	movlt	r5, #1
 8003b3a:	f7ff fd3f 	bl	80035bc <_Balloc>
 8003b3e:	b920      	cbnz	r0, 8003b4a <__mdiff+0x5a>
 8003b40:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <__mdiff+0x108>)
 8003b42:	4602      	mov	r2, r0
 8003b44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003b48:	e7e6      	b.n	8003b18 <__mdiff+0x28>
 8003b4a:	693e      	ldr	r6, [r7, #16]
 8003b4c:	60c5      	str	r5, [r0, #12]
 8003b4e:	6925      	ldr	r5, [r4, #16]
 8003b50:	f107 0114 	add.w	r1, r7, #20
 8003b54:	f104 0914 	add.w	r9, r4, #20
 8003b58:	f100 0e14 	add.w	lr, r0, #20
 8003b5c:	f107 0210 	add.w	r2, r7, #16
 8003b60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8003b64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8003b68:	46f2      	mov	sl, lr
 8003b6a:	2700      	movs	r7, #0
 8003b6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8003b70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003b74:	fa1f f883 	uxth.w	r8, r3
 8003b78:	fa17 f78b 	uxtah	r7, r7, fp
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	eba7 0808 	sub.w	r8, r7, r8
 8003b82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003b86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003b8a:	fa1f f888 	uxth.w	r8, r8
 8003b8e:	141f      	asrs	r7, r3, #16
 8003b90:	454d      	cmp	r5, r9
 8003b92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003b96:	f84a 3b04 	str.w	r3, [sl], #4
 8003b9a:	d8e7      	bhi.n	8003b6c <__mdiff+0x7c>
 8003b9c:	1b2b      	subs	r3, r5, r4
 8003b9e:	3b15      	subs	r3, #21
 8003ba0:	f023 0303 	bic.w	r3, r3, #3
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	3415      	adds	r4, #21
 8003ba8:	42a5      	cmp	r5, r4
 8003baa:	bf38      	it	cc
 8003bac:	2304      	movcc	r3, #4
 8003bae:	4419      	add	r1, r3
 8003bb0:	4473      	add	r3, lr
 8003bb2:	469e      	mov	lr, r3
 8003bb4:	460d      	mov	r5, r1
 8003bb6:	4565      	cmp	r5, ip
 8003bb8:	d30e      	bcc.n	8003bd8 <__mdiff+0xe8>
 8003bba:	f10c 0203 	add.w	r2, ip, #3
 8003bbe:	1a52      	subs	r2, r2, r1
 8003bc0:	f022 0203 	bic.w	r2, r2, #3
 8003bc4:	3903      	subs	r1, #3
 8003bc6:	458c      	cmp	ip, r1
 8003bc8:	bf38      	it	cc
 8003bca:	2200      	movcc	r2, #0
 8003bcc:	441a      	add	r2, r3
 8003bce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8003bd2:	b17b      	cbz	r3, 8003bf4 <__mdiff+0x104>
 8003bd4:	6106      	str	r6, [r0, #16]
 8003bd6:	e7a5      	b.n	8003b24 <__mdiff+0x34>
 8003bd8:	f855 8b04 	ldr.w	r8, [r5], #4
 8003bdc:	fa17 f488 	uxtah	r4, r7, r8
 8003be0:	1422      	asrs	r2, r4, #16
 8003be2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8003be6:	b2a4      	uxth	r4, r4
 8003be8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003bec:	f84e 4b04 	str.w	r4, [lr], #4
 8003bf0:	1417      	asrs	r7, r2, #16
 8003bf2:	e7e0      	b.n	8003bb6 <__mdiff+0xc6>
 8003bf4:	3e01      	subs	r6, #1
 8003bf6:	e7ea      	b.n	8003bce <__mdiff+0xde>
 8003bf8:	08004ae3 	.word	0x08004ae3
 8003bfc:	08004af4 	.word	0x08004af4

08003c00 <__d2b>:
 8003c00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c04:	4689      	mov	r9, r1
 8003c06:	2101      	movs	r1, #1
 8003c08:	ec57 6b10 	vmov	r6, r7, d0
 8003c0c:	4690      	mov	r8, r2
 8003c0e:	f7ff fcd5 	bl	80035bc <_Balloc>
 8003c12:	4604      	mov	r4, r0
 8003c14:	b930      	cbnz	r0, 8003c24 <__d2b+0x24>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4b25      	ldr	r3, [pc, #148]	; (8003cb0 <__d2b+0xb0>)
 8003c1a:	4826      	ldr	r0, [pc, #152]	; (8003cb4 <__d2b+0xb4>)
 8003c1c:	f240 310a 	movw	r1, #778	; 0x30a
 8003c20:	f000 f914 	bl	8003e4c <__assert_func>
 8003c24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8003c28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003c2c:	bb35      	cbnz	r5, 8003c7c <__d2b+0x7c>
 8003c2e:	2e00      	cmp	r6, #0
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	d028      	beq.n	8003c86 <__d2b+0x86>
 8003c34:	4668      	mov	r0, sp
 8003c36:	9600      	str	r6, [sp, #0]
 8003c38:	f7ff fd8c 	bl	8003754 <__lo0bits>
 8003c3c:	9900      	ldr	r1, [sp, #0]
 8003c3e:	b300      	cbz	r0, 8003c82 <__d2b+0x82>
 8003c40:	9a01      	ldr	r2, [sp, #4]
 8003c42:	f1c0 0320 	rsb	r3, r0, #32
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	40c2      	lsrs	r2, r0
 8003c4e:	6163      	str	r3, [r4, #20]
 8003c50:	9201      	str	r2, [sp, #4]
 8003c52:	9b01      	ldr	r3, [sp, #4]
 8003c54:	61a3      	str	r3, [r4, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bf14      	ite	ne
 8003c5a:	2202      	movne	r2, #2
 8003c5c:	2201      	moveq	r2, #1
 8003c5e:	6122      	str	r2, [r4, #16]
 8003c60:	b1d5      	cbz	r5, 8003c98 <__d2b+0x98>
 8003c62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003c66:	4405      	add	r5, r0
 8003c68:	f8c9 5000 	str.w	r5, [r9]
 8003c6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003c70:	f8c8 0000 	str.w	r0, [r8]
 8003c74:	4620      	mov	r0, r4
 8003c76:	b003      	add	sp, #12
 8003c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c80:	e7d5      	b.n	8003c2e <__d2b+0x2e>
 8003c82:	6161      	str	r1, [r4, #20]
 8003c84:	e7e5      	b.n	8003c52 <__d2b+0x52>
 8003c86:	a801      	add	r0, sp, #4
 8003c88:	f7ff fd64 	bl	8003754 <__lo0bits>
 8003c8c:	9b01      	ldr	r3, [sp, #4]
 8003c8e:	6163      	str	r3, [r4, #20]
 8003c90:	2201      	movs	r2, #1
 8003c92:	6122      	str	r2, [r4, #16]
 8003c94:	3020      	adds	r0, #32
 8003c96:	e7e3      	b.n	8003c60 <__d2b+0x60>
 8003c98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003c9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003ca0:	f8c9 0000 	str.w	r0, [r9]
 8003ca4:	6918      	ldr	r0, [r3, #16]
 8003ca6:	f7ff fd35 	bl	8003714 <__hi0bits>
 8003caa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003cae:	e7df      	b.n	8003c70 <__d2b+0x70>
 8003cb0:	08004ae3 	.word	0x08004ae3
 8003cb4:	08004af4 	.word	0x08004af4

08003cb8 <_calloc_r>:
 8003cb8:	b513      	push	{r0, r1, r4, lr}
 8003cba:	434a      	muls	r2, r1
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	9201      	str	r2, [sp, #4]
 8003cc0:	f000 f85a 	bl	8003d78 <_malloc_r>
 8003cc4:	4604      	mov	r4, r0
 8003cc6:	b118      	cbz	r0, 8003cd0 <_calloc_r+0x18>
 8003cc8:	9a01      	ldr	r2, [sp, #4]
 8003cca:	2100      	movs	r1, #0
 8003ccc:	f7fe f970 	bl	8001fb0 <memset>
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bd10      	pop	{r4, pc}
	...

08003cd8 <_free_r>:
 8003cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cda:	2900      	cmp	r1, #0
 8003cdc:	d048      	beq.n	8003d70 <_free_r+0x98>
 8003cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce2:	9001      	str	r0, [sp, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f1a1 0404 	sub.w	r4, r1, #4
 8003cea:	bfb8      	it	lt
 8003cec:	18e4      	addlt	r4, r4, r3
 8003cee:	f000 f8ef 	bl	8003ed0 <__malloc_lock>
 8003cf2:	4a20      	ldr	r2, [pc, #128]	; (8003d74 <_free_r+0x9c>)
 8003cf4:	9801      	ldr	r0, [sp, #4]
 8003cf6:	6813      	ldr	r3, [r2, #0]
 8003cf8:	4615      	mov	r5, r2
 8003cfa:	b933      	cbnz	r3, 8003d0a <_free_r+0x32>
 8003cfc:	6063      	str	r3, [r4, #4]
 8003cfe:	6014      	str	r4, [r2, #0]
 8003d00:	b003      	add	sp, #12
 8003d02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d06:	f000 b8e9 	b.w	8003edc <__malloc_unlock>
 8003d0a:	42a3      	cmp	r3, r4
 8003d0c:	d90b      	bls.n	8003d26 <_free_r+0x4e>
 8003d0e:	6821      	ldr	r1, [r4, #0]
 8003d10:	1862      	adds	r2, r4, r1
 8003d12:	4293      	cmp	r3, r2
 8003d14:	bf04      	itt	eq
 8003d16:	681a      	ldreq	r2, [r3, #0]
 8003d18:	685b      	ldreq	r3, [r3, #4]
 8003d1a:	6063      	str	r3, [r4, #4]
 8003d1c:	bf04      	itt	eq
 8003d1e:	1852      	addeq	r2, r2, r1
 8003d20:	6022      	streq	r2, [r4, #0]
 8003d22:	602c      	str	r4, [r5, #0]
 8003d24:	e7ec      	b.n	8003d00 <_free_r+0x28>
 8003d26:	461a      	mov	r2, r3
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b10b      	cbz	r3, 8003d30 <_free_r+0x58>
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	d9fa      	bls.n	8003d26 <_free_r+0x4e>
 8003d30:	6811      	ldr	r1, [r2, #0]
 8003d32:	1855      	adds	r5, r2, r1
 8003d34:	42a5      	cmp	r5, r4
 8003d36:	d10b      	bne.n	8003d50 <_free_r+0x78>
 8003d38:	6824      	ldr	r4, [r4, #0]
 8003d3a:	4421      	add	r1, r4
 8003d3c:	1854      	adds	r4, r2, r1
 8003d3e:	42a3      	cmp	r3, r4
 8003d40:	6011      	str	r1, [r2, #0]
 8003d42:	d1dd      	bne.n	8003d00 <_free_r+0x28>
 8003d44:	681c      	ldr	r4, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	6053      	str	r3, [r2, #4]
 8003d4a:	4421      	add	r1, r4
 8003d4c:	6011      	str	r1, [r2, #0]
 8003d4e:	e7d7      	b.n	8003d00 <_free_r+0x28>
 8003d50:	d902      	bls.n	8003d58 <_free_r+0x80>
 8003d52:	230c      	movs	r3, #12
 8003d54:	6003      	str	r3, [r0, #0]
 8003d56:	e7d3      	b.n	8003d00 <_free_r+0x28>
 8003d58:	6825      	ldr	r5, [r4, #0]
 8003d5a:	1961      	adds	r1, r4, r5
 8003d5c:	428b      	cmp	r3, r1
 8003d5e:	bf04      	itt	eq
 8003d60:	6819      	ldreq	r1, [r3, #0]
 8003d62:	685b      	ldreq	r3, [r3, #4]
 8003d64:	6063      	str	r3, [r4, #4]
 8003d66:	bf04      	itt	eq
 8003d68:	1949      	addeq	r1, r1, r5
 8003d6a:	6021      	streq	r1, [r4, #0]
 8003d6c:	6054      	str	r4, [r2, #4]
 8003d6e:	e7c7      	b.n	8003d00 <_free_r+0x28>
 8003d70:	b003      	add	sp, #12
 8003d72:	bd30      	pop	{r4, r5, pc}
 8003d74:	20000214 	.word	0x20000214

08003d78 <_malloc_r>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	1ccd      	adds	r5, r1, #3
 8003d7c:	f025 0503 	bic.w	r5, r5, #3
 8003d80:	3508      	adds	r5, #8
 8003d82:	2d0c      	cmp	r5, #12
 8003d84:	bf38      	it	cc
 8003d86:	250c      	movcc	r5, #12
 8003d88:	2d00      	cmp	r5, #0
 8003d8a:	4606      	mov	r6, r0
 8003d8c:	db01      	blt.n	8003d92 <_malloc_r+0x1a>
 8003d8e:	42a9      	cmp	r1, r5
 8003d90:	d903      	bls.n	8003d9a <_malloc_r+0x22>
 8003d92:	230c      	movs	r3, #12
 8003d94:	6033      	str	r3, [r6, #0]
 8003d96:	2000      	movs	r0, #0
 8003d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d9a:	f000 f899 	bl	8003ed0 <__malloc_lock>
 8003d9e:	4921      	ldr	r1, [pc, #132]	; (8003e24 <_malloc_r+0xac>)
 8003da0:	680a      	ldr	r2, [r1, #0]
 8003da2:	4614      	mov	r4, r2
 8003da4:	b99c      	cbnz	r4, 8003dce <_malloc_r+0x56>
 8003da6:	4f20      	ldr	r7, [pc, #128]	; (8003e28 <_malloc_r+0xb0>)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	b923      	cbnz	r3, 8003db6 <_malloc_r+0x3e>
 8003dac:	4621      	mov	r1, r4
 8003dae:	4630      	mov	r0, r6
 8003db0:	f000 f83c 	bl	8003e2c <_sbrk_r>
 8003db4:	6038      	str	r0, [r7, #0]
 8003db6:	4629      	mov	r1, r5
 8003db8:	4630      	mov	r0, r6
 8003dba:	f000 f837 	bl	8003e2c <_sbrk_r>
 8003dbe:	1c43      	adds	r3, r0, #1
 8003dc0:	d123      	bne.n	8003e0a <_malloc_r+0x92>
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	6033      	str	r3, [r6, #0]
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f000 f888 	bl	8003edc <__malloc_unlock>
 8003dcc:	e7e3      	b.n	8003d96 <_malloc_r+0x1e>
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	1b5b      	subs	r3, r3, r5
 8003dd2:	d417      	bmi.n	8003e04 <_malloc_r+0x8c>
 8003dd4:	2b0b      	cmp	r3, #11
 8003dd6:	d903      	bls.n	8003de0 <_malloc_r+0x68>
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	441c      	add	r4, r3
 8003ddc:	6025      	str	r5, [r4, #0]
 8003dde:	e004      	b.n	8003dea <_malloc_r+0x72>
 8003de0:	6863      	ldr	r3, [r4, #4]
 8003de2:	42a2      	cmp	r2, r4
 8003de4:	bf0c      	ite	eq
 8003de6:	600b      	streq	r3, [r1, #0]
 8003de8:	6053      	strne	r3, [r2, #4]
 8003dea:	4630      	mov	r0, r6
 8003dec:	f000 f876 	bl	8003edc <__malloc_unlock>
 8003df0:	f104 000b 	add.w	r0, r4, #11
 8003df4:	1d23      	adds	r3, r4, #4
 8003df6:	f020 0007 	bic.w	r0, r0, #7
 8003dfa:	1ac2      	subs	r2, r0, r3
 8003dfc:	d0cc      	beq.n	8003d98 <_malloc_r+0x20>
 8003dfe:	1a1b      	subs	r3, r3, r0
 8003e00:	50a3      	str	r3, [r4, r2]
 8003e02:	e7c9      	b.n	8003d98 <_malloc_r+0x20>
 8003e04:	4622      	mov	r2, r4
 8003e06:	6864      	ldr	r4, [r4, #4]
 8003e08:	e7cc      	b.n	8003da4 <_malloc_r+0x2c>
 8003e0a:	1cc4      	adds	r4, r0, #3
 8003e0c:	f024 0403 	bic.w	r4, r4, #3
 8003e10:	42a0      	cmp	r0, r4
 8003e12:	d0e3      	beq.n	8003ddc <_malloc_r+0x64>
 8003e14:	1a21      	subs	r1, r4, r0
 8003e16:	4630      	mov	r0, r6
 8003e18:	f000 f808 	bl	8003e2c <_sbrk_r>
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	d1dd      	bne.n	8003ddc <_malloc_r+0x64>
 8003e20:	e7cf      	b.n	8003dc2 <_malloc_r+0x4a>
 8003e22:	bf00      	nop
 8003e24:	20000214 	.word	0x20000214
 8003e28:	20000218 	.word	0x20000218

08003e2c <_sbrk_r>:
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	4d06      	ldr	r5, [pc, #24]	; (8003e48 <_sbrk_r+0x1c>)
 8003e30:	2300      	movs	r3, #0
 8003e32:	4604      	mov	r4, r0
 8003e34:	4608      	mov	r0, r1
 8003e36:	602b      	str	r3, [r5, #0]
 8003e38:	f000 fdcc 	bl	80049d4 <_sbrk>
 8003e3c:	1c43      	adds	r3, r0, #1
 8003e3e:	d102      	bne.n	8003e46 <_sbrk_r+0x1a>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	b103      	cbz	r3, 8003e46 <_sbrk_r+0x1a>
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	bd38      	pop	{r3, r4, r5, pc}
 8003e48:	20000268 	.word	0x20000268

08003e4c <__assert_func>:
 8003e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003e4e:	4614      	mov	r4, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <__assert_func+0x2c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4605      	mov	r5, r0
 8003e58:	68d8      	ldr	r0, [r3, #12]
 8003e5a:	b14c      	cbz	r4, 8003e70 <__assert_func+0x24>
 8003e5c:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <__assert_func+0x30>)
 8003e5e:	9100      	str	r1, [sp, #0]
 8003e60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003e64:	4906      	ldr	r1, [pc, #24]	; (8003e80 <__assert_func+0x34>)
 8003e66:	462b      	mov	r3, r5
 8003e68:	f000 f80e 	bl	8003e88 <fiprintf>
 8003e6c:	f000 fa64 	bl	8004338 <abort>
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <__assert_func+0x38>)
 8003e72:	461c      	mov	r4, r3
 8003e74:	e7f3      	b.n	8003e5e <__assert_func+0x12>
 8003e76:	bf00      	nop
 8003e78:	20000028 	.word	0x20000028
 8003e7c:	08004c54 	.word	0x08004c54
 8003e80:	08004c61 	.word	0x08004c61
 8003e84:	08004c8f 	.word	0x08004c8f

08003e88 <fiprintf>:
 8003e88:	b40e      	push	{r1, r2, r3}
 8003e8a:	b503      	push	{r0, r1, lr}
 8003e8c:	4601      	mov	r1, r0
 8003e8e:	ab03      	add	r3, sp, #12
 8003e90:	4805      	ldr	r0, [pc, #20]	; (8003ea8 <fiprintf+0x20>)
 8003e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e96:	6800      	ldr	r0, [r0, #0]
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	f000 f84f 	bl	8003f3c <_vfiprintf_r>
 8003e9e:	b002      	add	sp, #8
 8003ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ea4:	b003      	add	sp, #12
 8003ea6:	4770      	bx	lr
 8003ea8:	20000028 	.word	0x20000028

08003eac <__ascii_mbtowc>:
 8003eac:	b082      	sub	sp, #8
 8003eae:	b901      	cbnz	r1, 8003eb2 <__ascii_mbtowc+0x6>
 8003eb0:	a901      	add	r1, sp, #4
 8003eb2:	b142      	cbz	r2, 8003ec6 <__ascii_mbtowc+0x1a>
 8003eb4:	b14b      	cbz	r3, 8003eca <__ascii_mbtowc+0x1e>
 8003eb6:	7813      	ldrb	r3, [r2, #0]
 8003eb8:	600b      	str	r3, [r1, #0]
 8003eba:	7812      	ldrb	r2, [r2, #0]
 8003ebc:	1e10      	subs	r0, r2, #0
 8003ebe:	bf18      	it	ne
 8003ec0:	2001      	movne	r0, #1
 8003ec2:	b002      	add	sp, #8
 8003ec4:	4770      	bx	lr
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	e7fb      	b.n	8003ec2 <__ascii_mbtowc+0x16>
 8003eca:	f06f 0001 	mvn.w	r0, #1
 8003ece:	e7f8      	b.n	8003ec2 <__ascii_mbtowc+0x16>

08003ed0 <__malloc_lock>:
 8003ed0:	4801      	ldr	r0, [pc, #4]	; (8003ed8 <__malloc_lock+0x8>)
 8003ed2:	f000 bbf1 	b.w	80046b8 <__retarget_lock_acquire_recursive>
 8003ed6:	bf00      	nop
 8003ed8:	20000270 	.word	0x20000270

08003edc <__malloc_unlock>:
 8003edc:	4801      	ldr	r0, [pc, #4]	; (8003ee4 <__malloc_unlock+0x8>)
 8003ede:	f000 bbec 	b.w	80046ba <__retarget_lock_release_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	20000270 	.word	0x20000270

08003ee8 <__sfputc_r>:
 8003ee8:	6893      	ldr	r3, [r2, #8]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	b410      	push	{r4}
 8003ef0:	6093      	str	r3, [r2, #8]
 8003ef2:	da08      	bge.n	8003f06 <__sfputc_r+0x1e>
 8003ef4:	6994      	ldr	r4, [r2, #24]
 8003ef6:	42a3      	cmp	r3, r4
 8003ef8:	db01      	blt.n	8003efe <__sfputc_r+0x16>
 8003efa:	290a      	cmp	r1, #10
 8003efc:	d103      	bne.n	8003f06 <__sfputc_r+0x1e>
 8003efe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f02:	f000 b94b 	b.w	800419c <__swbuf_r>
 8003f06:	6813      	ldr	r3, [r2, #0]
 8003f08:	1c58      	adds	r0, r3, #1
 8003f0a:	6010      	str	r0, [r2, #0]
 8003f0c:	7019      	strb	r1, [r3, #0]
 8003f0e:	4608      	mov	r0, r1
 8003f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <__sfputs_r>:
 8003f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f18:	4606      	mov	r6, r0
 8003f1a:	460f      	mov	r7, r1
 8003f1c:	4614      	mov	r4, r2
 8003f1e:	18d5      	adds	r5, r2, r3
 8003f20:	42ac      	cmp	r4, r5
 8003f22:	d101      	bne.n	8003f28 <__sfputs_r+0x12>
 8003f24:	2000      	movs	r0, #0
 8003f26:	e007      	b.n	8003f38 <__sfputs_r+0x22>
 8003f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f2c:	463a      	mov	r2, r7
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f7ff ffda 	bl	8003ee8 <__sfputc_r>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d1f3      	bne.n	8003f20 <__sfputs_r+0xa>
 8003f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f3c <_vfiprintf_r>:
 8003f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f40:	460d      	mov	r5, r1
 8003f42:	b09d      	sub	sp, #116	; 0x74
 8003f44:	4614      	mov	r4, r2
 8003f46:	4698      	mov	r8, r3
 8003f48:	4606      	mov	r6, r0
 8003f4a:	b118      	cbz	r0, 8003f54 <_vfiprintf_r+0x18>
 8003f4c:	6983      	ldr	r3, [r0, #24]
 8003f4e:	b90b      	cbnz	r3, 8003f54 <_vfiprintf_r+0x18>
 8003f50:	f000 fb14 	bl	800457c <__sinit>
 8003f54:	4b89      	ldr	r3, [pc, #548]	; (800417c <_vfiprintf_r+0x240>)
 8003f56:	429d      	cmp	r5, r3
 8003f58:	d11b      	bne.n	8003f92 <_vfiprintf_r+0x56>
 8003f5a:	6875      	ldr	r5, [r6, #4]
 8003f5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f5e:	07d9      	lsls	r1, r3, #31
 8003f60:	d405      	bmi.n	8003f6e <_vfiprintf_r+0x32>
 8003f62:	89ab      	ldrh	r3, [r5, #12]
 8003f64:	059a      	lsls	r2, r3, #22
 8003f66:	d402      	bmi.n	8003f6e <_vfiprintf_r+0x32>
 8003f68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f6a:	f000 fba5 	bl	80046b8 <__retarget_lock_acquire_recursive>
 8003f6e:	89ab      	ldrh	r3, [r5, #12]
 8003f70:	071b      	lsls	r3, r3, #28
 8003f72:	d501      	bpl.n	8003f78 <_vfiprintf_r+0x3c>
 8003f74:	692b      	ldr	r3, [r5, #16]
 8003f76:	b9eb      	cbnz	r3, 8003fb4 <_vfiprintf_r+0x78>
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	f000 f96e 	bl	800425c <__swsetup_r>
 8003f80:	b1c0      	cbz	r0, 8003fb4 <_vfiprintf_r+0x78>
 8003f82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f84:	07dc      	lsls	r4, r3, #31
 8003f86:	d50e      	bpl.n	8003fa6 <_vfiprintf_r+0x6a>
 8003f88:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8c:	b01d      	add	sp, #116	; 0x74
 8003f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f92:	4b7b      	ldr	r3, [pc, #492]	; (8004180 <_vfiprintf_r+0x244>)
 8003f94:	429d      	cmp	r5, r3
 8003f96:	d101      	bne.n	8003f9c <_vfiprintf_r+0x60>
 8003f98:	68b5      	ldr	r5, [r6, #8]
 8003f9a:	e7df      	b.n	8003f5c <_vfiprintf_r+0x20>
 8003f9c:	4b79      	ldr	r3, [pc, #484]	; (8004184 <_vfiprintf_r+0x248>)
 8003f9e:	429d      	cmp	r5, r3
 8003fa0:	bf08      	it	eq
 8003fa2:	68f5      	ldreq	r5, [r6, #12]
 8003fa4:	e7da      	b.n	8003f5c <_vfiprintf_r+0x20>
 8003fa6:	89ab      	ldrh	r3, [r5, #12]
 8003fa8:	0598      	lsls	r0, r3, #22
 8003faa:	d4ed      	bmi.n	8003f88 <_vfiprintf_r+0x4c>
 8003fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fae:	f000 fb84 	bl	80046ba <__retarget_lock_release_recursive>
 8003fb2:	e7e9      	b.n	8003f88 <_vfiprintf_r+0x4c>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb8:	2320      	movs	r3, #32
 8003fba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fc2:	2330      	movs	r3, #48	; 0x30
 8003fc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004188 <_vfiprintf_r+0x24c>
 8003fc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fcc:	f04f 0901 	mov.w	r9, #1
 8003fd0:	4623      	mov	r3, r4
 8003fd2:	469a      	mov	sl, r3
 8003fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fd8:	b10a      	cbz	r2, 8003fde <_vfiprintf_r+0xa2>
 8003fda:	2a25      	cmp	r2, #37	; 0x25
 8003fdc:	d1f9      	bne.n	8003fd2 <_vfiprintf_r+0x96>
 8003fde:	ebba 0b04 	subs.w	fp, sl, r4
 8003fe2:	d00b      	beq.n	8003ffc <_vfiprintf_r+0xc0>
 8003fe4:	465b      	mov	r3, fp
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	4629      	mov	r1, r5
 8003fea:	4630      	mov	r0, r6
 8003fec:	f7ff ff93 	bl	8003f16 <__sfputs_r>
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	f000 80aa 	beq.w	800414a <_vfiprintf_r+0x20e>
 8003ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ff8:	445a      	add	r2, fp
 8003ffa:	9209      	str	r2, [sp, #36]	; 0x24
 8003ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80a2 	beq.w	800414a <_vfiprintf_r+0x20e>
 8004006:	2300      	movs	r3, #0
 8004008:	f04f 32ff 	mov.w	r2, #4294967295
 800400c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004010:	f10a 0a01 	add.w	sl, sl, #1
 8004014:	9304      	str	r3, [sp, #16]
 8004016:	9307      	str	r3, [sp, #28]
 8004018:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800401c:	931a      	str	r3, [sp, #104]	; 0x68
 800401e:	4654      	mov	r4, sl
 8004020:	2205      	movs	r2, #5
 8004022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004026:	4858      	ldr	r0, [pc, #352]	; (8004188 <_vfiprintf_r+0x24c>)
 8004028:	f7fc f8fa 	bl	8000220 <memchr>
 800402c:	9a04      	ldr	r2, [sp, #16]
 800402e:	b9d8      	cbnz	r0, 8004068 <_vfiprintf_r+0x12c>
 8004030:	06d1      	lsls	r1, r2, #27
 8004032:	bf44      	itt	mi
 8004034:	2320      	movmi	r3, #32
 8004036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800403a:	0713      	lsls	r3, r2, #28
 800403c:	bf44      	itt	mi
 800403e:	232b      	movmi	r3, #43	; 0x2b
 8004040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004044:	f89a 3000 	ldrb.w	r3, [sl]
 8004048:	2b2a      	cmp	r3, #42	; 0x2a
 800404a:	d015      	beq.n	8004078 <_vfiprintf_r+0x13c>
 800404c:	9a07      	ldr	r2, [sp, #28]
 800404e:	4654      	mov	r4, sl
 8004050:	2000      	movs	r0, #0
 8004052:	f04f 0c0a 	mov.w	ip, #10
 8004056:	4621      	mov	r1, r4
 8004058:	f811 3b01 	ldrb.w	r3, [r1], #1
 800405c:	3b30      	subs	r3, #48	; 0x30
 800405e:	2b09      	cmp	r3, #9
 8004060:	d94e      	bls.n	8004100 <_vfiprintf_r+0x1c4>
 8004062:	b1b0      	cbz	r0, 8004092 <_vfiprintf_r+0x156>
 8004064:	9207      	str	r2, [sp, #28]
 8004066:	e014      	b.n	8004092 <_vfiprintf_r+0x156>
 8004068:	eba0 0308 	sub.w	r3, r0, r8
 800406c:	fa09 f303 	lsl.w	r3, r9, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	9304      	str	r3, [sp, #16]
 8004074:	46a2      	mov	sl, r4
 8004076:	e7d2      	b.n	800401e <_vfiprintf_r+0xe2>
 8004078:	9b03      	ldr	r3, [sp, #12]
 800407a:	1d19      	adds	r1, r3, #4
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	9103      	str	r1, [sp, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	bfbb      	ittet	lt
 8004084:	425b      	neglt	r3, r3
 8004086:	f042 0202 	orrlt.w	r2, r2, #2
 800408a:	9307      	strge	r3, [sp, #28]
 800408c:	9307      	strlt	r3, [sp, #28]
 800408e:	bfb8      	it	lt
 8004090:	9204      	strlt	r2, [sp, #16]
 8004092:	7823      	ldrb	r3, [r4, #0]
 8004094:	2b2e      	cmp	r3, #46	; 0x2e
 8004096:	d10c      	bne.n	80040b2 <_vfiprintf_r+0x176>
 8004098:	7863      	ldrb	r3, [r4, #1]
 800409a:	2b2a      	cmp	r3, #42	; 0x2a
 800409c:	d135      	bne.n	800410a <_vfiprintf_r+0x1ce>
 800409e:	9b03      	ldr	r3, [sp, #12]
 80040a0:	1d1a      	adds	r2, r3, #4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	9203      	str	r2, [sp, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bfb8      	it	lt
 80040aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80040ae:	3402      	adds	r4, #2
 80040b0:	9305      	str	r3, [sp, #20]
 80040b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004198 <_vfiprintf_r+0x25c>
 80040b6:	7821      	ldrb	r1, [r4, #0]
 80040b8:	2203      	movs	r2, #3
 80040ba:	4650      	mov	r0, sl
 80040bc:	f7fc f8b0 	bl	8000220 <memchr>
 80040c0:	b140      	cbz	r0, 80040d4 <_vfiprintf_r+0x198>
 80040c2:	2340      	movs	r3, #64	; 0x40
 80040c4:	eba0 000a 	sub.w	r0, r0, sl
 80040c8:	fa03 f000 	lsl.w	r0, r3, r0
 80040cc:	9b04      	ldr	r3, [sp, #16]
 80040ce:	4303      	orrs	r3, r0
 80040d0:	3401      	adds	r4, #1
 80040d2:	9304      	str	r3, [sp, #16]
 80040d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d8:	482c      	ldr	r0, [pc, #176]	; (800418c <_vfiprintf_r+0x250>)
 80040da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040de:	2206      	movs	r2, #6
 80040e0:	f7fc f89e 	bl	8000220 <memchr>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d03f      	beq.n	8004168 <_vfiprintf_r+0x22c>
 80040e8:	4b29      	ldr	r3, [pc, #164]	; (8004190 <_vfiprintf_r+0x254>)
 80040ea:	bb1b      	cbnz	r3, 8004134 <_vfiprintf_r+0x1f8>
 80040ec:	9b03      	ldr	r3, [sp, #12]
 80040ee:	3307      	adds	r3, #7
 80040f0:	f023 0307 	bic.w	r3, r3, #7
 80040f4:	3308      	adds	r3, #8
 80040f6:	9303      	str	r3, [sp, #12]
 80040f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040fa:	443b      	add	r3, r7
 80040fc:	9309      	str	r3, [sp, #36]	; 0x24
 80040fe:	e767      	b.n	8003fd0 <_vfiprintf_r+0x94>
 8004100:	fb0c 3202 	mla	r2, ip, r2, r3
 8004104:	460c      	mov	r4, r1
 8004106:	2001      	movs	r0, #1
 8004108:	e7a5      	b.n	8004056 <_vfiprintf_r+0x11a>
 800410a:	2300      	movs	r3, #0
 800410c:	3401      	adds	r4, #1
 800410e:	9305      	str	r3, [sp, #20]
 8004110:	4619      	mov	r1, r3
 8004112:	f04f 0c0a 	mov.w	ip, #10
 8004116:	4620      	mov	r0, r4
 8004118:	f810 2b01 	ldrb.w	r2, [r0], #1
 800411c:	3a30      	subs	r2, #48	; 0x30
 800411e:	2a09      	cmp	r2, #9
 8004120:	d903      	bls.n	800412a <_vfiprintf_r+0x1ee>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0c5      	beq.n	80040b2 <_vfiprintf_r+0x176>
 8004126:	9105      	str	r1, [sp, #20]
 8004128:	e7c3      	b.n	80040b2 <_vfiprintf_r+0x176>
 800412a:	fb0c 2101 	mla	r1, ip, r1, r2
 800412e:	4604      	mov	r4, r0
 8004130:	2301      	movs	r3, #1
 8004132:	e7f0      	b.n	8004116 <_vfiprintf_r+0x1da>
 8004134:	ab03      	add	r3, sp, #12
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	462a      	mov	r2, r5
 800413a:	4b16      	ldr	r3, [pc, #88]	; (8004194 <_vfiprintf_r+0x258>)
 800413c:	a904      	add	r1, sp, #16
 800413e:	4630      	mov	r0, r6
 8004140:	f7fd ffde 	bl	8002100 <_printf_float>
 8004144:	4607      	mov	r7, r0
 8004146:	1c78      	adds	r0, r7, #1
 8004148:	d1d6      	bne.n	80040f8 <_vfiprintf_r+0x1bc>
 800414a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800414c:	07d9      	lsls	r1, r3, #31
 800414e:	d405      	bmi.n	800415c <_vfiprintf_r+0x220>
 8004150:	89ab      	ldrh	r3, [r5, #12]
 8004152:	059a      	lsls	r2, r3, #22
 8004154:	d402      	bmi.n	800415c <_vfiprintf_r+0x220>
 8004156:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004158:	f000 faaf 	bl	80046ba <__retarget_lock_release_recursive>
 800415c:	89ab      	ldrh	r3, [r5, #12]
 800415e:	065b      	lsls	r3, r3, #25
 8004160:	f53f af12 	bmi.w	8003f88 <_vfiprintf_r+0x4c>
 8004164:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004166:	e711      	b.n	8003f8c <_vfiprintf_r+0x50>
 8004168:	ab03      	add	r3, sp, #12
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	462a      	mov	r2, r5
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <_vfiprintf_r+0x258>)
 8004170:	a904      	add	r1, sp, #16
 8004172:	4630      	mov	r0, r6
 8004174:	f7fe fa68 	bl	8002648 <_printf_i>
 8004178:	e7e4      	b.n	8004144 <_vfiprintf_r+0x208>
 800417a:	bf00      	nop
 800417c:	08004dcc 	.word	0x08004dcc
 8004180:	08004dec 	.word	0x08004dec
 8004184:	08004dac 	.word	0x08004dac
 8004188:	08004c9a 	.word	0x08004c9a
 800418c:	08004ca4 	.word	0x08004ca4
 8004190:	08002101 	.word	0x08002101
 8004194:	08003f17 	.word	0x08003f17
 8004198:	08004ca0 	.word	0x08004ca0

0800419c <__swbuf_r>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	460e      	mov	r6, r1
 80041a0:	4614      	mov	r4, r2
 80041a2:	4605      	mov	r5, r0
 80041a4:	b118      	cbz	r0, 80041ae <__swbuf_r+0x12>
 80041a6:	6983      	ldr	r3, [r0, #24]
 80041a8:	b90b      	cbnz	r3, 80041ae <__swbuf_r+0x12>
 80041aa:	f000 f9e7 	bl	800457c <__sinit>
 80041ae:	4b21      	ldr	r3, [pc, #132]	; (8004234 <__swbuf_r+0x98>)
 80041b0:	429c      	cmp	r4, r3
 80041b2:	d12b      	bne.n	800420c <__swbuf_r+0x70>
 80041b4:	686c      	ldr	r4, [r5, #4]
 80041b6:	69a3      	ldr	r3, [r4, #24]
 80041b8:	60a3      	str	r3, [r4, #8]
 80041ba:	89a3      	ldrh	r3, [r4, #12]
 80041bc:	071a      	lsls	r2, r3, #28
 80041be:	d52f      	bpl.n	8004220 <__swbuf_r+0x84>
 80041c0:	6923      	ldr	r3, [r4, #16]
 80041c2:	b36b      	cbz	r3, 8004220 <__swbuf_r+0x84>
 80041c4:	6923      	ldr	r3, [r4, #16]
 80041c6:	6820      	ldr	r0, [r4, #0]
 80041c8:	1ac0      	subs	r0, r0, r3
 80041ca:	6963      	ldr	r3, [r4, #20]
 80041cc:	b2f6      	uxtb	r6, r6
 80041ce:	4283      	cmp	r3, r0
 80041d0:	4637      	mov	r7, r6
 80041d2:	dc04      	bgt.n	80041de <__swbuf_r+0x42>
 80041d4:	4621      	mov	r1, r4
 80041d6:	4628      	mov	r0, r5
 80041d8:	f000 f93c 	bl	8004454 <_fflush_r>
 80041dc:	bb30      	cbnz	r0, 800422c <__swbuf_r+0x90>
 80041de:	68a3      	ldr	r3, [r4, #8]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	60a3      	str	r3, [r4, #8]
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	6022      	str	r2, [r4, #0]
 80041ea:	701e      	strb	r6, [r3, #0]
 80041ec:	6963      	ldr	r3, [r4, #20]
 80041ee:	3001      	adds	r0, #1
 80041f0:	4283      	cmp	r3, r0
 80041f2:	d004      	beq.n	80041fe <__swbuf_r+0x62>
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	07db      	lsls	r3, r3, #31
 80041f8:	d506      	bpl.n	8004208 <__swbuf_r+0x6c>
 80041fa:	2e0a      	cmp	r6, #10
 80041fc:	d104      	bne.n	8004208 <__swbuf_r+0x6c>
 80041fe:	4621      	mov	r1, r4
 8004200:	4628      	mov	r0, r5
 8004202:	f000 f927 	bl	8004454 <_fflush_r>
 8004206:	b988      	cbnz	r0, 800422c <__swbuf_r+0x90>
 8004208:	4638      	mov	r0, r7
 800420a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <__swbuf_r+0x9c>)
 800420e:	429c      	cmp	r4, r3
 8004210:	d101      	bne.n	8004216 <__swbuf_r+0x7a>
 8004212:	68ac      	ldr	r4, [r5, #8]
 8004214:	e7cf      	b.n	80041b6 <__swbuf_r+0x1a>
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <__swbuf_r+0xa0>)
 8004218:	429c      	cmp	r4, r3
 800421a:	bf08      	it	eq
 800421c:	68ec      	ldreq	r4, [r5, #12]
 800421e:	e7ca      	b.n	80041b6 <__swbuf_r+0x1a>
 8004220:	4621      	mov	r1, r4
 8004222:	4628      	mov	r0, r5
 8004224:	f000 f81a 	bl	800425c <__swsetup_r>
 8004228:	2800      	cmp	r0, #0
 800422a:	d0cb      	beq.n	80041c4 <__swbuf_r+0x28>
 800422c:	f04f 37ff 	mov.w	r7, #4294967295
 8004230:	e7ea      	b.n	8004208 <__swbuf_r+0x6c>
 8004232:	bf00      	nop
 8004234:	08004dcc 	.word	0x08004dcc
 8004238:	08004dec 	.word	0x08004dec
 800423c:	08004dac 	.word	0x08004dac

08004240 <__ascii_wctomb>:
 8004240:	b149      	cbz	r1, 8004256 <__ascii_wctomb+0x16>
 8004242:	2aff      	cmp	r2, #255	; 0xff
 8004244:	bf85      	ittet	hi
 8004246:	238a      	movhi	r3, #138	; 0x8a
 8004248:	6003      	strhi	r3, [r0, #0]
 800424a:	700a      	strbls	r2, [r1, #0]
 800424c:	f04f 30ff 	movhi.w	r0, #4294967295
 8004250:	bf98      	it	ls
 8004252:	2001      	movls	r0, #1
 8004254:	4770      	bx	lr
 8004256:	4608      	mov	r0, r1
 8004258:	4770      	bx	lr
	...

0800425c <__swsetup_r>:
 800425c:	4b32      	ldr	r3, [pc, #200]	; (8004328 <__swsetup_r+0xcc>)
 800425e:	b570      	push	{r4, r5, r6, lr}
 8004260:	681d      	ldr	r5, [r3, #0]
 8004262:	4606      	mov	r6, r0
 8004264:	460c      	mov	r4, r1
 8004266:	b125      	cbz	r5, 8004272 <__swsetup_r+0x16>
 8004268:	69ab      	ldr	r3, [r5, #24]
 800426a:	b913      	cbnz	r3, 8004272 <__swsetup_r+0x16>
 800426c:	4628      	mov	r0, r5
 800426e:	f000 f985 	bl	800457c <__sinit>
 8004272:	4b2e      	ldr	r3, [pc, #184]	; (800432c <__swsetup_r+0xd0>)
 8004274:	429c      	cmp	r4, r3
 8004276:	d10f      	bne.n	8004298 <__swsetup_r+0x3c>
 8004278:	686c      	ldr	r4, [r5, #4]
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004280:	0719      	lsls	r1, r3, #28
 8004282:	d42c      	bmi.n	80042de <__swsetup_r+0x82>
 8004284:	06dd      	lsls	r5, r3, #27
 8004286:	d411      	bmi.n	80042ac <__swsetup_r+0x50>
 8004288:	2309      	movs	r3, #9
 800428a:	6033      	str	r3, [r6, #0]
 800428c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004290:	81a3      	strh	r3, [r4, #12]
 8004292:	f04f 30ff 	mov.w	r0, #4294967295
 8004296:	e03e      	b.n	8004316 <__swsetup_r+0xba>
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <__swsetup_r+0xd4>)
 800429a:	429c      	cmp	r4, r3
 800429c:	d101      	bne.n	80042a2 <__swsetup_r+0x46>
 800429e:	68ac      	ldr	r4, [r5, #8]
 80042a0:	e7eb      	b.n	800427a <__swsetup_r+0x1e>
 80042a2:	4b24      	ldr	r3, [pc, #144]	; (8004334 <__swsetup_r+0xd8>)
 80042a4:	429c      	cmp	r4, r3
 80042a6:	bf08      	it	eq
 80042a8:	68ec      	ldreq	r4, [r5, #12]
 80042aa:	e7e6      	b.n	800427a <__swsetup_r+0x1e>
 80042ac:	0758      	lsls	r0, r3, #29
 80042ae:	d512      	bpl.n	80042d6 <__swsetup_r+0x7a>
 80042b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042b2:	b141      	cbz	r1, 80042c6 <__swsetup_r+0x6a>
 80042b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042b8:	4299      	cmp	r1, r3
 80042ba:	d002      	beq.n	80042c2 <__swsetup_r+0x66>
 80042bc:	4630      	mov	r0, r6
 80042be:	f7ff fd0b 	bl	8003cd8 <_free_r>
 80042c2:	2300      	movs	r3, #0
 80042c4:	6363      	str	r3, [r4, #52]	; 0x34
 80042c6:	89a3      	ldrh	r3, [r4, #12]
 80042c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042cc:	81a3      	strh	r3, [r4, #12]
 80042ce:	2300      	movs	r3, #0
 80042d0:	6063      	str	r3, [r4, #4]
 80042d2:	6923      	ldr	r3, [r4, #16]
 80042d4:	6023      	str	r3, [r4, #0]
 80042d6:	89a3      	ldrh	r3, [r4, #12]
 80042d8:	f043 0308 	orr.w	r3, r3, #8
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	6923      	ldr	r3, [r4, #16]
 80042e0:	b94b      	cbnz	r3, 80042f6 <__swsetup_r+0x9a>
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ec:	d003      	beq.n	80042f6 <__swsetup_r+0x9a>
 80042ee:	4621      	mov	r1, r4
 80042f0:	4630      	mov	r0, r6
 80042f2:	f000 fa07 	bl	8004704 <__smakebuf_r>
 80042f6:	89a0      	ldrh	r0, [r4, #12]
 80042f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042fc:	f010 0301 	ands.w	r3, r0, #1
 8004300:	d00a      	beq.n	8004318 <__swsetup_r+0xbc>
 8004302:	2300      	movs	r3, #0
 8004304:	60a3      	str	r3, [r4, #8]
 8004306:	6963      	ldr	r3, [r4, #20]
 8004308:	425b      	negs	r3, r3
 800430a:	61a3      	str	r3, [r4, #24]
 800430c:	6923      	ldr	r3, [r4, #16]
 800430e:	b943      	cbnz	r3, 8004322 <__swsetup_r+0xc6>
 8004310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004314:	d1ba      	bne.n	800428c <__swsetup_r+0x30>
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	0781      	lsls	r1, r0, #30
 800431a:	bf58      	it	pl
 800431c:	6963      	ldrpl	r3, [r4, #20]
 800431e:	60a3      	str	r3, [r4, #8]
 8004320:	e7f4      	b.n	800430c <__swsetup_r+0xb0>
 8004322:	2000      	movs	r0, #0
 8004324:	e7f7      	b.n	8004316 <__swsetup_r+0xba>
 8004326:	bf00      	nop
 8004328:	20000028 	.word	0x20000028
 800432c:	08004dcc 	.word	0x08004dcc
 8004330:	08004dec 	.word	0x08004dec
 8004334:	08004dac 	.word	0x08004dac

08004338 <abort>:
 8004338:	b508      	push	{r3, lr}
 800433a:	2006      	movs	r0, #6
 800433c:	f000 fa4a 	bl	80047d4 <raise>
 8004340:	2001      	movs	r0, #1
 8004342:	f000 fb5d 	bl	8004a00 <_exit>
	...

08004348 <__sflush_r>:
 8004348:	898a      	ldrh	r2, [r1, #12]
 800434a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800434e:	4605      	mov	r5, r0
 8004350:	0710      	lsls	r0, r2, #28
 8004352:	460c      	mov	r4, r1
 8004354:	d458      	bmi.n	8004408 <__sflush_r+0xc0>
 8004356:	684b      	ldr	r3, [r1, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	dc05      	bgt.n	8004368 <__sflush_r+0x20>
 800435c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	dc02      	bgt.n	8004368 <__sflush_r+0x20>
 8004362:	2000      	movs	r0, #0
 8004364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800436a:	2e00      	cmp	r6, #0
 800436c:	d0f9      	beq.n	8004362 <__sflush_r+0x1a>
 800436e:	2300      	movs	r3, #0
 8004370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004374:	682f      	ldr	r7, [r5, #0]
 8004376:	602b      	str	r3, [r5, #0]
 8004378:	d032      	beq.n	80043e0 <__sflush_r+0x98>
 800437a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800437c:	89a3      	ldrh	r3, [r4, #12]
 800437e:	075a      	lsls	r2, r3, #29
 8004380:	d505      	bpl.n	800438e <__sflush_r+0x46>
 8004382:	6863      	ldr	r3, [r4, #4]
 8004384:	1ac0      	subs	r0, r0, r3
 8004386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004388:	b10b      	cbz	r3, 800438e <__sflush_r+0x46>
 800438a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800438c:	1ac0      	subs	r0, r0, r3
 800438e:	2300      	movs	r3, #0
 8004390:	4602      	mov	r2, r0
 8004392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004394:	6a21      	ldr	r1, [r4, #32]
 8004396:	4628      	mov	r0, r5
 8004398:	47b0      	blx	r6
 800439a:	1c43      	adds	r3, r0, #1
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	d106      	bne.n	80043ae <__sflush_r+0x66>
 80043a0:	6829      	ldr	r1, [r5, #0]
 80043a2:	291d      	cmp	r1, #29
 80043a4:	d82c      	bhi.n	8004400 <__sflush_r+0xb8>
 80043a6:	4a2a      	ldr	r2, [pc, #168]	; (8004450 <__sflush_r+0x108>)
 80043a8:	40ca      	lsrs	r2, r1
 80043aa:	07d6      	lsls	r6, r2, #31
 80043ac:	d528      	bpl.n	8004400 <__sflush_r+0xb8>
 80043ae:	2200      	movs	r2, #0
 80043b0:	6062      	str	r2, [r4, #4]
 80043b2:	04d9      	lsls	r1, r3, #19
 80043b4:	6922      	ldr	r2, [r4, #16]
 80043b6:	6022      	str	r2, [r4, #0]
 80043b8:	d504      	bpl.n	80043c4 <__sflush_r+0x7c>
 80043ba:	1c42      	adds	r2, r0, #1
 80043bc:	d101      	bne.n	80043c2 <__sflush_r+0x7a>
 80043be:	682b      	ldr	r3, [r5, #0]
 80043c0:	b903      	cbnz	r3, 80043c4 <__sflush_r+0x7c>
 80043c2:	6560      	str	r0, [r4, #84]	; 0x54
 80043c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043c6:	602f      	str	r7, [r5, #0]
 80043c8:	2900      	cmp	r1, #0
 80043ca:	d0ca      	beq.n	8004362 <__sflush_r+0x1a>
 80043cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043d0:	4299      	cmp	r1, r3
 80043d2:	d002      	beq.n	80043da <__sflush_r+0x92>
 80043d4:	4628      	mov	r0, r5
 80043d6:	f7ff fc7f 	bl	8003cd8 <_free_r>
 80043da:	2000      	movs	r0, #0
 80043dc:	6360      	str	r0, [r4, #52]	; 0x34
 80043de:	e7c1      	b.n	8004364 <__sflush_r+0x1c>
 80043e0:	6a21      	ldr	r1, [r4, #32]
 80043e2:	2301      	movs	r3, #1
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b0      	blx	r6
 80043e8:	1c41      	adds	r1, r0, #1
 80043ea:	d1c7      	bne.n	800437c <__sflush_r+0x34>
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0c4      	beq.n	800437c <__sflush_r+0x34>
 80043f2:	2b1d      	cmp	r3, #29
 80043f4:	d001      	beq.n	80043fa <__sflush_r+0xb2>
 80043f6:	2b16      	cmp	r3, #22
 80043f8:	d101      	bne.n	80043fe <__sflush_r+0xb6>
 80043fa:	602f      	str	r7, [r5, #0]
 80043fc:	e7b1      	b.n	8004362 <__sflush_r+0x1a>
 80043fe:	89a3      	ldrh	r3, [r4, #12]
 8004400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004404:	81a3      	strh	r3, [r4, #12]
 8004406:	e7ad      	b.n	8004364 <__sflush_r+0x1c>
 8004408:	690f      	ldr	r7, [r1, #16]
 800440a:	2f00      	cmp	r7, #0
 800440c:	d0a9      	beq.n	8004362 <__sflush_r+0x1a>
 800440e:	0793      	lsls	r3, r2, #30
 8004410:	680e      	ldr	r6, [r1, #0]
 8004412:	bf08      	it	eq
 8004414:	694b      	ldreq	r3, [r1, #20]
 8004416:	600f      	str	r7, [r1, #0]
 8004418:	bf18      	it	ne
 800441a:	2300      	movne	r3, #0
 800441c:	eba6 0807 	sub.w	r8, r6, r7
 8004420:	608b      	str	r3, [r1, #8]
 8004422:	f1b8 0f00 	cmp.w	r8, #0
 8004426:	dd9c      	ble.n	8004362 <__sflush_r+0x1a>
 8004428:	6a21      	ldr	r1, [r4, #32]
 800442a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800442c:	4643      	mov	r3, r8
 800442e:	463a      	mov	r2, r7
 8004430:	4628      	mov	r0, r5
 8004432:	47b0      	blx	r6
 8004434:	2800      	cmp	r0, #0
 8004436:	dc06      	bgt.n	8004446 <__sflush_r+0xfe>
 8004438:	89a3      	ldrh	r3, [r4, #12]
 800443a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800443e:	81a3      	strh	r3, [r4, #12]
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	e78e      	b.n	8004364 <__sflush_r+0x1c>
 8004446:	4407      	add	r7, r0
 8004448:	eba8 0800 	sub.w	r8, r8, r0
 800444c:	e7e9      	b.n	8004422 <__sflush_r+0xda>
 800444e:	bf00      	nop
 8004450:	20400001 	.word	0x20400001

08004454 <_fflush_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	690b      	ldr	r3, [r1, #16]
 8004458:	4605      	mov	r5, r0
 800445a:	460c      	mov	r4, r1
 800445c:	b913      	cbnz	r3, 8004464 <_fflush_r+0x10>
 800445e:	2500      	movs	r5, #0
 8004460:	4628      	mov	r0, r5
 8004462:	bd38      	pop	{r3, r4, r5, pc}
 8004464:	b118      	cbz	r0, 800446e <_fflush_r+0x1a>
 8004466:	6983      	ldr	r3, [r0, #24]
 8004468:	b90b      	cbnz	r3, 800446e <_fflush_r+0x1a>
 800446a:	f000 f887 	bl	800457c <__sinit>
 800446e:	4b14      	ldr	r3, [pc, #80]	; (80044c0 <_fflush_r+0x6c>)
 8004470:	429c      	cmp	r4, r3
 8004472:	d11b      	bne.n	80044ac <_fflush_r+0x58>
 8004474:	686c      	ldr	r4, [r5, #4]
 8004476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0ef      	beq.n	800445e <_fflush_r+0xa>
 800447e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004480:	07d0      	lsls	r0, r2, #31
 8004482:	d404      	bmi.n	800448e <_fflush_r+0x3a>
 8004484:	0599      	lsls	r1, r3, #22
 8004486:	d402      	bmi.n	800448e <_fflush_r+0x3a>
 8004488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800448a:	f000 f915 	bl	80046b8 <__retarget_lock_acquire_recursive>
 800448e:	4628      	mov	r0, r5
 8004490:	4621      	mov	r1, r4
 8004492:	f7ff ff59 	bl	8004348 <__sflush_r>
 8004496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004498:	07da      	lsls	r2, r3, #31
 800449a:	4605      	mov	r5, r0
 800449c:	d4e0      	bmi.n	8004460 <_fflush_r+0xc>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	059b      	lsls	r3, r3, #22
 80044a2:	d4dd      	bmi.n	8004460 <_fflush_r+0xc>
 80044a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044a6:	f000 f908 	bl	80046ba <__retarget_lock_release_recursive>
 80044aa:	e7d9      	b.n	8004460 <_fflush_r+0xc>
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <_fflush_r+0x70>)
 80044ae:	429c      	cmp	r4, r3
 80044b0:	d101      	bne.n	80044b6 <_fflush_r+0x62>
 80044b2:	68ac      	ldr	r4, [r5, #8]
 80044b4:	e7df      	b.n	8004476 <_fflush_r+0x22>
 80044b6:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <_fflush_r+0x74>)
 80044b8:	429c      	cmp	r4, r3
 80044ba:	bf08      	it	eq
 80044bc:	68ec      	ldreq	r4, [r5, #12]
 80044be:	e7da      	b.n	8004476 <_fflush_r+0x22>
 80044c0:	08004dcc 	.word	0x08004dcc
 80044c4:	08004dec 	.word	0x08004dec
 80044c8:	08004dac 	.word	0x08004dac

080044cc <std>:
 80044cc:	2300      	movs	r3, #0
 80044ce:	b510      	push	{r4, lr}
 80044d0:	4604      	mov	r4, r0
 80044d2:	e9c0 3300 	strd	r3, r3, [r0]
 80044d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044da:	6083      	str	r3, [r0, #8]
 80044dc:	8181      	strh	r1, [r0, #12]
 80044de:	6643      	str	r3, [r0, #100]	; 0x64
 80044e0:	81c2      	strh	r2, [r0, #14]
 80044e2:	6183      	str	r3, [r0, #24]
 80044e4:	4619      	mov	r1, r3
 80044e6:	2208      	movs	r2, #8
 80044e8:	305c      	adds	r0, #92	; 0x5c
 80044ea:	f7fd fd61 	bl	8001fb0 <memset>
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <std+0x38>)
 80044f0:	6263      	str	r3, [r4, #36]	; 0x24
 80044f2:	4b05      	ldr	r3, [pc, #20]	; (8004508 <std+0x3c>)
 80044f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <std+0x40>)
 80044f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <std+0x44>)
 80044fc:	6224      	str	r4, [r4, #32]
 80044fe:	6323      	str	r3, [r4, #48]	; 0x30
 8004500:	bd10      	pop	{r4, pc}
 8004502:	bf00      	nop
 8004504:	0800480d 	.word	0x0800480d
 8004508:	0800482f 	.word	0x0800482f
 800450c:	08004867 	.word	0x08004867
 8004510:	0800488b 	.word	0x0800488b

08004514 <_cleanup_r>:
 8004514:	4901      	ldr	r1, [pc, #4]	; (800451c <_cleanup_r+0x8>)
 8004516:	f000 b8af 	b.w	8004678 <_fwalk_reent>
 800451a:	bf00      	nop
 800451c:	08004455 	.word	0x08004455

08004520 <__sfmoreglue>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	1e4a      	subs	r2, r1, #1
 8004524:	2568      	movs	r5, #104	; 0x68
 8004526:	4355      	muls	r5, r2
 8004528:	460e      	mov	r6, r1
 800452a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800452e:	f7ff fc23 	bl	8003d78 <_malloc_r>
 8004532:	4604      	mov	r4, r0
 8004534:	b140      	cbz	r0, 8004548 <__sfmoreglue+0x28>
 8004536:	2100      	movs	r1, #0
 8004538:	e9c0 1600 	strd	r1, r6, [r0]
 800453c:	300c      	adds	r0, #12
 800453e:	60a0      	str	r0, [r4, #8]
 8004540:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004544:	f7fd fd34 	bl	8001fb0 <memset>
 8004548:	4620      	mov	r0, r4
 800454a:	bd70      	pop	{r4, r5, r6, pc}

0800454c <__sfp_lock_acquire>:
 800454c:	4801      	ldr	r0, [pc, #4]	; (8004554 <__sfp_lock_acquire+0x8>)
 800454e:	f000 b8b3 	b.w	80046b8 <__retarget_lock_acquire_recursive>
 8004552:	bf00      	nop
 8004554:	20000274 	.word	0x20000274

08004558 <__sfp_lock_release>:
 8004558:	4801      	ldr	r0, [pc, #4]	; (8004560 <__sfp_lock_release+0x8>)
 800455a:	f000 b8ae 	b.w	80046ba <__retarget_lock_release_recursive>
 800455e:	bf00      	nop
 8004560:	20000274 	.word	0x20000274

08004564 <__sinit_lock_acquire>:
 8004564:	4801      	ldr	r0, [pc, #4]	; (800456c <__sinit_lock_acquire+0x8>)
 8004566:	f000 b8a7 	b.w	80046b8 <__retarget_lock_acquire_recursive>
 800456a:	bf00      	nop
 800456c:	2000026f 	.word	0x2000026f

08004570 <__sinit_lock_release>:
 8004570:	4801      	ldr	r0, [pc, #4]	; (8004578 <__sinit_lock_release+0x8>)
 8004572:	f000 b8a2 	b.w	80046ba <__retarget_lock_release_recursive>
 8004576:	bf00      	nop
 8004578:	2000026f 	.word	0x2000026f

0800457c <__sinit>:
 800457c:	b510      	push	{r4, lr}
 800457e:	4604      	mov	r4, r0
 8004580:	f7ff fff0 	bl	8004564 <__sinit_lock_acquire>
 8004584:	69a3      	ldr	r3, [r4, #24]
 8004586:	b11b      	cbz	r3, 8004590 <__sinit+0x14>
 8004588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800458c:	f7ff bff0 	b.w	8004570 <__sinit_lock_release>
 8004590:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004594:	6523      	str	r3, [r4, #80]	; 0x50
 8004596:	4b13      	ldr	r3, [pc, #76]	; (80045e4 <__sinit+0x68>)
 8004598:	4a13      	ldr	r2, [pc, #76]	; (80045e8 <__sinit+0x6c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	62a2      	str	r2, [r4, #40]	; 0x28
 800459e:	42a3      	cmp	r3, r4
 80045a0:	bf04      	itt	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	61a3      	streq	r3, [r4, #24]
 80045a6:	4620      	mov	r0, r4
 80045a8:	f000 f820 	bl	80045ec <__sfp>
 80045ac:	6060      	str	r0, [r4, #4]
 80045ae:	4620      	mov	r0, r4
 80045b0:	f000 f81c 	bl	80045ec <__sfp>
 80045b4:	60a0      	str	r0, [r4, #8]
 80045b6:	4620      	mov	r0, r4
 80045b8:	f000 f818 	bl	80045ec <__sfp>
 80045bc:	2200      	movs	r2, #0
 80045be:	60e0      	str	r0, [r4, #12]
 80045c0:	2104      	movs	r1, #4
 80045c2:	6860      	ldr	r0, [r4, #4]
 80045c4:	f7ff ff82 	bl	80044cc <std>
 80045c8:	68a0      	ldr	r0, [r4, #8]
 80045ca:	2201      	movs	r2, #1
 80045cc:	2109      	movs	r1, #9
 80045ce:	f7ff ff7d 	bl	80044cc <std>
 80045d2:	68e0      	ldr	r0, [r4, #12]
 80045d4:	2202      	movs	r2, #2
 80045d6:	2112      	movs	r1, #18
 80045d8:	f7ff ff78 	bl	80044cc <std>
 80045dc:	2301      	movs	r3, #1
 80045de:	61a3      	str	r3, [r4, #24]
 80045e0:	e7d2      	b.n	8004588 <__sinit+0xc>
 80045e2:	bf00      	nop
 80045e4:	08004a28 	.word	0x08004a28
 80045e8:	08004515 	.word	0x08004515

080045ec <__sfp>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	4607      	mov	r7, r0
 80045f0:	f7ff ffac 	bl	800454c <__sfp_lock_acquire>
 80045f4:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <__sfp+0x84>)
 80045f6:	681e      	ldr	r6, [r3, #0]
 80045f8:	69b3      	ldr	r3, [r6, #24]
 80045fa:	b913      	cbnz	r3, 8004602 <__sfp+0x16>
 80045fc:	4630      	mov	r0, r6
 80045fe:	f7ff ffbd 	bl	800457c <__sinit>
 8004602:	3648      	adds	r6, #72	; 0x48
 8004604:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004608:	3b01      	subs	r3, #1
 800460a:	d503      	bpl.n	8004614 <__sfp+0x28>
 800460c:	6833      	ldr	r3, [r6, #0]
 800460e:	b30b      	cbz	r3, 8004654 <__sfp+0x68>
 8004610:	6836      	ldr	r6, [r6, #0]
 8004612:	e7f7      	b.n	8004604 <__sfp+0x18>
 8004614:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004618:	b9d5      	cbnz	r5, 8004650 <__sfp+0x64>
 800461a:	4b16      	ldr	r3, [pc, #88]	; (8004674 <__sfp+0x88>)
 800461c:	60e3      	str	r3, [r4, #12]
 800461e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004622:	6665      	str	r5, [r4, #100]	; 0x64
 8004624:	f000 f847 	bl	80046b6 <__retarget_lock_init_recursive>
 8004628:	f7ff ff96 	bl	8004558 <__sfp_lock_release>
 800462c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004630:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004634:	6025      	str	r5, [r4, #0]
 8004636:	61a5      	str	r5, [r4, #24]
 8004638:	2208      	movs	r2, #8
 800463a:	4629      	mov	r1, r5
 800463c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004640:	f7fd fcb6 	bl	8001fb0 <memset>
 8004644:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004648:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800464c:	4620      	mov	r0, r4
 800464e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004650:	3468      	adds	r4, #104	; 0x68
 8004652:	e7d9      	b.n	8004608 <__sfp+0x1c>
 8004654:	2104      	movs	r1, #4
 8004656:	4638      	mov	r0, r7
 8004658:	f7ff ff62 	bl	8004520 <__sfmoreglue>
 800465c:	4604      	mov	r4, r0
 800465e:	6030      	str	r0, [r6, #0]
 8004660:	2800      	cmp	r0, #0
 8004662:	d1d5      	bne.n	8004610 <__sfp+0x24>
 8004664:	f7ff ff78 	bl	8004558 <__sfp_lock_release>
 8004668:	230c      	movs	r3, #12
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	e7ee      	b.n	800464c <__sfp+0x60>
 800466e:	bf00      	nop
 8004670:	08004a28 	.word	0x08004a28
 8004674:	ffff0001 	.word	0xffff0001

08004678 <_fwalk_reent>:
 8004678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800467c:	4606      	mov	r6, r0
 800467e:	4688      	mov	r8, r1
 8004680:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004684:	2700      	movs	r7, #0
 8004686:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800468a:	f1b9 0901 	subs.w	r9, r9, #1
 800468e:	d505      	bpl.n	800469c <_fwalk_reent+0x24>
 8004690:	6824      	ldr	r4, [r4, #0]
 8004692:	2c00      	cmp	r4, #0
 8004694:	d1f7      	bne.n	8004686 <_fwalk_reent+0xe>
 8004696:	4638      	mov	r0, r7
 8004698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800469c:	89ab      	ldrh	r3, [r5, #12]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d907      	bls.n	80046b2 <_fwalk_reent+0x3a>
 80046a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046a6:	3301      	adds	r3, #1
 80046a8:	d003      	beq.n	80046b2 <_fwalk_reent+0x3a>
 80046aa:	4629      	mov	r1, r5
 80046ac:	4630      	mov	r0, r6
 80046ae:	47c0      	blx	r8
 80046b0:	4307      	orrs	r7, r0
 80046b2:	3568      	adds	r5, #104	; 0x68
 80046b4:	e7e9      	b.n	800468a <_fwalk_reent+0x12>

080046b6 <__retarget_lock_init_recursive>:
 80046b6:	4770      	bx	lr

080046b8 <__retarget_lock_acquire_recursive>:
 80046b8:	4770      	bx	lr

080046ba <__retarget_lock_release_recursive>:
 80046ba:	4770      	bx	lr

080046bc <__swhatbuf_r>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	460e      	mov	r6, r1
 80046c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c4:	2900      	cmp	r1, #0
 80046c6:	b096      	sub	sp, #88	; 0x58
 80046c8:	4614      	mov	r4, r2
 80046ca:	461d      	mov	r5, r3
 80046cc:	da07      	bge.n	80046de <__swhatbuf_r+0x22>
 80046ce:	2300      	movs	r3, #0
 80046d0:	602b      	str	r3, [r5, #0]
 80046d2:	89b3      	ldrh	r3, [r6, #12]
 80046d4:	061a      	lsls	r2, r3, #24
 80046d6:	d410      	bmi.n	80046fa <__swhatbuf_r+0x3e>
 80046d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046dc:	e00e      	b.n	80046fc <__swhatbuf_r+0x40>
 80046de:	466a      	mov	r2, sp
 80046e0:	f000 f8fa 	bl	80048d8 <_fstat_r>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	dbf2      	blt.n	80046ce <__swhatbuf_r+0x12>
 80046e8:	9a01      	ldr	r2, [sp, #4]
 80046ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80046ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80046f2:	425a      	negs	r2, r3
 80046f4:	415a      	adcs	r2, r3
 80046f6:	602a      	str	r2, [r5, #0]
 80046f8:	e7ee      	b.n	80046d8 <__swhatbuf_r+0x1c>
 80046fa:	2340      	movs	r3, #64	; 0x40
 80046fc:	2000      	movs	r0, #0
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	b016      	add	sp, #88	; 0x58
 8004702:	bd70      	pop	{r4, r5, r6, pc}

08004704 <__smakebuf_r>:
 8004704:	898b      	ldrh	r3, [r1, #12]
 8004706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004708:	079d      	lsls	r5, r3, #30
 800470a:	4606      	mov	r6, r0
 800470c:	460c      	mov	r4, r1
 800470e:	d507      	bpl.n	8004720 <__smakebuf_r+0x1c>
 8004710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004714:	6023      	str	r3, [r4, #0]
 8004716:	6123      	str	r3, [r4, #16]
 8004718:	2301      	movs	r3, #1
 800471a:	6163      	str	r3, [r4, #20]
 800471c:	b002      	add	sp, #8
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	ab01      	add	r3, sp, #4
 8004722:	466a      	mov	r2, sp
 8004724:	f7ff ffca 	bl	80046bc <__swhatbuf_r>
 8004728:	9900      	ldr	r1, [sp, #0]
 800472a:	4605      	mov	r5, r0
 800472c:	4630      	mov	r0, r6
 800472e:	f7ff fb23 	bl	8003d78 <_malloc_r>
 8004732:	b948      	cbnz	r0, 8004748 <__smakebuf_r+0x44>
 8004734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004738:	059a      	lsls	r2, r3, #22
 800473a:	d4ef      	bmi.n	800471c <__smakebuf_r+0x18>
 800473c:	f023 0303 	bic.w	r3, r3, #3
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	81a3      	strh	r3, [r4, #12]
 8004746:	e7e3      	b.n	8004710 <__smakebuf_r+0xc>
 8004748:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <__smakebuf_r+0x7c>)
 800474a:	62b3      	str	r3, [r6, #40]	; 0x28
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	6020      	str	r0, [r4, #0]
 8004750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004754:	81a3      	strh	r3, [r4, #12]
 8004756:	9b00      	ldr	r3, [sp, #0]
 8004758:	6163      	str	r3, [r4, #20]
 800475a:	9b01      	ldr	r3, [sp, #4]
 800475c:	6120      	str	r0, [r4, #16]
 800475e:	b15b      	cbz	r3, 8004778 <__smakebuf_r+0x74>
 8004760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004764:	4630      	mov	r0, r6
 8004766:	f000 f8c9 	bl	80048fc <_isatty_r>
 800476a:	b128      	cbz	r0, 8004778 <__smakebuf_r+0x74>
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	f023 0303 	bic.w	r3, r3, #3
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	81a3      	strh	r3, [r4, #12]
 8004778:	89a0      	ldrh	r0, [r4, #12]
 800477a:	4305      	orrs	r5, r0
 800477c:	81a5      	strh	r5, [r4, #12]
 800477e:	e7cd      	b.n	800471c <__smakebuf_r+0x18>
 8004780:	08004515 	.word	0x08004515

08004784 <_raise_r>:
 8004784:	291f      	cmp	r1, #31
 8004786:	b538      	push	{r3, r4, r5, lr}
 8004788:	4604      	mov	r4, r0
 800478a:	460d      	mov	r5, r1
 800478c:	d904      	bls.n	8004798 <_raise_r+0x14>
 800478e:	2316      	movs	r3, #22
 8004790:	6003      	str	r3, [r0, #0]
 8004792:	f04f 30ff 	mov.w	r0, #4294967295
 8004796:	bd38      	pop	{r3, r4, r5, pc}
 8004798:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800479a:	b112      	cbz	r2, 80047a2 <_raise_r+0x1e>
 800479c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80047a0:	b94b      	cbnz	r3, 80047b6 <_raise_r+0x32>
 80047a2:	4620      	mov	r0, r4
 80047a4:	f000 f830 	bl	8004808 <_getpid_r>
 80047a8:	462a      	mov	r2, r5
 80047aa:	4601      	mov	r1, r0
 80047ac:	4620      	mov	r0, r4
 80047ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047b2:	f000 b817 	b.w	80047e4 <_kill_r>
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d00a      	beq.n	80047d0 <_raise_r+0x4c>
 80047ba:	1c59      	adds	r1, r3, #1
 80047bc:	d103      	bne.n	80047c6 <_raise_r+0x42>
 80047be:	2316      	movs	r3, #22
 80047c0:	6003      	str	r3, [r0, #0]
 80047c2:	2001      	movs	r0, #1
 80047c4:	e7e7      	b.n	8004796 <_raise_r+0x12>
 80047c6:	2400      	movs	r4, #0
 80047c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80047cc:	4628      	mov	r0, r5
 80047ce:	4798      	blx	r3
 80047d0:	2000      	movs	r0, #0
 80047d2:	e7e0      	b.n	8004796 <_raise_r+0x12>

080047d4 <raise>:
 80047d4:	4b02      	ldr	r3, [pc, #8]	; (80047e0 <raise+0xc>)
 80047d6:	4601      	mov	r1, r0
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	f7ff bfd3 	b.w	8004784 <_raise_r>
 80047de:	bf00      	nop
 80047e0:	20000028 	.word	0x20000028

080047e4 <_kill_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4d07      	ldr	r5, [pc, #28]	; (8004804 <_kill_r+0x20>)
 80047e8:	2300      	movs	r3, #0
 80047ea:	4604      	mov	r4, r0
 80047ec:	4608      	mov	r0, r1
 80047ee:	4611      	mov	r1, r2
 80047f0:	602b      	str	r3, [r5, #0]
 80047f2:	f000 f8d7 	bl	80049a4 <_kill>
 80047f6:	1c43      	adds	r3, r0, #1
 80047f8:	d102      	bne.n	8004800 <_kill_r+0x1c>
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	b103      	cbz	r3, 8004800 <_kill_r+0x1c>
 80047fe:	6023      	str	r3, [r4, #0]
 8004800:	bd38      	pop	{r3, r4, r5, pc}
 8004802:	bf00      	nop
 8004804:	20000268 	.word	0x20000268

08004808 <_getpid_r>:
 8004808:	f000 b8bc 	b.w	8004984 <_getpid>

0800480c <__sread>:
 800480c:	b510      	push	{r4, lr}
 800480e:	460c      	mov	r4, r1
 8004810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004814:	f000 f894 	bl	8004940 <_read_r>
 8004818:	2800      	cmp	r0, #0
 800481a:	bfab      	itete	ge
 800481c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800481e:	89a3      	ldrhlt	r3, [r4, #12]
 8004820:	181b      	addge	r3, r3, r0
 8004822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004826:	bfac      	ite	ge
 8004828:	6563      	strge	r3, [r4, #84]	; 0x54
 800482a:	81a3      	strhlt	r3, [r4, #12]
 800482c:	bd10      	pop	{r4, pc}

0800482e <__swrite>:
 800482e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004832:	461f      	mov	r7, r3
 8004834:	898b      	ldrh	r3, [r1, #12]
 8004836:	05db      	lsls	r3, r3, #23
 8004838:	4605      	mov	r5, r0
 800483a:	460c      	mov	r4, r1
 800483c:	4616      	mov	r6, r2
 800483e:	d505      	bpl.n	800484c <__swrite+0x1e>
 8004840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004844:	2302      	movs	r3, #2
 8004846:	2200      	movs	r2, #0
 8004848:	f000 f868 	bl	800491c <_lseek_r>
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004856:	81a3      	strh	r3, [r4, #12]
 8004858:	4632      	mov	r2, r6
 800485a:	463b      	mov	r3, r7
 800485c:	4628      	mov	r0, r5
 800485e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004862:	f000 b817 	b.w	8004894 <_write_r>

08004866 <__sseek>:
 8004866:	b510      	push	{r4, lr}
 8004868:	460c      	mov	r4, r1
 800486a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486e:	f000 f855 	bl	800491c <_lseek_r>
 8004872:	1c43      	adds	r3, r0, #1
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	bf15      	itete	ne
 8004878:	6560      	strne	r0, [r4, #84]	; 0x54
 800487a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800487e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004882:	81a3      	strheq	r3, [r4, #12]
 8004884:	bf18      	it	ne
 8004886:	81a3      	strhne	r3, [r4, #12]
 8004888:	bd10      	pop	{r4, pc}

0800488a <__sclose>:
 800488a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800488e:	f000 b813 	b.w	80048b8 <_close_r>
	...

08004894 <_write_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4d07      	ldr	r5, [pc, #28]	; (80048b4 <_write_r+0x20>)
 8004898:	4604      	mov	r4, r0
 800489a:	4608      	mov	r0, r1
 800489c:	4611      	mov	r1, r2
 800489e:	2200      	movs	r2, #0
 80048a0:	602a      	str	r2, [r5, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f000 f8a4 	bl	80049f0 <_write>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d102      	bne.n	80048b2 <_write_r+0x1e>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	b103      	cbz	r3, 80048b2 <_write_r+0x1e>
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	20000268 	.word	0x20000268

080048b8 <_close_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	4d06      	ldr	r5, [pc, #24]	; (80048d4 <_close_r+0x1c>)
 80048bc:	2300      	movs	r3, #0
 80048be:	4604      	mov	r4, r0
 80048c0:	4608      	mov	r0, r1
 80048c2:	602b      	str	r3, [r5, #0]
 80048c4:	f000 f84e 	bl	8004964 <_close>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d102      	bne.n	80048d2 <_close_r+0x1a>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	b103      	cbz	r3, 80048d2 <_close_r+0x1a>
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	20000268 	.word	0x20000268

080048d8 <_fstat_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4d07      	ldr	r5, [pc, #28]	; (80048f8 <_fstat_r+0x20>)
 80048dc:	2300      	movs	r3, #0
 80048de:	4604      	mov	r4, r0
 80048e0:	4608      	mov	r0, r1
 80048e2:	4611      	mov	r1, r2
 80048e4:	602b      	str	r3, [r5, #0]
 80048e6:	f000 f845 	bl	8004974 <_fstat>
 80048ea:	1c43      	adds	r3, r0, #1
 80048ec:	d102      	bne.n	80048f4 <_fstat_r+0x1c>
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	b103      	cbz	r3, 80048f4 <_fstat_r+0x1c>
 80048f2:	6023      	str	r3, [r4, #0]
 80048f4:	bd38      	pop	{r3, r4, r5, pc}
 80048f6:	bf00      	nop
 80048f8:	20000268 	.word	0x20000268

080048fc <_isatty_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4d06      	ldr	r5, [pc, #24]	; (8004918 <_isatty_r+0x1c>)
 8004900:	2300      	movs	r3, #0
 8004902:	4604      	mov	r4, r0
 8004904:	4608      	mov	r0, r1
 8004906:	602b      	str	r3, [r5, #0]
 8004908:	f000 f844 	bl	8004994 <_isatty>
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	d102      	bne.n	8004916 <_isatty_r+0x1a>
 8004910:	682b      	ldr	r3, [r5, #0]
 8004912:	b103      	cbz	r3, 8004916 <_isatty_r+0x1a>
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	bd38      	pop	{r3, r4, r5, pc}
 8004918:	20000268 	.word	0x20000268

0800491c <_lseek_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4d07      	ldr	r5, [pc, #28]	; (800493c <_lseek_r+0x20>)
 8004920:	4604      	mov	r4, r0
 8004922:	4608      	mov	r0, r1
 8004924:	4611      	mov	r1, r2
 8004926:	2200      	movs	r2, #0
 8004928:	602a      	str	r2, [r5, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	f000 f842 	bl	80049b4 <_lseek>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_lseek_r+0x1e>
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	b103      	cbz	r3, 800493a <_lseek_r+0x1e>
 8004938:	6023      	str	r3, [r4, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	20000268 	.word	0x20000268

08004940 <_read_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4d07      	ldr	r5, [pc, #28]	; (8004960 <_read_r+0x20>)
 8004944:	4604      	mov	r4, r0
 8004946:	4608      	mov	r0, r1
 8004948:	4611      	mov	r1, r2
 800494a:	2200      	movs	r2, #0
 800494c:	602a      	str	r2, [r5, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	f000 f838 	bl	80049c4 <_read>
 8004954:	1c43      	adds	r3, r0, #1
 8004956:	d102      	bne.n	800495e <_read_r+0x1e>
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	b103      	cbz	r3, 800495e <_read_r+0x1e>
 800495c:	6023      	str	r3, [r4, #0]
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	20000268 	.word	0x20000268

08004964 <_close>:
 8004964:	4b02      	ldr	r3, [pc, #8]	; (8004970 <_close+0xc>)
 8004966:	2258      	movs	r2, #88	; 0x58
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	f04f 30ff 	mov.w	r0, #4294967295
 800496e:	4770      	bx	lr
 8004970:	20000268 	.word	0x20000268

08004974 <_fstat>:
 8004974:	4b02      	ldr	r3, [pc, #8]	; (8004980 <_fstat+0xc>)
 8004976:	2258      	movs	r2, #88	; 0x58
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	4770      	bx	lr
 8004980:	20000268 	.word	0x20000268

08004984 <_getpid>:
 8004984:	4b02      	ldr	r3, [pc, #8]	; (8004990 <_getpid+0xc>)
 8004986:	2258      	movs	r2, #88	; 0x58
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	f04f 30ff 	mov.w	r0, #4294967295
 800498e:	4770      	bx	lr
 8004990:	20000268 	.word	0x20000268

08004994 <_isatty>:
 8004994:	4b02      	ldr	r3, [pc, #8]	; (80049a0 <_isatty+0xc>)
 8004996:	2258      	movs	r2, #88	; 0x58
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	2000      	movs	r0, #0
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20000268 	.word	0x20000268

080049a4 <_kill>:
 80049a4:	4b02      	ldr	r3, [pc, #8]	; (80049b0 <_kill+0xc>)
 80049a6:	2258      	movs	r2, #88	; 0x58
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	f04f 30ff 	mov.w	r0, #4294967295
 80049ae:	4770      	bx	lr
 80049b0:	20000268 	.word	0x20000268

080049b4 <_lseek>:
 80049b4:	4b02      	ldr	r3, [pc, #8]	; (80049c0 <_lseek+0xc>)
 80049b6:	2258      	movs	r2, #88	; 0x58
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	f04f 30ff 	mov.w	r0, #4294967295
 80049be:	4770      	bx	lr
 80049c0:	20000268 	.word	0x20000268

080049c4 <_read>:
 80049c4:	4b02      	ldr	r3, [pc, #8]	; (80049d0 <_read+0xc>)
 80049c6:	2258      	movs	r2, #88	; 0x58
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	f04f 30ff 	mov.w	r0, #4294967295
 80049ce:	4770      	bx	lr
 80049d0:	20000268 	.word	0x20000268

080049d4 <_sbrk>:
 80049d4:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <_sbrk+0x14>)
 80049d6:	6819      	ldr	r1, [r3, #0]
 80049d8:	4602      	mov	r2, r0
 80049da:	b909      	cbnz	r1, 80049e0 <_sbrk+0xc>
 80049dc:	4903      	ldr	r1, [pc, #12]	; (80049ec <_sbrk+0x18>)
 80049de:	6019      	str	r1, [r3, #0]
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	4402      	add	r2, r0
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	4770      	bx	lr
 80049e8:	2000021c 	.word	0x2000021c
 80049ec:	20000278 	.word	0x20000278

080049f0 <_write>:
 80049f0:	4b02      	ldr	r3, [pc, #8]	; (80049fc <_write+0xc>)
 80049f2:	2258      	movs	r2, #88	; 0x58
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	f04f 30ff 	mov.w	r0, #4294967295
 80049fa:	4770      	bx	lr
 80049fc:	20000268 	.word	0x20000268

08004a00 <_exit>:
 8004a00:	e7fe      	b.n	8004a00 <_exit>
	...

08004a04 <_init>:
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	bf00      	nop
 8004a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0a:	bc08      	pop	{r3}
 8004a0c:	469e      	mov	lr, r3
 8004a0e:	4770      	bx	lr

08004a10 <_fini>:
 8004a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a12:	bf00      	nop
 8004a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a16:	bc08      	pop	{r3}
 8004a18:	469e      	mov	lr, r3
 8004a1a:	4770      	bx	lr
