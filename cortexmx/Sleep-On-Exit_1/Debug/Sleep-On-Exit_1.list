
Sleep-On-Exit_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005794  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08005968  08005968  00015968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d54  08005d54  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d5c  08005d5c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d5c  08005d5c  00015d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08005d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000204  08005f68  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08005f68  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eebb  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cee  00000000  00000000  0002f0ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00030de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002234c  00000000  00000000  00031a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e8c5  00000000  00000000  00053da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d2d67  00000000  00000000  00062669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001353d0  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000bb8  00000000  00000000  00135428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000457c  00000000  00000000  00135fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0013a55c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0013a628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800594c 	.word	0x0800594c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	0800594c 	.word	0x0800594c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <SysTick_Handler>:
#include "main.h"

extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart2;

void SysTick_Handler(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8000ee4:	f000 fa22 	bl	800132c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000ee8:	f000 fb51 	bl	800158e <HAL_SYSTICK_IRQHandler>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
	HAL_TIM_IRQHandler(&htim6);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <TIM6_DAC_IRQHandler+0x10>)
 8000ef6:	f000 fe9b 	bl	8001c30 <HAL_TIM_IRQHandler>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000022c 	.word	0x2000022c

08000f04 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <USART2_IRQHandler+0x10>)
 8000f0a:	f001 f955 	bl	80021b8 <HAL_UART_IRQHandler>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000274 	.word	0x20000274

08000f18 <main>:
TIM_HandleTypeDef htim6;
UART_HandleTypeDef huart2;

extern uint8_t some_data[];

int main(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

	HAL_Init();
 8000f1c:	f000 f9b4 	bl	8001288 <HAL_Init>

	//SystemClock_Config_HSE(SYS_CLOCK_FREQ_50MHZ);

	GPIO_Init();
 8000f20:	f000 f82a 	bl	8000f78 <GPIO_Init>
	//HAL_SuspendTick();
	UART2_Init();
 8000f24:	f000 f84e 	bl	8000fc4 <UART2_Init>
	TIM6_Init();
 8000f28:	f000 f872 	bl	8001010 <TIM6_Init>

	GPIO_AnalogConfig();
 8000f2c:	f000 f80e 	bl	8000f4c <GPIO_AnalogConfig>

	//SCB->SCR |= ( 1 << 1);
	HAL_PWR_EnableSleepOnExit();
 8000f30:	f000 fd7a 	bl	8001a28 <HAL_PWR_EnableSleepOnExit>

	/* Clear Status register of TIM6 to avoid any invalid interrupts */
	TIM6->SR = 0;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <main+0x2c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Start_IT(&htim6);
 8000f3a:	4803      	ldr	r0, [pc, #12]	; (8000f48 <main+0x30>)
 8000f3c:	f000 fe08 	bl	8001b50 <HAL_TIM_Base_Start_IT>

	while(1);
 8000f40:	e7fe      	b.n	8000f40 <main+0x28>
 8000f42:	bf00      	nop
 8000f44:	40001000 	.word	0x40001000
 8000f48:	2000022c 	.word	0x2000022c

08000f4c <GPIO_AnalogConfig>:
	//SYSTICK IRQn interrupt configuration
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

}

void GPIO_AnalogConfig(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GpioA;

	uint32_t gpio_pins = 	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | \
 8000f52:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8000f56:	617b      	str	r3, [r7, #20]
							GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
							GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | \
							GPIO_PIN_14 | GPIO_PIN_15;


	GpioA.Pin = gpio_pins;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	603b      	str	r3, [r7, #0]
	GpioA.Mode = GPIO_MODE_ANALOG;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOA, &GpioA);
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <GPIO_AnalogConfig+0x28>)
 8000f66:	f000 fbb1 	bl	80016cc <HAL_GPIO_Init>
}
 8000f6a:	bf00      	nop
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020000 	.word	0x40020000

08000f78 <GPIO_Init>:

void GPIO_Init(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	; 0x30
 8000f7c:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <GPIO_Init+0x44>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <GPIO_Init+0x44>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <GPIO_Init+0x44>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef ledgpio, buttongpio;

	ledgpio.Pin = GPIO_PIN_5 | GPIO_PIN_12;
 8000f9a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000f9e:	61fb      	str	r3, [r7, #28]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	623b      	str	r3, [r7, #32]
	ledgpio.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &ledgpio);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <GPIO_Init+0x48>)
 8000fb0:	f000 fb8c 	bl	80016cc <HAL_GPIO_Init>
}
 8000fb4:	bf00      	nop
 8000fb6:	3730      	adds	r7, #48	; 0x30
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <UART2_Init>:

void UART2_Init(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

	huart2.Instance = USART2; //linking
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <UART2_Init+0x44>)
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <UART2_Init+0x48>)
 8000fcc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 230400;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <UART2_Init+0x44>)
 8000fd0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000fd4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <UART2_Init+0x44>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <UART2_Init+0x44>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <UART2_Init+0x44>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <UART2_Init+0x44>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <UART2_Init+0x44>)
 8000ff0:	2208      	movs	r2, #8
 8000ff2:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) {
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <UART2_Init+0x44>)
 8000ff6:	f000 ffff 	bl	8001ff8 <HAL_UART_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <UART2_Init+0x40>

		//There is a problem
		Error_handler();
 8001000:	f000 f852 	bl	80010a8 <Error_handler>
	}
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000274 	.word	0x20000274
 800100c:	40004400 	.word	0x40004400

08001010 <TIM6_Init>:

void TIM6_Init(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

	htim6.Instance = TIM6;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <TIM6_Init+0x2c>)
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <TIM6_Init+0x30>)
 8001018:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 4999;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <TIM6_Init+0x2c>)
 800101c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001020:	605a      	str	r2, [r3, #4]
	htim6.Init.Period = 100-1;
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <TIM6_Init+0x2c>)
 8001024:	2263      	movs	r2, #99	; 0x63
 8001026:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&htim6) != HAL_OK ) {
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <TIM6_Init+0x2c>)
 800102a:	f000 fd41 	bl	8001ab0 <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <TIM6_Init+0x28>
		Error_handler();
 8001034:	f000 f838 	bl	80010a8 <Error_handler>
	}
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000022c 	.word	0x2000022c
 8001040:	40001000 	.word	0x40001000

08001044 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

	 if(HAL_UART_Transmit(&huart2, (uint8_t*)some_data, (uint16_t)strlen((char*)some_data), HAL_MAX_DELAY) != HAL_OK) {
 800104c:	4809      	ldr	r0, [pc, #36]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800104e:	f7ff f8df 	bl	8000210 <strlen>
 8001052:	4603      	mov	r3, r0
 8001054:	b29a      	uxth	r2, r3
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	4906      	ldr	r1, [pc, #24]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800105c:	4806      	ldr	r0, [pc, #24]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800105e:	f001 f818 	bl	8002092 <HAL_UART_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_TIM_PeriodElapsedCallback+0x28>
		 Error_handler();
 8001068:	f000 f81e 	bl	80010a8 <Error_handler>
	 }
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000000 	.word	0x20000000
 8001078:	20000274 	.word	0x20000274

0800107c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <HAL_UART_TxCpltCallback+0x28>)
 800108c:	f000 fcb2 	bl	80019f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <HAL_UART_TxCpltCallback+0x28>)
 8001098:	f000 fcac 	bl	80019f4 <HAL_GPIO_WritePin>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40020000 	.word	0x40020000

080010a8 <Error_handler>:

void Error_handler(void) {
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

	while(1);
 80010ac:	e7fe      	b.n	80010ac <Error_handler+0x4>
	...

080010b0 <HAL_MspInit>:
 *      Author: Oliver
 */

#include "main.h"

void HAL_MspInit(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	/* Low level processor specific inits */

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //not required, as this will set to default setting
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 fa29 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//System Control Block (SCB) -> System Handler Control and State Register (SHCSR)
	SCB->SHCSR |= (0x7 << 16);  //Set bits 16,17,18 (MEMFAULTENA, BUSFAULTENA, USGFAULTENA)
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <HAL_MspInit+0x40>)
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <HAL_MspInit+0x40>)
 80010c0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80010c4:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2100      	movs	r1, #0
 80010ca:	f06f 000b 	mvn.w	r0, #11
 80010ce:	f000 fa28 	bl	8001522 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	f06f 000a 	mvn.w	r0, #10
 80010da:	f000 fa22 	bl	8001522 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	f06f 0009 	mvn.w	r0, #9
 80010e6:	f000 fa1c 	bl	8001522 <HAL_NVIC_SetPriority>
	//HAL_Init() in main.c already takes care of SysTick_IRQn priority setting
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	/* Low level inits of the USART2 peripheral */

	//1. Enable the required peripheral clock for the USART2 and GPIOA peripherals
	__HAL_RCC_USART2_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_UART_MspInit+0x94>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a20      	ldr	r2, [pc, #128]	; (8001188 <HAL_UART_MspInit+0x94>)
 8001106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <HAL_UART_MspInit+0x94>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART2_CLK_SLEEP_DISABLE(); //automatically disables/reenables UART2 clock during sleep and active periods.
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_UART_MspInit+0x94>)
 800111a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111c:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <HAL_UART_MspInit+0x94>)
 800111e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001122:	6613      	str	r3, [r2, #96]	; 0x60

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_UART_MspInit+0x94>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	4a16      	ldr	r2, [pc, #88]	; (8001188 <HAL_UART_MspInit+0x94>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6313      	str	r3, [r2, #48]	; 0x30
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_UART_MspInit+0x94>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

	//2. Pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //USART2_TX
 8001140:	2304      	movs	r3, #4
 8001142:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 8001150:	2307      	movs	r3, #7
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	480c      	ldr	r0, [pc, #48]	; (800118c <HAL_UART_MspInit+0x98>)
 800115c:	f000 fab6 	bl	80016cc <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //USART2_RX
 8001160:	2308      	movs	r3, #8
 8001162:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4808      	ldr	r0, [pc, #32]	; (800118c <HAL_UART_MspInit+0x98>)
 800116c:	f000 faae 	bl	80016cc <HAL_GPIO_Init>

	//3. Enable the peripheral IRQ in the NVIC
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001170:	2026      	movs	r0, #38	; 0x26
 8001172:	f000 f9f2 	bl	800155a <HAL_NVIC_EnableIRQ>

	//4. Set the priorities based on application needs
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	210f      	movs	r1, #15
 800117a:	2026      	movs	r0, #38	; 0x26
 800117c:	f000 f9d1 	bl	8001522 <HAL_NVIC_SetPriority>
}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000

08001190 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htimer) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

	//1. enable the clock for the TIM6 peripheral
	__HAL_RCC_TIM6_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_TIM_Base_MspInit+0x3c>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_TIM_Base_MspInit+0x3c>)
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_TIM_Base_MspInit+0x3c>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

	//2. Enable the IRQ of TIM6
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011b4:	2036      	movs	r0, #54	; 0x36
 80011b6:	f000 f9d0 	bl	800155a <HAL_NVIC_EnableIRQ>

	//3. setup the priority for TIM6_DAC_IRQn
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2036      	movs	r0, #54	; 0x36
 80011c0:	f000 f9af 	bl	8001522 <HAL_NVIC_SetPriority>
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <SystemInit+0x58>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <SystemInit+0x58>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <SystemInit+0x5c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a10      	ldr	r2, [pc, #64]	; (800122c <SystemInit+0x5c>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <SystemInit+0x5c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <SystemInit+0x5c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a0c      	ldr	r2, [pc, #48]	; (800122c <SystemInit+0x5c>)
 80011fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <SystemInit+0x5c>)
 8001208:	4a09      	ldr	r2, [pc, #36]	; (8001230 <SystemInit+0x60>)
 800120a:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <SystemInit+0x5c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <SystemInit+0x5c>)
 8001212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001216:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <SystemInit+0x5c>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000ed00 	.word	0xe000ed00
 800122c:	40023800 	.word	0x40023800
 8001230:	24003010 	.word	0x24003010

08001234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800126c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800123a:	490e      	ldr	r1, [pc, #56]	; (8001274 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800123c:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001240:	e002      	b.n	8001248 <LoopCopyDataInit>

08001242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001246:	3304      	adds	r3, #4

08001248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800124c:	d3f9      	bcc.n	8001242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001250:	4c0b      	ldr	r4, [pc, #44]	; (8001280 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001254:	e001      	b.n	800125a <LoopFillZerobss>

08001256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001258:	3204      	adds	r2, #4

0800125a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800125c:	d3fb      	bcc.n	8001256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800125e:	f7ff ffb7 	bl	80011d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001262:	f001 fe27 	bl	8002eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001266:	f7ff fe57 	bl	8000f18 <main>
  bx  lr    
 800126a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800126c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001278:	08005d64 	.word	0x08005d64
  ldr r2, =_sbss
 800127c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001280:	200002cc 	.word	0x200002cc

08001284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <HAL_Init+0x40>)
 8001292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_Init+0x40>)
 800129e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_Init+0x40>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_Init+0x40>)
 80012aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 f92b 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 f808 	bl	80012cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012bc:	f7ff fef8 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023c00 	.word	0x40023c00

080012cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x54>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_InitTick+0x58>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f943 	bl	8001576 <HAL_SYSTICK_Config>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00e      	b.n	8001318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d80a      	bhi.n	8001316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 f90b 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800130c:	4a06      	ldr	r2, [pc, #24]	; (8001328 <HAL_InitTick+0x5c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000028 	.word	0x20000028
 8001324:	20000030 	.word	0x20000030
 8001328:	2000002c 	.word	0x2000002c

0800132c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x20>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x24>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <HAL_IncTick+0x24>)
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000030 	.word	0x20000030
 8001350:	200002b8 	.word	0x200002b8

08001354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <HAL_GetTick+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	200002b8 	.word	0x200002b8

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4907      	ldr	r1, [pc, #28]	; (8001408 <__NVIC_EnableIRQ+0x38>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff8e 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff29 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff3e 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff8e 	bl	8001460 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5d 	bl	800140c <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff31 	bl	80013d0 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa2 	bl	80014c8 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001592:	f000 f802 	bl	800159a <HAL_SYSTICK_Callback>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015b6:	f7ff fecd 	bl	8001354 <HAL_GetTick>
 80015ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d008      	beq.n	80015da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e052      	b.n	8001680 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0216 	bic.w	r2, r2, #22
 80015e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d103      	bne.n	800160a <HAL_DMA_Abort+0x62>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0208 	bic.w	r2, r2, #8
 8001618:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162a:	e013      	b.n	8001654 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162c:	f7ff fe92 	bl	8001354 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b05      	cmp	r3, #5
 8001638:	d90c      	bls.n	8001654 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2220      	movs	r2, #32
 800163e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2203      	movs	r2, #3
 8001644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e015      	b.n	8001680 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1e4      	bne.n	800162c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	223f      	movs	r2, #63	; 0x3f
 8001668:	409a      	lsls	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d004      	beq.n	80016a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00c      	b.n	80016c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2205      	movs	r2, #5
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	e165      	b.n	80019b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	f040 8154 	bne.w	80019ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d005      	beq.n	800171e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	2b02      	cmp	r3, #2
 800171c:	d130      	bne.n	8001780 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001754:	2201      	movs	r2, #1
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 0201 	and.w	r2, r3, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b03      	cmp	r3, #3
 800178a:	d017      	beq.n	80017bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d123      	bne.n	8001810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	220f      	movs	r2, #15
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	69b9      	ldr	r1, [r7, #24]
 800180c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0203 	and.w	r2, r3, #3
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80ae 	beq.w	80019ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <HAL_GPIO_Init+0x300>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4a5c      	ldr	r2, [pc, #368]	; (80019cc <HAL_GPIO_Init+0x300>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	6453      	str	r3, [r2, #68]	; 0x44
 8001862:	4b5a      	ldr	r3, [pc, #360]	; (80019cc <HAL_GPIO_Init+0x300>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800186e:	4a58      	ldr	r2, [pc, #352]	; (80019d0 <HAL_GPIO_Init+0x304>)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	220f      	movs	r2, #15
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4f      	ldr	r2, [pc, #316]	; (80019d4 <HAL_GPIO_Init+0x308>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d025      	beq.n	80018e6 <HAL_GPIO_Init+0x21a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4e      	ldr	r2, [pc, #312]	; (80019d8 <HAL_GPIO_Init+0x30c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d01f      	beq.n	80018e2 <HAL_GPIO_Init+0x216>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4d      	ldr	r2, [pc, #308]	; (80019dc <HAL_GPIO_Init+0x310>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d019      	beq.n	80018de <HAL_GPIO_Init+0x212>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4c      	ldr	r2, [pc, #304]	; (80019e0 <HAL_GPIO_Init+0x314>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_GPIO_Init+0x20e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4b      	ldr	r2, [pc, #300]	; (80019e4 <HAL_GPIO_Init+0x318>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00d      	beq.n	80018d6 <HAL_GPIO_Init+0x20a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4a      	ldr	r2, [pc, #296]	; (80019e8 <HAL_GPIO_Init+0x31c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d007      	beq.n	80018d2 <HAL_GPIO_Init+0x206>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a49      	ldr	r2, [pc, #292]	; (80019ec <HAL_GPIO_Init+0x320>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d101      	bne.n	80018ce <HAL_GPIO_Init+0x202>
 80018ca:	2306      	movs	r3, #6
 80018cc:	e00c      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018ce:	2307      	movs	r3, #7
 80018d0:	e00a      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018d2:	2305      	movs	r3, #5
 80018d4:	e008      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018d6:	2304      	movs	r3, #4
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018da:	2303      	movs	r3, #3
 80018dc:	e004      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018de:	2302      	movs	r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x21c>
 80018e6:	2300      	movs	r3, #0
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	f002 0203 	and.w	r2, r2, #3
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	4093      	lsls	r3, r2
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f8:	4935      	ldr	r1, [pc, #212]	; (80019d0 <HAL_GPIO_Init+0x304>)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001906:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <HAL_GPIO_Init+0x324>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800192a:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <HAL_GPIO_Init+0x324>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_GPIO_Init+0x324>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001954:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <HAL_GPIO_Init+0x324>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195a:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <HAL_GPIO_Init+0x324>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197e:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <HAL_GPIO_Init+0x324>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001984:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <HAL_GPIO_Init+0x324>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a8:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <HAL_GPIO_Init+0x324>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3301      	adds	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	2b0f      	cmp	r3, #15
 80019b8:	f67f ae96 	bls.w	80016e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40013800 	.word	0x40013800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40020c00 	.word	0x40020c00
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40021400 	.word	0x40021400
 80019ec:	40021800 	.word	0x40021800
 80019f0:	40013c00 	.word	0x40013c00

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	619a      	str	r2, [r3, #24]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	6113      	str	r3, [r2, #16]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000028 	.word	0x20000028

08001a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a64:	f7ff fff0 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0a9b      	lsrs	r3, r3, #10
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4903      	ldr	r1, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	08005968 	.word	0x08005968

08001a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a8c:	f7ff ffdc 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0b5b      	lsrs	r3, r3, #13
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	08005968 	.word	0x08005968

08001ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e041      	b.n	8001b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fb5a 	bl	8001190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3304      	adds	r3, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f000 f9ce 	bl	8001e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d001      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e04e      	b.n	8001c06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a23      	ldr	r2, [pc, #140]	; (8001c14 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d022      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b92:	d01d      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d018      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d013      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00e      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d009      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d004      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a18      	ldr	r2, [pc, #96]	; (8001c2c <HAL_TIM_Base_Start_IT+0xdc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d111      	bne.n	8001bf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d010      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0201 	orr.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf2:	e007      	b.n	8001c04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40010000 	.word	0x40010000
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	40000800 	.word	0x40000800
 8001c20:	40000c00 	.word	0x40000c00
 8001c24:	40010400 	.word	0x40010400
 8001c28:	40014000 	.word	0x40014000
 8001c2c:	40001800 	.word	0x40001800

08001c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d122      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d11b      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0202 	mvn.w	r2, #2
 8001c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f8ee 	bl	8001e54 <HAL_TIM_IC_CaptureCallback>
 8001c78:	e005      	b.n	8001c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8e0 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f8f1 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d122      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0204 	mvn.w	r2, #4
 8001cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f8c4 	bl	8001e54 <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8b6 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8c7 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d122      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d11b      	bne.n	8001d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0208 	mvn.w	r2, #8
 8001d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f89a 	bl	8001e54 <HAL_TIM_IC_CaptureCallback>
 8001d20:	e005      	b.n	8001d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f88c 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f89d 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d122      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b10      	cmp	r3, #16
 8001d4e:	d11b      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0210 	mvn.w	r2, #16
 8001d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2208      	movs	r2, #8
 8001d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f870 	bl	8001e54 <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f862 	bl	8001e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f873 	bl	8001e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0201 	mvn.w	r2, #1
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff f948 	bl	8001044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbe:	2b80      	cmp	r3, #128	; 0x80
 8001dc0:	d10e      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dcc:	2b80      	cmp	r3, #128	; 0x80
 8001dce:	d107      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f902 	bl	8001fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dea:	2b40      	cmp	r3, #64	; 0x40
 8001dec:	d10e      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df8:	2b40      	cmp	r3, #64	; 0x40
 8001dfa:	d107      	bne.n	8001e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f838 	bl	8001e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d107      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0220 	mvn.w	r2, #32
 8001e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8cc 	bl	8001fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a40      	ldr	r2, [pc, #256]	; (8001fa4 <TIM_Base_SetConfig+0x114>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d013      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eae:	d00f      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3d      	ldr	r2, [pc, #244]	; (8001fa8 <TIM_Base_SetConfig+0x118>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00b      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3c      	ldr	r2, [pc, #240]	; (8001fac <TIM_Base_SetConfig+0x11c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d007      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3b      	ldr	r2, [pc, #236]	; (8001fb0 <TIM_Base_SetConfig+0x120>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3a      	ldr	r2, [pc, #232]	; (8001fb4 <TIM_Base_SetConfig+0x124>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d108      	bne.n	8001ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <TIM_Base_SetConfig+0x114>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02b      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d027      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <TIM_Base_SetConfig+0x118>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d023      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <TIM_Base_SetConfig+0x11c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01f      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <TIM_Base_SetConfig+0x120>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01b      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <TIM_Base_SetConfig+0x124>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d017      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a28      	ldr	r2, [pc, #160]	; (8001fb8 <TIM_Base_SetConfig+0x128>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <TIM_Base_SetConfig+0x12c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00f      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <TIM_Base_SetConfig+0x130>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00b      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a25      	ldr	r2, [pc, #148]	; (8001fc4 <TIM_Base_SetConfig+0x134>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a24      	ldr	r2, [pc, #144]	; (8001fc8 <TIM_Base_SetConfig+0x138>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d003      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <TIM_Base_SetConfig+0x13c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d108      	bne.n	8001f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <TIM_Base_SetConfig+0x114>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d003      	beq.n	8001f88 <TIM_Base_SetConfig+0xf8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <TIM_Base_SetConfig+0x124>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d103      	bne.n	8001f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	615a      	str	r2, [r3, #20]
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40000800 	.word	0x40000800
 8001fb0:	40000c00 	.word	0x40000c00
 8001fb4:	40010400 	.word	0x40010400
 8001fb8:	40014000 	.word	0x40014000
 8001fbc:	40014400 	.word	0x40014400
 8001fc0:	40014800 	.word	0x40014800
 8001fc4:	40001800 	.word	0x40001800
 8001fc8:	40001c00 	.word	0x40001c00
 8001fcc:	40002000 	.word	0x40002000

08001fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e03f      	b.n	800208a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff f868 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	; 0x24
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800203a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fd71 	bl	8002b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b08a      	sub	sp, #40	; 0x28
 8002096:	af02      	add	r7, sp, #8
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	603b      	str	r3, [r7, #0]
 800209e:	4613      	mov	r3, r2
 80020a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d17c      	bne.n	80021ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_UART_Transmit+0x2c>
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e075      	b.n	80021ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_UART_Transmit+0x3e>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e06e      	b.n	80021ae <HAL_UART_Transmit+0x11c>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2221      	movs	r2, #33	; 0x21
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020e6:	f7ff f935 	bl	8001354 <HAL_GetTick>
 80020ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	88fa      	ldrh	r2, [r7, #6]
 80020f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	88fa      	ldrh	r2, [r7, #6]
 80020f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002100:	d108      	bne.n	8002114 <HAL_UART_Transmit+0x82>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d104      	bne.n	8002114 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	e003      	b.n	800211c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002124:	e02a      	b.n	800217c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	2180      	movs	r1, #128	; 0x80
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 faef 	bl	8002714 <UART_WaitOnFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e036      	b.n	80021ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10b      	bne.n	800215e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	3302      	adds	r3, #2
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	e007      	b.n	800216e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	3301      	adds	r3, #1
 800216c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002172:	b29b      	uxth	r3, r3
 8002174:	3b01      	subs	r3, #1
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1cf      	bne.n	8002126 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2200      	movs	r2, #0
 800218e:	2140      	movs	r1, #64	; 0x40
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 fabf 	bl	8002714 <UART_WaitOnFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e006      	b.n	80021ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
  }
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3720      	adds	r7, #32
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b0ba      	sub	sp, #232	; 0xe8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10f      	bne.n	800221e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <HAL_UART_IRQHandler+0x66>
 800220a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fbc9 	bl	80029ae <UART_Receive_IT>
      return;
 800221c:	e256      	b.n	80026cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800221e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 80de 	beq.w	80023e4 <HAL_UART_IRQHandler+0x22c>
 8002228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002238:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80d1 	beq.w	80023e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_UART_IRQHandler+0xae>
 800224e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_UART_IRQHandler+0xd2>
 8002272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f043 0202 	orr.w	r2, r3, #2
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800228a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00b      	beq.n	80022ae <HAL_UART_IRQHandler+0xf6>
 8002296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f043 0204 	orr.w	r2, r3, #4
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d011      	beq.n	80022de <HAL_UART_IRQHandler+0x126>
 80022ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f043 0208 	orr.w	r2, r3, #8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 81ed 	beq.w	80026c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_UART_IRQHandler+0x14e>
 80022f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fb54 	bl	80029ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d103      	bne.n	8002332 <HAL_UART_IRQHandler+0x17a>
 800232a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800232e:	2b00      	cmp	r3, #0
 8002330:	d04f      	beq.n	80023d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fa5c 	bl	80027f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	2b40      	cmp	r3, #64	; 0x40
 8002344:	d141      	bne.n	80023ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3314      	adds	r3, #20
 800234c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002354:	e853 3f00 	ldrex	r3, [r3]
 8002358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800235c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3314      	adds	r3, #20
 800236e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002372:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800237a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800237e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002382:	e841 2300 	strex	r3, r2, [r1]
 8002386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800238a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1d9      	bne.n	8002346 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	2b00      	cmp	r3, #0
 8002398:	d013      	beq.n	80023c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	4a7d      	ldr	r2, [pc, #500]	; (8002594 <HAL_UART_IRQHandler+0x3dc>)
 80023a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff f96e 	bl	8001688 <HAL_DMA_Abort_IT>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d016      	beq.n	80023e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023bc:	4610      	mov	r0, r2
 80023be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c0:	e00e      	b.n	80023e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f990 	bl	80026e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c8:	e00a      	b.n	80023e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f98c 	bl	80026e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d0:	e006      	b.n	80023e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f988 	bl	80026e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023de:	e170      	b.n	80026c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e0:	bf00      	nop
    return;
 80023e2:	e16e      	b.n	80026c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	f040 814a 	bne.w	8002682 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8143 	beq.w	8002682 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 813c 	beq.w	8002682 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	f040 80b4 	bne.w	8002598 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800243c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 8140 	beq.w	80026c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800244a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800244e:	429a      	cmp	r2, r3
 8002450:	f080 8139 	bcs.w	80026c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800245a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002466:	f000 8088 	beq.w	800257a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	330c      	adds	r3, #12
 8002470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002478:	e853 3f00 	ldrex	r3, [r3]
 800247c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002488:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	330c      	adds	r3, #12
 8002492:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002496:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800249a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80024a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024a6:	e841 2300 	strex	r3, r2, [r1]
 80024aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1d9      	bne.n	800246a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3314      	adds	r3, #20
 80024bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024c0:	e853 3f00 	ldrex	r3, [r3]
 80024c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	3314      	adds	r3, #20
 80024d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024e6:	e841 2300 	strex	r3, r2, [r1]
 80024ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e1      	bne.n	80024b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3314      	adds	r3, #20
 80024f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024fc:	e853 3f00 	ldrex	r3, [r3]
 8002500:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3314      	adds	r3, #20
 8002512:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002516:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002518:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800251c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800251e:	e841 2300 	strex	r3, r2, [r1]
 8002522:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1e3      	bne.n	80024f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	330c      	adds	r3, #12
 800253e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002542:	e853 3f00 	ldrex	r3, [r3]
 8002546:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254a:	f023 0310 	bic.w	r3, r3, #16
 800254e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	330c      	adds	r3, #12
 8002558:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800255c:	65ba      	str	r2, [r7, #88]	; 0x58
 800255e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002560:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002562:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002564:	e841 2300 	strex	r3, r2, [r1]
 8002568:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800256a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1e3      	bne.n	8002538 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff f817 	bl	80015a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002582:	b29b      	uxth	r3, r3
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	b29b      	uxth	r3, r3
 8002588:	4619      	mov	r1, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f8b6 	bl	80026fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002590:	e099      	b.n	80026c6 <HAL_UART_IRQHandler+0x50e>
 8002592:	bf00      	nop
 8002594:	080028b7 	.word	0x080028b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 808b 	beq.w	80026ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80025b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8086 	beq.w	80026ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	330c      	adds	r3, #12
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c8:	e853 3f00 	ldrex	r3, [r3]
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	330c      	adds	r3, #12
 80025de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025e2:	647a      	str	r2, [r7, #68]	; 0x44
 80025e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025ea:	e841 2300 	strex	r3, r2, [r1]
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1e3      	bne.n	80025be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3314      	adds	r3, #20
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	e853 3f00 	ldrex	r3, [r3]
 8002604:	623b      	str	r3, [r7, #32]
   return(result);
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3314      	adds	r3, #20
 8002616:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800261a:	633a      	str	r2, [r7, #48]	; 0x30
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002622:	e841 2300 	strex	r3, r2, [r1]
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1e3      	bne.n	80025f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	330c      	adds	r3, #12
 8002642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	e853 3f00 	ldrex	r3, [r3]
 800264a:	60fb      	str	r3, [r7, #12]
   return(result);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0310 	bic.w	r3, r3, #16
 8002652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	330c      	adds	r3, #12
 800265c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002660:	61fa      	str	r2, [r7, #28]
 8002662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002664:	69b9      	ldr	r1, [r7, #24]
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	e841 2300 	strex	r3, r2, [r1]
 800266c:	617b      	str	r3, [r7, #20]
   return(result);
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e3      	bne.n	800263c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002678:	4619      	mov	r1, r3
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f83e 	bl	80026fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002680:	e023      	b.n	80026ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_UART_IRQHandler+0x4ea>
 800268e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f91f 	bl	80028de <UART_Transmit_IT>
    return;
 80026a0:	e014      	b.n	80026cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00e      	beq.n	80026cc <HAL_UART_IRQHandler+0x514>
 80026ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f95f 	bl	800297e <UART_EndTransmit_IT>
    return;
 80026c0:	e004      	b.n	80026cc <HAL_UART_IRQHandler+0x514>
    return;
 80026c2:	bf00      	nop
 80026c4:	e002      	b.n	80026cc <HAL_UART_IRQHandler+0x514>
      return;
 80026c6:	bf00      	nop
 80026c8:	e000      	b.n	80026cc <HAL_UART_IRQHandler+0x514>
      return;
 80026ca:	bf00      	nop
  }
}
 80026cc:	37e8      	adds	r7, #232	; 0xe8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop

080026d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b090      	sub	sp, #64	; 0x40
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	4613      	mov	r3, r2
 8002722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002724:	e050      	b.n	80027c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d04c      	beq.n	80027c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800272e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002730:	2b00      	cmp	r3, #0
 8002732:	d007      	beq.n	8002744 <UART_WaitOnFlagUntilTimeout+0x30>
 8002734:	f7fe fe0e 	bl	8001354 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002740:	429a      	cmp	r2, r3
 8002742:	d241      	bcs.n	80027c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	330c      	adds	r3, #12
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	e853 3f00 	ldrex	r3, [r3]
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	330c      	adds	r3, #12
 8002762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002764:	637a      	str	r2, [r7, #52]	; 0x34
 8002766:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002768:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800276a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800276c:	e841 2300 	strex	r3, r2, [r1]
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e5      	bne.n	8002744 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3314      	adds	r3, #20
 800277e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	e853 3f00 	ldrex	r3, [r3]
 8002786:	613b      	str	r3, [r7, #16]
   return(result);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3314      	adds	r3, #20
 8002796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002798:	623a      	str	r2, [r7, #32]
 800279a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279c:	69f9      	ldr	r1, [r7, #28]
 800279e:	6a3a      	ldr	r2, [r7, #32]
 80027a0:	e841 2300 	strex	r3, r2, [r1]
 80027a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1e5      	bne.n	8002778 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e00f      	b.n	80027e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4013      	ands	r3, r2
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d09f      	beq.n	8002726 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3740      	adds	r7, #64	; 0x40
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b095      	sub	sp, #84	; 0x54
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	330c      	adds	r3, #12
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002802:	e853 3f00 	ldrex	r3, [r3]
 8002806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800280e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002818:	643a      	str	r2, [r7, #64]	; 0x40
 800281a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800281e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002820:	e841 2300 	strex	r3, r2, [r1]
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e5      	bne.n	80027f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3314      	adds	r3, #20
 8002832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	e853 3f00 	ldrex	r3, [r3]
 800283a:	61fb      	str	r3, [r7, #28]
   return(result);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	64bb      	str	r3, [r7, #72]	; 0x48
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3314      	adds	r3, #20
 800284a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800284c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002854:	e841 2300 	strex	r3, r2, [r1]
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e5      	bne.n	800282c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	2b01      	cmp	r3, #1
 8002866:	d119      	bne.n	800289c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	e853 3f00 	ldrex	r3, [r3]
 8002876:	60bb      	str	r3, [r7, #8]
   return(result);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f023 0310 	bic.w	r3, r3, #16
 800287e:	647b      	str	r3, [r7, #68]	; 0x44
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002888:	61ba      	str	r2, [r7, #24]
 800288a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288c:	6979      	ldr	r1, [r7, #20]
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	e841 2300 	strex	r3, r2, [r1]
 8002894:	613b      	str	r3, [r7, #16]
   return(result);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e5      	bne.n	8002868 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028aa:	bf00      	nop
 80028ac:	3754      	adds	r7, #84	; 0x54
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f7ff ff09 	bl	80026e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b21      	cmp	r3, #33	; 0x21
 80028f0:	d13e      	bne.n	8002970 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fa:	d114      	bne.n	8002926 <UART_Transmit_IT+0x48>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d110      	bne.n	8002926 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002918:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	1c9a      	adds	r2, r3, #2
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	621a      	str	r2, [r3, #32]
 8002924:	e008      	b.n	8002938 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	1c59      	adds	r1, r3, #1
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6211      	str	r1, [r2, #32]
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4619      	mov	r1, r3
 8002946:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10f      	bne.n	800296c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800295a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800296a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e000      	b.n	8002972 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002970:	2302      	movs	r3, #2
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002994:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe fb6c 	bl	800107c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b08c      	sub	sp, #48	; 0x30
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b22      	cmp	r3, #34	; 0x22
 80029c0:	f040 80ab 	bne.w	8002b1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029cc:	d117      	bne.n	80029fe <UART_Receive_IT+0x50>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d113      	bne.n	80029fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	1c9a      	adds	r2, r3, #2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
 80029fc:	e026      	b.n	8002a4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a10:	d007      	beq.n	8002a22 <UART_Receive_IT+0x74>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10a      	bne.n	8002a30 <UART_Receive_IT+0x82>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e008      	b.n	8002a42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d15a      	bne.n	8002b16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0220 	bic.w	r2, r2, #32
 8002a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d135      	bne.n	8002b0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	330c      	adds	r3, #12
 8002aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f023 0310 	bic.w	r3, r3, #16
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	330c      	adds	r3, #12
 8002ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac6:	623a      	str	r2, [r7, #32]
 8002ac8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aca:	69f9      	ldr	r1, [r7, #28]
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	e841 2300 	strex	r3, r2, [r1]
 8002ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1e5      	bne.n	8002aa6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d10a      	bne.n	8002afe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff fdf9 	bl	80026fc <HAL_UARTEx_RxEventCallback>
 8002b0a:	e002      	b.n	8002b12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fde1 	bl	80026d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e002      	b.n	8002b1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3730      	adds	r7, #48	; 0x30
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b28:	b09f      	sub	sp, #124	; 0x7c
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3a:	68d9      	ldr	r1, [r3, #12]
 8002b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	ea40 0301 	orr.w	r3, r0, r1
 8002b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b68:	f021 010c 	bic.w	r1, r1, #12
 8002b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b72:	430b      	orrs	r3, r1
 8002b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b82:	6999      	ldr	r1, [r3, #24]
 8002b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	ea40 0301 	orr.w	r3, r0, r1
 8002b8c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4bc5      	ldr	r3, [pc, #788]	; (8002ea8 <UART_SetConfig+0x384>)
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d004      	beq.n	8002ba2 <UART_SetConfig+0x7e>
 8002b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4bc3      	ldr	r3, [pc, #780]	; (8002eac <UART_SetConfig+0x388>)
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d103      	bne.n	8002baa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ba2:	f7fe ff71 	bl	8001a88 <HAL_RCC_GetPCLK2Freq>
 8002ba6:	6778      	str	r0, [r7, #116]	; 0x74
 8002ba8:	e002      	b.n	8002bb0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002baa:	f7fe ff59 	bl	8001a60 <HAL_RCC_GetPCLK1Freq>
 8002bae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb8:	f040 80b6 	bne.w	8002d28 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bbe:	461c      	mov	r4, r3
 8002bc0:	f04f 0500 	mov.w	r5, #0
 8002bc4:	4622      	mov	r2, r4
 8002bc6:	462b      	mov	r3, r5
 8002bc8:	1891      	adds	r1, r2, r2
 8002bca:	6439      	str	r1, [r7, #64]	; 0x40
 8002bcc:	415b      	adcs	r3, r3
 8002bce:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bd4:	1912      	adds	r2, r2, r4
 8002bd6:	eb45 0303 	adc.w	r3, r5, r3
 8002bda:	f04f 0000 	mov.w	r0, #0
 8002bde:	f04f 0100 	mov.w	r1, #0
 8002be2:	00d9      	lsls	r1, r3, #3
 8002be4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002be8:	00d0      	lsls	r0, r2, #3
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	1911      	adds	r1, r2, r4
 8002bf0:	6639      	str	r1, [r7, #96]	; 0x60
 8002bf2:	416b      	adcs	r3, r5
 8002bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8002bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	1891      	adds	r1, r2, r2
 8002c02:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c04:	415b      	adcs	r3, r3
 8002c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c10:	f7fd ffea 	bl	8000be8 <__aeabi_uldivmod>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4ba5      	ldr	r3, [pc, #660]	; (8002eb0 <UART_SetConfig+0x38c>)
 8002c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	011e      	lsls	r6, r3, #4
 8002c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c24:	461c      	mov	r4, r3
 8002c26:	f04f 0500 	mov.w	r5, #0
 8002c2a:	4622      	mov	r2, r4
 8002c2c:	462b      	mov	r3, r5
 8002c2e:	1891      	adds	r1, r2, r2
 8002c30:	6339      	str	r1, [r7, #48]	; 0x30
 8002c32:	415b      	adcs	r3, r3
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
 8002c36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c3a:	1912      	adds	r2, r2, r4
 8002c3c:	eb45 0303 	adc.w	r3, r5, r3
 8002c40:	f04f 0000 	mov.w	r0, #0
 8002c44:	f04f 0100 	mov.w	r1, #0
 8002c48:	00d9      	lsls	r1, r3, #3
 8002c4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c4e:	00d0      	lsls	r0, r2, #3
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	1911      	adds	r1, r2, r4
 8002c56:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c58:	416b      	adcs	r3, r5
 8002c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	461a      	mov	r2, r3
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	1891      	adds	r1, r2, r2
 8002c68:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c6a:	415b      	adcs	r3, r3
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c76:	f7fd ffb7 	bl	8000be8 <__aeabi_uldivmod>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4b8c      	ldr	r3, [pc, #560]	; (8002eb0 <UART_SetConfig+0x38c>)
 8002c80:	fba3 1302 	umull	r1, r3, r3, r2
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	2164      	movs	r1, #100	; 0x64
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	3332      	adds	r3, #50	; 0x32
 8002c92:	4a87      	ldr	r2, [pc, #540]	; (8002eb0 <UART_SetConfig+0x38c>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ca0:	441e      	add	r6, r3
 8002ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f04f 0100 	mov.w	r1, #0
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	1894      	adds	r4, r2, r2
 8002cb0:	623c      	str	r4, [r7, #32]
 8002cb2:	415b      	adcs	r3, r3
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cba:	1812      	adds	r2, r2, r0
 8002cbc:	eb41 0303 	adc.w	r3, r1, r3
 8002cc0:	f04f 0400 	mov.w	r4, #0
 8002cc4:	f04f 0500 	mov.w	r5, #0
 8002cc8:	00dd      	lsls	r5, r3, #3
 8002cca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002cce:	00d4      	lsls	r4, r2, #3
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	462b      	mov	r3, r5
 8002cd4:	1814      	adds	r4, r2, r0
 8002cd6:	653c      	str	r4, [r7, #80]	; 0x50
 8002cd8:	414b      	adcs	r3, r1
 8002cda:	657b      	str	r3, [r7, #84]	; 0x54
 8002cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	1891      	adds	r1, r2, r2
 8002ce8:	61b9      	str	r1, [r7, #24]
 8002cea:	415b      	adcs	r3, r3
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002cf6:	f7fd ff77 	bl	8000be8 <__aeabi_uldivmod>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4b6c      	ldr	r3, [pc, #432]	; (8002eb0 <UART_SetConfig+0x38c>)
 8002d00:	fba3 1302 	umull	r1, r3, r3, r2
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	2164      	movs	r1, #100	; 0x64
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	3332      	adds	r3, #50	; 0x32
 8002d12:	4a67      	ldr	r2, [pc, #412]	; (8002eb0 <UART_SetConfig+0x38c>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	f003 0207 	and.w	r2, r3, #7
 8002d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4432      	add	r2, r6
 8002d24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d26:	e0b9      	b.n	8002e9c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d2a:	461c      	mov	r4, r3
 8002d2c:	f04f 0500 	mov.w	r5, #0
 8002d30:	4622      	mov	r2, r4
 8002d32:	462b      	mov	r3, r5
 8002d34:	1891      	adds	r1, r2, r2
 8002d36:	6139      	str	r1, [r7, #16]
 8002d38:	415b      	adcs	r3, r3
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d40:	1912      	adds	r2, r2, r4
 8002d42:	eb45 0303 	adc.w	r3, r5, r3
 8002d46:	f04f 0000 	mov.w	r0, #0
 8002d4a:	f04f 0100 	mov.w	r1, #0
 8002d4e:	00d9      	lsls	r1, r3, #3
 8002d50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d54:	00d0      	lsls	r0, r2, #3
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	eb12 0804 	adds.w	r8, r2, r4
 8002d5e:	eb43 0905 	adc.w	r9, r3, r5
 8002d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	008b      	lsls	r3, r1, #2
 8002d76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d7a:	0082      	lsls	r2, r0, #2
 8002d7c:	4640      	mov	r0, r8
 8002d7e:	4649      	mov	r1, r9
 8002d80:	f7fd ff32 	bl	8000be8 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <UART_SetConfig+0x38c>)
 8002d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	011e      	lsls	r6, r3, #4
 8002d92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d94:	4618      	mov	r0, r3
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	1894      	adds	r4, r2, r2
 8002da0:	60bc      	str	r4, [r7, #8]
 8002da2:	415b      	adcs	r3, r3
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002daa:	1812      	adds	r2, r2, r0
 8002dac:	eb41 0303 	adc.w	r3, r1, r3
 8002db0:	f04f 0400 	mov.w	r4, #0
 8002db4:	f04f 0500 	mov.w	r5, #0
 8002db8:	00dd      	lsls	r5, r3, #3
 8002dba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dbe:	00d4      	lsls	r4, r2, #3
 8002dc0:	4622      	mov	r2, r4
 8002dc2:	462b      	mov	r3, r5
 8002dc4:	1814      	adds	r4, r2, r0
 8002dc6:	64bc      	str	r4, [r7, #72]	; 0x48
 8002dc8:	414b      	adcs	r3, r1
 8002dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	008b      	lsls	r3, r1, #2
 8002de0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002de4:	0082      	lsls	r2, r0, #2
 8002de6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002dea:	f7fd fefd 	bl	8000be8 <__aeabi_uldivmod>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4b2f      	ldr	r3, [pc, #188]	; (8002eb0 <UART_SetConfig+0x38c>)
 8002df4:	fba3 1302 	umull	r1, r3, r3, r2
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	2164      	movs	r1, #100	; 0x64
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	3332      	adds	r3, #50	; 0x32
 8002e06:	4a2a      	ldr	r2, [pc, #168]	; (8002eb0 <UART_SetConfig+0x38c>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e12:	441e      	add	r6, r3
 8002e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e16:	4618      	mov	r0, r3
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	1894      	adds	r4, r2, r2
 8002e22:	603c      	str	r4, [r7, #0]
 8002e24:	415b      	adcs	r3, r3
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e2c:	1812      	adds	r2, r2, r0
 8002e2e:	eb41 0303 	adc.w	r3, r1, r3
 8002e32:	f04f 0400 	mov.w	r4, #0
 8002e36:	f04f 0500 	mov.w	r5, #0
 8002e3a:	00dd      	lsls	r5, r3, #3
 8002e3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e40:	00d4      	lsls	r4, r2, #3
 8002e42:	4622      	mov	r2, r4
 8002e44:	462b      	mov	r3, r5
 8002e46:	eb12 0a00 	adds.w	sl, r2, r0
 8002e4a:	eb43 0b01 	adc.w	fp, r3, r1
 8002e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f04f 0100 	mov.w	r1, #0
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	008b      	lsls	r3, r1, #2
 8002e62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e66:	0082      	lsls	r2, r0, #2
 8002e68:	4650      	mov	r0, sl
 8002e6a:	4659      	mov	r1, fp
 8002e6c:	f7fd febc 	bl	8000be8 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <UART_SetConfig+0x38c>)
 8002e76:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2164      	movs	r1, #100	; 0x64
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	3332      	adds	r3, #50	; 0x32
 8002e88:	4a09      	ldr	r2, [pc, #36]	; (8002eb0 <UART_SetConfig+0x38c>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	f003 020f 	and.w	r2, r3, #15
 8002e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4432      	add	r2, r6
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	377c      	adds	r7, #124	; 0x7c
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40011000 	.word	0x40011000
 8002eac:	40011400 	.word	0x40011400
 8002eb0:	51eb851f 	.word	0x51eb851f

08002eb4 <__libc_init_array>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	4d0d      	ldr	r5, [pc, #52]	; (8002eec <__libc_init_array+0x38>)
 8002eb8:	4c0d      	ldr	r4, [pc, #52]	; (8002ef0 <__libc_init_array+0x3c>)
 8002eba:	1b64      	subs	r4, r4, r5
 8002ebc:	10a4      	asrs	r4, r4, #2
 8002ebe:	2600      	movs	r6, #0
 8002ec0:	42a6      	cmp	r6, r4
 8002ec2:	d109      	bne.n	8002ed8 <__libc_init_array+0x24>
 8002ec4:	4d0b      	ldr	r5, [pc, #44]	; (8002ef4 <__libc_init_array+0x40>)
 8002ec6:	4c0c      	ldr	r4, [pc, #48]	; (8002ef8 <__libc_init_array+0x44>)
 8002ec8:	f002 fd40 	bl	800594c <_init>
 8002ecc:	1b64      	subs	r4, r4, r5
 8002ece:	10a4      	asrs	r4, r4, #2
 8002ed0:	2600      	movs	r6, #0
 8002ed2:	42a6      	cmp	r6, r4
 8002ed4:	d105      	bne.n	8002ee2 <__libc_init_array+0x2e>
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
 8002ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002edc:	4798      	blx	r3
 8002ede:	3601      	adds	r6, #1
 8002ee0:	e7ee      	b.n	8002ec0 <__libc_init_array+0xc>
 8002ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee6:	4798      	blx	r3
 8002ee8:	3601      	adds	r6, #1
 8002eea:	e7f2      	b.n	8002ed2 <__libc_init_array+0x1e>
 8002eec:	08005d5c 	.word	0x08005d5c
 8002ef0:	08005d5c 	.word	0x08005d5c
 8002ef4:	08005d5c 	.word	0x08005d5c
 8002ef8:	08005d60 	.word	0x08005d60

08002efc <memset>:
 8002efc:	4402      	add	r2, r0
 8002efe:	4603      	mov	r3, r0
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d100      	bne.n	8002f06 <memset+0xa>
 8002f04:	4770      	bx	lr
 8002f06:	f803 1b01 	strb.w	r1, [r3], #1
 8002f0a:	e7f9      	b.n	8002f00 <memset+0x4>

08002f0c <__cvt>:
 8002f0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f10:	ec55 4b10 	vmov	r4, r5, d0
 8002f14:	2d00      	cmp	r5, #0
 8002f16:	460e      	mov	r6, r1
 8002f18:	4619      	mov	r1, r3
 8002f1a:	462b      	mov	r3, r5
 8002f1c:	bfbb      	ittet	lt
 8002f1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002f22:	461d      	movlt	r5, r3
 8002f24:	2300      	movge	r3, #0
 8002f26:	232d      	movlt	r3, #45	; 0x2d
 8002f28:	700b      	strb	r3, [r1, #0]
 8002f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002f30:	4691      	mov	r9, r2
 8002f32:	f023 0820 	bic.w	r8, r3, #32
 8002f36:	bfbc      	itt	lt
 8002f38:	4622      	movlt	r2, r4
 8002f3a:	4614      	movlt	r4, r2
 8002f3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f40:	d005      	beq.n	8002f4e <__cvt+0x42>
 8002f42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002f46:	d100      	bne.n	8002f4a <__cvt+0x3e>
 8002f48:	3601      	adds	r6, #1
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	e000      	b.n	8002f50 <__cvt+0x44>
 8002f4e:	2103      	movs	r1, #3
 8002f50:	ab03      	add	r3, sp, #12
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	ab02      	add	r3, sp, #8
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	ec45 4b10 	vmov	d0, r4, r5
 8002f5c:	4653      	mov	r3, sl
 8002f5e:	4632      	mov	r2, r6
 8002f60:	f000 fcca 	bl	80038f8 <_dtoa_r>
 8002f64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002f68:	4607      	mov	r7, r0
 8002f6a:	d102      	bne.n	8002f72 <__cvt+0x66>
 8002f6c:	f019 0f01 	tst.w	r9, #1
 8002f70:	d022      	beq.n	8002fb8 <__cvt+0xac>
 8002f72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002f76:	eb07 0906 	add.w	r9, r7, r6
 8002f7a:	d110      	bne.n	8002f9e <__cvt+0x92>
 8002f7c:	783b      	ldrb	r3, [r7, #0]
 8002f7e:	2b30      	cmp	r3, #48	; 0x30
 8002f80:	d10a      	bne.n	8002f98 <__cvt+0x8c>
 8002f82:	2200      	movs	r2, #0
 8002f84:	2300      	movs	r3, #0
 8002f86:	4620      	mov	r0, r4
 8002f88:	4629      	mov	r1, r5
 8002f8a:	f7fd fdbd 	bl	8000b08 <__aeabi_dcmpeq>
 8002f8e:	b918      	cbnz	r0, 8002f98 <__cvt+0x8c>
 8002f90:	f1c6 0601 	rsb	r6, r6, #1
 8002f94:	f8ca 6000 	str.w	r6, [sl]
 8002f98:	f8da 3000 	ldr.w	r3, [sl]
 8002f9c:	4499      	add	r9, r3
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	f7fd fdaf 	bl	8000b08 <__aeabi_dcmpeq>
 8002faa:	b108      	cbz	r0, 8002fb0 <__cvt+0xa4>
 8002fac:	f8cd 900c 	str.w	r9, [sp, #12]
 8002fb0:	2230      	movs	r2, #48	; 0x30
 8002fb2:	9b03      	ldr	r3, [sp, #12]
 8002fb4:	454b      	cmp	r3, r9
 8002fb6:	d307      	bcc.n	8002fc8 <__cvt+0xbc>
 8002fb8:	9b03      	ldr	r3, [sp, #12]
 8002fba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fbc:	1bdb      	subs	r3, r3, r7
 8002fbe:	4638      	mov	r0, r7
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	b004      	add	sp, #16
 8002fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc8:	1c59      	adds	r1, r3, #1
 8002fca:	9103      	str	r1, [sp, #12]
 8002fcc:	701a      	strb	r2, [r3, #0]
 8002fce:	e7f0      	b.n	8002fb2 <__cvt+0xa6>

08002fd0 <__exponent>:
 8002fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2900      	cmp	r1, #0
 8002fd6:	bfb8      	it	lt
 8002fd8:	4249      	neglt	r1, r1
 8002fda:	f803 2b02 	strb.w	r2, [r3], #2
 8002fde:	bfb4      	ite	lt
 8002fe0:	222d      	movlt	r2, #45	; 0x2d
 8002fe2:	222b      	movge	r2, #43	; 0x2b
 8002fe4:	2909      	cmp	r1, #9
 8002fe6:	7042      	strb	r2, [r0, #1]
 8002fe8:	dd2a      	ble.n	8003040 <__exponent+0x70>
 8002fea:	f10d 0407 	add.w	r4, sp, #7
 8002fee:	46a4      	mov	ip, r4
 8002ff0:	270a      	movs	r7, #10
 8002ff2:	46a6      	mov	lr, r4
 8002ff4:	460a      	mov	r2, r1
 8002ff6:	fb91 f6f7 	sdiv	r6, r1, r7
 8002ffa:	fb07 1516 	mls	r5, r7, r6, r1
 8002ffe:	3530      	adds	r5, #48	; 0x30
 8003000:	2a63      	cmp	r2, #99	; 0x63
 8003002:	f104 34ff 	add.w	r4, r4, #4294967295
 8003006:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800300a:	4631      	mov	r1, r6
 800300c:	dcf1      	bgt.n	8002ff2 <__exponent+0x22>
 800300e:	3130      	adds	r1, #48	; 0x30
 8003010:	f1ae 0502 	sub.w	r5, lr, #2
 8003014:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003018:	1c44      	adds	r4, r0, #1
 800301a:	4629      	mov	r1, r5
 800301c:	4561      	cmp	r1, ip
 800301e:	d30a      	bcc.n	8003036 <__exponent+0x66>
 8003020:	f10d 0209 	add.w	r2, sp, #9
 8003024:	eba2 020e 	sub.w	r2, r2, lr
 8003028:	4565      	cmp	r5, ip
 800302a:	bf88      	it	hi
 800302c:	2200      	movhi	r2, #0
 800302e:	4413      	add	r3, r2
 8003030:	1a18      	subs	r0, r3, r0
 8003032:	b003      	add	sp, #12
 8003034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800303a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800303e:	e7ed      	b.n	800301c <__exponent+0x4c>
 8003040:	2330      	movs	r3, #48	; 0x30
 8003042:	3130      	adds	r1, #48	; 0x30
 8003044:	7083      	strb	r3, [r0, #2]
 8003046:	70c1      	strb	r1, [r0, #3]
 8003048:	1d03      	adds	r3, r0, #4
 800304a:	e7f1      	b.n	8003030 <__exponent+0x60>

0800304c <_printf_float>:
 800304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003050:	ed2d 8b02 	vpush	{d8}
 8003054:	b08d      	sub	sp, #52	; 0x34
 8003056:	460c      	mov	r4, r1
 8003058:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800305c:	4616      	mov	r6, r2
 800305e:	461f      	mov	r7, r3
 8003060:	4605      	mov	r5, r0
 8003062:	f001 fa35 	bl	80044d0 <_localeconv_r>
 8003066:	f8d0 a000 	ldr.w	sl, [r0]
 800306a:	4650      	mov	r0, sl
 800306c:	f7fd f8d0 	bl	8000210 <strlen>
 8003070:	2300      	movs	r3, #0
 8003072:	930a      	str	r3, [sp, #40]	; 0x28
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	9305      	str	r3, [sp, #20]
 8003078:	f8d8 3000 	ldr.w	r3, [r8]
 800307c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003080:	3307      	adds	r3, #7
 8003082:	f023 0307 	bic.w	r3, r3, #7
 8003086:	f103 0208 	add.w	r2, r3, #8
 800308a:	f8c8 2000 	str.w	r2, [r8]
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003096:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800309a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800309e:	9307      	str	r3, [sp, #28]
 80030a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80030a4:	ee08 0a10 	vmov	s16, r0
 80030a8:	4b9f      	ldr	r3, [pc, #636]	; (8003328 <_printf_float+0x2dc>)
 80030aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80030ae:	f04f 32ff 	mov.w	r2, #4294967295
 80030b2:	f7fd fd5b 	bl	8000b6c <__aeabi_dcmpun>
 80030b6:	bb88      	cbnz	r0, 800311c <_printf_float+0xd0>
 80030b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80030bc:	4b9a      	ldr	r3, [pc, #616]	; (8003328 <_printf_float+0x2dc>)
 80030be:	f04f 32ff 	mov.w	r2, #4294967295
 80030c2:	f7fd fd35 	bl	8000b30 <__aeabi_dcmple>
 80030c6:	bb48      	cbnz	r0, 800311c <_printf_float+0xd0>
 80030c8:	2200      	movs	r2, #0
 80030ca:	2300      	movs	r3, #0
 80030cc:	4640      	mov	r0, r8
 80030ce:	4649      	mov	r1, r9
 80030d0:	f7fd fd24 	bl	8000b1c <__aeabi_dcmplt>
 80030d4:	b110      	cbz	r0, 80030dc <_printf_float+0x90>
 80030d6:	232d      	movs	r3, #45	; 0x2d
 80030d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030dc:	4b93      	ldr	r3, [pc, #588]	; (800332c <_printf_float+0x2e0>)
 80030de:	4894      	ldr	r0, [pc, #592]	; (8003330 <_printf_float+0x2e4>)
 80030e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80030e4:	bf94      	ite	ls
 80030e6:	4698      	movls	r8, r3
 80030e8:	4680      	movhi	r8, r0
 80030ea:	2303      	movs	r3, #3
 80030ec:	6123      	str	r3, [r4, #16]
 80030ee:	9b05      	ldr	r3, [sp, #20]
 80030f0:	f023 0204 	bic.w	r2, r3, #4
 80030f4:	6022      	str	r2, [r4, #0]
 80030f6:	f04f 0900 	mov.w	r9, #0
 80030fa:	9700      	str	r7, [sp, #0]
 80030fc:	4633      	mov	r3, r6
 80030fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8003100:	4621      	mov	r1, r4
 8003102:	4628      	mov	r0, r5
 8003104:	f000 f9d8 	bl	80034b8 <_printf_common>
 8003108:	3001      	adds	r0, #1
 800310a:	f040 8090 	bne.w	800322e <_printf_float+0x1e2>
 800310e:	f04f 30ff 	mov.w	r0, #4294967295
 8003112:	b00d      	add	sp, #52	; 0x34
 8003114:	ecbd 8b02 	vpop	{d8}
 8003118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311c:	4642      	mov	r2, r8
 800311e:	464b      	mov	r3, r9
 8003120:	4640      	mov	r0, r8
 8003122:	4649      	mov	r1, r9
 8003124:	f7fd fd22 	bl	8000b6c <__aeabi_dcmpun>
 8003128:	b140      	cbz	r0, 800313c <_printf_float+0xf0>
 800312a:	464b      	mov	r3, r9
 800312c:	2b00      	cmp	r3, #0
 800312e:	bfbc      	itt	lt
 8003130:	232d      	movlt	r3, #45	; 0x2d
 8003132:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003136:	487f      	ldr	r0, [pc, #508]	; (8003334 <_printf_float+0x2e8>)
 8003138:	4b7f      	ldr	r3, [pc, #508]	; (8003338 <_printf_float+0x2ec>)
 800313a:	e7d1      	b.n	80030e0 <_printf_float+0x94>
 800313c:	6863      	ldr	r3, [r4, #4]
 800313e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003142:	9206      	str	r2, [sp, #24]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	d13f      	bne.n	80031c8 <_printf_float+0x17c>
 8003148:	2306      	movs	r3, #6
 800314a:	6063      	str	r3, [r4, #4]
 800314c:	9b05      	ldr	r3, [sp, #20]
 800314e:	6861      	ldr	r1, [r4, #4]
 8003150:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003154:	2300      	movs	r3, #0
 8003156:	9303      	str	r3, [sp, #12]
 8003158:	ab0a      	add	r3, sp, #40	; 0x28
 800315a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800315e:	ab09      	add	r3, sp, #36	; 0x24
 8003160:	ec49 8b10 	vmov	d0, r8, r9
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	6022      	str	r2, [r4, #0]
 8003168:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800316c:	4628      	mov	r0, r5
 800316e:	f7ff fecd 	bl	8002f0c <__cvt>
 8003172:	9b06      	ldr	r3, [sp, #24]
 8003174:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003176:	2b47      	cmp	r3, #71	; 0x47
 8003178:	4680      	mov	r8, r0
 800317a:	d108      	bne.n	800318e <_printf_float+0x142>
 800317c:	1cc8      	adds	r0, r1, #3
 800317e:	db02      	blt.n	8003186 <_printf_float+0x13a>
 8003180:	6863      	ldr	r3, [r4, #4]
 8003182:	4299      	cmp	r1, r3
 8003184:	dd41      	ble.n	800320a <_printf_float+0x1be>
 8003186:	f1ab 0b02 	sub.w	fp, fp, #2
 800318a:	fa5f fb8b 	uxtb.w	fp, fp
 800318e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003192:	d820      	bhi.n	80031d6 <_printf_float+0x18a>
 8003194:	3901      	subs	r1, #1
 8003196:	465a      	mov	r2, fp
 8003198:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800319c:	9109      	str	r1, [sp, #36]	; 0x24
 800319e:	f7ff ff17 	bl	8002fd0 <__exponent>
 80031a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031a4:	1813      	adds	r3, r2, r0
 80031a6:	2a01      	cmp	r2, #1
 80031a8:	4681      	mov	r9, r0
 80031aa:	6123      	str	r3, [r4, #16]
 80031ac:	dc02      	bgt.n	80031b4 <_printf_float+0x168>
 80031ae:	6822      	ldr	r2, [r4, #0]
 80031b0:	07d2      	lsls	r2, r2, #31
 80031b2:	d501      	bpl.n	80031b8 <_printf_float+0x16c>
 80031b4:	3301      	adds	r3, #1
 80031b6:	6123      	str	r3, [r4, #16]
 80031b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d09c      	beq.n	80030fa <_printf_float+0xae>
 80031c0:	232d      	movs	r3, #45	; 0x2d
 80031c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031c6:	e798      	b.n	80030fa <_printf_float+0xae>
 80031c8:	9a06      	ldr	r2, [sp, #24]
 80031ca:	2a47      	cmp	r2, #71	; 0x47
 80031cc:	d1be      	bne.n	800314c <_printf_float+0x100>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1bc      	bne.n	800314c <_printf_float+0x100>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e7b9      	b.n	800314a <_printf_float+0xfe>
 80031d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80031da:	d118      	bne.n	800320e <_printf_float+0x1c2>
 80031dc:	2900      	cmp	r1, #0
 80031de:	6863      	ldr	r3, [r4, #4]
 80031e0:	dd0b      	ble.n	80031fa <_printf_float+0x1ae>
 80031e2:	6121      	str	r1, [r4, #16]
 80031e4:	b913      	cbnz	r3, 80031ec <_printf_float+0x1a0>
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	07d0      	lsls	r0, r2, #31
 80031ea:	d502      	bpl.n	80031f2 <_printf_float+0x1a6>
 80031ec:	3301      	adds	r3, #1
 80031ee:	440b      	add	r3, r1
 80031f0:	6123      	str	r3, [r4, #16]
 80031f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80031f4:	f04f 0900 	mov.w	r9, #0
 80031f8:	e7de      	b.n	80031b8 <_printf_float+0x16c>
 80031fa:	b913      	cbnz	r3, 8003202 <_printf_float+0x1b6>
 80031fc:	6822      	ldr	r2, [r4, #0]
 80031fe:	07d2      	lsls	r2, r2, #31
 8003200:	d501      	bpl.n	8003206 <_printf_float+0x1ba>
 8003202:	3302      	adds	r3, #2
 8003204:	e7f4      	b.n	80031f0 <_printf_float+0x1a4>
 8003206:	2301      	movs	r3, #1
 8003208:	e7f2      	b.n	80031f0 <_printf_float+0x1a4>
 800320a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800320e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003210:	4299      	cmp	r1, r3
 8003212:	db05      	blt.n	8003220 <_printf_float+0x1d4>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	6121      	str	r1, [r4, #16]
 8003218:	07d8      	lsls	r0, r3, #31
 800321a:	d5ea      	bpl.n	80031f2 <_printf_float+0x1a6>
 800321c:	1c4b      	adds	r3, r1, #1
 800321e:	e7e7      	b.n	80031f0 <_printf_float+0x1a4>
 8003220:	2900      	cmp	r1, #0
 8003222:	bfd4      	ite	le
 8003224:	f1c1 0202 	rsble	r2, r1, #2
 8003228:	2201      	movgt	r2, #1
 800322a:	4413      	add	r3, r2
 800322c:	e7e0      	b.n	80031f0 <_printf_float+0x1a4>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	055a      	lsls	r2, r3, #21
 8003232:	d407      	bmi.n	8003244 <_printf_float+0x1f8>
 8003234:	6923      	ldr	r3, [r4, #16]
 8003236:	4642      	mov	r2, r8
 8003238:	4631      	mov	r1, r6
 800323a:	4628      	mov	r0, r5
 800323c:	47b8      	blx	r7
 800323e:	3001      	adds	r0, #1
 8003240:	d12c      	bne.n	800329c <_printf_float+0x250>
 8003242:	e764      	b.n	800310e <_printf_float+0xc2>
 8003244:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003248:	f240 80e0 	bls.w	800340c <_printf_float+0x3c0>
 800324c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003250:	2200      	movs	r2, #0
 8003252:	2300      	movs	r3, #0
 8003254:	f7fd fc58 	bl	8000b08 <__aeabi_dcmpeq>
 8003258:	2800      	cmp	r0, #0
 800325a:	d034      	beq.n	80032c6 <_printf_float+0x27a>
 800325c:	4a37      	ldr	r2, [pc, #220]	; (800333c <_printf_float+0x2f0>)
 800325e:	2301      	movs	r3, #1
 8003260:	4631      	mov	r1, r6
 8003262:	4628      	mov	r0, r5
 8003264:	47b8      	blx	r7
 8003266:	3001      	adds	r0, #1
 8003268:	f43f af51 	beq.w	800310e <_printf_float+0xc2>
 800326c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003270:	429a      	cmp	r2, r3
 8003272:	db02      	blt.n	800327a <_printf_float+0x22e>
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	07d8      	lsls	r0, r3, #31
 8003278:	d510      	bpl.n	800329c <_printf_float+0x250>
 800327a:	ee18 3a10 	vmov	r3, s16
 800327e:	4652      	mov	r2, sl
 8003280:	4631      	mov	r1, r6
 8003282:	4628      	mov	r0, r5
 8003284:	47b8      	blx	r7
 8003286:	3001      	adds	r0, #1
 8003288:	f43f af41 	beq.w	800310e <_printf_float+0xc2>
 800328c:	f04f 0800 	mov.w	r8, #0
 8003290:	f104 091a 	add.w	r9, r4, #26
 8003294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	4543      	cmp	r3, r8
 800329a:	dc09      	bgt.n	80032b0 <_printf_float+0x264>
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	079b      	lsls	r3, r3, #30
 80032a0:	f100 8105 	bmi.w	80034ae <_printf_float+0x462>
 80032a4:	68e0      	ldr	r0, [r4, #12]
 80032a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032a8:	4298      	cmp	r0, r3
 80032aa:	bfb8      	it	lt
 80032ac:	4618      	movlt	r0, r3
 80032ae:	e730      	b.n	8003112 <_printf_float+0xc6>
 80032b0:	2301      	movs	r3, #1
 80032b2:	464a      	mov	r2, r9
 80032b4:	4631      	mov	r1, r6
 80032b6:	4628      	mov	r0, r5
 80032b8:	47b8      	blx	r7
 80032ba:	3001      	adds	r0, #1
 80032bc:	f43f af27 	beq.w	800310e <_printf_float+0xc2>
 80032c0:	f108 0801 	add.w	r8, r8, #1
 80032c4:	e7e6      	b.n	8003294 <_printf_float+0x248>
 80032c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	dc39      	bgt.n	8003340 <_printf_float+0x2f4>
 80032cc:	4a1b      	ldr	r2, [pc, #108]	; (800333c <_printf_float+0x2f0>)
 80032ce:	2301      	movs	r3, #1
 80032d0:	4631      	mov	r1, r6
 80032d2:	4628      	mov	r0, r5
 80032d4:	47b8      	blx	r7
 80032d6:	3001      	adds	r0, #1
 80032d8:	f43f af19 	beq.w	800310e <_printf_float+0xc2>
 80032dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032e0:	4313      	orrs	r3, r2
 80032e2:	d102      	bne.n	80032ea <_printf_float+0x29e>
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	07d9      	lsls	r1, r3, #31
 80032e8:	d5d8      	bpl.n	800329c <_printf_float+0x250>
 80032ea:	ee18 3a10 	vmov	r3, s16
 80032ee:	4652      	mov	r2, sl
 80032f0:	4631      	mov	r1, r6
 80032f2:	4628      	mov	r0, r5
 80032f4:	47b8      	blx	r7
 80032f6:	3001      	adds	r0, #1
 80032f8:	f43f af09 	beq.w	800310e <_printf_float+0xc2>
 80032fc:	f04f 0900 	mov.w	r9, #0
 8003300:	f104 0a1a 	add.w	sl, r4, #26
 8003304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003306:	425b      	negs	r3, r3
 8003308:	454b      	cmp	r3, r9
 800330a:	dc01      	bgt.n	8003310 <_printf_float+0x2c4>
 800330c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800330e:	e792      	b.n	8003236 <_printf_float+0x1ea>
 8003310:	2301      	movs	r3, #1
 8003312:	4652      	mov	r2, sl
 8003314:	4631      	mov	r1, r6
 8003316:	4628      	mov	r0, r5
 8003318:	47b8      	blx	r7
 800331a:	3001      	adds	r0, #1
 800331c:	f43f aef7 	beq.w	800310e <_printf_float+0xc2>
 8003320:	f109 0901 	add.w	r9, r9, #1
 8003324:	e7ee      	b.n	8003304 <_printf_float+0x2b8>
 8003326:	bf00      	nop
 8003328:	7fefffff 	.word	0x7fefffff
 800332c:	08005974 	.word	0x08005974
 8003330:	08005978 	.word	0x08005978
 8003334:	08005980 	.word	0x08005980
 8003338:	0800597c 	.word	0x0800597c
 800333c:	08005984 	.word	0x08005984
 8003340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003342:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003344:	429a      	cmp	r2, r3
 8003346:	bfa8      	it	ge
 8003348:	461a      	movge	r2, r3
 800334a:	2a00      	cmp	r2, #0
 800334c:	4691      	mov	r9, r2
 800334e:	dc37      	bgt.n	80033c0 <_printf_float+0x374>
 8003350:	f04f 0b00 	mov.w	fp, #0
 8003354:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003358:	f104 021a 	add.w	r2, r4, #26
 800335c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800335e:	9305      	str	r3, [sp, #20]
 8003360:	eba3 0309 	sub.w	r3, r3, r9
 8003364:	455b      	cmp	r3, fp
 8003366:	dc33      	bgt.n	80033d0 <_printf_float+0x384>
 8003368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800336c:	429a      	cmp	r2, r3
 800336e:	db3b      	blt.n	80033e8 <_printf_float+0x39c>
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	07da      	lsls	r2, r3, #31
 8003374:	d438      	bmi.n	80033e8 <_printf_float+0x39c>
 8003376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003378:	9b05      	ldr	r3, [sp, #20]
 800337a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	eba2 0901 	sub.w	r9, r2, r1
 8003382:	4599      	cmp	r9, r3
 8003384:	bfa8      	it	ge
 8003386:	4699      	movge	r9, r3
 8003388:	f1b9 0f00 	cmp.w	r9, #0
 800338c:	dc35      	bgt.n	80033fa <_printf_float+0x3ae>
 800338e:	f04f 0800 	mov.w	r8, #0
 8003392:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003396:	f104 0a1a 	add.w	sl, r4, #26
 800339a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	eba3 0309 	sub.w	r3, r3, r9
 80033a4:	4543      	cmp	r3, r8
 80033a6:	f77f af79 	ble.w	800329c <_printf_float+0x250>
 80033aa:	2301      	movs	r3, #1
 80033ac:	4652      	mov	r2, sl
 80033ae:	4631      	mov	r1, r6
 80033b0:	4628      	mov	r0, r5
 80033b2:	47b8      	blx	r7
 80033b4:	3001      	adds	r0, #1
 80033b6:	f43f aeaa 	beq.w	800310e <_printf_float+0xc2>
 80033ba:	f108 0801 	add.w	r8, r8, #1
 80033be:	e7ec      	b.n	800339a <_printf_float+0x34e>
 80033c0:	4613      	mov	r3, r2
 80033c2:	4631      	mov	r1, r6
 80033c4:	4642      	mov	r2, r8
 80033c6:	4628      	mov	r0, r5
 80033c8:	47b8      	blx	r7
 80033ca:	3001      	adds	r0, #1
 80033cc:	d1c0      	bne.n	8003350 <_printf_float+0x304>
 80033ce:	e69e      	b.n	800310e <_printf_float+0xc2>
 80033d0:	2301      	movs	r3, #1
 80033d2:	4631      	mov	r1, r6
 80033d4:	4628      	mov	r0, r5
 80033d6:	9205      	str	r2, [sp, #20]
 80033d8:	47b8      	blx	r7
 80033da:	3001      	adds	r0, #1
 80033dc:	f43f ae97 	beq.w	800310e <_printf_float+0xc2>
 80033e0:	9a05      	ldr	r2, [sp, #20]
 80033e2:	f10b 0b01 	add.w	fp, fp, #1
 80033e6:	e7b9      	b.n	800335c <_printf_float+0x310>
 80033e8:	ee18 3a10 	vmov	r3, s16
 80033ec:	4652      	mov	r2, sl
 80033ee:	4631      	mov	r1, r6
 80033f0:	4628      	mov	r0, r5
 80033f2:	47b8      	blx	r7
 80033f4:	3001      	adds	r0, #1
 80033f6:	d1be      	bne.n	8003376 <_printf_float+0x32a>
 80033f8:	e689      	b.n	800310e <_printf_float+0xc2>
 80033fa:	9a05      	ldr	r2, [sp, #20]
 80033fc:	464b      	mov	r3, r9
 80033fe:	4442      	add	r2, r8
 8003400:	4631      	mov	r1, r6
 8003402:	4628      	mov	r0, r5
 8003404:	47b8      	blx	r7
 8003406:	3001      	adds	r0, #1
 8003408:	d1c1      	bne.n	800338e <_printf_float+0x342>
 800340a:	e680      	b.n	800310e <_printf_float+0xc2>
 800340c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800340e:	2a01      	cmp	r2, #1
 8003410:	dc01      	bgt.n	8003416 <_printf_float+0x3ca>
 8003412:	07db      	lsls	r3, r3, #31
 8003414:	d538      	bpl.n	8003488 <_printf_float+0x43c>
 8003416:	2301      	movs	r3, #1
 8003418:	4642      	mov	r2, r8
 800341a:	4631      	mov	r1, r6
 800341c:	4628      	mov	r0, r5
 800341e:	47b8      	blx	r7
 8003420:	3001      	adds	r0, #1
 8003422:	f43f ae74 	beq.w	800310e <_printf_float+0xc2>
 8003426:	ee18 3a10 	vmov	r3, s16
 800342a:	4652      	mov	r2, sl
 800342c:	4631      	mov	r1, r6
 800342e:	4628      	mov	r0, r5
 8003430:	47b8      	blx	r7
 8003432:	3001      	adds	r0, #1
 8003434:	f43f ae6b 	beq.w	800310e <_printf_float+0xc2>
 8003438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800343c:	2200      	movs	r2, #0
 800343e:	2300      	movs	r3, #0
 8003440:	f7fd fb62 	bl	8000b08 <__aeabi_dcmpeq>
 8003444:	b9d8      	cbnz	r0, 800347e <_printf_float+0x432>
 8003446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003448:	f108 0201 	add.w	r2, r8, #1
 800344c:	3b01      	subs	r3, #1
 800344e:	4631      	mov	r1, r6
 8003450:	4628      	mov	r0, r5
 8003452:	47b8      	blx	r7
 8003454:	3001      	adds	r0, #1
 8003456:	d10e      	bne.n	8003476 <_printf_float+0x42a>
 8003458:	e659      	b.n	800310e <_printf_float+0xc2>
 800345a:	2301      	movs	r3, #1
 800345c:	4652      	mov	r2, sl
 800345e:	4631      	mov	r1, r6
 8003460:	4628      	mov	r0, r5
 8003462:	47b8      	blx	r7
 8003464:	3001      	adds	r0, #1
 8003466:	f43f ae52 	beq.w	800310e <_printf_float+0xc2>
 800346a:	f108 0801 	add.w	r8, r8, #1
 800346e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	4543      	cmp	r3, r8
 8003474:	dcf1      	bgt.n	800345a <_printf_float+0x40e>
 8003476:	464b      	mov	r3, r9
 8003478:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800347c:	e6dc      	b.n	8003238 <_printf_float+0x1ec>
 800347e:	f04f 0800 	mov.w	r8, #0
 8003482:	f104 0a1a 	add.w	sl, r4, #26
 8003486:	e7f2      	b.n	800346e <_printf_float+0x422>
 8003488:	2301      	movs	r3, #1
 800348a:	4642      	mov	r2, r8
 800348c:	e7df      	b.n	800344e <_printf_float+0x402>
 800348e:	2301      	movs	r3, #1
 8003490:	464a      	mov	r2, r9
 8003492:	4631      	mov	r1, r6
 8003494:	4628      	mov	r0, r5
 8003496:	47b8      	blx	r7
 8003498:	3001      	adds	r0, #1
 800349a:	f43f ae38 	beq.w	800310e <_printf_float+0xc2>
 800349e:	f108 0801 	add.w	r8, r8, #1
 80034a2:	68e3      	ldr	r3, [r4, #12]
 80034a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034a6:	1a5b      	subs	r3, r3, r1
 80034a8:	4543      	cmp	r3, r8
 80034aa:	dcf0      	bgt.n	800348e <_printf_float+0x442>
 80034ac:	e6fa      	b.n	80032a4 <_printf_float+0x258>
 80034ae:	f04f 0800 	mov.w	r8, #0
 80034b2:	f104 0919 	add.w	r9, r4, #25
 80034b6:	e7f4      	b.n	80034a2 <_printf_float+0x456>

080034b8 <_printf_common>:
 80034b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034bc:	4616      	mov	r6, r2
 80034be:	4699      	mov	r9, r3
 80034c0:	688a      	ldr	r2, [r1, #8]
 80034c2:	690b      	ldr	r3, [r1, #16]
 80034c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034c8:	4293      	cmp	r3, r2
 80034ca:	bfb8      	it	lt
 80034cc:	4613      	movlt	r3, r2
 80034ce:	6033      	str	r3, [r6, #0]
 80034d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034d4:	4607      	mov	r7, r0
 80034d6:	460c      	mov	r4, r1
 80034d8:	b10a      	cbz	r2, 80034de <_printf_common+0x26>
 80034da:	3301      	adds	r3, #1
 80034dc:	6033      	str	r3, [r6, #0]
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	0699      	lsls	r1, r3, #26
 80034e2:	bf42      	ittt	mi
 80034e4:	6833      	ldrmi	r3, [r6, #0]
 80034e6:	3302      	addmi	r3, #2
 80034e8:	6033      	strmi	r3, [r6, #0]
 80034ea:	6825      	ldr	r5, [r4, #0]
 80034ec:	f015 0506 	ands.w	r5, r5, #6
 80034f0:	d106      	bne.n	8003500 <_printf_common+0x48>
 80034f2:	f104 0a19 	add.w	sl, r4, #25
 80034f6:	68e3      	ldr	r3, [r4, #12]
 80034f8:	6832      	ldr	r2, [r6, #0]
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	42ab      	cmp	r3, r5
 80034fe:	dc26      	bgt.n	800354e <_printf_common+0x96>
 8003500:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003504:	1e13      	subs	r3, r2, #0
 8003506:	6822      	ldr	r2, [r4, #0]
 8003508:	bf18      	it	ne
 800350a:	2301      	movne	r3, #1
 800350c:	0692      	lsls	r2, r2, #26
 800350e:	d42b      	bmi.n	8003568 <_printf_common+0xb0>
 8003510:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003514:	4649      	mov	r1, r9
 8003516:	4638      	mov	r0, r7
 8003518:	47c0      	blx	r8
 800351a:	3001      	adds	r0, #1
 800351c:	d01e      	beq.n	800355c <_printf_common+0xa4>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	68e5      	ldr	r5, [r4, #12]
 8003522:	6832      	ldr	r2, [r6, #0]
 8003524:	f003 0306 	and.w	r3, r3, #6
 8003528:	2b04      	cmp	r3, #4
 800352a:	bf08      	it	eq
 800352c:	1aad      	subeq	r5, r5, r2
 800352e:	68a3      	ldr	r3, [r4, #8]
 8003530:	6922      	ldr	r2, [r4, #16]
 8003532:	bf0c      	ite	eq
 8003534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003538:	2500      	movne	r5, #0
 800353a:	4293      	cmp	r3, r2
 800353c:	bfc4      	itt	gt
 800353e:	1a9b      	subgt	r3, r3, r2
 8003540:	18ed      	addgt	r5, r5, r3
 8003542:	2600      	movs	r6, #0
 8003544:	341a      	adds	r4, #26
 8003546:	42b5      	cmp	r5, r6
 8003548:	d11a      	bne.n	8003580 <_printf_common+0xc8>
 800354a:	2000      	movs	r0, #0
 800354c:	e008      	b.n	8003560 <_printf_common+0xa8>
 800354e:	2301      	movs	r3, #1
 8003550:	4652      	mov	r2, sl
 8003552:	4649      	mov	r1, r9
 8003554:	4638      	mov	r0, r7
 8003556:	47c0      	blx	r8
 8003558:	3001      	adds	r0, #1
 800355a:	d103      	bne.n	8003564 <_printf_common+0xac>
 800355c:	f04f 30ff 	mov.w	r0, #4294967295
 8003560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003564:	3501      	adds	r5, #1
 8003566:	e7c6      	b.n	80034f6 <_printf_common+0x3e>
 8003568:	18e1      	adds	r1, r4, r3
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	2030      	movs	r0, #48	; 0x30
 800356e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003572:	4422      	add	r2, r4
 8003574:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800357c:	3302      	adds	r3, #2
 800357e:	e7c7      	b.n	8003510 <_printf_common+0x58>
 8003580:	2301      	movs	r3, #1
 8003582:	4622      	mov	r2, r4
 8003584:	4649      	mov	r1, r9
 8003586:	4638      	mov	r0, r7
 8003588:	47c0      	blx	r8
 800358a:	3001      	adds	r0, #1
 800358c:	d0e6      	beq.n	800355c <_printf_common+0xa4>
 800358e:	3601      	adds	r6, #1
 8003590:	e7d9      	b.n	8003546 <_printf_common+0x8e>
	...

08003594 <_printf_i>:
 8003594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003598:	460c      	mov	r4, r1
 800359a:	4691      	mov	r9, r2
 800359c:	7e27      	ldrb	r7, [r4, #24]
 800359e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80035a0:	2f78      	cmp	r7, #120	; 0x78
 80035a2:	4680      	mov	r8, r0
 80035a4:	469a      	mov	sl, r3
 80035a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035aa:	d807      	bhi.n	80035bc <_printf_i+0x28>
 80035ac:	2f62      	cmp	r7, #98	; 0x62
 80035ae:	d80a      	bhi.n	80035c6 <_printf_i+0x32>
 80035b0:	2f00      	cmp	r7, #0
 80035b2:	f000 80d8 	beq.w	8003766 <_printf_i+0x1d2>
 80035b6:	2f58      	cmp	r7, #88	; 0x58
 80035b8:	f000 80a3 	beq.w	8003702 <_printf_i+0x16e>
 80035bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80035c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035c4:	e03a      	b.n	800363c <_printf_i+0xa8>
 80035c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035ca:	2b15      	cmp	r3, #21
 80035cc:	d8f6      	bhi.n	80035bc <_printf_i+0x28>
 80035ce:	a001      	add	r0, pc, #4	; (adr r0, 80035d4 <_printf_i+0x40>)
 80035d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80035d4:	0800362d 	.word	0x0800362d
 80035d8:	08003641 	.word	0x08003641
 80035dc:	080035bd 	.word	0x080035bd
 80035e0:	080035bd 	.word	0x080035bd
 80035e4:	080035bd 	.word	0x080035bd
 80035e8:	080035bd 	.word	0x080035bd
 80035ec:	08003641 	.word	0x08003641
 80035f0:	080035bd 	.word	0x080035bd
 80035f4:	080035bd 	.word	0x080035bd
 80035f8:	080035bd 	.word	0x080035bd
 80035fc:	080035bd 	.word	0x080035bd
 8003600:	0800374d 	.word	0x0800374d
 8003604:	08003671 	.word	0x08003671
 8003608:	0800372f 	.word	0x0800372f
 800360c:	080035bd 	.word	0x080035bd
 8003610:	080035bd 	.word	0x080035bd
 8003614:	0800376f 	.word	0x0800376f
 8003618:	080035bd 	.word	0x080035bd
 800361c:	08003671 	.word	0x08003671
 8003620:	080035bd 	.word	0x080035bd
 8003624:	080035bd 	.word	0x080035bd
 8003628:	08003737 	.word	0x08003737
 800362c:	680b      	ldr	r3, [r1, #0]
 800362e:	1d1a      	adds	r2, r3, #4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	600a      	str	r2, [r1, #0]
 8003634:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003638:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800363c:	2301      	movs	r3, #1
 800363e:	e0a3      	b.n	8003788 <_printf_i+0x1f4>
 8003640:	6825      	ldr	r5, [r4, #0]
 8003642:	6808      	ldr	r0, [r1, #0]
 8003644:	062e      	lsls	r6, r5, #24
 8003646:	f100 0304 	add.w	r3, r0, #4
 800364a:	d50a      	bpl.n	8003662 <_printf_i+0xce>
 800364c:	6805      	ldr	r5, [r0, #0]
 800364e:	600b      	str	r3, [r1, #0]
 8003650:	2d00      	cmp	r5, #0
 8003652:	da03      	bge.n	800365c <_printf_i+0xc8>
 8003654:	232d      	movs	r3, #45	; 0x2d
 8003656:	426d      	negs	r5, r5
 8003658:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800365c:	485e      	ldr	r0, [pc, #376]	; (80037d8 <_printf_i+0x244>)
 800365e:	230a      	movs	r3, #10
 8003660:	e019      	b.n	8003696 <_printf_i+0x102>
 8003662:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003666:	6805      	ldr	r5, [r0, #0]
 8003668:	600b      	str	r3, [r1, #0]
 800366a:	bf18      	it	ne
 800366c:	b22d      	sxthne	r5, r5
 800366e:	e7ef      	b.n	8003650 <_printf_i+0xbc>
 8003670:	680b      	ldr	r3, [r1, #0]
 8003672:	6825      	ldr	r5, [r4, #0]
 8003674:	1d18      	adds	r0, r3, #4
 8003676:	6008      	str	r0, [r1, #0]
 8003678:	0628      	lsls	r0, r5, #24
 800367a:	d501      	bpl.n	8003680 <_printf_i+0xec>
 800367c:	681d      	ldr	r5, [r3, #0]
 800367e:	e002      	b.n	8003686 <_printf_i+0xf2>
 8003680:	0669      	lsls	r1, r5, #25
 8003682:	d5fb      	bpl.n	800367c <_printf_i+0xe8>
 8003684:	881d      	ldrh	r5, [r3, #0]
 8003686:	4854      	ldr	r0, [pc, #336]	; (80037d8 <_printf_i+0x244>)
 8003688:	2f6f      	cmp	r7, #111	; 0x6f
 800368a:	bf0c      	ite	eq
 800368c:	2308      	moveq	r3, #8
 800368e:	230a      	movne	r3, #10
 8003690:	2100      	movs	r1, #0
 8003692:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003696:	6866      	ldr	r6, [r4, #4]
 8003698:	60a6      	str	r6, [r4, #8]
 800369a:	2e00      	cmp	r6, #0
 800369c:	bfa2      	ittt	ge
 800369e:	6821      	ldrge	r1, [r4, #0]
 80036a0:	f021 0104 	bicge.w	r1, r1, #4
 80036a4:	6021      	strge	r1, [r4, #0]
 80036a6:	b90d      	cbnz	r5, 80036ac <_printf_i+0x118>
 80036a8:	2e00      	cmp	r6, #0
 80036aa:	d04d      	beq.n	8003748 <_printf_i+0x1b4>
 80036ac:	4616      	mov	r6, r2
 80036ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80036b2:	fb03 5711 	mls	r7, r3, r1, r5
 80036b6:	5dc7      	ldrb	r7, [r0, r7]
 80036b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036bc:	462f      	mov	r7, r5
 80036be:	42bb      	cmp	r3, r7
 80036c0:	460d      	mov	r5, r1
 80036c2:	d9f4      	bls.n	80036ae <_printf_i+0x11a>
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d10b      	bne.n	80036e0 <_printf_i+0x14c>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	07df      	lsls	r7, r3, #31
 80036cc:	d508      	bpl.n	80036e0 <_printf_i+0x14c>
 80036ce:	6923      	ldr	r3, [r4, #16]
 80036d0:	6861      	ldr	r1, [r4, #4]
 80036d2:	4299      	cmp	r1, r3
 80036d4:	bfde      	ittt	le
 80036d6:	2330      	movle	r3, #48	; 0x30
 80036d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036e0:	1b92      	subs	r2, r2, r6
 80036e2:	6122      	str	r2, [r4, #16]
 80036e4:	f8cd a000 	str.w	sl, [sp]
 80036e8:	464b      	mov	r3, r9
 80036ea:	aa03      	add	r2, sp, #12
 80036ec:	4621      	mov	r1, r4
 80036ee:	4640      	mov	r0, r8
 80036f0:	f7ff fee2 	bl	80034b8 <_printf_common>
 80036f4:	3001      	adds	r0, #1
 80036f6:	d14c      	bne.n	8003792 <_printf_i+0x1fe>
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	b004      	add	sp, #16
 80036fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003702:	4835      	ldr	r0, [pc, #212]	; (80037d8 <_printf_i+0x244>)
 8003704:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	680e      	ldr	r6, [r1, #0]
 800370c:	061f      	lsls	r7, r3, #24
 800370e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003712:	600e      	str	r6, [r1, #0]
 8003714:	d514      	bpl.n	8003740 <_printf_i+0x1ac>
 8003716:	07d9      	lsls	r1, r3, #31
 8003718:	bf44      	itt	mi
 800371a:	f043 0320 	orrmi.w	r3, r3, #32
 800371e:	6023      	strmi	r3, [r4, #0]
 8003720:	b91d      	cbnz	r5, 800372a <_printf_i+0x196>
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	f023 0320 	bic.w	r3, r3, #32
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	2310      	movs	r3, #16
 800372c:	e7b0      	b.n	8003690 <_printf_i+0xfc>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	f043 0320 	orr.w	r3, r3, #32
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	2378      	movs	r3, #120	; 0x78
 8003738:	4828      	ldr	r0, [pc, #160]	; (80037dc <_printf_i+0x248>)
 800373a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800373e:	e7e3      	b.n	8003708 <_printf_i+0x174>
 8003740:	065e      	lsls	r6, r3, #25
 8003742:	bf48      	it	mi
 8003744:	b2ad      	uxthmi	r5, r5
 8003746:	e7e6      	b.n	8003716 <_printf_i+0x182>
 8003748:	4616      	mov	r6, r2
 800374a:	e7bb      	b.n	80036c4 <_printf_i+0x130>
 800374c:	680b      	ldr	r3, [r1, #0]
 800374e:	6826      	ldr	r6, [r4, #0]
 8003750:	6960      	ldr	r0, [r4, #20]
 8003752:	1d1d      	adds	r5, r3, #4
 8003754:	600d      	str	r5, [r1, #0]
 8003756:	0635      	lsls	r5, r6, #24
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	d501      	bpl.n	8003760 <_printf_i+0x1cc>
 800375c:	6018      	str	r0, [r3, #0]
 800375e:	e002      	b.n	8003766 <_printf_i+0x1d2>
 8003760:	0671      	lsls	r1, r6, #25
 8003762:	d5fb      	bpl.n	800375c <_printf_i+0x1c8>
 8003764:	8018      	strh	r0, [r3, #0]
 8003766:	2300      	movs	r3, #0
 8003768:	6123      	str	r3, [r4, #16]
 800376a:	4616      	mov	r6, r2
 800376c:	e7ba      	b.n	80036e4 <_printf_i+0x150>
 800376e:	680b      	ldr	r3, [r1, #0]
 8003770:	1d1a      	adds	r2, r3, #4
 8003772:	600a      	str	r2, [r1, #0]
 8003774:	681e      	ldr	r6, [r3, #0]
 8003776:	6862      	ldr	r2, [r4, #4]
 8003778:	2100      	movs	r1, #0
 800377a:	4630      	mov	r0, r6
 800377c:	f7fc fd50 	bl	8000220 <memchr>
 8003780:	b108      	cbz	r0, 8003786 <_printf_i+0x1f2>
 8003782:	1b80      	subs	r0, r0, r6
 8003784:	6060      	str	r0, [r4, #4]
 8003786:	6863      	ldr	r3, [r4, #4]
 8003788:	6123      	str	r3, [r4, #16]
 800378a:	2300      	movs	r3, #0
 800378c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003790:	e7a8      	b.n	80036e4 <_printf_i+0x150>
 8003792:	6923      	ldr	r3, [r4, #16]
 8003794:	4632      	mov	r2, r6
 8003796:	4649      	mov	r1, r9
 8003798:	4640      	mov	r0, r8
 800379a:	47d0      	blx	sl
 800379c:	3001      	adds	r0, #1
 800379e:	d0ab      	beq.n	80036f8 <_printf_i+0x164>
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	079b      	lsls	r3, r3, #30
 80037a4:	d413      	bmi.n	80037ce <_printf_i+0x23a>
 80037a6:	68e0      	ldr	r0, [r4, #12]
 80037a8:	9b03      	ldr	r3, [sp, #12]
 80037aa:	4298      	cmp	r0, r3
 80037ac:	bfb8      	it	lt
 80037ae:	4618      	movlt	r0, r3
 80037b0:	e7a4      	b.n	80036fc <_printf_i+0x168>
 80037b2:	2301      	movs	r3, #1
 80037b4:	4632      	mov	r2, r6
 80037b6:	4649      	mov	r1, r9
 80037b8:	4640      	mov	r0, r8
 80037ba:	47d0      	blx	sl
 80037bc:	3001      	adds	r0, #1
 80037be:	d09b      	beq.n	80036f8 <_printf_i+0x164>
 80037c0:	3501      	adds	r5, #1
 80037c2:	68e3      	ldr	r3, [r4, #12]
 80037c4:	9903      	ldr	r1, [sp, #12]
 80037c6:	1a5b      	subs	r3, r3, r1
 80037c8:	42ab      	cmp	r3, r5
 80037ca:	dcf2      	bgt.n	80037b2 <_printf_i+0x21e>
 80037cc:	e7eb      	b.n	80037a6 <_printf_i+0x212>
 80037ce:	2500      	movs	r5, #0
 80037d0:	f104 0619 	add.w	r6, r4, #25
 80037d4:	e7f5      	b.n	80037c2 <_printf_i+0x22e>
 80037d6:	bf00      	nop
 80037d8:	08005986 	.word	0x08005986
 80037dc:	08005997 	.word	0x08005997

080037e0 <quorem>:
 80037e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e4:	6903      	ldr	r3, [r0, #16]
 80037e6:	690c      	ldr	r4, [r1, #16]
 80037e8:	42a3      	cmp	r3, r4
 80037ea:	4607      	mov	r7, r0
 80037ec:	f2c0 8081 	blt.w	80038f2 <quorem+0x112>
 80037f0:	3c01      	subs	r4, #1
 80037f2:	f101 0814 	add.w	r8, r1, #20
 80037f6:	f100 0514 	add.w	r5, r0, #20
 80037fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003804:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003808:	3301      	adds	r3, #1
 800380a:	429a      	cmp	r2, r3
 800380c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003810:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003814:	fbb2 f6f3 	udiv	r6, r2, r3
 8003818:	d331      	bcc.n	800387e <quorem+0x9e>
 800381a:	f04f 0e00 	mov.w	lr, #0
 800381e:	4640      	mov	r0, r8
 8003820:	46ac      	mov	ip, r5
 8003822:	46f2      	mov	sl, lr
 8003824:	f850 2b04 	ldr.w	r2, [r0], #4
 8003828:	b293      	uxth	r3, r2
 800382a:	fb06 e303 	mla	r3, r6, r3, lr
 800382e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003832:	b29b      	uxth	r3, r3
 8003834:	ebaa 0303 	sub.w	r3, sl, r3
 8003838:	0c12      	lsrs	r2, r2, #16
 800383a:	f8dc a000 	ldr.w	sl, [ip]
 800383e:	fb06 e202 	mla	r2, r6, r2, lr
 8003842:	fa13 f38a 	uxtah	r3, r3, sl
 8003846:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800384a:	fa1f fa82 	uxth.w	sl, r2
 800384e:	f8dc 2000 	ldr.w	r2, [ip]
 8003852:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003856:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800385a:	b29b      	uxth	r3, r3
 800385c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003860:	4581      	cmp	r9, r0
 8003862:	f84c 3b04 	str.w	r3, [ip], #4
 8003866:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800386a:	d2db      	bcs.n	8003824 <quorem+0x44>
 800386c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003870:	b92b      	cbnz	r3, 800387e <quorem+0x9e>
 8003872:	9b01      	ldr	r3, [sp, #4]
 8003874:	3b04      	subs	r3, #4
 8003876:	429d      	cmp	r5, r3
 8003878:	461a      	mov	r2, r3
 800387a:	d32e      	bcc.n	80038da <quorem+0xfa>
 800387c:	613c      	str	r4, [r7, #16]
 800387e:	4638      	mov	r0, r7
 8003880:	f001 f8be 	bl	8004a00 <__mcmp>
 8003884:	2800      	cmp	r0, #0
 8003886:	db24      	blt.n	80038d2 <quorem+0xf2>
 8003888:	3601      	adds	r6, #1
 800388a:	4628      	mov	r0, r5
 800388c:	f04f 0c00 	mov.w	ip, #0
 8003890:	f858 2b04 	ldr.w	r2, [r8], #4
 8003894:	f8d0 e000 	ldr.w	lr, [r0]
 8003898:	b293      	uxth	r3, r2
 800389a:	ebac 0303 	sub.w	r3, ip, r3
 800389e:	0c12      	lsrs	r2, r2, #16
 80038a0:	fa13 f38e 	uxtah	r3, r3, lr
 80038a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80038a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038b2:	45c1      	cmp	r9, r8
 80038b4:	f840 3b04 	str.w	r3, [r0], #4
 80038b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80038bc:	d2e8      	bcs.n	8003890 <quorem+0xb0>
 80038be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038c6:	b922      	cbnz	r2, 80038d2 <quorem+0xf2>
 80038c8:	3b04      	subs	r3, #4
 80038ca:	429d      	cmp	r5, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	d30a      	bcc.n	80038e6 <quorem+0x106>
 80038d0:	613c      	str	r4, [r7, #16]
 80038d2:	4630      	mov	r0, r6
 80038d4:	b003      	add	sp, #12
 80038d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	3b04      	subs	r3, #4
 80038de:	2a00      	cmp	r2, #0
 80038e0:	d1cc      	bne.n	800387c <quorem+0x9c>
 80038e2:	3c01      	subs	r4, #1
 80038e4:	e7c7      	b.n	8003876 <quorem+0x96>
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	3b04      	subs	r3, #4
 80038ea:	2a00      	cmp	r2, #0
 80038ec:	d1f0      	bne.n	80038d0 <quorem+0xf0>
 80038ee:	3c01      	subs	r4, #1
 80038f0:	e7eb      	b.n	80038ca <quorem+0xea>
 80038f2:	2000      	movs	r0, #0
 80038f4:	e7ee      	b.n	80038d4 <quorem+0xf4>
	...

080038f8 <_dtoa_r>:
 80038f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038fc:	ed2d 8b02 	vpush	{d8}
 8003900:	ec57 6b10 	vmov	r6, r7, d0
 8003904:	b095      	sub	sp, #84	; 0x54
 8003906:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003908:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800390c:	9105      	str	r1, [sp, #20]
 800390e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003912:	4604      	mov	r4, r0
 8003914:	9209      	str	r2, [sp, #36]	; 0x24
 8003916:	930f      	str	r3, [sp, #60]	; 0x3c
 8003918:	b975      	cbnz	r5, 8003938 <_dtoa_r+0x40>
 800391a:	2010      	movs	r0, #16
 800391c:	f000 fddc 	bl	80044d8 <malloc>
 8003920:	4602      	mov	r2, r0
 8003922:	6260      	str	r0, [r4, #36]	; 0x24
 8003924:	b920      	cbnz	r0, 8003930 <_dtoa_r+0x38>
 8003926:	4bb2      	ldr	r3, [pc, #712]	; (8003bf0 <_dtoa_r+0x2f8>)
 8003928:	21ea      	movs	r1, #234	; 0xea
 800392a:	48b2      	ldr	r0, [pc, #712]	; (8003bf4 <_dtoa_r+0x2fc>)
 800392c:	f001 fa32 	bl	8004d94 <__assert_func>
 8003930:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003934:	6005      	str	r5, [r0, #0]
 8003936:	60c5      	str	r5, [r0, #12]
 8003938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800393a:	6819      	ldr	r1, [r3, #0]
 800393c:	b151      	cbz	r1, 8003954 <_dtoa_r+0x5c>
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	604a      	str	r2, [r1, #4]
 8003942:	2301      	movs	r3, #1
 8003944:	4093      	lsls	r3, r2
 8003946:	608b      	str	r3, [r1, #8]
 8003948:	4620      	mov	r0, r4
 800394a:	f000 fe1b 	bl	8004584 <_Bfree>
 800394e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	1e3b      	subs	r3, r7, #0
 8003956:	bfb9      	ittee	lt
 8003958:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800395c:	9303      	strlt	r3, [sp, #12]
 800395e:	2300      	movge	r3, #0
 8003960:	f8c8 3000 	strge.w	r3, [r8]
 8003964:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003968:	4ba3      	ldr	r3, [pc, #652]	; (8003bf8 <_dtoa_r+0x300>)
 800396a:	bfbc      	itt	lt
 800396c:	2201      	movlt	r2, #1
 800396e:	f8c8 2000 	strlt.w	r2, [r8]
 8003972:	ea33 0309 	bics.w	r3, r3, r9
 8003976:	d11b      	bne.n	80039b0 <_dtoa_r+0xb8>
 8003978:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800397a:	f242 730f 	movw	r3, #9999	; 0x270f
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003984:	4333      	orrs	r3, r6
 8003986:	f000 857a 	beq.w	800447e <_dtoa_r+0xb86>
 800398a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800398c:	b963      	cbnz	r3, 80039a8 <_dtoa_r+0xb0>
 800398e:	4b9b      	ldr	r3, [pc, #620]	; (8003bfc <_dtoa_r+0x304>)
 8003990:	e024      	b.n	80039dc <_dtoa_r+0xe4>
 8003992:	4b9b      	ldr	r3, [pc, #620]	; (8003c00 <_dtoa_r+0x308>)
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	3308      	adds	r3, #8
 8003998:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	9800      	ldr	r0, [sp, #0]
 800399e:	b015      	add	sp, #84	; 0x54
 80039a0:	ecbd 8b02 	vpop	{d8}
 80039a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a8:	4b94      	ldr	r3, [pc, #592]	; (8003bfc <_dtoa_r+0x304>)
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	3303      	adds	r3, #3
 80039ae:	e7f3      	b.n	8003998 <_dtoa_r+0xa0>
 80039b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80039b4:	2200      	movs	r2, #0
 80039b6:	ec51 0b17 	vmov	r0, r1, d7
 80039ba:	2300      	movs	r3, #0
 80039bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80039c0:	f7fd f8a2 	bl	8000b08 <__aeabi_dcmpeq>
 80039c4:	4680      	mov	r8, r0
 80039c6:	b158      	cbz	r0, 80039e0 <_dtoa_r+0xe8>
 80039c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80039ca:	2301      	movs	r3, #1
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8551 	beq.w	8004478 <_dtoa_r+0xb80>
 80039d6:	488b      	ldr	r0, [pc, #556]	; (8003c04 <_dtoa_r+0x30c>)
 80039d8:	6018      	str	r0, [r3, #0]
 80039da:	1e43      	subs	r3, r0, #1
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	e7dd      	b.n	800399c <_dtoa_r+0xa4>
 80039e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80039e4:	aa12      	add	r2, sp, #72	; 0x48
 80039e6:	a913      	add	r1, sp, #76	; 0x4c
 80039e8:	4620      	mov	r0, r4
 80039ea:	f001 f8ad 	bl	8004b48 <__d2b>
 80039ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80039f2:	4683      	mov	fp, r0
 80039f4:	2d00      	cmp	r5, #0
 80039f6:	d07c      	beq.n	8003af2 <_dtoa_r+0x1fa>
 80039f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80039fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003a06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003a0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003a0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003a12:	4b7d      	ldr	r3, [pc, #500]	; (8003c08 <_dtoa_r+0x310>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	4630      	mov	r0, r6
 8003a18:	4639      	mov	r1, r7
 8003a1a:	f7fc fc55 	bl	80002c8 <__aeabi_dsub>
 8003a1e:	a36e      	add	r3, pc, #440	; (adr r3, 8003bd8 <_dtoa_r+0x2e0>)
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f7fc fe08 	bl	8000638 <__aeabi_dmul>
 8003a28:	a36d      	add	r3, pc, #436	; (adr r3, 8003be0 <_dtoa_r+0x2e8>)
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f7fc fc4d 	bl	80002cc <__adddf3>
 8003a32:	4606      	mov	r6, r0
 8003a34:	4628      	mov	r0, r5
 8003a36:	460f      	mov	r7, r1
 8003a38:	f7fc fd94 	bl	8000564 <__aeabi_i2d>
 8003a3c:	a36a      	add	r3, pc, #424	; (adr r3, 8003be8 <_dtoa_r+0x2f0>)
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f7fc fdf9 	bl	8000638 <__aeabi_dmul>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4630      	mov	r0, r6
 8003a4c:	4639      	mov	r1, r7
 8003a4e:	f7fc fc3d 	bl	80002cc <__adddf3>
 8003a52:	4606      	mov	r6, r0
 8003a54:	460f      	mov	r7, r1
 8003a56:	f7fd f89f 	bl	8000b98 <__aeabi_d2iz>
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	4682      	mov	sl, r0
 8003a5e:	2300      	movs	r3, #0
 8003a60:	4630      	mov	r0, r6
 8003a62:	4639      	mov	r1, r7
 8003a64:	f7fd f85a 	bl	8000b1c <__aeabi_dcmplt>
 8003a68:	b148      	cbz	r0, 8003a7e <_dtoa_r+0x186>
 8003a6a:	4650      	mov	r0, sl
 8003a6c:	f7fc fd7a 	bl	8000564 <__aeabi_i2d>
 8003a70:	4632      	mov	r2, r6
 8003a72:	463b      	mov	r3, r7
 8003a74:	f7fd f848 	bl	8000b08 <__aeabi_dcmpeq>
 8003a78:	b908      	cbnz	r0, 8003a7e <_dtoa_r+0x186>
 8003a7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a7e:	f1ba 0f16 	cmp.w	sl, #22
 8003a82:	d854      	bhi.n	8003b2e <_dtoa_r+0x236>
 8003a84:	4b61      	ldr	r3, [pc, #388]	; (8003c0c <_dtoa_r+0x314>)
 8003a86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a92:	f7fd f843 	bl	8000b1c <__aeabi_dcmplt>
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d04b      	beq.n	8003b32 <_dtoa_r+0x23a>
 8003a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	930e      	str	r3, [sp, #56]	; 0x38
 8003aa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003aa4:	1b5d      	subs	r5, r3, r5
 8003aa6:	1e6b      	subs	r3, r5, #1
 8003aa8:	9304      	str	r3, [sp, #16]
 8003aaa:	bf43      	ittte	mi
 8003aac:	2300      	movmi	r3, #0
 8003aae:	f1c5 0801 	rsbmi	r8, r5, #1
 8003ab2:	9304      	strmi	r3, [sp, #16]
 8003ab4:	f04f 0800 	movpl.w	r8, #0
 8003ab8:	f1ba 0f00 	cmp.w	sl, #0
 8003abc:	db3b      	blt.n	8003b36 <_dtoa_r+0x23e>
 8003abe:	9b04      	ldr	r3, [sp, #16]
 8003ac0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003ac4:	4453      	add	r3, sl
 8003ac6:	9304      	str	r3, [sp, #16]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9306      	str	r3, [sp, #24]
 8003acc:	9b05      	ldr	r3, [sp, #20]
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d869      	bhi.n	8003ba6 <_dtoa_r+0x2ae>
 8003ad2:	2b05      	cmp	r3, #5
 8003ad4:	bfc4      	itt	gt
 8003ad6:	3b04      	subgt	r3, #4
 8003ad8:	9305      	strgt	r3, [sp, #20]
 8003ada:	9b05      	ldr	r3, [sp, #20]
 8003adc:	f1a3 0302 	sub.w	r3, r3, #2
 8003ae0:	bfcc      	ite	gt
 8003ae2:	2500      	movgt	r5, #0
 8003ae4:	2501      	movle	r5, #1
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d869      	bhi.n	8003bbe <_dtoa_r+0x2c6>
 8003aea:	e8df f003 	tbb	[pc, r3]
 8003aee:	4e2c      	.short	0x4e2c
 8003af0:	5a4c      	.short	0x5a4c
 8003af2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003af6:	441d      	add	r5, r3
 8003af8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	bfc1      	itttt	gt
 8003b00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003b04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003b08:	fa09 f303 	lslgt.w	r3, r9, r3
 8003b0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003b10:	bfda      	itte	le
 8003b12:	f1c3 0320 	rsble	r3, r3, #32
 8003b16:	fa06 f003 	lslle.w	r0, r6, r3
 8003b1a:	4318      	orrgt	r0, r3
 8003b1c:	f7fc fd12 	bl	8000544 <__aeabi_ui2d>
 8003b20:	2301      	movs	r3, #1
 8003b22:	4606      	mov	r6, r0
 8003b24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003b28:	3d01      	subs	r5, #1
 8003b2a:	9310      	str	r3, [sp, #64]	; 0x40
 8003b2c:	e771      	b.n	8003a12 <_dtoa_r+0x11a>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e7b6      	b.n	8003aa0 <_dtoa_r+0x1a8>
 8003b32:	900e      	str	r0, [sp, #56]	; 0x38
 8003b34:	e7b5      	b.n	8003aa2 <_dtoa_r+0x1aa>
 8003b36:	f1ca 0300 	rsb	r3, sl, #0
 8003b3a:	9306      	str	r3, [sp, #24]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	eba8 080a 	sub.w	r8, r8, sl
 8003b42:	930d      	str	r3, [sp, #52]	; 0x34
 8003b44:	e7c2      	b.n	8003acc <_dtoa_r+0x1d4>
 8003b46:	2300      	movs	r3, #0
 8003b48:	9308      	str	r3, [sp, #32]
 8003b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	dc39      	bgt.n	8003bc4 <_dtoa_r+0x2cc>
 8003b50:	f04f 0901 	mov.w	r9, #1
 8003b54:	f8cd 9004 	str.w	r9, [sp, #4]
 8003b58:	464b      	mov	r3, r9
 8003b5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003b5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003b60:	2200      	movs	r2, #0
 8003b62:	6042      	str	r2, [r0, #4]
 8003b64:	2204      	movs	r2, #4
 8003b66:	f102 0614 	add.w	r6, r2, #20
 8003b6a:	429e      	cmp	r6, r3
 8003b6c:	6841      	ldr	r1, [r0, #4]
 8003b6e:	d92f      	bls.n	8003bd0 <_dtoa_r+0x2d8>
 8003b70:	4620      	mov	r0, r4
 8003b72:	f000 fcc7 	bl	8004504 <_Balloc>
 8003b76:	9000      	str	r0, [sp, #0]
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d14b      	bne.n	8003c14 <_dtoa_r+0x31c>
 8003b7c:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <_dtoa_r+0x318>)
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003b84:	e6d1      	b.n	800392a <_dtoa_r+0x32>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e7de      	b.n	8003b48 <_dtoa_r+0x250>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9308      	str	r3, [sp, #32]
 8003b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b90:	eb0a 0903 	add.w	r9, sl, r3
 8003b94:	f109 0301 	add.w	r3, r9, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	bfb8      	it	lt
 8003b9e:	2301      	movlt	r3, #1
 8003ba0:	e7dd      	b.n	8003b5e <_dtoa_r+0x266>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e7f2      	b.n	8003b8c <_dtoa_r+0x294>
 8003ba6:	2501      	movs	r5, #1
 8003ba8:	2300      	movs	r3, #0
 8003baa:	9305      	str	r3, [sp, #20]
 8003bac:	9508      	str	r5, [sp, #32]
 8003bae:	f04f 39ff 	mov.w	r9, #4294967295
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8003bb8:	2312      	movs	r3, #18
 8003bba:	9209      	str	r2, [sp, #36]	; 0x24
 8003bbc:	e7cf      	b.n	8003b5e <_dtoa_r+0x266>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	9308      	str	r3, [sp, #32]
 8003bc2:	e7f4      	b.n	8003bae <_dtoa_r+0x2b6>
 8003bc4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003bc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8003bcc:	464b      	mov	r3, r9
 8003bce:	e7c6      	b.n	8003b5e <_dtoa_r+0x266>
 8003bd0:	3101      	adds	r1, #1
 8003bd2:	6041      	str	r1, [r0, #4]
 8003bd4:	0052      	lsls	r2, r2, #1
 8003bd6:	e7c6      	b.n	8003b66 <_dtoa_r+0x26e>
 8003bd8:	636f4361 	.word	0x636f4361
 8003bdc:	3fd287a7 	.word	0x3fd287a7
 8003be0:	8b60c8b3 	.word	0x8b60c8b3
 8003be4:	3fc68a28 	.word	0x3fc68a28
 8003be8:	509f79fb 	.word	0x509f79fb
 8003bec:	3fd34413 	.word	0x3fd34413
 8003bf0:	080059b5 	.word	0x080059b5
 8003bf4:	080059cc 	.word	0x080059cc
 8003bf8:	7ff00000 	.word	0x7ff00000
 8003bfc:	080059b1 	.word	0x080059b1
 8003c00:	080059a8 	.word	0x080059a8
 8003c04:	08005985 	.word	0x08005985
 8003c08:	3ff80000 	.word	0x3ff80000
 8003c0c:	08005ac8 	.word	0x08005ac8
 8003c10:	08005a2b 	.word	0x08005a2b
 8003c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c16:	9a00      	ldr	r2, [sp, #0]
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	9b01      	ldr	r3, [sp, #4]
 8003c1c:	2b0e      	cmp	r3, #14
 8003c1e:	f200 80ad 	bhi.w	8003d7c <_dtoa_r+0x484>
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	f000 80aa 	beq.w	8003d7c <_dtoa_r+0x484>
 8003c28:	f1ba 0f00 	cmp.w	sl, #0
 8003c2c:	dd36      	ble.n	8003c9c <_dtoa_r+0x3a4>
 8003c2e:	4ac3      	ldr	r2, [pc, #780]	; (8003f3c <_dtoa_r+0x644>)
 8003c30:	f00a 030f 	and.w	r3, sl, #15
 8003c34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003c38:	ed93 7b00 	vldr	d7, [r3]
 8003c3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003c40:	ea4f 172a 	mov.w	r7, sl, asr #4
 8003c44:	eeb0 8a47 	vmov.f32	s16, s14
 8003c48:	eef0 8a67 	vmov.f32	s17, s15
 8003c4c:	d016      	beq.n	8003c7c <_dtoa_r+0x384>
 8003c4e:	4bbc      	ldr	r3, [pc, #752]	; (8003f40 <_dtoa_r+0x648>)
 8003c50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003c54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c58:	f7fc fe18 	bl	800088c <__aeabi_ddiv>
 8003c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c60:	f007 070f 	and.w	r7, r7, #15
 8003c64:	2503      	movs	r5, #3
 8003c66:	4eb6      	ldr	r6, [pc, #728]	; (8003f40 <_dtoa_r+0x648>)
 8003c68:	b957      	cbnz	r7, 8003c80 <_dtoa_r+0x388>
 8003c6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c6e:	ec53 2b18 	vmov	r2, r3, d8
 8003c72:	f7fc fe0b 	bl	800088c <__aeabi_ddiv>
 8003c76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c7a:	e029      	b.n	8003cd0 <_dtoa_r+0x3d8>
 8003c7c:	2502      	movs	r5, #2
 8003c7e:	e7f2      	b.n	8003c66 <_dtoa_r+0x36e>
 8003c80:	07f9      	lsls	r1, r7, #31
 8003c82:	d508      	bpl.n	8003c96 <_dtoa_r+0x39e>
 8003c84:	ec51 0b18 	vmov	r0, r1, d8
 8003c88:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003c8c:	f7fc fcd4 	bl	8000638 <__aeabi_dmul>
 8003c90:	ec41 0b18 	vmov	d8, r0, r1
 8003c94:	3501      	adds	r5, #1
 8003c96:	107f      	asrs	r7, r7, #1
 8003c98:	3608      	adds	r6, #8
 8003c9a:	e7e5      	b.n	8003c68 <_dtoa_r+0x370>
 8003c9c:	f000 80a6 	beq.w	8003dec <_dtoa_r+0x4f4>
 8003ca0:	f1ca 0600 	rsb	r6, sl, #0
 8003ca4:	4ba5      	ldr	r3, [pc, #660]	; (8003f3c <_dtoa_r+0x644>)
 8003ca6:	4fa6      	ldr	r7, [pc, #664]	; (8003f40 <_dtoa_r+0x648>)
 8003ca8:	f006 020f 	and.w	r2, r6, #15
 8003cac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003cb8:	f7fc fcbe 	bl	8000638 <__aeabi_dmul>
 8003cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cc0:	1136      	asrs	r6, r6, #4
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2502      	movs	r5, #2
 8003cc6:	2e00      	cmp	r6, #0
 8003cc8:	f040 8085 	bne.w	8003dd6 <_dtoa_r+0x4de>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1d2      	bne.n	8003c76 <_dtoa_r+0x37e>
 8003cd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 808c 	beq.w	8003df0 <_dtoa_r+0x4f8>
 8003cd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003cdc:	4b99      	ldr	r3, [pc, #612]	; (8003f44 <_dtoa_r+0x64c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	f7fc ff1a 	bl	8000b1c <__aeabi_dcmplt>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	f000 8081 	beq.w	8003df0 <_dtoa_r+0x4f8>
 8003cee:	9b01      	ldr	r3, [sp, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d07d      	beq.n	8003df0 <_dtoa_r+0x4f8>
 8003cf4:	f1b9 0f00 	cmp.w	r9, #0
 8003cf8:	dd3c      	ble.n	8003d74 <_dtoa_r+0x47c>
 8003cfa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003cfe:	9307      	str	r3, [sp, #28]
 8003d00:	2200      	movs	r2, #0
 8003d02:	4b91      	ldr	r3, [pc, #580]	; (8003f48 <_dtoa_r+0x650>)
 8003d04:	4630      	mov	r0, r6
 8003d06:	4639      	mov	r1, r7
 8003d08:	f7fc fc96 	bl	8000638 <__aeabi_dmul>
 8003d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d10:	3501      	adds	r5, #1
 8003d12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8003d16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	f7fc fc22 	bl	8000564 <__aeabi_i2d>
 8003d20:	4632      	mov	r2, r6
 8003d22:	463b      	mov	r3, r7
 8003d24:	f7fc fc88 	bl	8000638 <__aeabi_dmul>
 8003d28:	4b88      	ldr	r3, [pc, #544]	; (8003f4c <_dtoa_r+0x654>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f7fc face 	bl	80002cc <__adddf3>
 8003d30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d38:	9303      	str	r3, [sp, #12]
 8003d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d15c      	bne.n	8003dfa <_dtoa_r+0x502>
 8003d40:	4b83      	ldr	r3, [pc, #524]	; (8003f50 <_dtoa_r+0x658>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	4630      	mov	r0, r6
 8003d46:	4639      	mov	r1, r7
 8003d48:	f7fc fabe 	bl	80002c8 <__aeabi_dsub>
 8003d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d50:	4606      	mov	r6, r0
 8003d52:	460f      	mov	r7, r1
 8003d54:	f7fc ff00 	bl	8000b58 <__aeabi_dcmpgt>
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	f040 8296 	bne.w	800428a <_dtoa_r+0x992>
 8003d5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003d62:	4630      	mov	r0, r6
 8003d64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d68:	4639      	mov	r1, r7
 8003d6a:	f7fc fed7 	bl	8000b1c <__aeabi_dcmplt>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	f040 8288 	bne.w	8004284 <_dtoa_r+0x98c>
 8003d74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f2c0 8158 	blt.w	8004034 <_dtoa_r+0x73c>
 8003d84:	f1ba 0f0e 	cmp.w	sl, #14
 8003d88:	f300 8154 	bgt.w	8004034 <_dtoa_r+0x73c>
 8003d8c:	4b6b      	ldr	r3, [pc, #428]	; (8003f3c <_dtoa_r+0x644>)
 8003d8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003d92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f280 80e3 	bge.w	8003f64 <_dtoa_r+0x66c>
 8003d9e:	9b01      	ldr	r3, [sp, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f300 80df 	bgt.w	8003f64 <_dtoa_r+0x66c>
 8003da6:	f040 826d 	bne.w	8004284 <_dtoa_r+0x98c>
 8003daa:	4b69      	ldr	r3, [pc, #420]	; (8003f50 <_dtoa_r+0x658>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	4640      	mov	r0, r8
 8003db0:	4649      	mov	r1, r9
 8003db2:	f7fc fc41 	bl	8000638 <__aeabi_dmul>
 8003db6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dba:	f7fc fec3 	bl	8000b44 <__aeabi_dcmpge>
 8003dbe:	9e01      	ldr	r6, [sp, #4]
 8003dc0:	4637      	mov	r7, r6
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	f040 8243 	bne.w	800424e <_dtoa_r+0x956>
 8003dc8:	9d00      	ldr	r5, [sp, #0]
 8003dca:	2331      	movs	r3, #49	; 0x31
 8003dcc:	f805 3b01 	strb.w	r3, [r5], #1
 8003dd0:	f10a 0a01 	add.w	sl, sl, #1
 8003dd4:	e23f      	b.n	8004256 <_dtoa_r+0x95e>
 8003dd6:	07f2      	lsls	r2, r6, #31
 8003dd8:	d505      	bpl.n	8003de6 <_dtoa_r+0x4ee>
 8003dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dde:	f7fc fc2b 	bl	8000638 <__aeabi_dmul>
 8003de2:	3501      	adds	r5, #1
 8003de4:	2301      	movs	r3, #1
 8003de6:	1076      	asrs	r6, r6, #1
 8003de8:	3708      	adds	r7, #8
 8003dea:	e76c      	b.n	8003cc6 <_dtoa_r+0x3ce>
 8003dec:	2502      	movs	r5, #2
 8003dee:	e76f      	b.n	8003cd0 <_dtoa_r+0x3d8>
 8003df0:	9b01      	ldr	r3, [sp, #4]
 8003df2:	f8cd a01c 	str.w	sl, [sp, #28]
 8003df6:	930c      	str	r3, [sp, #48]	; 0x30
 8003df8:	e78d      	b.n	8003d16 <_dtoa_r+0x41e>
 8003dfa:	9900      	ldr	r1, [sp, #0]
 8003dfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003e00:	4b4e      	ldr	r3, [pc, #312]	; (8003f3c <_dtoa_r+0x644>)
 8003e02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003e06:	4401      	add	r1, r0
 8003e08:	9102      	str	r1, [sp, #8]
 8003e0a:	9908      	ldr	r1, [sp, #32]
 8003e0c:	eeb0 8a47 	vmov.f32	s16, s14
 8003e10:	eef0 8a67 	vmov.f32	s17, s15
 8003e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003e1c:	2900      	cmp	r1, #0
 8003e1e:	d045      	beq.n	8003eac <_dtoa_r+0x5b4>
 8003e20:	494c      	ldr	r1, [pc, #304]	; (8003f54 <_dtoa_r+0x65c>)
 8003e22:	2000      	movs	r0, #0
 8003e24:	f7fc fd32 	bl	800088c <__aeabi_ddiv>
 8003e28:	ec53 2b18 	vmov	r2, r3, d8
 8003e2c:	f7fc fa4c 	bl	80002c8 <__aeabi_dsub>
 8003e30:	9d00      	ldr	r5, [sp, #0]
 8003e32:	ec41 0b18 	vmov	d8, r0, r1
 8003e36:	4639      	mov	r1, r7
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f7fc fead 	bl	8000b98 <__aeabi_d2iz>
 8003e3e:	900c      	str	r0, [sp, #48]	; 0x30
 8003e40:	f7fc fb90 	bl	8000564 <__aeabi_i2d>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4630      	mov	r0, r6
 8003e4a:	4639      	mov	r1, r7
 8003e4c:	f7fc fa3c 	bl	80002c8 <__aeabi_dsub>
 8003e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e52:	3330      	adds	r3, #48	; 0x30
 8003e54:	f805 3b01 	strb.w	r3, [r5], #1
 8003e58:	ec53 2b18 	vmov	r2, r3, d8
 8003e5c:	4606      	mov	r6, r0
 8003e5e:	460f      	mov	r7, r1
 8003e60:	f7fc fe5c 	bl	8000b1c <__aeabi_dcmplt>
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d165      	bne.n	8003f34 <_dtoa_r+0x63c>
 8003e68:	4632      	mov	r2, r6
 8003e6a:	463b      	mov	r3, r7
 8003e6c:	4935      	ldr	r1, [pc, #212]	; (8003f44 <_dtoa_r+0x64c>)
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7fc fa2a 	bl	80002c8 <__aeabi_dsub>
 8003e74:	ec53 2b18 	vmov	r2, r3, d8
 8003e78:	f7fc fe50 	bl	8000b1c <__aeabi_dcmplt>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	f040 80b9 	bne.w	8003ff4 <_dtoa_r+0x6fc>
 8003e82:	9b02      	ldr	r3, [sp, #8]
 8003e84:	429d      	cmp	r5, r3
 8003e86:	f43f af75 	beq.w	8003d74 <_dtoa_r+0x47c>
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <_dtoa_r+0x650>)
 8003e8c:	ec51 0b18 	vmov	r0, r1, d8
 8003e90:	2200      	movs	r2, #0
 8003e92:	f7fc fbd1 	bl	8000638 <__aeabi_dmul>
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <_dtoa_r+0x650>)
 8003e98:	ec41 0b18 	vmov	d8, r0, r1
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	4639      	mov	r1, r7
 8003ea2:	f7fc fbc9 	bl	8000638 <__aeabi_dmul>
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	460f      	mov	r7, r1
 8003eaa:	e7c4      	b.n	8003e36 <_dtoa_r+0x53e>
 8003eac:	ec51 0b17 	vmov	r0, r1, d7
 8003eb0:	f7fc fbc2 	bl	8000638 <__aeabi_dmul>
 8003eb4:	9b02      	ldr	r3, [sp, #8]
 8003eb6:	9d00      	ldr	r5, [sp, #0]
 8003eb8:	930c      	str	r3, [sp, #48]	; 0x30
 8003eba:	ec41 0b18 	vmov	d8, r0, r1
 8003ebe:	4639      	mov	r1, r7
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	f7fc fe69 	bl	8000b98 <__aeabi_d2iz>
 8003ec6:	9011      	str	r0, [sp, #68]	; 0x44
 8003ec8:	f7fc fb4c 	bl	8000564 <__aeabi_i2d>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	4639      	mov	r1, r7
 8003ed4:	f7fc f9f8 	bl	80002c8 <__aeabi_dsub>
 8003ed8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003eda:	3330      	adds	r3, #48	; 0x30
 8003edc:	f805 3b01 	strb.w	r3, [r5], #1
 8003ee0:	9b02      	ldr	r3, [sp, #8]
 8003ee2:	429d      	cmp	r5, r3
 8003ee4:	4606      	mov	r6, r0
 8003ee6:	460f      	mov	r7, r1
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	d134      	bne.n	8003f58 <_dtoa_r+0x660>
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <_dtoa_r+0x65c>)
 8003ef0:	ec51 0b18 	vmov	r0, r1, d8
 8003ef4:	f7fc f9ea 	bl	80002cc <__adddf3>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4630      	mov	r0, r6
 8003efe:	4639      	mov	r1, r7
 8003f00:	f7fc fe2a 	bl	8000b58 <__aeabi_dcmpgt>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d175      	bne.n	8003ff4 <_dtoa_r+0x6fc>
 8003f08:	ec53 2b18 	vmov	r2, r3, d8
 8003f0c:	4911      	ldr	r1, [pc, #68]	; (8003f54 <_dtoa_r+0x65c>)
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f7fc f9da 	bl	80002c8 <__aeabi_dsub>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4630      	mov	r0, r6
 8003f1a:	4639      	mov	r1, r7
 8003f1c:	f7fc fdfe 	bl	8000b1c <__aeabi_dcmplt>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	f43f af27 	beq.w	8003d74 <_dtoa_r+0x47c>
 8003f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f28:	1e6b      	subs	r3, r5, #1
 8003f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8003f2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f30:	2b30      	cmp	r3, #48	; 0x30
 8003f32:	d0f8      	beq.n	8003f26 <_dtoa_r+0x62e>
 8003f34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003f38:	e04a      	b.n	8003fd0 <_dtoa_r+0x6d8>
 8003f3a:	bf00      	nop
 8003f3c:	08005ac8 	.word	0x08005ac8
 8003f40:	08005aa0 	.word	0x08005aa0
 8003f44:	3ff00000 	.word	0x3ff00000
 8003f48:	40240000 	.word	0x40240000
 8003f4c:	401c0000 	.word	0x401c0000
 8003f50:	40140000 	.word	0x40140000
 8003f54:	3fe00000 	.word	0x3fe00000
 8003f58:	4baf      	ldr	r3, [pc, #700]	; (8004218 <_dtoa_r+0x920>)
 8003f5a:	f7fc fb6d 	bl	8000638 <__aeabi_dmul>
 8003f5e:	4606      	mov	r6, r0
 8003f60:	460f      	mov	r7, r1
 8003f62:	e7ac      	b.n	8003ebe <_dtoa_r+0x5c6>
 8003f64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f68:	9d00      	ldr	r5, [sp, #0]
 8003f6a:	4642      	mov	r2, r8
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	4630      	mov	r0, r6
 8003f70:	4639      	mov	r1, r7
 8003f72:	f7fc fc8b 	bl	800088c <__aeabi_ddiv>
 8003f76:	f7fc fe0f 	bl	8000b98 <__aeabi_d2iz>
 8003f7a:	9002      	str	r0, [sp, #8]
 8003f7c:	f7fc faf2 	bl	8000564 <__aeabi_i2d>
 8003f80:	4642      	mov	r2, r8
 8003f82:	464b      	mov	r3, r9
 8003f84:	f7fc fb58 	bl	8000638 <__aeabi_dmul>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	4639      	mov	r1, r7
 8003f90:	f7fc f99a 	bl	80002c8 <__aeabi_dsub>
 8003f94:	9e02      	ldr	r6, [sp, #8]
 8003f96:	9f01      	ldr	r7, [sp, #4]
 8003f98:	3630      	adds	r6, #48	; 0x30
 8003f9a:	f805 6b01 	strb.w	r6, [r5], #1
 8003f9e:	9e00      	ldr	r6, [sp, #0]
 8003fa0:	1bae      	subs	r6, r5, r6
 8003fa2:	42b7      	cmp	r7, r6
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	d137      	bne.n	800401a <_dtoa_r+0x722>
 8003faa:	f7fc f98f 	bl	80002cc <__adddf3>
 8003fae:	4642      	mov	r2, r8
 8003fb0:	464b      	mov	r3, r9
 8003fb2:	4606      	mov	r6, r0
 8003fb4:	460f      	mov	r7, r1
 8003fb6:	f7fc fdcf 	bl	8000b58 <__aeabi_dcmpgt>
 8003fba:	b9c8      	cbnz	r0, 8003ff0 <_dtoa_r+0x6f8>
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	4639      	mov	r1, r7
 8003fc4:	f7fc fda0 	bl	8000b08 <__aeabi_dcmpeq>
 8003fc8:	b110      	cbz	r0, 8003fd0 <_dtoa_r+0x6d8>
 8003fca:	9b02      	ldr	r3, [sp, #8]
 8003fcc:	07d9      	lsls	r1, r3, #31
 8003fce:	d40f      	bmi.n	8003ff0 <_dtoa_r+0x6f8>
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	4659      	mov	r1, fp
 8003fd4:	f000 fad6 	bl	8004584 <_Bfree>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	702b      	strb	r3, [r5, #0]
 8003fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fde:	f10a 0001 	add.w	r0, sl, #1
 8003fe2:	6018      	str	r0, [r3, #0]
 8003fe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f43f acd8 	beq.w	800399c <_dtoa_r+0xa4>
 8003fec:	601d      	str	r5, [r3, #0]
 8003fee:	e4d5      	b.n	800399c <_dtoa_r+0xa4>
 8003ff0:	f8cd a01c 	str.w	sl, [sp, #28]
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003ffc:	2a39      	cmp	r2, #57	; 0x39
 8003ffe:	d108      	bne.n	8004012 <_dtoa_r+0x71a>
 8004000:	9a00      	ldr	r2, [sp, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d1f7      	bne.n	8003ff6 <_dtoa_r+0x6fe>
 8004006:	9a07      	ldr	r2, [sp, #28]
 8004008:	9900      	ldr	r1, [sp, #0]
 800400a:	3201      	adds	r2, #1
 800400c:	9207      	str	r2, [sp, #28]
 800400e:	2230      	movs	r2, #48	; 0x30
 8004010:	700a      	strb	r2, [r1, #0]
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	3201      	adds	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	e78c      	b.n	8003f34 <_dtoa_r+0x63c>
 800401a:	4b7f      	ldr	r3, [pc, #508]	; (8004218 <_dtoa_r+0x920>)
 800401c:	2200      	movs	r2, #0
 800401e:	f7fc fb0b 	bl	8000638 <__aeabi_dmul>
 8004022:	2200      	movs	r2, #0
 8004024:	2300      	movs	r3, #0
 8004026:	4606      	mov	r6, r0
 8004028:	460f      	mov	r7, r1
 800402a:	f7fc fd6d 	bl	8000b08 <__aeabi_dcmpeq>
 800402e:	2800      	cmp	r0, #0
 8004030:	d09b      	beq.n	8003f6a <_dtoa_r+0x672>
 8004032:	e7cd      	b.n	8003fd0 <_dtoa_r+0x6d8>
 8004034:	9a08      	ldr	r2, [sp, #32]
 8004036:	2a00      	cmp	r2, #0
 8004038:	f000 80c4 	beq.w	80041c4 <_dtoa_r+0x8cc>
 800403c:	9a05      	ldr	r2, [sp, #20]
 800403e:	2a01      	cmp	r2, #1
 8004040:	f300 80a8 	bgt.w	8004194 <_dtoa_r+0x89c>
 8004044:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004046:	2a00      	cmp	r2, #0
 8004048:	f000 80a0 	beq.w	800418c <_dtoa_r+0x894>
 800404c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004050:	9e06      	ldr	r6, [sp, #24]
 8004052:	4645      	mov	r5, r8
 8004054:	9a04      	ldr	r2, [sp, #16]
 8004056:	2101      	movs	r1, #1
 8004058:	441a      	add	r2, r3
 800405a:	4620      	mov	r0, r4
 800405c:	4498      	add	r8, r3
 800405e:	9204      	str	r2, [sp, #16]
 8004060:	f000 fb4c 	bl	80046fc <__i2b>
 8004064:	4607      	mov	r7, r0
 8004066:	2d00      	cmp	r5, #0
 8004068:	dd0b      	ble.n	8004082 <_dtoa_r+0x78a>
 800406a:	9b04      	ldr	r3, [sp, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	dd08      	ble.n	8004082 <_dtoa_r+0x78a>
 8004070:	42ab      	cmp	r3, r5
 8004072:	9a04      	ldr	r2, [sp, #16]
 8004074:	bfa8      	it	ge
 8004076:	462b      	movge	r3, r5
 8004078:	eba8 0803 	sub.w	r8, r8, r3
 800407c:	1aed      	subs	r5, r5, r3
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	9304      	str	r3, [sp, #16]
 8004082:	9b06      	ldr	r3, [sp, #24]
 8004084:	b1fb      	cbz	r3, 80040c6 <_dtoa_r+0x7ce>
 8004086:	9b08      	ldr	r3, [sp, #32]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 809f 	beq.w	80041cc <_dtoa_r+0x8d4>
 800408e:	2e00      	cmp	r6, #0
 8004090:	dd11      	ble.n	80040b6 <_dtoa_r+0x7be>
 8004092:	4639      	mov	r1, r7
 8004094:	4632      	mov	r2, r6
 8004096:	4620      	mov	r0, r4
 8004098:	f000 fbec 	bl	8004874 <__pow5mult>
 800409c:	465a      	mov	r2, fp
 800409e:	4601      	mov	r1, r0
 80040a0:	4607      	mov	r7, r0
 80040a2:	4620      	mov	r0, r4
 80040a4:	f000 fb40 	bl	8004728 <__multiply>
 80040a8:	4659      	mov	r1, fp
 80040aa:	9007      	str	r0, [sp, #28]
 80040ac:	4620      	mov	r0, r4
 80040ae:	f000 fa69 	bl	8004584 <_Bfree>
 80040b2:	9b07      	ldr	r3, [sp, #28]
 80040b4:	469b      	mov	fp, r3
 80040b6:	9b06      	ldr	r3, [sp, #24]
 80040b8:	1b9a      	subs	r2, r3, r6
 80040ba:	d004      	beq.n	80040c6 <_dtoa_r+0x7ce>
 80040bc:	4659      	mov	r1, fp
 80040be:	4620      	mov	r0, r4
 80040c0:	f000 fbd8 	bl	8004874 <__pow5mult>
 80040c4:	4683      	mov	fp, r0
 80040c6:	2101      	movs	r1, #1
 80040c8:	4620      	mov	r0, r4
 80040ca:	f000 fb17 	bl	80046fc <__i2b>
 80040ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	4606      	mov	r6, r0
 80040d4:	dd7c      	ble.n	80041d0 <_dtoa_r+0x8d8>
 80040d6:	461a      	mov	r2, r3
 80040d8:	4601      	mov	r1, r0
 80040da:	4620      	mov	r0, r4
 80040dc:	f000 fbca 	bl	8004874 <__pow5mult>
 80040e0:	9b05      	ldr	r3, [sp, #20]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	4606      	mov	r6, r0
 80040e6:	dd76      	ble.n	80041d6 <_dtoa_r+0x8de>
 80040e8:	2300      	movs	r3, #0
 80040ea:	9306      	str	r3, [sp, #24]
 80040ec:	6933      	ldr	r3, [r6, #16]
 80040ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80040f2:	6918      	ldr	r0, [r3, #16]
 80040f4:	f000 fab2 	bl	800465c <__hi0bits>
 80040f8:	f1c0 0020 	rsb	r0, r0, #32
 80040fc:	9b04      	ldr	r3, [sp, #16]
 80040fe:	4418      	add	r0, r3
 8004100:	f010 001f 	ands.w	r0, r0, #31
 8004104:	f000 8086 	beq.w	8004214 <_dtoa_r+0x91c>
 8004108:	f1c0 0320 	rsb	r3, r0, #32
 800410c:	2b04      	cmp	r3, #4
 800410e:	dd7f      	ble.n	8004210 <_dtoa_r+0x918>
 8004110:	f1c0 001c 	rsb	r0, r0, #28
 8004114:	9b04      	ldr	r3, [sp, #16]
 8004116:	4403      	add	r3, r0
 8004118:	4480      	add	r8, r0
 800411a:	4405      	add	r5, r0
 800411c:	9304      	str	r3, [sp, #16]
 800411e:	f1b8 0f00 	cmp.w	r8, #0
 8004122:	dd05      	ble.n	8004130 <_dtoa_r+0x838>
 8004124:	4659      	mov	r1, fp
 8004126:	4642      	mov	r2, r8
 8004128:	4620      	mov	r0, r4
 800412a:	f000 fbfd 	bl	8004928 <__lshift>
 800412e:	4683      	mov	fp, r0
 8004130:	9b04      	ldr	r3, [sp, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	dd05      	ble.n	8004142 <_dtoa_r+0x84a>
 8004136:	4631      	mov	r1, r6
 8004138:	461a      	mov	r2, r3
 800413a:	4620      	mov	r0, r4
 800413c:	f000 fbf4 	bl	8004928 <__lshift>
 8004140:	4606      	mov	r6, r0
 8004142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004144:	2b00      	cmp	r3, #0
 8004146:	d069      	beq.n	800421c <_dtoa_r+0x924>
 8004148:	4631      	mov	r1, r6
 800414a:	4658      	mov	r0, fp
 800414c:	f000 fc58 	bl	8004a00 <__mcmp>
 8004150:	2800      	cmp	r0, #0
 8004152:	da63      	bge.n	800421c <_dtoa_r+0x924>
 8004154:	2300      	movs	r3, #0
 8004156:	4659      	mov	r1, fp
 8004158:	220a      	movs	r2, #10
 800415a:	4620      	mov	r0, r4
 800415c:	f000 fa34 	bl	80045c8 <__multadd>
 8004160:	9b08      	ldr	r3, [sp, #32]
 8004162:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004166:	4683      	mov	fp, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 818f 	beq.w	800448c <_dtoa_r+0xb94>
 800416e:	4639      	mov	r1, r7
 8004170:	2300      	movs	r3, #0
 8004172:	220a      	movs	r2, #10
 8004174:	4620      	mov	r0, r4
 8004176:	f000 fa27 	bl	80045c8 <__multadd>
 800417a:	f1b9 0f00 	cmp.w	r9, #0
 800417e:	4607      	mov	r7, r0
 8004180:	f300 808e 	bgt.w	80042a0 <_dtoa_r+0x9a8>
 8004184:	9b05      	ldr	r3, [sp, #20]
 8004186:	2b02      	cmp	r3, #2
 8004188:	dc50      	bgt.n	800422c <_dtoa_r+0x934>
 800418a:	e089      	b.n	80042a0 <_dtoa_r+0x9a8>
 800418c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800418e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004192:	e75d      	b.n	8004050 <_dtoa_r+0x758>
 8004194:	9b01      	ldr	r3, [sp, #4]
 8004196:	1e5e      	subs	r6, r3, #1
 8004198:	9b06      	ldr	r3, [sp, #24]
 800419a:	42b3      	cmp	r3, r6
 800419c:	bfbf      	itttt	lt
 800419e:	9b06      	ldrlt	r3, [sp, #24]
 80041a0:	9606      	strlt	r6, [sp, #24]
 80041a2:	1af2      	sublt	r2, r6, r3
 80041a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80041a6:	bfb6      	itet	lt
 80041a8:	189b      	addlt	r3, r3, r2
 80041aa:	1b9e      	subge	r6, r3, r6
 80041ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80041ae:	9b01      	ldr	r3, [sp, #4]
 80041b0:	bfb8      	it	lt
 80041b2:	2600      	movlt	r6, #0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bfb5      	itete	lt
 80041b8:	eba8 0503 	sublt.w	r5, r8, r3
 80041bc:	9b01      	ldrge	r3, [sp, #4]
 80041be:	2300      	movlt	r3, #0
 80041c0:	4645      	movge	r5, r8
 80041c2:	e747      	b.n	8004054 <_dtoa_r+0x75c>
 80041c4:	9e06      	ldr	r6, [sp, #24]
 80041c6:	9f08      	ldr	r7, [sp, #32]
 80041c8:	4645      	mov	r5, r8
 80041ca:	e74c      	b.n	8004066 <_dtoa_r+0x76e>
 80041cc:	9a06      	ldr	r2, [sp, #24]
 80041ce:	e775      	b.n	80040bc <_dtoa_r+0x7c4>
 80041d0:	9b05      	ldr	r3, [sp, #20]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	dc18      	bgt.n	8004208 <_dtoa_r+0x910>
 80041d6:	9b02      	ldr	r3, [sp, #8]
 80041d8:	b9b3      	cbnz	r3, 8004208 <_dtoa_r+0x910>
 80041da:	9b03      	ldr	r3, [sp, #12]
 80041dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e0:	b9a3      	cbnz	r3, 800420c <_dtoa_r+0x914>
 80041e2:	9b03      	ldr	r3, [sp, #12]
 80041e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041e8:	0d1b      	lsrs	r3, r3, #20
 80041ea:	051b      	lsls	r3, r3, #20
 80041ec:	b12b      	cbz	r3, 80041fa <_dtoa_r+0x902>
 80041ee:	9b04      	ldr	r3, [sp, #16]
 80041f0:	3301      	adds	r3, #1
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	f108 0801 	add.w	r8, r8, #1
 80041f8:	2301      	movs	r3, #1
 80041fa:	9306      	str	r3, [sp, #24]
 80041fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f47f af74 	bne.w	80040ec <_dtoa_r+0x7f4>
 8004204:	2001      	movs	r0, #1
 8004206:	e779      	b.n	80040fc <_dtoa_r+0x804>
 8004208:	2300      	movs	r3, #0
 800420a:	e7f6      	b.n	80041fa <_dtoa_r+0x902>
 800420c:	9b02      	ldr	r3, [sp, #8]
 800420e:	e7f4      	b.n	80041fa <_dtoa_r+0x902>
 8004210:	d085      	beq.n	800411e <_dtoa_r+0x826>
 8004212:	4618      	mov	r0, r3
 8004214:	301c      	adds	r0, #28
 8004216:	e77d      	b.n	8004114 <_dtoa_r+0x81c>
 8004218:	40240000 	.word	0x40240000
 800421c:	9b01      	ldr	r3, [sp, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	dc38      	bgt.n	8004294 <_dtoa_r+0x99c>
 8004222:	9b05      	ldr	r3, [sp, #20]
 8004224:	2b02      	cmp	r3, #2
 8004226:	dd35      	ble.n	8004294 <_dtoa_r+0x99c>
 8004228:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800422c:	f1b9 0f00 	cmp.w	r9, #0
 8004230:	d10d      	bne.n	800424e <_dtoa_r+0x956>
 8004232:	4631      	mov	r1, r6
 8004234:	464b      	mov	r3, r9
 8004236:	2205      	movs	r2, #5
 8004238:	4620      	mov	r0, r4
 800423a:	f000 f9c5 	bl	80045c8 <__multadd>
 800423e:	4601      	mov	r1, r0
 8004240:	4606      	mov	r6, r0
 8004242:	4658      	mov	r0, fp
 8004244:	f000 fbdc 	bl	8004a00 <__mcmp>
 8004248:	2800      	cmp	r0, #0
 800424a:	f73f adbd 	bgt.w	8003dc8 <_dtoa_r+0x4d0>
 800424e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004250:	9d00      	ldr	r5, [sp, #0]
 8004252:	ea6f 0a03 	mvn.w	sl, r3
 8004256:	f04f 0800 	mov.w	r8, #0
 800425a:	4631      	mov	r1, r6
 800425c:	4620      	mov	r0, r4
 800425e:	f000 f991 	bl	8004584 <_Bfree>
 8004262:	2f00      	cmp	r7, #0
 8004264:	f43f aeb4 	beq.w	8003fd0 <_dtoa_r+0x6d8>
 8004268:	f1b8 0f00 	cmp.w	r8, #0
 800426c:	d005      	beq.n	800427a <_dtoa_r+0x982>
 800426e:	45b8      	cmp	r8, r7
 8004270:	d003      	beq.n	800427a <_dtoa_r+0x982>
 8004272:	4641      	mov	r1, r8
 8004274:	4620      	mov	r0, r4
 8004276:	f000 f985 	bl	8004584 <_Bfree>
 800427a:	4639      	mov	r1, r7
 800427c:	4620      	mov	r0, r4
 800427e:	f000 f981 	bl	8004584 <_Bfree>
 8004282:	e6a5      	b.n	8003fd0 <_dtoa_r+0x6d8>
 8004284:	2600      	movs	r6, #0
 8004286:	4637      	mov	r7, r6
 8004288:	e7e1      	b.n	800424e <_dtoa_r+0x956>
 800428a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800428c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004290:	4637      	mov	r7, r6
 8004292:	e599      	b.n	8003dc8 <_dtoa_r+0x4d0>
 8004294:	9b08      	ldr	r3, [sp, #32]
 8004296:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80fd 	beq.w	800449a <_dtoa_r+0xba2>
 80042a0:	2d00      	cmp	r5, #0
 80042a2:	dd05      	ble.n	80042b0 <_dtoa_r+0x9b8>
 80042a4:	4639      	mov	r1, r7
 80042a6:	462a      	mov	r2, r5
 80042a8:	4620      	mov	r0, r4
 80042aa:	f000 fb3d 	bl	8004928 <__lshift>
 80042ae:	4607      	mov	r7, r0
 80042b0:	9b06      	ldr	r3, [sp, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d05c      	beq.n	8004370 <_dtoa_r+0xa78>
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4620      	mov	r0, r4
 80042ba:	f000 f923 	bl	8004504 <_Balloc>
 80042be:	4605      	mov	r5, r0
 80042c0:	b928      	cbnz	r0, 80042ce <_dtoa_r+0x9d6>
 80042c2:	4b80      	ldr	r3, [pc, #512]	; (80044c4 <_dtoa_r+0xbcc>)
 80042c4:	4602      	mov	r2, r0
 80042c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80042ca:	f7ff bb2e 	b.w	800392a <_dtoa_r+0x32>
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	3202      	adds	r2, #2
 80042d2:	0092      	lsls	r2, r2, #2
 80042d4:	f107 010c 	add.w	r1, r7, #12
 80042d8:	300c      	adds	r0, #12
 80042da:	f000 f905 	bl	80044e8 <memcpy>
 80042de:	2201      	movs	r2, #1
 80042e0:	4629      	mov	r1, r5
 80042e2:	4620      	mov	r0, r4
 80042e4:	f000 fb20 	bl	8004928 <__lshift>
 80042e8:	9b00      	ldr	r3, [sp, #0]
 80042ea:	3301      	adds	r3, #1
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	9b00      	ldr	r3, [sp, #0]
 80042f0:	444b      	add	r3, r9
 80042f2:	9307      	str	r3, [sp, #28]
 80042f4:	9b02      	ldr	r3, [sp, #8]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	46b8      	mov	r8, r7
 80042fc:	9306      	str	r3, [sp, #24]
 80042fe:	4607      	mov	r7, r0
 8004300:	9b01      	ldr	r3, [sp, #4]
 8004302:	4631      	mov	r1, r6
 8004304:	3b01      	subs	r3, #1
 8004306:	4658      	mov	r0, fp
 8004308:	9302      	str	r3, [sp, #8]
 800430a:	f7ff fa69 	bl	80037e0 <quorem>
 800430e:	4603      	mov	r3, r0
 8004310:	3330      	adds	r3, #48	; 0x30
 8004312:	9004      	str	r0, [sp, #16]
 8004314:	4641      	mov	r1, r8
 8004316:	4658      	mov	r0, fp
 8004318:	9308      	str	r3, [sp, #32]
 800431a:	f000 fb71 	bl	8004a00 <__mcmp>
 800431e:	463a      	mov	r2, r7
 8004320:	4681      	mov	r9, r0
 8004322:	4631      	mov	r1, r6
 8004324:	4620      	mov	r0, r4
 8004326:	f000 fb87 	bl	8004a38 <__mdiff>
 800432a:	68c2      	ldr	r2, [r0, #12]
 800432c:	9b08      	ldr	r3, [sp, #32]
 800432e:	4605      	mov	r5, r0
 8004330:	bb02      	cbnz	r2, 8004374 <_dtoa_r+0xa7c>
 8004332:	4601      	mov	r1, r0
 8004334:	4658      	mov	r0, fp
 8004336:	f000 fb63 	bl	8004a00 <__mcmp>
 800433a:	9b08      	ldr	r3, [sp, #32]
 800433c:	4602      	mov	r2, r0
 800433e:	4629      	mov	r1, r5
 8004340:	4620      	mov	r0, r4
 8004342:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004346:	f000 f91d 	bl	8004584 <_Bfree>
 800434a:	9b05      	ldr	r3, [sp, #20]
 800434c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800434e:	9d01      	ldr	r5, [sp, #4]
 8004350:	ea43 0102 	orr.w	r1, r3, r2
 8004354:	9b06      	ldr	r3, [sp, #24]
 8004356:	430b      	orrs	r3, r1
 8004358:	9b08      	ldr	r3, [sp, #32]
 800435a:	d10d      	bne.n	8004378 <_dtoa_r+0xa80>
 800435c:	2b39      	cmp	r3, #57	; 0x39
 800435e:	d029      	beq.n	80043b4 <_dtoa_r+0xabc>
 8004360:	f1b9 0f00 	cmp.w	r9, #0
 8004364:	dd01      	ble.n	800436a <_dtoa_r+0xa72>
 8004366:	9b04      	ldr	r3, [sp, #16]
 8004368:	3331      	adds	r3, #49	; 0x31
 800436a:	9a02      	ldr	r2, [sp, #8]
 800436c:	7013      	strb	r3, [r2, #0]
 800436e:	e774      	b.n	800425a <_dtoa_r+0x962>
 8004370:	4638      	mov	r0, r7
 8004372:	e7b9      	b.n	80042e8 <_dtoa_r+0x9f0>
 8004374:	2201      	movs	r2, #1
 8004376:	e7e2      	b.n	800433e <_dtoa_r+0xa46>
 8004378:	f1b9 0f00 	cmp.w	r9, #0
 800437c:	db06      	blt.n	800438c <_dtoa_r+0xa94>
 800437e:	9905      	ldr	r1, [sp, #20]
 8004380:	ea41 0909 	orr.w	r9, r1, r9
 8004384:	9906      	ldr	r1, [sp, #24]
 8004386:	ea59 0101 	orrs.w	r1, r9, r1
 800438a:	d120      	bne.n	80043ce <_dtoa_r+0xad6>
 800438c:	2a00      	cmp	r2, #0
 800438e:	ddec      	ble.n	800436a <_dtoa_r+0xa72>
 8004390:	4659      	mov	r1, fp
 8004392:	2201      	movs	r2, #1
 8004394:	4620      	mov	r0, r4
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	f000 fac6 	bl	8004928 <__lshift>
 800439c:	4631      	mov	r1, r6
 800439e:	4683      	mov	fp, r0
 80043a0:	f000 fb2e 	bl	8004a00 <__mcmp>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	9b01      	ldr	r3, [sp, #4]
 80043a8:	dc02      	bgt.n	80043b0 <_dtoa_r+0xab8>
 80043aa:	d1de      	bne.n	800436a <_dtoa_r+0xa72>
 80043ac:	07da      	lsls	r2, r3, #31
 80043ae:	d5dc      	bpl.n	800436a <_dtoa_r+0xa72>
 80043b0:	2b39      	cmp	r3, #57	; 0x39
 80043b2:	d1d8      	bne.n	8004366 <_dtoa_r+0xa6e>
 80043b4:	9a02      	ldr	r2, [sp, #8]
 80043b6:	2339      	movs	r3, #57	; 0x39
 80043b8:	7013      	strb	r3, [r2, #0]
 80043ba:	462b      	mov	r3, r5
 80043bc:	461d      	mov	r5, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80043c4:	2a39      	cmp	r2, #57	; 0x39
 80043c6:	d050      	beq.n	800446a <_dtoa_r+0xb72>
 80043c8:	3201      	adds	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e745      	b.n	800425a <_dtoa_r+0x962>
 80043ce:	2a00      	cmp	r2, #0
 80043d0:	dd03      	ble.n	80043da <_dtoa_r+0xae2>
 80043d2:	2b39      	cmp	r3, #57	; 0x39
 80043d4:	d0ee      	beq.n	80043b4 <_dtoa_r+0xabc>
 80043d6:	3301      	adds	r3, #1
 80043d8:	e7c7      	b.n	800436a <_dtoa_r+0xa72>
 80043da:	9a01      	ldr	r2, [sp, #4]
 80043dc:	9907      	ldr	r1, [sp, #28]
 80043de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80043e2:	428a      	cmp	r2, r1
 80043e4:	d02a      	beq.n	800443c <_dtoa_r+0xb44>
 80043e6:	4659      	mov	r1, fp
 80043e8:	2300      	movs	r3, #0
 80043ea:	220a      	movs	r2, #10
 80043ec:	4620      	mov	r0, r4
 80043ee:	f000 f8eb 	bl	80045c8 <__multadd>
 80043f2:	45b8      	cmp	r8, r7
 80043f4:	4683      	mov	fp, r0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	f04f 020a 	mov.w	r2, #10
 80043fe:	4641      	mov	r1, r8
 8004400:	4620      	mov	r0, r4
 8004402:	d107      	bne.n	8004414 <_dtoa_r+0xb1c>
 8004404:	f000 f8e0 	bl	80045c8 <__multadd>
 8004408:	4680      	mov	r8, r0
 800440a:	4607      	mov	r7, r0
 800440c:	9b01      	ldr	r3, [sp, #4]
 800440e:	3301      	adds	r3, #1
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	e775      	b.n	8004300 <_dtoa_r+0xa08>
 8004414:	f000 f8d8 	bl	80045c8 <__multadd>
 8004418:	4639      	mov	r1, r7
 800441a:	4680      	mov	r8, r0
 800441c:	2300      	movs	r3, #0
 800441e:	220a      	movs	r2, #10
 8004420:	4620      	mov	r0, r4
 8004422:	f000 f8d1 	bl	80045c8 <__multadd>
 8004426:	4607      	mov	r7, r0
 8004428:	e7f0      	b.n	800440c <_dtoa_r+0xb14>
 800442a:	f1b9 0f00 	cmp.w	r9, #0
 800442e:	9a00      	ldr	r2, [sp, #0]
 8004430:	bfcc      	ite	gt
 8004432:	464d      	movgt	r5, r9
 8004434:	2501      	movle	r5, #1
 8004436:	4415      	add	r5, r2
 8004438:	f04f 0800 	mov.w	r8, #0
 800443c:	4659      	mov	r1, fp
 800443e:	2201      	movs	r2, #1
 8004440:	4620      	mov	r0, r4
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	f000 fa70 	bl	8004928 <__lshift>
 8004448:	4631      	mov	r1, r6
 800444a:	4683      	mov	fp, r0
 800444c:	f000 fad8 	bl	8004a00 <__mcmp>
 8004450:	2800      	cmp	r0, #0
 8004452:	dcb2      	bgt.n	80043ba <_dtoa_r+0xac2>
 8004454:	d102      	bne.n	800445c <_dtoa_r+0xb64>
 8004456:	9b01      	ldr	r3, [sp, #4]
 8004458:	07db      	lsls	r3, r3, #31
 800445a:	d4ae      	bmi.n	80043ba <_dtoa_r+0xac2>
 800445c:	462b      	mov	r3, r5
 800445e:	461d      	mov	r5, r3
 8004460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004464:	2a30      	cmp	r2, #48	; 0x30
 8004466:	d0fa      	beq.n	800445e <_dtoa_r+0xb66>
 8004468:	e6f7      	b.n	800425a <_dtoa_r+0x962>
 800446a:	9a00      	ldr	r2, [sp, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d1a5      	bne.n	80043bc <_dtoa_r+0xac4>
 8004470:	f10a 0a01 	add.w	sl, sl, #1
 8004474:	2331      	movs	r3, #49	; 0x31
 8004476:	e779      	b.n	800436c <_dtoa_r+0xa74>
 8004478:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <_dtoa_r+0xbd0>)
 800447a:	f7ff baaf 	b.w	80039dc <_dtoa_r+0xe4>
 800447e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004480:	2b00      	cmp	r3, #0
 8004482:	f47f aa86 	bne.w	8003992 <_dtoa_r+0x9a>
 8004486:	4b11      	ldr	r3, [pc, #68]	; (80044cc <_dtoa_r+0xbd4>)
 8004488:	f7ff baa8 	b.w	80039dc <_dtoa_r+0xe4>
 800448c:	f1b9 0f00 	cmp.w	r9, #0
 8004490:	dc03      	bgt.n	800449a <_dtoa_r+0xba2>
 8004492:	9b05      	ldr	r3, [sp, #20]
 8004494:	2b02      	cmp	r3, #2
 8004496:	f73f aec9 	bgt.w	800422c <_dtoa_r+0x934>
 800449a:	9d00      	ldr	r5, [sp, #0]
 800449c:	4631      	mov	r1, r6
 800449e:	4658      	mov	r0, fp
 80044a0:	f7ff f99e 	bl	80037e0 <quorem>
 80044a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80044a8:	f805 3b01 	strb.w	r3, [r5], #1
 80044ac:	9a00      	ldr	r2, [sp, #0]
 80044ae:	1aaa      	subs	r2, r5, r2
 80044b0:	4591      	cmp	r9, r2
 80044b2:	ddba      	ble.n	800442a <_dtoa_r+0xb32>
 80044b4:	4659      	mov	r1, fp
 80044b6:	2300      	movs	r3, #0
 80044b8:	220a      	movs	r2, #10
 80044ba:	4620      	mov	r0, r4
 80044bc:	f000 f884 	bl	80045c8 <__multadd>
 80044c0:	4683      	mov	fp, r0
 80044c2:	e7eb      	b.n	800449c <_dtoa_r+0xba4>
 80044c4:	08005a2b 	.word	0x08005a2b
 80044c8:	08005984 	.word	0x08005984
 80044cc:	080059a8 	.word	0x080059a8

080044d0 <_localeconv_r>:
 80044d0:	4800      	ldr	r0, [pc, #0]	; (80044d4 <_localeconv_r+0x4>)
 80044d2:	4770      	bx	lr
 80044d4:	20000188 	.word	0x20000188

080044d8 <malloc>:
 80044d8:	4b02      	ldr	r3, [pc, #8]	; (80044e4 <malloc+0xc>)
 80044da:	4601      	mov	r1, r0
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	f000 bbef 	b.w	8004cc0 <_malloc_r>
 80044e2:	bf00      	nop
 80044e4:	20000034 	.word	0x20000034

080044e8 <memcpy>:
 80044e8:	440a      	add	r2, r1
 80044ea:	4291      	cmp	r1, r2
 80044ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80044f0:	d100      	bne.n	80044f4 <memcpy+0xc>
 80044f2:	4770      	bx	lr
 80044f4:	b510      	push	{r4, lr}
 80044f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044fe:	4291      	cmp	r1, r2
 8004500:	d1f9      	bne.n	80044f6 <memcpy+0xe>
 8004502:	bd10      	pop	{r4, pc}

08004504 <_Balloc>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004508:	4604      	mov	r4, r0
 800450a:	460d      	mov	r5, r1
 800450c:	b976      	cbnz	r6, 800452c <_Balloc+0x28>
 800450e:	2010      	movs	r0, #16
 8004510:	f7ff ffe2 	bl	80044d8 <malloc>
 8004514:	4602      	mov	r2, r0
 8004516:	6260      	str	r0, [r4, #36]	; 0x24
 8004518:	b920      	cbnz	r0, 8004524 <_Balloc+0x20>
 800451a:	4b18      	ldr	r3, [pc, #96]	; (800457c <_Balloc+0x78>)
 800451c:	4818      	ldr	r0, [pc, #96]	; (8004580 <_Balloc+0x7c>)
 800451e:	2166      	movs	r1, #102	; 0x66
 8004520:	f000 fc38 	bl	8004d94 <__assert_func>
 8004524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004528:	6006      	str	r6, [r0, #0]
 800452a:	60c6      	str	r6, [r0, #12]
 800452c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800452e:	68f3      	ldr	r3, [r6, #12]
 8004530:	b183      	cbz	r3, 8004554 <_Balloc+0x50>
 8004532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800453a:	b9b8      	cbnz	r0, 800456c <_Balloc+0x68>
 800453c:	2101      	movs	r1, #1
 800453e:	fa01 f605 	lsl.w	r6, r1, r5
 8004542:	1d72      	adds	r2, r6, #5
 8004544:	0092      	lsls	r2, r2, #2
 8004546:	4620      	mov	r0, r4
 8004548:	f000 fb5a 	bl	8004c00 <_calloc_r>
 800454c:	b160      	cbz	r0, 8004568 <_Balloc+0x64>
 800454e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004552:	e00e      	b.n	8004572 <_Balloc+0x6e>
 8004554:	2221      	movs	r2, #33	; 0x21
 8004556:	2104      	movs	r1, #4
 8004558:	4620      	mov	r0, r4
 800455a:	f000 fb51 	bl	8004c00 <_calloc_r>
 800455e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004560:	60f0      	str	r0, [r6, #12]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e4      	bne.n	8004532 <_Balloc+0x2e>
 8004568:	2000      	movs	r0, #0
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	6802      	ldr	r2, [r0, #0]
 800456e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004572:	2300      	movs	r3, #0
 8004574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004578:	e7f7      	b.n	800456a <_Balloc+0x66>
 800457a:	bf00      	nop
 800457c:	080059b5 	.word	0x080059b5
 8004580:	08005a3c 	.word	0x08005a3c

08004584 <_Bfree>:
 8004584:	b570      	push	{r4, r5, r6, lr}
 8004586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004588:	4605      	mov	r5, r0
 800458a:	460c      	mov	r4, r1
 800458c:	b976      	cbnz	r6, 80045ac <_Bfree+0x28>
 800458e:	2010      	movs	r0, #16
 8004590:	f7ff ffa2 	bl	80044d8 <malloc>
 8004594:	4602      	mov	r2, r0
 8004596:	6268      	str	r0, [r5, #36]	; 0x24
 8004598:	b920      	cbnz	r0, 80045a4 <_Bfree+0x20>
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <_Bfree+0x3c>)
 800459c:	4809      	ldr	r0, [pc, #36]	; (80045c4 <_Bfree+0x40>)
 800459e:	218a      	movs	r1, #138	; 0x8a
 80045a0:	f000 fbf8 	bl	8004d94 <__assert_func>
 80045a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045a8:	6006      	str	r6, [r0, #0]
 80045aa:	60c6      	str	r6, [r0, #12]
 80045ac:	b13c      	cbz	r4, 80045be <_Bfree+0x3a>
 80045ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045b0:	6862      	ldr	r2, [r4, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045b8:	6021      	str	r1, [r4, #0]
 80045ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	080059b5 	.word	0x080059b5
 80045c4:	08005a3c 	.word	0x08005a3c

080045c8 <__multadd>:
 80045c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045cc:	690e      	ldr	r6, [r1, #16]
 80045ce:	4607      	mov	r7, r0
 80045d0:	4698      	mov	r8, r3
 80045d2:	460c      	mov	r4, r1
 80045d4:	f101 0014 	add.w	r0, r1, #20
 80045d8:	2300      	movs	r3, #0
 80045da:	6805      	ldr	r5, [r0, #0]
 80045dc:	b2a9      	uxth	r1, r5
 80045de:	fb02 8101 	mla	r1, r2, r1, r8
 80045e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80045e6:	0c2d      	lsrs	r5, r5, #16
 80045e8:	fb02 c505 	mla	r5, r2, r5, ip
 80045ec:	b289      	uxth	r1, r1
 80045ee:	3301      	adds	r3, #1
 80045f0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80045f4:	429e      	cmp	r6, r3
 80045f6:	f840 1b04 	str.w	r1, [r0], #4
 80045fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80045fe:	dcec      	bgt.n	80045da <__multadd+0x12>
 8004600:	f1b8 0f00 	cmp.w	r8, #0
 8004604:	d022      	beq.n	800464c <__multadd+0x84>
 8004606:	68a3      	ldr	r3, [r4, #8]
 8004608:	42b3      	cmp	r3, r6
 800460a:	dc19      	bgt.n	8004640 <__multadd+0x78>
 800460c:	6861      	ldr	r1, [r4, #4]
 800460e:	4638      	mov	r0, r7
 8004610:	3101      	adds	r1, #1
 8004612:	f7ff ff77 	bl	8004504 <_Balloc>
 8004616:	4605      	mov	r5, r0
 8004618:	b928      	cbnz	r0, 8004626 <__multadd+0x5e>
 800461a:	4602      	mov	r2, r0
 800461c:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <__multadd+0x8c>)
 800461e:	480e      	ldr	r0, [pc, #56]	; (8004658 <__multadd+0x90>)
 8004620:	21b5      	movs	r1, #181	; 0xb5
 8004622:	f000 fbb7 	bl	8004d94 <__assert_func>
 8004626:	6922      	ldr	r2, [r4, #16]
 8004628:	3202      	adds	r2, #2
 800462a:	f104 010c 	add.w	r1, r4, #12
 800462e:	0092      	lsls	r2, r2, #2
 8004630:	300c      	adds	r0, #12
 8004632:	f7ff ff59 	bl	80044e8 <memcpy>
 8004636:	4621      	mov	r1, r4
 8004638:	4638      	mov	r0, r7
 800463a:	f7ff ffa3 	bl	8004584 <_Bfree>
 800463e:	462c      	mov	r4, r5
 8004640:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004644:	3601      	adds	r6, #1
 8004646:	f8c3 8014 	str.w	r8, [r3, #20]
 800464a:	6126      	str	r6, [r4, #16]
 800464c:	4620      	mov	r0, r4
 800464e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004652:	bf00      	nop
 8004654:	08005a2b 	.word	0x08005a2b
 8004658:	08005a3c 	.word	0x08005a3c

0800465c <__hi0bits>:
 800465c:	0c03      	lsrs	r3, r0, #16
 800465e:	041b      	lsls	r3, r3, #16
 8004660:	b9d3      	cbnz	r3, 8004698 <__hi0bits+0x3c>
 8004662:	0400      	lsls	r0, r0, #16
 8004664:	2310      	movs	r3, #16
 8004666:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800466a:	bf04      	itt	eq
 800466c:	0200      	lsleq	r0, r0, #8
 800466e:	3308      	addeq	r3, #8
 8004670:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004674:	bf04      	itt	eq
 8004676:	0100      	lsleq	r0, r0, #4
 8004678:	3304      	addeq	r3, #4
 800467a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800467e:	bf04      	itt	eq
 8004680:	0080      	lsleq	r0, r0, #2
 8004682:	3302      	addeq	r3, #2
 8004684:	2800      	cmp	r0, #0
 8004686:	db05      	blt.n	8004694 <__hi0bits+0x38>
 8004688:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800468c:	f103 0301 	add.w	r3, r3, #1
 8004690:	bf08      	it	eq
 8004692:	2320      	moveq	r3, #32
 8004694:	4618      	mov	r0, r3
 8004696:	4770      	bx	lr
 8004698:	2300      	movs	r3, #0
 800469a:	e7e4      	b.n	8004666 <__hi0bits+0xa>

0800469c <__lo0bits>:
 800469c:	6803      	ldr	r3, [r0, #0]
 800469e:	f013 0207 	ands.w	r2, r3, #7
 80046a2:	4601      	mov	r1, r0
 80046a4:	d00b      	beq.n	80046be <__lo0bits+0x22>
 80046a6:	07da      	lsls	r2, r3, #31
 80046a8:	d424      	bmi.n	80046f4 <__lo0bits+0x58>
 80046aa:	0798      	lsls	r0, r3, #30
 80046ac:	bf49      	itett	mi
 80046ae:	085b      	lsrmi	r3, r3, #1
 80046b0:	089b      	lsrpl	r3, r3, #2
 80046b2:	2001      	movmi	r0, #1
 80046b4:	600b      	strmi	r3, [r1, #0]
 80046b6:	bf5c      	itt	pl
 80046b8:	600b      	strpl	r3, [r1, #0]
 80046ba:	2002      	movpl	r0, #2
 80046bc:	4770      	bx	lr
 80046be:	b298      	uxth	r0, r3
 80046c0:	b9b0      	cbnz	r0, 80046f0 <__lo0bits+0x54>
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	2010      	movs	r0, #16
 80046c6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80046ca:	bf04      	itt	eq
 80046cc:	0a1b      	lsreq	r3, r3, #8
 80046ce:	3008      	addeq	r0, #8
 80046d0:	071a      	lsls	r2, r3, #28
 80046d2:	bf04      	itt	eq
 80046d4:	091b      	lsreq	r3, r3, #4
 80046d6:	3004      	addeq	r0, #4
 80046d8:	079a      	lsls	r2, r3, #30
 80046da:	bf04      	itt	eq
 80046dc:	089b      	lsreq	r3, r3, #2
 80046de:	3002      	addeq	r0, #2
 80046e0:	07da      	lsls	r2, r3, #31
 80046e2:	d403      	bmi.n	80046ec <__lo0bits+0x50>
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	f100 0001 	add.w	r0, r0, #1
 80046ea:	d005      	beq.n	80046f8 <__lo0bits+0x5c>
 80046ec:	600b      	str	r3, [r1, #0]
 80046ee:	4770      	bx	lr
 80046f0:	4610      	mov	r0, r2
 80046f2:	e7e8      	b.n	80046c6 <__lo0bits+0x2a>
 80046f4:	2000      	movs	r0, #0
 80046f6:	4770      	bx	lr
 80046f8:	2020      	movs	r0, #32
 80046fa:	4770      	bx	lr

080046fc <__i2b>:
 80046fc:	b510      	push	{r4, lr}
 80046fe:	460c      	mov	r4, r1
 8004700:	2101      	movs	r1, #1
 8004702:	f7ff feff 	bl	8004504 <_Balloc>
 8004706:	4602      	mov	r2, r0
 8004708:	b928      	cbnz	r0, 8004716 <__i2b+0x1a>
 800470a:	4b05      	ldr	r3, [pc, #20]	; (8004720 <__i2b+0x24>)
 800470c:	4805      	ldr	r0, [pc, #20]	; (8004724 <__i2b+0x28>)
 800470e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004712:	f000 fb3f 	bl	8004d94 <__assert_func>
 8004716:	2301      	movs	r3, #1
 8004718:	6144      	str	r4, [r0, #20]
 800471a:	6103      	str	r3, [r0, #16]
 800471c:	bd10      	pop	{r4, pc}
 800471e:	bf00      	nop
 8004720:	08005a2b 	.word	0x08005a2b
 8004724:	08005a3c 	.word	0x08005a3c

08004728 <__multiply>:
 8004728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472c:	4614      	mov	r4, r2
 800472e:	690a      	ldr	r2, [r1, #16]
 8004730:	6923      	ldr	r3, [r4, #16]
 8004732:	429a      	cmp	r2, r3
 8004734:	bfb8      	it	lt
 8004736:	460b      	movlt	r3, r1
 8004738:	460d      	mov	r5, r1
 800473a:	bfbc      	itt	lt
 800473c:	4625      	movlt	r5, r4
 800473e:	461c      	movlt	r4, r3
 8004740:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004744:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004748:	68ab      	ldr	r3, [r5, #8]
 800474a:	6869      	ldr	r1, [r5, #4]
 800474c:	eb0a 0709 	add.w	r7, sl, r9
 8004750:	42bb      	cmp	r3, r7
 8004752:	b085      	sub	sp, #20
 8004754:	bfb8      	it	lt
 8004756:	3101      	addlt	r1, #1
 8004758:	f7ff fed4 	bl	8004504 <_Balloc>
 800475c:	b930      	cbnz	r0, 800476c <__multiply+0x44>
 800475e:	4602      	mov	r2, r0
 8004760:	4b42      	ldr	r3, [pc, #264]	; (800486c <__multiply+0x144>)
 8004762:	4843      	ldr	r0, [pc, #268]	; (8004870 <__multiply+0x148>)
 8004764:	f240 115d 	movw	r1, #349	; 0x15d
 8004768:	f000 fb14 	bl	8004d94 <__assert_func>
 800476c:	f100 0614 	add.w	r6, r0, #20
 8004770:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004774:	4633      	mov	r3, r6
 8004776:	2200      	movs	r2, #0
 8004778:	4543      	cmp	r3, r8
 800477a:	d31e      	bcc.n	80047ba <__multiply+0x92>
 800477c:	f105 0c14 	add.w	ip, r5, #20
 8004780:	f104 0314 	add.w	r3, r4, #20
 8004784:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004788:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800478c:	9202      	str	r2, [sp, #8]
 800478e:	ebac 0205 	sub.w	r2, ip, r5
 8004792:	3a15      	subs	r2, #21
 8004794:	f022 0203 	bic.w	r2, r2, #3
 8004798:	3204      	adds	r2, #4
 800479a:	f105 0115 	add.w	r1, r5, #21
 800479e:	458c      	cmp	ip, r1
 80047a0:	bf38      	it	cc
 80047a2:	2204      	movcc	r2, #4
 80047a4:	9201      	str	r2, [sp, #4]
 80047a6:	9a02      	ldr	r2, [sp, #8]
 80047a8:	9303      	str	r3, [sp, #12]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d808      	bhi.n	80047c0 <__multiply+0x98>
 80047ae:	2f00      	cmp	r7, #0
 80047b0:	dc55      	bgt.n	800485e <__multiply+0x136>
 80047b2:	6107      	str	r7, [r0, #16]
 80047b4:	b005      	add	sp, #20
 80047b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ba:	f843 2b04 	str.w	r2, [r3], #4
 80047be:	e7db      	b.n	8004778 <__multiply+0x50>
 80047c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80047c4:	f1ba 0f00 	cmp.w	sl, #0
 80047c8:	d020      	beq.n	800480c <__multiply+0xe4>
 80047ca:	f105 0e14 	add.w	lr, r5, #20
 80047ce:	46b1      	mov	r9, r6
 80047d0:	2200      	movs	r2, #0
 80047d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80047d6:	f8d9 b000 	ldr.w	fp, [r9]
 80047da:	b2a1      	uxth	r1, r4
 80047dc:	fa1f fb8b 	uxth.w	fp, fp
 80047e0:	fb0a b101 	mla	r1, sl, r1, fp
 80047e4:	4411      	add	r1, r2
 80047e6:	f8d9 2000 	ldr.w	r2, [r9]
 80047ea:	0c24      	lsrs	r4, r4, #16
 80047ec:	0c12      	lsrs	r2, r2, #16
 80047ee:	fb0a 2404 	mla	r4, sl, r4, r2
 80047f2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80047f6:	b289      	uxth	r1, r1
 80047f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80047fc:	45f4      	cmp	ip, lr
 80047fe:	f849 1b04 	str.w	r1, [r9], #4
 8004802:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004806:	d8e4      	bhi.n	80047d2 <__multiply+0xaa>
 8004808:	9901      	ldr	r1, [sp, #4]
 800480a:	5072      	str	r2, [r6, r1]
 800480c:	9a03      	ldr	r2, [sp, #12]
 800480e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004812:	3304      	adds	r3, #4
 8004814:	f1b9 0f00 	cmp.w	r9, #0
 8004818:	d01f      	beq.n	800485a <__multiply+0x132>
 800481a:	6834      	ldr	r4, [r6, #0]
 800481c:	f105 0114 	add.w	r1, r5, #20
 8004820:	46b6      	mov	lr, r6
 8004822:	f04f 0a00 	mov.w	sl, #0
 8004826:	880a      	ldrh	r2, [r1, #0]
 8004828:	f8be b002 	ldrh.w	fp, [lr, #2]
 800482c:	fb09 b202 	mla	r2, r9, r2, fp
 8004830:	4492      	add	sl, r2
 8004832:	b2a4      	uxth	r4, r4
 8004834:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004838:	f84e 4b04 	str.w	r4, [lr], #4
 800483c:	f851 4b04 	ldr.w	r4, [r1], #4
 8004840:	f8be 2000 	ldrh.w	r2, [lr]
 8004844:	0c24      	lsrs	r4, r4, #16
 8004846:	fb09 2404 	mla	r4, r9, r4, r2
 800484a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800484e:	458c      	cmp	ip, r1
 8004850:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004854:	d8e7      	bhi.n	8004826 <__multiply+0xfe>
 8004856:	9a01      	ldr	r2, [sp, #4]
 8004858:	50b4      	str	r4, [r6, r2]
 800485a:	3604      	adds	r6, #4
 800485c:	e7a3      	b.n	80047a6 <__multiply+0x7e>
 800485e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1a5      	bne.n	80047b2 <__multiply+0x8a>
 8004866:	3f01      	subs	r7, #1
 8004868:	e7a1      	b.n	80047ae <__multiply+0x86>
 800486a:	bf00      	nop
 800486c:	08005a2b 	.word	0x08005a2b
 8004870:	08005a3c 	.word	0x08005a3c

08004874 <__pow5mult>:
 8004874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004878:	4615      	mov	r5, r2
 800487a:	f012 0203 	ands.w	r2, r2, #3
 800487e:	4606      	mov	r6, r0
 8004880:	460f      	mov	r7, r1
 8004882:	d007      	beq.n	8004894 <__pow5mult+0x20>
 8004884:	4c25      	ldr	r4, [pc, #148]	; (800491c <__pow5mult+0xa8>)
 8004886:	3a01      	subs	r2, #1
 8004888:	2300      	movs	r3, #0
 800488a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800488e:	f7ff fe9b 	bl	80045c8 <__multadd>
 8004892:	4607      	mov	r7, r0
 8004894:	10ad      	asrs	r5, r5, #2
 8004896:	d03d      	beq.n	8004914 <__pow5mult+0xa0>
 8004898:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800489a:	b97c      	cbnz	r4, 80048bc <__pow5mult+0x48>
 800489c:	2010      	movs	r0, #16
 800489e:	f7ff fe1b 	bl	80044d8 <malloc>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6270      	str	r0, [r6, #36]	; 0x24
 80048a6:	b928      	cbnz	r0, 80048b4 <__pow5mult+0x40>
 80048a8:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <__pow5mult+0xac>)
 80048aa:	481e      	ldr	r0, [pc, #120]	; (8004924 <__pow5mult+0xb0>)
 80048ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80048b0:	f000 fa70 	bl	8004d94 <__assert_func>
 80048b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80048b8:	6004      	str	r4, [r0, #0]
 80048ba:	60c4      	str	r4, [r0, #12]
 80048bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80048c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048c4:	b94c      	cbnz	r4, 80048da <__pow5mult+0x66>
 80048c6:	f240 2171 	movw	r1, #625	; 0x271
 80048ca:	4630      	mov	r0, r6
 80048cc:	f7ff ff16 	bl	80046fc <__i2b>
 80048d0:	2300      	movs	r3, #0
 80048d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80048d6:	4604      	mov	r4, r0
 80048d8:	6003      	str	r3, [r0, #0]
 80048da:	f04f 0900 	mov.w	r9, #0
 80048de:	07eb      	lsls	r3, r5, #31
 80048e0:	d50a      	bpl.n	80048f8 <__pow5mult+0x84>
 80048e2:	4639      	mov	r1, r7
 80048e4:	4622      	mov	r2, r4
 80048e6:	4630      	mov	r0, r6
 80048e8:	f7ff ff1e 	bl	8004728 <__multiply>
 80048ec:	4639      	mov	r1, r7
 80048ee:	4680      	mov	r8, r0
 80048f0:	4630      	mov	r0, r6
 80048f2:	f7ff fe47 	bl	8004584 <_Bfree>
 80048f6:	4647      	mov	r7, r8
 80048f8:	106d      	asrs	r5, r5, #1
 80048fa:	d00b      	beq.n	8004914 <__pow5mult+0xa0>
 80048fc:	6820      	ldr	r0, [r4, #0]
 80048fe:	b938      	cbnz	r0, 8004910 <__pow5mult+0x9c>
 8004900:	4622      	mov	r2, r4
 8004902:	4621      	mov	r1, r4
 8004904:	4630      	mov	r0, r6
 8004906:	f7ff ff0f 	bl	8004728 <__multiply>
 800490a:	6020      	str	r0, [r4, #0]
 800490c:	f8c0 9000 	str.w	r9, [r0]
 8004910:	4604      	mov	r4, r0
 8004912:	e7e4      	b.n	80048de <__pow5mult+0x6a>
 8004914:	4638      	mov	r0, r7
 8004916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800491a:	bf00      	nop
 800491c:	08005b90 	.word	0x08005b90
 8004920:	080059b5 	.word	0x080059b5
 8004924:	08005a3c 	.word	0x08005a3c

08004928 <__lshift>:
 8004928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800492c:	460c      	mov	r4, r1
 800492e:	6849      	ldr	r1, [r1, #4]
 8004930:	6923      	ldr	r3, [r4, #16]
 8004932:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004936:	68a3      	ldr	r3, [r4, #8]
 8004938:	4607      	mov	r7, r0
 800493a:	4691      	mov	r9, r2
 800493c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004940:	f108 0601 	add.w	r6, r8, #1
 8004944:	42b3      	cmp	r3, r6
 8004946:	db0b      	blt.n	8004960 <__lshift+0x38>
 8004948:	4638      	mov	r0, r7
 800494a:	f7ff fddb 	bl	8004504 <_Balloc>
 800494e:	4605      	mov	r5, r0
 8004950:	b948      	cbnz	r0, 8004966 <__lshift+0x3e>
 8004952:	4602      	mov	r2, r0
 8004954:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <__lshift+0xd0>)
 8004956:	4829      	ldr	r0, [pc, #164]	; (80049fc <__lshift+0xd4>)
 8004958:	f240 11d9 	movw	r1, #473	; 0x1d9
 800495c:	f000 fa1a 	bl	8004d94 <__assert_func>
 8004960:	3101      	adds	r1, #1
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	e7ee      	b.n	8004944 <__lshift+0x1c>
 8004966:	2300      	movs	r3, #0
 8004968:	f100 0114 	add.w	r1, r0, #20
 800496c:	f100 0210 	add.w	r2, r0, #16
 8004970:	4618      	mov	r0, r3
 8004972:	4553      	cmp	r3, sl
 8004974:	db33      	blt.n	80049de <__lshift+0xb6>
 8004976:	6920      	ldr	r0, [r4, #16]
 8004978:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800497c:	f104 0314 	add.w	r3, r4, #20
 8004980:	f019 091f 	ands.w	r9, r9, #31
 8004984:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004988:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800498c:	d02b      	beq.n	80049e6 <__lshift+0xbe>
 800498e:	f1c9 0e20 	rsb	lr, r9, #32
 8004992:	468a      	mov	sl, r1
 8004994:	2200      	movs	r2, #0
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	fa00 f009 	lsl.w	r0, r0, r9
 800499c:	4302      	orrs	r2, r0
 800499e:	f84a 2b04 	str.w	r2, [sl], #4
 80049a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a6:	459c      	cmp	ip, r3
 80049a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80049ac:	d8f3      	bhi.n	8004996 <__lshift+0x6e>
 80049ae:	ebac 0304 	sub.w	r3, ip, r4
 80049b2:	3b15      	subs	r3, #21
 80049b4:	f023 0303 	bic.w	r3, r3, #3
 80049b8:	3304      	adds	r3, #4
 80049ba:	f104 0015 	add.w	r0, r4, #21
 80049be:	4584      	cmp	ip, r0
 80049c0:	bf38      	it	cc
 80049c2:	2304      	movcc	r3, #4
 80049c4:	50ca      	str	r2, [r1, r3]
 80049c6:	b10a      	cbz	r2, 80049cc <__lshift+0xa4>
 80049c8:	f108 0602 	add.w	r6, r8, #2
 80049cc:	3e01      	subs	r6, #1
 80049ce:	4638      	mov	r0, r7
 80049d0:	612e      	str	r6, [r5, #16]
 80049d2:	4621      	mov	r1, r4
 80049d4:	f7ff fdd6 	bl	8004584 <_Bfree>
 80049d8:	4628      	mov	r0, r5
 80049da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049de:	f842 0f04 	str.w	r0, [r2, #4]!
 80049e2:	3301      	adds	r3, #1
 80049e4:	e7c5      	b.n	8004972 <__lshift+0x4a>
 80049e6:	3904      	subs	r1, #4
 80049e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80049f0:	459c      	cmp	ip, r3
 80049f2:	d8f9      	bhi.n	80049e8 <__lshift+0xc0>
 80049f4:	e7ea      	b.n	80049cc <__lshift+0xa4>
 80049f6:	bf00      	nop
 80049f8:	08005a2b 	.word	0x08005a2b
 80049fc:	08005a3c 	.word	0x08005a3c

08004a00 <__mcmp>:
 8004a00:	b530      	push	{r4, r5, lr}
 8004a02:	6902      	ldr	r2, [r0, #16]
 8004a04:	690c      	ldr	r4, [r1, #16]
 8004a06:	1b12      	subs	r2, r2, r4
 8004a08:	d10e      	bne.n	8004a28 <__mcmp+0x28>
 8004a0a:	f100 0314 	add.w	r3, r0, #20
 8004a0e:	3114      	adds	r1, #20
 8004a10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004a14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004a18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004a1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004a20:	42a5      	cmp	r5, r4
 8004a22:	d003      	beq.n	8004a2c <__mcmp+0x2c>
 8004a24:	d305      	bcc.n	8004a32 <__mcmp+0x32>
 8004a26:	2201      	movs	r2, #1
 8004a28:	4610      	mov	r0, r2
 8004a2a:	bd30      	pop	{r4, r5, pc}
 8004a2c:	4283      	cmp	r3, r0
 8004a2e:	d3f3      	bcc.n	8004a18 <__mcmp+0x18>
 8004a30:	e7fa      	b.n	8004a28 <__mcmp+0x28>
 8004a32:	f04f 32ff 	mov.w	r2, #4294967295
 8004a36:	e7f7      	b.n	8004a28 <__mcmp+0x28>

08004a38 <__mdiff>:
 8004a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	4606      	mov	r6, r0
 8004a40:	4611      	mov	r1, r2
 8004a42:	4620      	mov	r0, r4
 8004a44:	4617      	mov	r7, r2
 8004a46:	f7ff ffdb 	bl	8004a00 <__mcmp>
 8004a4a:	1e05      	subs	r5, r0, #0
 8004a4c:	d110      	bne.n	8004a70 <__mdiff+0x38>
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4630      	mov	r0, r6
 8004a52:	f7ff fd57 	bl	8004504 <_Balloc>
 8004a56:	b930      	cbnz	r0, 8004a66 <__mdiff+0x2e>
 8004a58:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <__mdiff+0x108>)
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	f240 2132 	movw	r1, #562	; 0x232
 8004a60:	4838      	ldr	r0, [pc, #224]	; (8004b44 <__mdiff+0x10c>)
 8004a62:	f000 f997 	bl	8004d94 <__assert_func>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004a6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a70:	bfa4      	itt	ge
 8004a72:	463b      	movge	r3, r7
 8004a74:	4627      	movge	r7, r4
 8004a76:	4630      	mov	r0, r6
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	bfa6      	itte	ge
 8004a7c:	461c      	movge	r4, r3
 8004a7e:	2500      	movge	r5, #0
 8004a80:	2501      	movlt	r5, #1
 8004a82:	f7ff fd3f 	bl	8004504 <_Balloc>
 8004a86:	b920      	cbnz	r0, 8004a92 <__mdiff+0x5a>
 8004a88:	4b2d      	ldr	r3, [pc, #180]	; (8004b40 <__mdiff+0x108>)
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004a90:	e7e6      	b.n	8004a60 <__mdiff+0x28>
 8004a92:	693e      	ldr	r6, [r7, #16]
 8004a94:	60c5      	str	r5, [r0, #12]
 8004a96:	6925      	ldr	r5, [r4, #16]
 8004a98:	f107 0114 	add.w	r1, r7, #20
 8004a9c:	f104 0914 	add.w	r9, r4, #20
 8004aa0:	f100 0e14 	add.w	lr, r0, #20
 8004aa4:	f107 0210 	add.w	r2, r7, #16
 8004aa8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004aac:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004ab0:	46f2      	mov	sl, lr
 8004ab2:	2700      	movs	r7, #0
 8004ab4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004ab8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004abc:	fa1f f883 	uxth.w	r8, r3
 8004ac0:	fa17 f78b 	uxtah	r7, r7, fp
 8004ac4:	0c1b      	lsrs	r3, r3, #16
 8004ac6:	eba7 0808 	sub.w	r8, r7, r8
 8004aca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004ace:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004ad2:	fa1f f888 	uxth.w	r8, r8
 8004ad6:	141f      	asrs	r7, r3, #16
 8004ad8:	454d      	cmp	r5, r9
 8004ada:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004ade:	f84a 3b04 	str.w	r3, [sl], #4
 8004ae2:	d8e7      	bhi.n	8004ab4 <__mdiff+0x7c>
 8004ae4:	1b2b      	subs	r3, r5, r4
 8004ae6:	3b15      	subs	r3, #21
 8004ae8:	f023 0303 	bic.w	r3, r3, #3
 8004aec:	3304      	adds	r3, #4
 8004aee:	3415      	adds	r4, #21
 8004af0:	42a5      	cmp	r5, r4
 8004af2:	bf38      	it	cc
 8004af4:	2304      	movcc	r3, #4
 8004af6:	4419      	add	r1, r3
 8004af8:	4473      	add	r3, lr
 8004afa:	469e      	mov	lr, r3
 8004afc:	460d      	mov	r5, r1
 8004afe:	4565      	cmp	r5, ip
 8004b00:	d30e      	bcc.n	8004b20 <__mdiff+0xe8>
 8004b02:	f10c 0203 	add.w	r2, ip, #3
 8004b06:	1a52      	subs	r2, r2, r1
 8004b08:	f022 0203 	bic.w	r2, r2, #3
 8004b0c:	3903      	subs	r1, #3
 8004b0e:	458c      	cmp	ip, r1
 8004b10:	bf38      	it	cc
 8004b12:	2200      	movcc	r2, #0
 8004b14:	441a      	add	r2, r3
 8004b16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004b1a:	b17b      	cbz	r3, 8004b3c <__mdiff+0x104>
 8004b1c:	6106      	str	r6, [r0, #16]
 8004b1e:	e7a5      	b.n	8004a6c <__mdiff+0x34>
 8004b20:	f855 8b04 	ldr.w	r8, [r5], #4
 8004b24:	fa17 f488 	uxtah	r4, r7, r8
 8004b28:	1422      	asrs	r2, r4, #16
 8004b2a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8004b2e:	b2a4      	uxth	r4, r4
 8004b30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004b34:	f84e 4b04 	str.w	r4, [lr], #4
 8004b38:	1417      	asrs	r7, r2, #16
 8004b3a:	e7e0      	b.n	8004afe <__mdiff+0xc6>
 8004b3c:	3e01      	subs	r6, #1
 8004b3e:	e7ea      	b.n	8004b16 <__mdiff+0xde>
 8004b40:	08005a2b 	.word	0x08005a2b
 8004b44:	08005a3c 	.word	0x08005a3c

08004b48 <__d2b>:
 8004b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b4c:	4689      	mov	r9, r1
 8004b4e:	2101      	movs	r1, #1
 8004b50:	ec57 6b10 	vmov	r6, r7, d0
 8004b54:	4690      	mov	r8, r2
 8004b56:	f7ff fcd5 	bl	8004504 <_Balloc>
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	b930      	cbnz	r0, 8004b6c <__d2b+0x24>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	4b25      	ldr	r3, [pc, #148]	; (8004bf8 <__d2b+0xb0>)
 8004b62:	4826      	ldr	r0, [pc, #152]	; (8004bfc <__d2b+0xb4>)
 8004b64:	f240 310a 	movw	r1, #778	; 0x30a
 8004b68:	f000 f914 	bl	8004d94 <__assert_func>
 8004b6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b74:	bb35      	cbnz	r5, 8004bc4 <__d2b+0x7c>
 8004b76:	2e00      	cmp	r6, #0
 8004b78:	9301      	str	r3, [sp, #4]
 8004b7a:	d028      	beq.n	8004bce <__d2b+0x86>
 8004b7c:	4668      	mov	r0, sp
 8004b7e:	9600      	str	r6, [sp, #0]
 8004b80:	f7ff fd8c 	bl	800469c <__lo0bits>
 8004b84:	9900      	ldr	r1, [sp, #0]
 8004b86:	b300      	cbz	r0, 8004bca <__d2b+0x82>
 8004b88:	9a01      	ldr	r2, [sp, #4]
 8004b8a:	f1c0 0320 	rsb	r3, r0, #32
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	430b      	orrs	r3, r1
 8004b94:	40c2      	lsrs	r2, r0
 8004b96:	6163      	str	r3, [r4, #20]
 8004b98:	9201      	str	r2, [sp, #4]
 8004b9a:	9b01      	ldr	r3, [sp, #4]
 8004b9c:	61a3      	str	r3, [r4, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bf14      	ite	ne
 8004ba2:	2202      	movne	r2, #2
 8004ba4:	2201      	moveq	r2, #1
 8004ba6:	6122      	str	r2, [r4, #16]
 8004ba8:	b1d5      	cbz	r5, 8004be0 <__d2b+0x98>
 8004baa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004bae:	4405      	add	r5, r0
 8004bb0:	f8c9 5000 	str.w	r5, [r9]
 8004bb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004bb8:	f8c8 0000 	str.w	r0, [r8]
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	b003      	add	sp, #12
 8004bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc8:	e7d5      	b.n	8004b76 <__d2b+0x2e>
 8004bca:	6161      	str	r1, [r4, #20]
 8004bcc:	e7e5      	b.n	8004b9a <__d2b+0x52>
 8004bce:	a801      	add	r0, sp, #4
 8004bd0:	f7ff fd64 	bl	800469c <__lo0bits>
 8004bd4:	9b01      	ldr	r3, [sp, #4]
 8004bd6:	6163      	str	r3, [r4, #20]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	6122      	str	r2, [r4, #16]
 8004bdc:	3020      	adds	r0, #32
 8004bde:	e7e3      	b.n	8004ba8 <__d2b+0x60>
 8004be0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004be4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004be8:	f8c9 0000 	str.w	r0, [r9]
 8004bec:	6918      	ldr	r0, [r3, #16]
 8004bee:	f7ff fd35 	bl	800465c <__hi0bits>
 8004bf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004bf6:	e7df      	b.n	8004bb8 <__d2b+0x70>
 8004bf8:	08005a2b 	.word	0x08005a2b
 8004bfc:	08005a3c 	.word	0x08005a3c

08004c00 <_calloc_r>:
 8004c00:	b513      	push	{r0, r1, r4, lr}
 8004c02:	434a      	muls	r2, r1
 8004c04:	4611      	mov	r1, r2
 8004c06:	9201      	str	r2, [sp, #4]
 8004c08:	f000 f85a 	bl	8004cc0 <_malloc_r>
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	b118      	cbz	r0, 8004c18 <_calloc_r+0x18>
 8004c10:	9a01      	ldr	r2, [sp, #4]
 8004c12:	2100      	movs	r1, #0
 8004c14:	f7fe f972 	bl	8002efc <memset>
 8004c18:	4620      	mov	r0, r4
 8004c1a:	b002      	add	sp, #8
 8004c1c:	bd10      	pop	{r4, pc}
	...

08004c20 <_free_r>:
 8004c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c22:	2900      	cmp	r1, #0
 8004c24:	d048      	beq.n	8004cb8 <_free_r+0x98>
 8004c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c2a:	9001      	str	r0, [sp, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c32:	bfb8      	it	lt
 8004c34:	18e4      	addlt	r4, r4, r3
 8004c36:	f000 f8ef 	bl	8004e18 <__malloc_lock>
 8004c3a:	4a20      	ldr	r2, [pc, #128]	; (8004cbc <_free_r+0x9c>)
 8004c3c:	9801      	ldr	r0, [sp, #4]
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	4615      	mov	r5, r2
 8004c42:	b933      	cbnz	r3, 8004c52 <_free_r+0x32>
 8004c44:	6063      	str	r3, [r4, #4]
 8004c46:	6014      	str	r4, [r2, #0]
 8004c48:	b003      	add	sp, #12
 8004c4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c4e:	f000 b8e9 	b.w	8004e24 <__malloc_unlock>
 8004c52:	42a3      	cmp	r3, r4
 8004c54:	d90b      	bls.n	8004c6e <_free_r+0x4e>
 8004c56:	6821      	ldr	r1, [r4, #0]
 8004c58:	1862      	adds	r2, r4, r1
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	bf04      	itt	eq
 8004c5e:	681a      	ldreq	r2, [r3, #0]
 8004c60:	685b      	ldreq	r3, [r3, #4]
 8004c62:	6063      	str	r3, [r4, #4]
 8004c64:	bf04      	itt	eq
 8004c66:	1852      	addeq	r2, r2, r1
 8004c68:	6022      	streq	r2, [r4, #0]
 8004c6a:	602c      	str	r4, [r5, #0]
 8004c6c:	e7ec      	b.n	8004c48 <_free_r+0x28>
 8004c6e:	461a      	mov	r2, r3
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	b10b      	cbz	r3, 8004c78 <_free_r+0x58>
 8004c74:	42a3      	cmp	r3, r4
 8004c76:	d9fa      	bls.n	8004c6e <_free_r+0x4e>
 8004c78:	6811      	ldr	r1, [r2, #0]
 8004c7a:	1855      	adds	r5, r2, r1
 8004c7c:	42a5      	cmp	r5, r4
 8004c7e:	d10b      	bne.n	8004c98 <_free_r+0x78>
 8004c80:	6824      	ldr	r4, [r4, #0]
 8004c82:	4421      	add	r1, r4
 8004c84:	1854      	adds	r4, r2, r1
 8004c86:	42a3      	cmp	r3, r4
 8004c88:	6011      	str	r1, [r2, #0]
 8004c8a:	d1dd      	bne.n	8004c48 <_free_r+0x28>
 8004c8c:	681c      	ldr	r4, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	6053      	str	r3, [r2, #4]
 8004c92:	4421      	add	r1, r4
 8004c94:	6011      	str	r1, [r2, #0]
 8004c96:	e7d7      	b.n	8004c48 <_free_r+0x28>
 8004c98:	d902      	bls.n	8004ca0 <_free_r+0x80>
 8004c9a:	230c      	movs	r3, #12
 8004c9c:	6003      	str	r3, [r0, #0]
 8004c9e:	e7d3      	b.n	8004c48 <_free_r+0x28>
 8004ca0:	6825      	ldr	r5, [r4, #0]
 8004ca2:	1961      	adds	r1, r4, r5
 8004ca4:	428b      	cmp	r3, r1
 8004ca6:	bf04      	itt	eq
 8004ca8:	6819      	ldreq	r1, [r3, #0]
 8004caa:	685b      	ldreq	r3, [r3, #4]
 8004cac:	6063      	str	r3, [r4, #4]
 8004cae:	bf04      	itt	eq
 8004cb0:	1949      	addeq	r1, r1, r5
 8004cb2:	6021      	streq	r1, [r4, #0]
 8004cb4:	6054      	str	r4, [r2, #4]
 8004cb6:	e7c7      	b.n	8004c48 <_free_r+0x28>
 8004cb8:	b003      	add	sp, #12
 8004cba:	bd30      	pop	{r4, r5, pc}
 8004cbc:	20000220 	.word	0x20000220

08004cc0 <_malloc_r>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	1ccd      	adds	r5, r1, #3
 8004cc4:	f025 0503 	bic.w	r5, r5, #3
 8004cc8:	3508      	adds	r5, #8
 8004cca:	2d0c      	cmp	r5, #12
 8004ccc:	bf38      	it	cc
 8004cce:	250c      	movcc	r5, #12
 8004cd0:	2d00      	cmp	r5, #0
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	db01      	blt.n	8004cda <_malloc_r+0x1a>
 8004cd6:	42a9      	cmp	r1, r5
 8004cd8:	d903      	bls.n	8004ce2 <_malloc_r+0x22>
 8004cda:	230c      	movs	r3, #12
 8004cdc:	6033      	str	r3, [r6, #0]
 8004cde:	2000      	movs	r0, #0
 8004ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce2:	f000 f899 	bl	8004e18 <__malloc_lock>
 8004ce6:	4921      	ldr	r1, [pc, #132]	; (8004d6c <_malloc_r+0xac>)
 8004ce8:	680a      	ldr	r2, [r1, #0]
 8004cea:	4614      	mov	r4, r2
 8004cec:	b99c      	cbnz	r4, 8004d16 <_malloc_r+0x56>
 8004cee:	4f20      	ldr	r7, [pc, #128]	; (8004d70 <_malloc_r+0xb0>)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	b923      	cbnz	r3, 8004cfe <_malloc_r+0x3e>
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f000 f83c 	bl	8004d74 <_sbrk_r>
 8004cfc:	6038      	str	r0, [r7, #0]
 8004cfe:	4629      	mov	r1, r5
 8004d00:	4630      	mov	r0, r6
 8004d02:	f000 f837 	bl	8004d74 <_sbrk_r>
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	d123      	bne.n	8004d52 <_malloc_r+0x92>
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	6033      	str	r3, [r6, #0]
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f000 f888 	bl	8004e24 <__malloc_unlock>
 8004d14:	e7e3      	b.n	8004cde <_malloc_r+0x1e>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	1b5b      	subs	r3, r3, r5
 8004d1a:	d417      	bmi.n	8004d4c <_malloc_r+0x8c>
 8004d1c:	2b0b      	cmp	r3, #11
 8004d1e:	d903      	bls.n	8004d28 <_malloc_r+0x68>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	441c      	add	r4, r3
 8004d24:	6025      	str	r5, [r4, #0]
 8004d26:	e004      	b.n	8004d32 <_malloc_r+0x72>
 8004d28:	6863      	ldr	r3, [r4, #4]
 8004d2a:	42a2      	cmp	r2, r4
 8004d2c:	bf0c      	ite	eq
 8004d2e:	600b      	streq	r3, [r1, #0]
 8004d30:	6053      	strne	r3, [r2, #4]
 8004d32:	4630      	mov	r0, r6
 8004d34:	f000 f876 	bl	8004e24 <__malloc_unlock>
 8004d38:	f104 000b 	add.w	r0, r4, #11
 8004d3c:	1d23      	adds	r3, r4, #4
 8004d3e:	f020 0007 	bic.w	r0, r0, #7
 8004d42:	1ac2      	subs	r2, r0, r3
 8004d44:	d0cc      	beq.n	8004ce0 <_malloc_r+0x20>
 8004d46:	1a1b      	subs	r3, r3, r0
 8004d48:	50a3      	str	r3, [r4, r2]
 8004d4a:	e7c9      	b.n	8004ce0 <_malloc_r+0x20>
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	6864      	ldr	r4, [r4, #4]
 8004d50:	e7cc      	b.n	8004cec <_malloc_r+0x2c>
 8004d52:	1cc4      	adds	r4, r0, #3
 8004d54:	f024 0403 	bic.w	r4, r4, #3
 8004d58:	42a0      	cmp	r0, r4
 8004d5a:	d0e3      	beq.n	8004d24 <_malloc_r+0x64>
 8004d5c:	1a21      	subs	r1, r4, r0
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f000 f808 	bl	8004d74 <_sbrk_r>
 8004d64:	3001      	adds	r0, #1
 8004d66:	d1dd      	bne.n	8004d24 <_malloc_r+0x64>
 8004d68:	e7cf      	b.n	8004d0a <_malloc_r+0x4a>
 8004d6a:	bf00      	nop
 8004d6c:	20000220 	.word	0x20000220
 8004d70:	20000224 	.word	0x20000224

08004d74 <_sbrk_r>:
 8004d74:	b538      	push	{r3, r4, r5, lr}
 8004d76:	4d06      	ldr	r5, [pc, #24]	; (8004d90 <_sbrk_r+0x1c>)
 8004d78:	2300      	movs	r3, #0
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	602b      	str	r3, [r5, #0]
 8004d80:	f000 fdcc 	bl	800591c <_sbrk>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d102      	bne.n	8004d8e <_sbrk_r+0x1a>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	b103      	cbz	r3, 8004d8e <_sbrk_r+0x1a>
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	bd38      	pop	{r3, r4, r5, pc}
 8004d90:	200002bc 	.word	0x200002bc

08004d94 <__assert_func>:
 8004d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d96:	4614      	mov	r4, r2
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <__assert_func+0x2c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4605      	mov	r5, r0
 8004da0:	68d8      	ldr	r0, [r3, #12]
 8004da2:	b14c      	cbz	r4, 8004db8 <__assert_func+0x24>
 8004da4:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <__assert_func+0x30>)
 8004da6:	9100      	str	r1, [sp, #0]
 8004da8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004dac:	4906      	ldr	r1, [pc, #24]	; (8004dc8 <__assert_func+0x34>)
 8004dae:	462b      	mov	r3, r5
 8004db0:	f000 f80e 	bl	8004dd0 <fiprintf>
 8004db4:	f000 fa64 	bl	8005280 <abort>
 8004db8:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <__assert_func+0x38>)
 8004dba:	461c      	mov	r4, r3
 8004dbc:	e7f3      	b.n	8004da6 <__assert_func+0x12>
 8004dbe:	bf00      	nop
 8004dc0:	20000034 	.word	0x20000034
 8004dc4:	08005b9c 	.word	0x08005b9c
 8004dc8:	08005ba9 	.word	0x08005ba9
 8004dcc:	08005bd7 	.word	0x08005bd7

08004dd0 <fiprintf>:
 8004dd0:	b40e      	push	{r1, r2, r3}
 8004dd2:	b503      	push	{r0, r1, lr}
 8004dd4:	4601      	mov	r1, r0
 8004dd6:	ab03      	add	r3, sp, #12
 8004dd8:	4805      	ldr	r0, [pc, #20]	; (8004df0 <fiprintf+0x20>)
 8004dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dde:	6800      	ldr	r0, [r0, #0]
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	f000 f84f 	bl	8004e84 <_vfiprintf_r>
 8004de6:	b002      	add	sp, #8
 8004de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dec:	b003      	add	sp, #12
 8004dee:	4770      	bx	lr
 8004df0:	20000034 	.word	0x20000034

08004df4 <__ascii_mbtowc>:
 8004df4:	b082      	sub	sp, #8
 8004df6:	b901      	cbnz	r1, 8004dfa <__ascii_mbtowc+0x6>
 8004df8:	a901      	add	r1, sp, #4
 8004dfa:	b142      	cbz	r2, 8004e0e <__ascii_mbtowc+0x1a>
 8004dfc:	b14b      	cbz	r3, 8004e12 <__ascii_mbtowc+0x1e>
 8004dfe:	7813      	ldrb	r3, [r2, #0]
 8004e00:	600b      	str	r3, [r1, #0]
 8004e02:	7812      	ldrb	r2, [r2, #0]
 8004e04:	1e10      	subs	r0, r2, #0
 8004e06:	bf18      	it	ne
 8004e08:	2001      	movne	r0, #1
 8004e0a:	b002      	add	sp, #8
 8004e0c:	4770      	bx	lr
 8004e0e:	4610      	mov	r0, r2
 8004e10:	e7fb      	b.n	8004e0a <__ascii_mbtowc+0x16>
 8004e12:	f06f 0001 	mvn.w	r0, #1
 8004e16:	e7f8      	b.n	8004e0a <__ascii_mbtowc+0x16>

08004e18 <__malloc_lock>:
 8004e18:	4801      	ldr	r0, [pc, #4]	; (8004e20 <__malloc_lock+0x8>)
 8004e1a:	f000 bbf1 	b.w	8005600 <__retarget_lock_acquire_recursive>
 8004e1e:	bf00      	nop
 8004e20:	200002c4 	.word	0x200002c4

08004e24 <__malloc_unlock>:
 8004e24:	4801      	ldr	r0, [pc, #4]	; (8004e2c <__malloc_unlock+0x8>)
 8004e26:	f000 bbec 	b.w	8005602 <__retarget_lock_release_recursive>
 8004e2a:	bf00      	nop
 8004e2c:	200002c4 	.word	0x200002c4

08004e30 <__sfputc_r>:
 8004e30:	6893      	ldr	r3, [r2, #8]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	b410      	push	{r4}
 8004e38:	6093      	str	r3, [r2, #8]
 8004e3a:	da08      	bge.n	8004e4e <__sfputc_r+0x1e>
 8004e3c:	6994      	ldr	r4, [r2, #24]
 8004e3e:	42a3      	cmp	r3, r4
 8004e40:	db01      	blt.n	8004e46 <__sfputc_r+0x16>
 8004e42:	290a      	cmp	r1, #10
 8004e44:	d103      	bne.n	8004e4e <__sfputc_r+0x1e>
 8004e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e4a:	f000 b94b 	b.w	80050e4 <__swbuf_r>
 8004e4e:	6813      	ldr	r3, [r2, #0]
 8004e50:	1c58      	adds	r0, r3, #1
 8004e52:	6010      	str	r0, [r2, #0]
 8004e54:	7019      	strb	r1, [r3, #0]
 8004e56:	4608      	mov	r0, r1
 8004e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <__sfputs_r>:
 8004e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e60:	4606      	mov	r6, r0
 8004e62:	460f      	mov	r7, r1
 8004e64:	4614      	mov	r4, r2
 8004e66:	18d5      	adds	r5, r2, r3
 8004e68:	42ac      	cmp	r4, r5
 8004e6a:	d101      	bne.n	8004e70 <__sfputs_r+0x12>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	e007      	b.n	8004e80 <__sfputs_r+0x22>
 8004e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e74:	463a      	mov	r2, r7
 8004e76:	4630      	mov	r0, r6
 8004e78:	f7ff ffda 	bl	8004e30 <__sfputc_r>
 8004e7c:	1c43      	adds	r3, r0, #1
 8004e7e:	d1f3      	bne.n	8004e68 <__sfputs_r+0xa>
 8004e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e84 <_vfiprintf_r>:
 8004e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e88:	460d      	mov	r5, r1
 8004e8a:	b09d      	sub	sp, #116	; 0x74
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	4698      	mov	r8, r3
 8004e90:	4606      	mov	r6, r0
 8004e92:	b118      	cbz	r0, 8004e9c <_vfiprintf_r+0x18>
 8004e94:	6983      	ldr	r3, [r0, #24]
 8004e96:	b90b      	cbnz	r3, 8004e9c <_vfiprintf_r+0x18>
 8004e98:	f000 fb14 	bl	80054c4 <__sinit>
 8004e9c:	4b89      	ldr	r3, [pc, #548]	; (80050c4 <_vfiprintf_r+0x240>)
 8004e9e:	429d      	cmp	r5, r3
 8004ea0:	d11b      	bne.n	8004eda <_vfiprintf_r+0x56>
 8004ea2:	6875      	ldr	r5, [r6, #4]
 8004ea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ea6:	07d9      	lsls	r1, r3, #31
 8004ea8:	d405      	bmi.n	8004eb6 <_vfiprintf_r+0x32>
 8004eaa:	89ab      	ldrh	r3, [r5, #12]
 8004eac:	059a      	lsls	r2, r3, #22
 8004eae:	d402      	bmi.n	8004eb6 <_vfiprintf_r+0x32>
 8004eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eb2:	f000 fba5 	bl	8005600 <__retarget_lock_acquire_recursive>
 8004eb6:	89ab      	ldrh	r3, [r5, #12]
 8004eb8:	071b      	lsls	r3, r3, #28
 8004eba:	d501      	bpl.n	8004ec0 <_vfiprintf_r+0x3c>
 8004ebc:	692b      	ldr	r3, [r5, #16]
 8004ebe:	b9eb      	cbnz	r3, 8004efc <_vfiprintf_r+0x78>
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f000 f96e 	bl	80051a4 <__swsetup_r>
 8004ec8:	b1c0      	cbz	r0, 8004efc <_vfiprintf_r+0x78>
 8004eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ecc:	07dc      	lsls	r4, r3, #31
 8004ece:	d50e      	bpl.n	8004eee <_vfiprintf_r+0x6a>
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	b01d      	add	sp, #116	; 0x74
 8004ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eda:	4b7b      	ldr	r3, [pc, #492]	; (80050c8 <_vfiprintf_r+0x244>)
 8004edc:	429d      	cmp	r5, r3
 8004ede:	d101      	bne.n	8004ee4 <_vfiprintf_r+0x60>
 8004ee0:	68b5      	ldr	r5, [r6, #8]
 8004ee2:	e7df      	b.n	8004ea4 <_vfiprintf_r+0x20>
 8004ee4:	4b79      	ldr	r3, [pc, #484]	; (80050cc <_vfiprintf_r+0x248>)
 8004ee6:	429d      	cmp	r5, r3
 8004ee8:	bf08      	it	eq
 8004eea:	68f5      	ldreq	r5, [r6, #12]
 8004eec:	e7da      	b.n	8004ea4 <_vfiprintf_r+0x20>
 8004eee:	89ab      	ldrh	r3, [r5, #12]
 8004ef0:	0598      	lsls	r0, r3, #22
 8004ef2:	d4ed      	bmi.n	8004ed0 <_vfiprintf_r+0x4c>
 8004ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ef6:	f000 fb84 	bl	8005602 <__retarget_lock_release_recursive>
 8004efa:	e7e9      	b.n	8004ed0 <_vfiprintf_r+0x4c>
 8004efc:	2300      	movs	r3, #0
 8004efe:	9309      	str	r3, [sp, #36]	; 0x24
 8004f00:	2320      	movs	r3, #32
 8004f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f06:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f0a:	2330      	movs	r3, #48	; 0x30
 8004f0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80050d0 <_vfiprintf_r+0x24c>
 8004f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f14:	f04f 0901 	mov.w	r9, #1
 8004f18:	4623      	mov	r3, r4
 8004f1a:	469a      	mov	sl, r3
 8004f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f20:	b10a      	cbz	r2, 8004f26 <_vfiprintf_r+0xa2>
 8004f22:	2a25      	cmp	r2, #37	; 0x25
 8004f24:	d1f9      	bne.n	8004f1a <_vfiprintf_r+0x96>
 8004f26:	ebba 0b04 	subs.w	fp, sl, r4
 8004f2a:	d00b      	beq.n	8004f44 <_vfiprintf_r+0xc0>
 8004f2c:	465b      	mov	r3, fp
 8004f2e:	4622      	mov	r2, r4
 8004f30:	4629      	mov	r1, r5
 8004f32:	4630      	mov	r0, r6
 8004f34:	f7ff ff93 	bl	8004e5e <__sfputs_r>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	f000 80aa 	beq.w	8005092 <_vfiprintf_r+0x20e>
 8004f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f40:	445a      	add	r2, fp
 8004f42:	9209      	str	r2, [sp, #36]	; 0x24
 8004f44:	f89a 3000 	ldrb.w	r3, [sl]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80a2 	beq.w	8005092 <_vfiprintf_r+0x20e>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f04f 32ff 	mov.w	r2, #4294967295
 8004f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f58:	f10a 0a01 	add.w	sl, sl, #1
 8004f5c:	9304      	str	r3, [sp, #16]
 8004f5e:	9307      	str	r3, [sp, #28]
 8004f60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f64:	931a      	str	r3, [sp, #104]	; 0x68
 8004f66:	4654      	mov	r4, sl
 8004f68:	2205      	movs	r2, #5
 8004f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f6e:	4858      	ldr	r0, [pc, #352]	; (80050d0 <_vfiprintf_r+0x24c>)
 8004f70:	f7fb f956 	bl	8000220 <memchr>
 8004f74:	9a04      	ldr	r2, [sp, #16]
 8004f76:	b9d8      	cbnz	r0, 8004fb0 <_vfiprintf_r+0x12c>
 8004f78:	06d1      	lsls	r1, r2, #27
 8004f7a:	bf44      	itt	mi
 8004f7c:	2320      	movmi	r3, #32
 8004f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f82:	0713      	lsls	r3, r2, #28
 8004f84:	bf44      	itt	mi
 8004f86:	232b      	movmi	r3, #43	; 0x2b
 8004f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f90:	2b2a      	cmp	r3, #42	; 0x2a
 8004f92:	d015      	beq.n	8004fc0 <_vfiprintf_r+0x13c>
 8004f94:	9a07      	ldr	r2, [sp, #28]
 8004f96:	4654      	mov	r4, sl
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f04f 0c0a 	mov.w	ip, #10
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fa4:	3b30      	subs	r3, #48	; 0x30
 8004fa6:	2b09      	cmp	r3, #9
 8004fa8:	d94e      	bls.n	8005048 <_vfiprintf_r+0x1c4>
 8004faa:	b1b0      	cbz	r0, 8004fda <_vfiprintf_r+0x156>
 8004fac:	9207      	str	r2, [sp, #28]
 8004fae:	e014      	b.n	8004fda <_vfiprintf_r+0x156>
 8004fb0:	eba0 0308 	sub.w	r3, r0, r8
 8004fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	9304      	str	r3, [sp, #16]
 8004fbc:	46a2      	mov	sl, r4
 8004fbe:	e7d2      	b.n	8004f66 <_vfiprintf_r+0xe2>
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	1d19      	adds	r1, r3, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	9103      	str	r1, [sp, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bfbb      	ittet	lt
 8004fcc:	425b      	neglt	r3, r3
 8004fce:	f042 0202 	orrlt.w	r2, r2, #2
 8004fd2:	9307      	strge	r3, [sp, #28]
 8004fd4:	9307      	strlt	r3, [sp, #28]
 8004fd6:	bfb8      	it	lt
 8004fd8:	9204      	strlt	r2, [sp, #16]
 8004fda:	7823      	ldrb	r3, [r4, #0]
 8004fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8004fde:	d10c      	bne.n	8004ffa <_vfiprintf_r+0x176>
 8004fe0:	7863      	ldrb	r3, [r4, #1]
 8004fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe4:	d135      	bne.n	8005052 <_vfiprintf_r+0x1ce>
 8004fe6:	9b03      	ldr	r3, [sp, #12]
 8004fe8:	1d1a      	adds	r2, r3, #4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	9203      	str	r2, [sp, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bfb8      	it	lt
 8004ff2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ff6:	3402      	adds	r4, #2
 8004ff8:	9305      	str	r3, [sp, #20]
 8004ffa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80050e0 <_vfiprintf_r+0x25c>
 8004ffe:	7821      	ldrb	r1, [r4, #0]
 8005000:	2203      	movs	r2, #3
 8005002:	4650      	mov	r0, sl
 8005004:	f7fb f90c 	bl	8000220 <memchr>
 8005008:	b140      	cbz	r0, 800501c <_vfiprintf_r+0x198>
 800500a:	2340      	movs	r3, #64	; 0x40
 800500c:	eba0 000a 	sub.w	r0, r0, sl
 8005010:	fa03 f000 	lsl.w	r0, r3, r0
 8005014:	9b04      	ldr	r3, [sp, #16]
 8005016:	4303      	orrs	r3, r0
 8005018:	3401      	adds	r4, #1
 800501a:	9304      	str	r3, [sp, #16]
 800501c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005020:	482c      	ldr	r0, [pc, #176]	; (80050d4 <_vfiprintf_r+0x250>)
 8005022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005026:	2206      	movs	r2, #6
 8005028:	f7fb f8fa 	bl	8000220 <memchr>
 800502c:	2800      	cmp	r0, #0
 800502e:	d03f      	beq.n	80050b0 <_vfiprintf_r+0x22c>
 8005030:	4b29      	ldr	r3, [pc, #164]	; (80050d8 <_vfiprintf_r+0x254>)
 8005032:	bb1b      	cbnz	r3, 800507c <_vfiprintf_r+0x1f8>
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	3307      	adds	r3, #7
 8005038:	f023 0307 	bic.w	r3, r3, #7
 800503c:	3308      	adds	r3, #8
 800503e:	9303      	str	r3, [sp, #12]
 8005040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005042:	443b      	add	r3, r7
 8005044:	9309      	str	r3, [sp, #36]	; 0x24
 8005046:	e767      	b.n	8004f18 <_vfiprintf_r+0x94>
 8005048:	fb0c 3202 	mla	r2, ip, r2, r3
 800504c:	460c      	mov	r4, r1
 800504e:	2001      	movs	r0, #1
 8005050:	e7a5      	b.n	8004f9e <_vfiprintf_r+0x11a>
 8005052:	2300      	movs	r3, #0
 8005054:	3401      	adds	r4, #1
 8005056:	9305      	str	r3, [sp, #20]
 8005058:	4619      	mov	r1, r3
 800505a:	f04f 0c0a 	mov.w	ip, #10
 800505e:	4620      	mov	r0, r4
 8005060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005064:	3a30      	subs	r2, #48	; 0x30
 8005066:	2a09      	cmp	r2, #9
 8005068:	d903      	bls.n	8005072 <_vfiprintf_r+0x1ee>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0c5      	beq.n	8004ffa <_vfiprintf_r+0x176>
 800506e:	9105      	str	r1, [sp, #20]
 8005070:	e7c3      	b.n	8004ffa <_vfiprintf_r+0x176>
 8005072:	fb0c 2101 	mla	r1, ip, r1, r2
 8005076:	4604      	mov	r4, r0
 8005078:	2301      	movs	r3, #1
 800507a:	e7f0      	b.n	800505e <_vfiprintf_r+0x1da>
 800507c:	ab03      	add	r3, sp, #12
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	462a      	mov	r2, r5
 8005082:	4b16      	ldr	r3, [pc, #88]	; (80050dc <_vfiprintf_r+0x258>)
 8005084:	a904      	add	r1, sp, #16
 8005086:	4630      	mov	r0, r6
 8005088:	f7fd ffe0 	bl	800304c <_printf_float>
 800508c:	4607      	mov	r7, r0
 800508e:	1c78      	adds	r0, r7, #1
 8005090:	d1d6      	bne.n	8005040 <_vfiprintf_r+0x1bc>
 8005092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005094:	07d9      	lsls	r1, r3, #31
 8005096:	d405      	bmi.n	80050a4 <_vfiprintf_r+0x220>
 8005098:	89ab      	ldrh	r3, [r5, #12]
 800509a:	059a      	lsls	r2, r3, #22
 800509c:	d402      	bmi.n	80050a4 <_vfiprintf_r+0x220>
 800509e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050a0:	f000 faaf 	bl	8005602 <__retarget_lock_release_recursive>
 80050a4:	89ab      	ldrh	r3, [r5, #12]
 80050a6:	065b      	lsls	r3, r3, #25
 80050a8:	f53f af12 	bmi.w	8004ed0 <_vfiprintf_r+0x4c>
 80050ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ae:	e711      	b.n	8004ed4 <_vfiprintf_r+0x50>
 80050b0:	ab03      	add	r3, sp, #12
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	462a      	mov	r2, r5
 80050b6:	4b09      	ldr	r3, [pc, #36]	; (80050dc <_vfiprintf_r+0x258>)
 80050b8:	a904      	add	r1, sp, #16
 80050ba:	4630      	mov	r0, r6
 80050bc:	f7fe fa6a 	bl	8003594 <_printf_i>
 80050c0:	e7e4      	b.n	800508c <_vfiprintf_r+0x208>
 80050c2:	bf00      	nop
 80050c4:	08005d14 	.word	0x08005d14
 80050c8:	08005d34 	.word	0x08005d34
 80050cc:	08005cf4 	.word	0x08005cf4
 80050d0:	08005be2 	.word	0x08005be2
 80050d4:	08005bec 	.word	0x08005bec
 80050d8:	0800304d 	.word	0x0800304d
 80050dc:	08004e5f 	.word	0x08004e5f
 80050e0:	08005be8 	.word	0x08005be8

080050e4 <__swbuf_r>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	460e      	mov	r6, r1
 80050e8:	4614      	mov	r4, r2
 80050ea:	4605      	mov	r5, r0
 80050ec:	b118      	cbz	r0, 80050f6 <__swbuf_r+0x12>
 80050ee:	6983      	ldr	r3, [r0, #24]
 80050f0:	b90b      	cbnz	r3, 80050f6 <__swbuf_r+0x12>
 80050f2:	f000 f9e7 	bl	80054c4 <__sinit>
 80050f6:	4b21      	ldr	r3, [pc, #132]	; (800517c <__swbuf_r+0x98>)
 80050f8:	429c      	cmp	r4, r3
 80050fa:	d12b      	bne.n	8005154 <__swbuf_r+0x70>
 80050fc:	686c      	ldr	r4, [r5, #4]
 80050fe:	69a3      	ldr	r3, [r4, #24]
 8005100:	60a3      	str	r3, [r4, #8]
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	071a      	lsls	r2, r3, #28
 8005106:	d52f      	bpl.n	8005168 <__swbuf_r+0x84>
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	b36b      	cbz	r3, 8005168 <__swbuf_r+0x84>
 800510c:	6923      	ldr	r3, [r4, #16]
 800510e:	6820      	ldr	r0, [r4, #0]
 8005110:	1ac0      	subs	r0, r0, r3
 8005112:	6963      	ldr	r3, [r4, #20]
 8005114:	b2f6      	uxtb	r6, r6
 8005116:	4283      	cmp	r3, r0
 8005118:	4637      	mov	r7, r6
 800511a:	dc04      	bgt.n	8005126 <__swbuf_r+0x42>
 800511c:	4621      	mov	r1, r4
 800511e:	4628      	mov	r0, r5
 8005120:	f000 f93c 	bl	800539c <_fflush_r>
 8005124:	bb30      	cbnz	r0, 8005174 <__swbuf_r+0x90>
 8005126:	68a3      	ldr	r3, [r4, #8]
 8005128:	3b01      	subs	r3, #1
 800512a:	60a3      	str	r3, [r4, #8]
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	6022      	str	r2, [r4, #0]
 8005132:	701e      	strb	r6, [r3, #0]
 8005134:	6963      	ldr	r3, [r4, #20]
 8005136:	3001      	adds	r0, #1
 8005138:	4283      	cmp	r3, r0
 800513a:	d004      	beq.n	8005146 <__swbuf_r+0x62>
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	07db      	lsls	r3, r3, #31
 8005140:	d506      	bpl.n	8005150 <__swbuf_r+0x6c>
 8005142:	2e0a      	cmp	r6, #10
 8005144:	d104      	bne.n	8005150 <__swbuf_r+0x6c>
 8005146:	4621      	mov	r1, r4
 8005148:	4628      	mov	r0, r5
 800514a:	f000 f927 	bl	800539c <_fflush_r>
 800514e:	b988      	cbnz	r0, 8005174 <__swbuf_r+0x90>
 8005150:	4638      	mov	r0, r7
 8005152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005154:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <__swbuf_r+0x9c>)
 8005156:	429c      	cmp	r4, r3
 8005158:	d101      	bne.n	800515e <__swbuf_r+0x7a>
 800515a:	68ac      	ldr	r4, [r5, #8]
 800515c:	e7cf      	b.n	80050fe <__swbuf_r+0x1a>
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <__swbuf_r+0xa0>)
 8005160:	429c      	cmp	r4, r3
 8005162:	bf08      	it	eq
 8005164:	68ec      	ldreq	r4, [r5, #12]
 8005166:	e7ca      	b.n	80050fe <__swbuf_r+0x1a>
 8005168:	4621      	mov	r1, r4
 800516a:	4628      	mov	r0, r5
 800516c:	f000 f81a 	bl	80051a4 <__swsetup_r>
 8005170:	2800      	cmp	r0, #0
 8005172:	d0cb      	beq.n	800510c <__swbuf_r+0x28>
 8005174:	f04f 37ff 	mov.w	r7, #4294967295
 8005178:	e7ea      	b.n	8005150 <__swbuf_r+0x6c>
 800517a:	bf00      	nop
 800517c:	08005d14 	.word	0x08005d14
 8005180:	08005d34 	.word	0x08005d34
 8005184:	08005cf4 	.word	0x08005cf4

08005188 <__ascii_wctomb>:
 8005188:	b149      	cbz	r1, 800519e <__ascii_wctomb+0x16>
 800518a:	2aff      	cmp	r2, #255	; 0xff
 800518c:	bf85      	ittet	hi
 800518e:	238a      	movhi	r3, #138	; 0x8a
 8005190:	6003      	strhi	r3, [r0, #0]
 8005192:	700a      	strbls	r2, [r1, #0]
 8005194:	f04f 30ff 	movhi.w	r0, #4294967295
 8005198:	bf98      	it	ls
 800519a:	2001      	movls	r0, #1
 800519c:	4770      	bx	lr
 800519e:	4608      	mov	r0, r1
 80051a0:	4770      	bx	lr
	...

080051a4 <__swsetup_r>:
 80051a4:	4b32      	ldr	r3, [pc, #200]	; (8005270 <__swsetup_r+0xcc>)
 80051a6:	b570      	push	{r4, r5, r6, lr}
 80051a8:	681d      	ldr	r5, [r3, #0]
 80051aa:	4606      	mov	r6, r0
 80051ac:	460c      	mov	r4, r1
 80051ae:	b125      	cbz	r5, 80051ba <__swsetup_r+0x16>
 80051b0:	69ab      	ldr	r3, [r5, #24]
 80051b2:	b913      	cbnz	r3, 80051ba <__swsetup_r+0x16>
 80051b4:	4628      	mov	r0, r5
 80051b6:	f000 f985 	bl	80054c4 <__sinit>
 80051ba:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <__swsetup_r+0xd0>)
 80051bc:	429c      	cmp	r4, r3
 80051be:	d10f      	bne.n	80051e0 <__swsetup_r+0x3c>
 80051c0:	686c      	ldr	r4, [r5, #4]
 80051c2:	89a3      	ldrh	r3, [r4, #12]
 80051c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051c8:	0719      	lsls	r1, r3, #28
 80051ca:	d42c      	bmi.n	8005226 <__swsetup_r+0x82>
 80051cc:	06dd      	lsls	r5, r3, #27
 80051ce:	d411      	bmi.n	80051f4 <__swsetup_r+0x50>
 80051d0:	2309      	movs	r3, #9
 80051d2:	6033      	str	r3, [r6, #0]
 80051d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051d8:	81a3      	strh	r3, [r4, #12]
 80051da:	f04f 30ff 	mov.w	r0, #4294967295
 80051de:	e03e      	b.n	800525e <__swsetup_r+0xba>
 80051e0:	4b25      	ldr	r3, [pc, #148]	; (8005278 <__swsetup_r+0xd4>)
 80051e2:	429c      	cmp	r4, r3
 80051e4:	d101      	bne.n	80051ea <__swsetup_r+0x46>
 80051e6:	68ac      	ldr	r4, [r5, #8]
 80051e8:	e7eb      	b.n	80051c2 <__swsetup_r+0x1e>
 80051ea:	4b24      	ldr	r3, [pc, #144]	; (800527c <__swsetup_r+0xd8>)
 80051ec:	429c      	cmp	r4, r3
 80051ee:	bf08      	it	eq
 80051f0:	68ec      	ldreq	r4, [r5, #12]
 80051f2:	e7e6      	b.n	80051c2 <__swsetup_r+0x1e>
 80051f4:	0758      	lsls	r0, r3, #29
 80051f6:	d512      	bpl.n	800521e <__swsetup_r+0x7a>
 80051f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051fa:	b141      	cbz	r1, 800520e <__swsetup_r+0x6a>
 80051fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005200:	4299      	cmp	r1, r3
 8005202:	d002      	beq.n	800520a <__swsetup_r+0x66>
 8005204:	4630      	mov	r0, r6
 8005206:	f7ff fd0b 	bl	8004c20 <_free_r>
 800520a:	2300      	movs	r3, #0
 800520c:	6363      	str	r3, [r4, #52]	; 0x34
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005214:	81a3      	strh	r3, [r4, #12]
 8005216:	2300      	movs	r3, #0
 8005218:	6063      	str	r3, [r4, #4]
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	89a3      	ldrh	r3, [r4, #12]
 8005220:	f043 0308 	orr.w	r3, r3, #8
 8005224:	81a3      	strh	r3, [r4, #12]
 8005226:	6923      	ldr	r3, [r4, #16]
 8005228:	b94b      	cbnz	r3, 800523e <__swsetup_r+0x9a>
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005234:	d003      	beq.n	800523e <__swsetup_r+0x9a>
 8005236:	4621      	mov	r1, r4
 8005238:	4630      	mov	r0, r6
 800523a:	f000 fa07 	bl	800564c <__smakebuf_r>
 800523e:	89a0      	ldrh	r0, [r4, #12]
 8005240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005244:	f010 0301 	ands.w	r3, r0, #1
 8005248:	d00a      	beq.n	8005260 <__swsetup_r+0xbc>
 800524a:	2300      	movs	r3, #0
 800524c:	60a3      	str	r3, [r4, #8]
 800524e:	6963      	ldr	r3, [r4, #20]
 8005250:	425b      	negs	r3, r3
 8005252:	61a3      	str	r3, [r4, #24]
 8005254:	6923      	ldr	r3, [r4, #16]
 8005256:	b943      	cbnz	r3, 800526a <__swsetup_r+0xc6>
 8005258:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800525c:	d1ba      	bne.n	80051d4 <__swsetup_r+0x30>
 800525e:	bd70      	pop	{r4, r5, r6, pc}
 8005260:	0781      	lsls	r1, r0, #30
 8005262:	bf58      	it	pl
 8005264:	6963      	ldrpl	r3, [r4, #20]
 8005266:	60a3      	str	r3, [r4, #8]
 8005268:	e7f4      	b.n	8005254 <__swsetup_r+0xb0>
 800526a:	2000      	movs	r0, #0
 800526c:	e7f7      	b.n	800525e <__swsetup_r+0xba>
 800526e:	bf00      	nop
 8005270:	20000034 	.word	0x20000034
 8005274:	08005d14 	.word	0x08005d14
 8005278:	08005d34 	.word	0x08005d34
 800527c:	08005cf4 	.word	0x08005cf4

08005280 <abort>:
 8005280:	b508      	push	{r3, lr}
 8005282:	2006      	movs	r0, #6
 8005284:	f000 fa4a 	bl	800571c <raise>
 8005288:	2001      	movs	r0, #1
 800528a:	f000 fb5d 	bl	8005948 <_exit>
	...

08005290 <__sflush_r>:
 8005290:	898a      	ldrh	r2, [r1, #12]
 8005292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005296:	4605      	mov	r5, r0
 8005298:	0710      	lsls	r0, r2, #28
 800529a:	460c      	mov	r4, r1
 800529c:	d458      	bmi.n	8005350 <__sflush_r+0xc0>
 800529e:	684b      	ldr	r3, [r1, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	dc05      	bgt.n	80052b0 <__sflush_r+0x20>
 80052a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	dc02      	bgt.n	80052b0 <__sflush_r+0x20>
 80052aa:	2000      	movs	r0, #0
 80052ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052b2:	2e00      	cmp	r6, #0
 80052b4:	d0f9      	beq.n	80052aa <__sflush_r+0x1a>
 80052b6:	2300      	movs	r3, #0
 80052b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052bc:	682f      	ldr	r7, [r5, #0]
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	d032      	beq.n	8005328 <__sflush_r+0x98>
 80052c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	075a      	lsls	r2, r3, #29
 80052c8:	d505      	bpl.n	80052d6 <__sflush_r+0x46>
 80052ca:	6863      	ldr	r3, [r4, #4]
 80052cc:	1ac0      	subs	r0, r0, r3
 80052ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052d0:	b10b      	cbz	r3, 80052d6 <__sflush_r+0x46>
 80052d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052d4:	1ac0      	subs	r0, r0, r3
 80052d6:	2300      	movs	r3, #0
 80052d8:	4602      	mov	r2, r0
 80052da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052dc:	6a21      	ldr	r1, [r4, #32]
 80052de:	4628      	mov	r0, r5
 80052e0:	47b0      	blx	r6
 80052e2:	1c43      	adds	r3, r0, #1
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	d106      	bne.n	80052f6 <__sflush_r+0x66>
 80052e8:	6829      	ldr	r1, [r5, #0]
 80052ea:	291d      	cmp	r1, #29
 80052ec:	d82c      	bhi.n	8005348 <__sflush_r+0xb8>
 80052ee:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <__sflush_r+0x108>)
 80052f0:	40ca      	lsrs	r2, r1
 80052f2:	07d6      	lsls	r6, r2, #31
 80052f4:	d528      	bpl.n	8005348 <__sflush_r+0xb8>
 80052f6:	2200      	movs	r2, #0
 80052f8:	6062      	str	r2, [r4, #4]
 80052fa:	04d9      	lsls	r1, r3, #19
 80052fc:	6922      	ldr	r2, [r4, #16]
 80052fe:	6022      	str	r2, [r4, #0]
 8005300:	d504      	bpl.n	800530c <__sflush_r+0x7c>
 8005302:	1c42      	adds	r2, r0, #1
 8005304:	d101      	bne.n	800530a <__sflush_r+0x7a>
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	b903      	cbnz	r3, 800530c <__sflush_r+0x7c>
 800530a:	6560      	str	r0, [r4, #84]	; 0x54
 800530c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800530e:	602f      	str	r7, [r5, #0]
 8005310:	2900      	cmp	r1, #0
 8005312:	d0ca      	beq.n	80052aa <__sflush_r+0x1a>
 8005314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005318:	4299      	cmp	r1, r3
 800531a:	d002      	beq.n	8005322 <__sflush_r+0x92>
 800531c:	4628      	mov	r0, r5
 800531e:	f7ff fc7f 	bl	8004c20 <_free_r>
 8005322:	2000      	movs	r0, #0
 8005324:	6360      	str	r0, [r4, #52]	; 0x34
 8005326:	e7c1      	b.n	80052ac <__sflush_r+0x1c>
 8005328:	6a21      	ldr	r1, [r4, #32]
 800532a:	2301      	movs	r3, #1
 800532c:	4628      	mov	r0, r5
 800532e:	47b0      	blx	r6
 8005330:	1c41      	adds	r1, r0, #1
 8005332:	d1c7      	bne.n	80052c4 <__sflush_r+0x34>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0c4      	beq.n	80052c4 <__sflush_r+0x34>
 800533a:	2b1d      	cmp	r3, #29
 800533c:	d001      	beq.n	8005342 <__sflush_r+0xb2>
 800533e:	2b16      	cmp	r3, #22
 8005340:	d101      	bne.n	8005346 <__sflush_r+0xb6>
 8005342:	602f      	str	r7, [r5, #0]
 8005344:	e7b1      	b.n	80052aa <__sflush_r+0x1a>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534c:	81a3      	strh	r3, [r4, #12]
 800534e:	e7ad      	b.n	80052ac <__sflush_r+0x1c>
 8005350:	690f      	ldr	r7, [r1, #16]
 8005352:	2f00      	cmp	r7, #0
 8005354:	d0a9      	beq.n	80052aa <__sflush_r+0x1a>
 8005356:	0793      	lsls	r3, r2, #30
 8005358:	680e      	ldr	r6, [r1, #0]
 800535a:	bf08      	it	eq
 800535c:	694b      	ldreq	r3, [r1, #20]
 800535e:	600f      	str	r7, [r1, #0]
 8005360:	bf18      	it	ne
 8005362:	2300      	movne	r3, #0
 8005364:	eba6 0807 	sub.w	r8, r6, r7
 8005368:	608b      	str	r3, [r1, #8]
 800536a:	f1b8 0f00 	cmp.w	r8, #0
 800536e:	dd9c      	ble.n	80052aa <__sflush_r+0x1a>
 8005370:	6a21      	ldr	r1, [r4, #32]
 8005372:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005374:	4643      	mov	r3, r8
 8005376:	463a      	mov	r2, r7
 8005378:	4628      	mov	r0, r5
 800537a:	47b0      	blx	r6
 800537c:	2800      	cmp	r0, #0
 800537e:	dc06      	bgt.n	800538e <__sflush_r+0xfe>
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	f04f 30ff 	mov.w	r0, #4294967295
 800538c:	e78e      	b.n	80052ac <__sflush_r+0x1c>
 800538e:	4407      	add	r7, r0
 8005390:	eba8 0800 	sub.w	r8, r8, r0
 8005394:	e7e9      	b.n	800536a <__sflush_r+0xda>
 8005396:	bf00      	nop
 8005398:	20400001 	.word	0x20400001

0800539c <_fflush_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	4605      	mov	r5, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	b913      	cbnz	r3, 80053ac <_fflush_r+0x10>
 80053a6:	2500      	movs	r5, #0
 80053a8:	4628      	mov	r0, r5
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	b118      	cbz	r0, 80053b6 <_fflush_r+0x1a>
 80053ae:	6983      	ldr	r3, [r0, #24]
 80053b0:	b90b      	cbnz	r3, 80053b6 <_fflush_r+0x1a>
 80053b2:	f000 f887 	bl	80054c4 <__sinit>
 80053b6:	4b14      	ldr	r3, [pc, #80]	; (8005408 <_fflush_r+0x6c>)
 80053b8:	429c      	cmp	r4, r3
 80053ba:	d11b      	bne.n	80053f4 <_fflush_r+0x58>
 80053bc:	686c      	ldr	r4, [r5, #4]
 80053be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0ef      	beq.n	80053a6 <_fflush_r+0xa>
 80053c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053c8:	07d0      	lsls	r0, r2, #31
 80053ca:	d404      	bmi.n	80053d6 <_fflush_r+0x3a>
 80053cc:	0599      	lsls	r1, r3, #22
 80053ce:	d402      	bmi.n	80053d6 <_fflush_r+0x3a>
 80053d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053d2:	f000 f915 	bl	8005600 <__retarget_lock_acquire_recursive>
 80053d6:	4628      	mov	r0, r5
 80053d8:	4621      	mov	r1, r4
 80053da:	f7ff ff59 	bl	8005290 <__sflush_r>
 80053de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053e0:	07da      	lsls	r2, r3, #31
 80053e2:	4605      	mov	r5, r0
 80053e4:	d4e0      	bmi.n	80053a8 <_fflush_r+0xc>
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	059b      	lsls	r3, r3, #22
 80053ea:	d4dd      	bmi.n	80053a8 <_fflush_r+0xc>
 80053ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ee:	f000 f908 	bl	8005602 <__retarget_lock_release_recursive>
 80053f2:	e7d9      	b.n	80053a8 <_fflush_r+0xc>
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <_fflush_r+0x70>)
 80053f6:	429c      	cmp	r4, r3
 80053f8:	d101      	bne.n	80053fe <_fflush_r+0x62>
 80053fa:	68ac      	ldr	r4, [r5, #8]
 80053fc:	e7df      	b.n	80053be <_fflush_r+0x22>
 80053fe:	4b04      	ldr	r3, [pc, #16]	; (8005410 <_fflush_r+0x74>)
 8005400:	429c      	cmp	r4, r3
 8005402:	bf08      	it	eq
 8005404:	68ec      	ldreq	r4, [r5, #12]
 8005406:	e7da      	b.n	80053be <_fflush_r+0x22>
 8005408:	08005d14 	.word	0x08005d14
 800540c:	08005d34 	.word	0x08005d34
 8005410:	08005cf4 	.word	0x08005cf4

08005414 <std>:
 8005414:	2300      	movs	r3, #0
 8005416:	b510      	push	{r4, lr}
 8005418:	4604      	mov	r4, r0
 800541a:	e9c0 3300 	strd	r3, r3, [r0]
 800541e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005422:	6083      	str	r3, [r0, #8]
 8005424:	8181      	strh	r1, [r0, #12]
 8005426:	6643      	str	r3, [r0, #100]	; 0x64
 8005428:	81c2      	strh	r2, [r0, #14]
 800542a:	6183      	str	r3, [r0, #24]
 800542c:	4619      	mov	r1, r3
 800542e:	2208      	movs	r2, #8
 8005430:	305c      	adds	r0, #92	; 0x5c
 8005432:	f7fd fd63 	bl	8002efc <memset>
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <std+0x38>)
 8005438:	6263      	str	r3, [r4, #36]	; 0x24
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <std+0x3c>)
 800543c:	62a3      	str	r3, [r4, #40]	; 0x28
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <std+0x40>)
 8005440:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <std+0x44>)
 8005444:	6224      	str	r4, [r4, #32]
 8005446:	6323      	str	r3, [r4, #48]	; 0x30
 8005448:	bd10      	pop	{r4, pc}
 800544a:	bf00      	nop
 800544c:	08005755 	.word	0x08005755
 8005450:	08005777 	.word	0x08005777
 8005454:	080057af 	.word	0x080057af
 8005458:	080057d3 	.word	0x080057d3

0800545c <_cleanup_r>:
 800545c:	4901      	ldr	r1, [pc, #4]	; (8005464 <_cleanup_r+0x8>)
 800545e:	f000 b8af 	b.w	80055c0 <_fwalk_reent>
 8005462:	bf00      	nop
 8005464:	0800539d 	.word	0x0800539d

08005468 <__sfmoreglue>:
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	1e4a      	subs	r2, r1, #1
 800546c:	2568      	movs	r5, #104	; 0x68
 800546e:	4355      	muls	r5, r2
 8005470:	460e      	mov	r6, r1
 8005472:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005476:	f7ff fc23 	bl	8004cc0 <_malloc_r>
 800547a:	4604      	mov	r4, r0
 800547c:	b140      	cbz	r0, 8005490 <__sfmoreglue+0x28>
 800547e:	2100      	movs	r1, #0
 8005480:	e9c0 1600 	strd	r1, r6, [r0]
 8005484:	300c      	adds	r0, #12
 8005486:	60a0      	str	r0, [r4, #8]
 8005488:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800548c:	f7fd fd36 	bl	8002efc <memset>
 8005490:	4620      	mov	r0, r4
 8005492:	bd70      	pop	{r4, r5, r6, pc}

08005494 <__sfp_lock_acquire>:
 8005494:	4801      	ldr	r0, [pc, #4]	; (800549c <__sfp_lock_acquire+0x8>)
 8005496:	f000 b8b3 	b.w	8005600 <__retarget_lock_acquire_recursive>
 800549a:	bf00      	nop
 800549c:	200002c8 	.word	0x200002c8

080054a0 <__sfp_lock_release>:
 80054a0:	4801      	ldr	r0, [pc, #4]	; (80054a8 <__sfp_lock_release+0x8>)
 80054a2:	f000 b8ae 	b.w	8005602 <__retarget_lock_release_recursive>
 80054a6:	bf00      	nop
 80054a8:	200002c8 	.word	0x200002c8

080054ac <__sinit_lock_acquire>:
 80054ac:	4801      	ldr	r0, [pc, #4]	; (80054b4 <__sinit_lock_acquire+0x8>)
 80054ae:	f000 b8a7 	b.w	8005600 <__retarget_lock_acquire_recursive>
 80054b2:	bf00      	nop
 80054b4:	200002c3 	.word	0x200002c3

080054b8 <__sinit_lock_release>:
 80054b8:	4801      	ldr	r0, [pc, #4]	; (80054c0 <__sinit_lock_release+0x8>)
 80054ba:	f000 b8a2 	b.w	8005602 <__retarget_lock_release_recursive>
 80054be:	bf00      	nop
 80054c0:	200002c3 	.word	0x200002c3

080054c4 <__sinit>:
 80054c4:	b510      	push	{r4, lr}
 80054c6:	4604      	mov	r4, r0
 80054c8:	f7ff fff0 	bl	80054ac <__sinit_lock_acquire>
 80054cc:	69a3      	ldr	r3, [r4, #24]
 80054ce:	b11b      	cbz	r3, 80054d8 <__sinit+0x14>
 80054d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d4:	f7ff bff0 	b.w	80054b8 <__sinit_lock_release>
 80054d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054dc:	6523      	str	r3, [r4, #80]	; 0x50
 80054de:	4b13      	ldr	r3, [pc, #76]	; (800552c <__sinit+0x68>)
 80054e0:	4a13      	ldr	r2, [pc, #76]	; (8005530 <__sinit+0x6c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80054e6:	42a3      	cmp	r3, r4
 80054e8:	bf04      	itt	eq
 80054ea:	2301      	moveq	r3, #1
 80054ec:	61a3      	streq	r3, [r4, #24]
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 f820 	bl	8005534 <__sfp>
 80054f4:	6060      	str	r0, [r4, #4]
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 f81c 	bl	8005534 <__sfp>
 80054fc:	60a0      	str	r0, [r4, #8]
 80054fe:	4620      	mov	r0, r4
 8005500:	f000 f818 	bl	8005534 <__sfp>
 8005504:	2200      	movs	r2, #0
 8005506:	60e0      	str	r0, [r4, #12]
 8005508:	2104      	movs	r1, #4
 800550a:	6860      	ldr	r0, [r4, #4]
 800550c:	f7ff ff82 	bl	8005414 <std>
 8005510:	68a0      	ldr	r0, [r4, #8]
 8005512:	2201      	movs	r2, #1
 8005514:	2109      	movs	r1, #9
 8005516:	f7ff ff7d 	bl	8005414 <std>
 800551a:	68e0      	ldr	r0, [r4, #12]
 800551c:	2202      	movs	r2, #2
 800551e:	2112      	movs	r1, #18
 8005520:	f7ff ff78 	bl	8005414 <std>
 8005524:	2301      	movs	r3, #1
 8005526:	61a3      	str	r3, [r4, #24]
 8005528:	e7d2      	b.n	80054d0 <__sinit+0xc>
 800552a:	bf00      	nop
 800552c:	08005970 	.word	0x08005970
 8005530:	0800545d 	.word	0x0800545d

08005534 <__sfp>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	4607      	mov	r7, r0
 8005538:	f7ff ffac 	bl	8005494 <__sfp_lock_acquire>
 800553c:	4b1e      	ldr	r3, [pc, #120]	; (80055b8 <__sfp+0x84>)
 800553e:	681e      	ldr	r6, [r3, #0]
 8005540:	69b3      	ldr	r3, [r6, #24]
 8005542:	b913      	cbnz	r3, 800554a <__sfp+0x16>
 8005544:	4630      	mov	r0, r6
 8005546:	f7ff ffbd 	bl	80054c4 <__sinit>
 800554a:	3648      	adds	r6, #72	; 0x48
 800554c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005550:	3b01      	subs	r3, #1
 8005552:	d503      	bpl.n	800555c <__sfp+0x28>
 8005554:	6833      	ldr	r3, [r6, #0]
 8005556:	b30b      	cbz	r3, 800559c <__sfp+0x68>
 8005558:	6836      	ldr	r6, [r6, #0]
 800555a:	e7f7      	b.n	800554c <__sfp+0x18>
 800555c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005560:	b9d5      	cbnz	r5, 8005598 <__sfp+0x64>
 8005562:	4b16      	ldr	r3, [pc, #88]	; (80055bc <__sfp+0x88>)
 8005564:	60e3      	str	r3, [r4, #12]
 8005566:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800556a:	6665      	str	r5, [r4, #100]	; 0x64
 800556c:	f000 f847 	bl	80055fe <__retarget_lock_init_recursive>
 8005570:	f7ff ff96 	bl	80054a0 <__sfp_lock_release>
 8005574:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005578:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800557c:	6025      	str	r5, [r4, #0]
 800557e:	61a5      	str	r5, [r4, #24]
 8005580:	2208      	movs	r2, #8
 8005582:	4629      	mov	r1, r5
 8005584:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005588:	f7fd fcb8 	bl	8002efc <memset>
 800558c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005590:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005594:	4620      	mov	r0, r4
 8005596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005598:	3468      	adds	r4, #104	; 0x68
 800559a:	e7d9      	b.n	8005550 <__sfp+0x1c>
 800559c:	2104      	movs	r1, #4
 800559e:	4638      	mov	r0, r7
 80055a0:	f7ff ff62 	bl	8005468 <__sfmoreglue>
 80055a4:	4604      	mov	r4, r0
 80055a6:	6030      	str	r0, [r6, #0]
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d1d5      	bne.n	8005558 <__sfp+0x24>
 80055ac:	f7ff ff78 	bl	80054a0 <__sfp_lock_release>
 80055b0:	230c      	movs	r3, #12
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	e7ee      	b.n	8005594 <__sfp+0x60>
 80055b6:	bf00      	nop
 80055b8:	08005970 	.word	0x08005970
 80055bc:	ffff0001 	.word	0xffff0001

080055c0 <_fwalk_reent>:
 80055c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c4:	4606      	mov	r6, r0
 80055c6:	4688      	mov	r8, r1
 80055c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055cc:	2700      	movs	r7, #0
 80055ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055d2:	f1b9 0901 	subs.w	r9, r9, #1
 80055d6:	d505      	bpl.n	80055e4 <_fwalk_reent+0x24>
 80055d8:	6824      	ldr	r4, [r4, #0]
 80055da:	2c00      	cmp	r4, #0
 80055dc:	d1f7      	bne.n	80055ce <_fwalk_reent+0xe>
 80055de:	4638      	mov	r0, r7
 80055e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055e4:	89ab      	ldrh	r3, [r5, #12]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d907      	bls.n	80055fa <_fwalk_reent+0x3a>
 80055ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055ee:	3301      	adds	r3, #1
 80055f0:	d003      	beq.n	80055fa <_fwalk_reent+0x3a>
 80055f2:	4629      	mov	r1, r5
 80055f4:	4630      	mov	r0, r6
 80055f6:	47c0      	blx	r8
 80055f8:	4307      	orrs	r7, r0
 80055fa:	3568      	adds	r5, #104	; 0x68
 80055fc:	e7e9      	b.n	80055d2 <_fwalk_reent+0x12>

080055fe <__retarget_lock_init_recursive>:
 80055fe:	4770      	bx	lr

08005600 <__retarget_lock_acquire_recursive>:
 8005600:	4770      	bx	lr

08005602 <__retarget_lock_release_recursive>:
 8005602:	4770      	bx	lr

08005604 <__swhatbuf_r>:
 8005604:	b570      	push	{r4, r5, r6, lr}
 8005606:	460e      	mov	r6, r1
 8005608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560c:	2900      	cmp	r1, #0
 800560e:	b096      	sub	sp, #88	; 0x58
 8005610:	4614      	mov	r4, r2
 8005612:	461d      	mov	r5, r3
 8005614:	da07      	bge.n	8005626 <__swhatbuf_r+0x22>
 8005616:	2300      	movs	r3, #0
 8005618:	602b      	str	r3, [r5, #0]
 800561a:	89b3      	ldrh	r3, [r6, #12]
 800561c:	061a      	lsls	r2, r3, #24
 800561e:	d410      	bmi.n	8005642 <__swhatbuf_r+0x3e>
 8005620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005624:	e00e      	b.n	8005644 <__swhatbuf_r+0x40>
 8005626:	466a      	mov	r2, sp
 8005628:	f000 f8fa 	bl	8005820 <_fstat_r>
 800562c:	2800      	cmp	r0, #0
 800562e:	dbf2      	blt.n	8005616 <__swhatbuf_r+0x12>
 8005630:	9a01      	ldr	r2, [sp, #4]
 8005632:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005636:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800563a:	425a      	negs	r2, r3
 800563c:	415a      	adcs	r2, r3
 800563e:	602a      	str	r2, [r5, #0]
 8005640:	e7ee      	b.n	8005620 <__swhatbuf_r+0x1c>
 8005642:	2340      	movs	r3, #64	; 0x40
 8005644:	2000      	movs	r0, #0
 8005646:	6023      	str	r3, [r4, #0]
 8005648:	b016      	add	sp, #88	; 0x58
 800564a:	bd70      	pop	{r4, r5, r6, pc}

0800564c <__smakebuf_r>:
 800564c:	898b      	ldrh	r3, [r1, #12]
 800564e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005650:	079d      	lsls	r5, r3, #30
 8005652:	4606      	mov	r6, r0
 8005654:	460c      	mov	r4, r1
 8005656:	d507      	bpl.n	8005668 <__smakebuf_r+0x1c>
 8005658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	6123      	str	r3, [r4, #16]
 8005660:	2301      	movs	r3, #1
 8005662:	6163      	str	r3, [r4, #20]
 8005664:	b002      	add	sp, #8
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	ab01      	add	r3, sp, #4
 800566a:	466a      	mov	r2, sp
 800566c:	f7ff ffca 	bl	8005604 <__swhatbuf_r>
 8005670:	9900      	ldr	r1, [sp, #0]
 8005672:	4605      	mov	r5, r0
 8005674:	4630      	mov	r0, r6
 8005676:	f7ff fb23 	bl	8004cc0 <_malloc_r>
 800567a:	b948      	cbnz	r0, 8005690 <__smakebuf_r+0x44>
 800567c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005680:	059a      	lsls	r2, r3, #22
 8005682:	d4ef      	bmi.n	8005664 <__smakebuf_r+0x18>
 8005684:	f023 0303 	bic.w	r3, r3, #3
 8005688:	f043 0302 	orr.w	r3, r3, #2
 800568c:	81a3      	strh	r3, [r4, #12]
 800568e:	e7e3      	b.n	8005658 <__smakebuf_r+0xc>
 8005690:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <__smakebuf_r+0x7c>)
 8005692:	62b3      	str	r3, [r6, #40]	; 0x28
 8005694:	89a3      	ldrh	r3, [r4, #12]
 8005696:	6020      	str	r0, [r4, #0]
 8005698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569c:	81a3      	strh	r3, [r4, #12]
 800569e:	9b00      	ldr	r3, [sp, #0]
 80056a0:	6163      	str	r3, [r4, #20]
 80056a2:	9b01      	ldr	r3, [sp, #4]
 80056a4:	6120      	str	r0, [r4, #16]
 80056a6:	b15b      	cbz	r3, 80056c0 <__smakebuf_r+0x74>
 80056a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056ac:	4630      	mov	r0, r6
 80056ae:	f000 f8c9 	bl	8005844 <_isatty_r>
 80056b2:	b128      	cbz	r0, 80056c0 <__smakebuf_r+0x74>
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	f023 0303 	bic.w	r3, r3, #3
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	81a3      	strh	r3, [r4, #12]
 80056c0:	89a0      	ldrh	r0, [r4, #12]
 80056c2:	4305      	orrs	r5, r0
 80056c4:	81a5      	strh	r5, [r4, #12]
 80056c6:	e7cd      	b.n	8005664 <__smakebuf_r+0x18>
 80056c8:	0800545d 	.word	0x0800545d

080056cc <_raise_r>:
 80056cc:	291f      	cmp	r1, #31
 80056ce:	b538      	push	{r3, r4, r5, lr}
 80056d0:	4604      	mov	r4, r0
 80056d2:	460d      	mov	r5, r1
 80056d4:	d904      	bls.n	80056e0 <_raise_r+0x14>
 80056d6:	2316      	movs	r3, #22
 80056d8:	6003      	str	r3, [r0, #0]
 80056da:	f04f 30ff 	mov.w	r0, #4294967295
 80056de:	bd38      	pop	{r3, r4, r5, pc}
 80056e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80056e2:	b112      	cbz	r2, 80056ea <_raise_r+0x1e>
 80056e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80056e8:	b94b      	cbnz	r3, 80056fe <_raise_r+0x32>
 80056ea:	4620      	mov	r0, r4
 80056ec:	f000 f830 	bl	8005750 <_getpid_r>
 80056f0:	462a      	mov	r2, r5
 80056f2:	4601      	mov	r1, r0
 80056f4:	4620      	mov	r0, r4
 80056f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056fa:	f000 b817 	b.w	800572c <_kill_r>
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d00a      	beq.n	8005718 <_raise_r+0x4c>
 8005702:	1c59      	adds	r1, r3, #1
 8005704:	d103      	bne.n	800570e <_raise_r+0x42>
 8005706:	2316      	movs	r3, #22
 8005708:	6003      	str	r3, [r0, #0]
 800570a:	2001      	movs	r0, #1
 800570c:	e7e7      	b.n	80056de <_raise_r+0x12>
 800570e:	2400      	movs	r4, #0
 8005710:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005714:	4628      	mov	r0, r5
 8005716:	4798      	blx	r3
 8005718:	2000      	movs	r0, #0
 800571a:	e7e0      	b.n	80056de <_raise_r+0x12>

0800571c <raise>:
 800571c:	4b02      	ldr	r3, [pc, #8]	; (8005728 <raise+0xc>)
 800571e:	4601      	mov	r1, r0
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	f7ff bfd3 	b.w	80056cc <_raise_r>
 8005726:	bf00      	nop
 8005728:	20000034 	.word	0x20000034

0800572c <_kill_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d07      	ldr	r5, [pc, #28]	; (800574c <_kill_r+0x20>)
 8005730:	2300      	movs	r3, #0
 8005732:	4604      	mov	r4, r0
 8005734:	4608      	mov	r0, r1
 8005736:	4611      	mov	r1, r2
 8005738:	602b      	str	r3, [r5, #0]
 800573a:	f000 f8d7 	bl	80058ec <_kill>
 800573e:	1c43      	adds	r3, r0, #1
 8005740:	d102      	bne.n	8005748 <_kill_r+0x1c>
 8005742:	682b      	ldr	r3, [r5, #0]
 8005744:	b103      	cbz	r3, 8005748 <_kill_r+0x1c>
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	bd38      	pop	{r3, r4, r5, pc}
 800574a:	bf00      	nop
 800574c:	200002bc 	.word	0x200002bc

08005750 <_getpid_r>:
 8005750:	f000 b8bc 	b.w	80058cc <_getpid>

08005754 <__sread>:
 8005754:	b510      	push	{r4, lr}
 8005756:	460c      	mov	r4, r1
 8005758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800575c:	f000 f894 	bl	8005888 <_read_r>
 8005760:	2800      	cmp	r0, #0
 8005762:	bfab      	itete	ge
 8005764:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005766:	89a3      	ldrhlt	r3, [r4, #12]
 8005768:	181b      	addge	r3, r3, r0
 800576a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800576e:	bfac      	ite	ge
 8005770:	6563      	strge	r3, [r4, #84]	; 0x54
 8005772:	81a3      	strhlt	r3, [r4, #12]
 8005774:	bd10      	pop	{r4, pc}

08005776 <__swrite>:
 8005776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800577a:	461f      	mov	r7, r3
 800577c:	898b      	ldrh	r3, [r1, #12]
 800577e:	05db      	lsls	r3, r3, #23
 8005780:	4605      	mov	r5, r0
 8005782:	460c      	mov	r4, r1
 8005784:	4616      	mov	r6, r2
 8005786:	d505      	bpl.n	8005794 <__swrite+0x1e>
 8005788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800578c:	2302      	movs	r3, #2
 800578e:	2200      	movs	r2, #0
 8005790:	f000 f868 	bl	8005864 <_lseek_r>
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800579a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800579e:	81a3      	strh	r3, [r4, #12]
 80057a0:	4632      	mov	r2, r6
 80057a2:	463b      	mov	r3, r7
 80057a4:	4628      	mov	r0, r5
 80057a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057aa:	f000 b817 	b.w	80057dc <_write_r>

080057ae <__sseek>:
 80057ae:	b510      	push	{r4, lr}
 80057b0:	460c      	mov	r4, r1
 80057b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b6:	f000 f855 	bl	8005864 <_lseek_r>
 80057ba:	1c43      	adds	r3, r0, #1
 80057bc:	89a3      	ldrh	r3, [r4, #12]
 80057be:	bf15      	itete	ne
 80057c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80057c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057ca:	81a3      	strheq	r3, [r4, #12]
 80057cc:	bf18      	it	ne
 80057ce:	81a3      	strhne	r3, [r4, #12]
 80057d0:	bd10      	pop	{r4, pc}

080057d2 <__sclose>:
 80057d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d6:	f000 b813 	b.w	8005800 <_close_r>
	...

080057dc <_write_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4d07      	ldr	r5, [pc, #28]	; (80057fc <_write_r+0x20>)
 80057e0:	4604      	mov	r4, r0
 80057e2:	4608      	mov	r0, r1
 80057e4:	4611      	mov	r1, r2
 80057e6:	2200      	movs	r2, #0
 80057e8:	602a      	str	r2, [r5, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f000 f8a4 	bl	8005938 <_write>
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	d102      	bne.n	80057fa <_write_r+0x1e>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	b103      	cbz	r3, 80057fa <_write_r+0x1e>
 80057f8:	6023      	str	r3, [r4, #0]
 80057fa:	bd38      	pop	{r3, r4, r5, pc}
 80057fc:	200002bc 	.word	0x200002bc

08005800 <_close_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	4d06      	ldr	r5, [pc, #24]	; (800581c <_close_r+0x1c>)
 8005804:	2300      	movs	r3, #0
 8005806:	4604      	mov	r4, r0
 8005808:	4608      	mov	r0, r1
 800580a:	602b      	str	r3, [r5, #0]
 800580c:	f000 f84e 	bl	80058ac <_close>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d102      	bne.n	800581a <_close_r+0x1a>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	b103      	cbz	r3, 800581a <_close_r+0x1a>
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	200002bc 	.word	0x200002bc

08005820 <_fstat_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d07      	ldr	r5, [pc, #28]	; (8005840 <_fstat_r+0x20>)
 8005824:	2300      	movs	r3, #0
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	4611      	mov	r1, r2
 800582c:	602b      	str	r3, [r5, #0]
 800582e:	f000 f845 	bl	80058bc <_fstat>
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	d102      	bne.n	800583c <_fstat_r+0x1c>
 8005836:	682b      	ldr	r3, [r5, #0]
 8005838:	b103      	cbz	r3, 800583c <_fstat_r+0x1c>
 800583a:	6023      	str	r3, [r4, #0]
 800583c:	bd38      	pop	{r3, r4, r5, pc}
 800583e:	bf00      	nop
 8005840:	200002bc 	.word	0x200002bc

08005844 <_isatty_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4d06      	ldr	r5, [pc, #24]	; (8005860 <_isatty_r+0x1c>)
 8005848:	2300      	movs	r3, #0
 800584a:	4604      	mov	r4, r0
 800584c:	4608      	mov	r0, r1
 800584e:	602b      	str	r3, [r5, #0]
 8005850:	f000 f844 	bl	80058dc <_isatty>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d102      	bne.n	800585e <_isatty_r+0x1a>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	b103      	cbz	r3, 800585e <_isatty_r+0x1a>
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	bd38      	pop	{r3, r4, r5, pc}
 8005860:	200002bc 	.word	0x200002bc

08005864 <_lseek_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d07      	ldr	r5, [pc, #28]	; (8005884 <_lseek_r+0x20>)
 8005868:	4604      	mov	r4, r0
 800586a:	4608      	mov	r0, r1
 800586c:	4611      	mov	r1, r2
 800586e:	2200      	movs	r2, #0
 8005870:	602a      	str	r2, [r5, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	f000 f842 	bl	80058fc <_lseek>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d102      	bne.n	8005882 <_lseek_r+0x1e>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	b103      	cbz	r3, 8005882 <_lseek_r+0x1e>
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	200002bc 	.word	0x200002bc

08005888 <_read_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4d07      	ldr	r5, [pc, #28]	; (80058a8 <_read_r+0x20>)
 800588c:	4604      	mov	r4, r0
 800588e:	4608      	mov	r0, r1
 8005890:	4611      	mov	r1, r2
 8005892:	2200      	movs	r2, #0
 8005894:	602a      	str	r2, [r5, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	f000 f838 	bl	800590c <_read>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_read_r+0x1e>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_read_r+0x1e>
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	200002bc 	.word	0x200002bc

080058ac <_close>:
 80058ac:	4b02      	ldr	r3, [pc, #8]	; (80058b8 <_close+0xc>)
 80058ae:	2258      	movs	r2, #88	; 0x58
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	f04f 30ff 	mov.w	r0, #4294967295
 80058b6:	4770      	bx	lr
 80058b8:	200002bc 	.word	0x200002bc

080058bc <_fstat>:
 80058bc:	4b02      	ldr	r3, [pc, #8]	; (80058c8 <_fstat+0xc>)
 80058be:	2258      	movs	r2, #88	; 0x58
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	f04f 30ff 	mov.w	r0, #4294967295
 80058c6:	4770      	bx	lr
 80058c8:	200002bc 	.word	0x200002bc

080058cc <_getpid>:
 80058cc:	4b02      	ldr	r3, [pc, #8]	; (80058d8 <_getpid+0xc>)
 80058ce:	2258      	movs	r2, #88	; 0x58
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f04f 30ff 	mov.w	r0, #4294967295
 80058d6:	4770      	bx	lr
 80058d8:	200002bc 	.word	0x200002bc

080058dc <_isatty>:
 80058dc:	4b02      	ldr	r3, [pc, #8]	; (80058e8 <_isatty+0xc>)
 80058de:	2258      	movs	r2, #88	; 0x58
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	2000      	movs	r0, #0
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	200002bc 	.word	0x200002bc

080058ec <_kill>:
 80058ec:	4b02      	ldr	r3, [pc, #8]	; (80058f8 <_kill+0xc>)
 80058ee:	2258      	movs	r2, #88	; 0x58
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	f04f 30ff 	mov.w	r0, #4294967295
 80058f6:	4770      	bx	lr
 80058f8:	200002bc 	.word	0x200002bc

080058fc <_lseek>:
 80058fc:	4b02      	ldr	r3, [pc, #8]	; (8005908 <_lseek+0xc>)
 80058fe:	2258      	movs	r2, #88	; 0x58
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	f04f 30ff 	mov.w	r0, #4294967295
 8005906:	4770      	bx	lr
 8005908:	200002bc 	.word	0x200002bc

0800590c <_read>:
 800590c:	4b02      	ldr	r3, [pc, #8]	; (8005918 <_read+0xc>)
 800590e:	2258      	movs	r2, #88	; 0x58
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	f04f 30ff 	mov.w	r0, #4294967295
 8005916:	4770      	bx	lr
 8005918:	200002bc 	.word	0x200002bc

0800591c <_sbrk>:
 800591c:	4b04      	ldr	r3, [pc, #16]	; (8005930 <_sbrk+0x14>)
 800591e:	6819      	ldr	r1, [r3, #0]
 8005920:	4602      	mov	r2, r0
 8005922:	b909      	cbnz	r1, 8005928 <_sbrk+0xc>
 8005924:	4903      	ldr	r1, [pc, #12]	; (8005934 <_sbrk+0x18>)
 8005926:	6019      	str	r1, [r3, #0]
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	4402      	add	r2, r0
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	4770      	bx	lr
 8005930:	20000228 	.word	0x20000228
 8005934:	200002d0 	.word	0x200002d0

08005938 <_write>:
 8005938:	4b02      	ldr	r3, [pc, #8]	; (8005944 <_write+0xc>)
 800593a:	2258      	movs	r2, #88	; 0x58
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	f04f 30ff 	mov.w	r0, #4294967295
 8005942:	4770      	bx	lr
 8005944:	200002bc 	.word	0x200002bc

08005948 <_exit>:
 8005948:	e7fe      	b.n	8005948 <_exit>
	...

0800594c <_init>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	bf00      	nop
 8005950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005952:	bc08      	pop	{r3}
 8005954:	469e      	mov	lr, r3
 8005956:	4770      	bx	lr

08005958 <_fini>:
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	bf00      	nop
 800595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595e:	bc08      	pop	{r3}
 8005960:	469e      	mov	lr, r3
 8005962:	4770      	bx	lr
