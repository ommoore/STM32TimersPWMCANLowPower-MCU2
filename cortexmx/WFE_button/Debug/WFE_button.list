
WFE_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005674  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08005848  08005848  00015848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c54  08005c54  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08005c54  08005c54  00015c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c5c  08005c5c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c5c  08005c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08005c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  200001f8  08005e5c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08005e5c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ac3  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000167a  00000000  00000000  00029ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  0002b368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021dab  00000000  00000000  0002b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00008f59  00000000  00000000  0004d7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d144f  00000000  00000000  000566fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00127b4b  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000600  00000000  00000000  00127ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c64  00000000  00000000  001281a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0012ae04  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0012aed0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800582c 	.word	0x0800582c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800582c 	.word	0x0800582c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <SysTick_Handler>:

#include "main.h"

extern UART_HandleTypeDef huart2;

void SysTick_Handler(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	HAL_IncTick();
 8000ee4:	f000 fa4a 	bl	800137c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000ee8:	f000 fb99 	bl	800161e <HAL_SYSTICK_IRQHandler>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <USART2_IRQHandler+0x10>)
 8000ef6:	f000 ff0b 	bl	8001d10 <HAL_UART_IRQHandler>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000220 	.word	0x20000220

08000f04 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f0c:	f000 fdd4 	bl	8001ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <main>:

extern uint8_t some_data[];



int main(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	; 0x38
 8000f18:	af00      	add	r7, sp, #0

	char msg[50];

	HAL_Init(); //Systick interrupt initialized here
 8000f1a:	f000 f9dd 	bl	80012d8 <HAL_Init>

	//SystemClock_Config_HSE(SYS_CLOCK_FREQ_50MHZ);

	GPIO_Init();
 8000f1e:	f000 f875 	bl	800100c <GPIO_Init>
	UART2_Init();
 8000f22:	f000 f8bb 	bl	800109c <UART2_Init>

	GPIO_AnalogConfig();
 8000f26:	f000 f84d 	bl	8000fc4 <GPIO_AnalogConfig>

	while(1) {

		if(HAL_UART_Transmit(&huart2, (uint8_t*)some_data, (uint16_t)strlen((char*)some_data), HAL_MAX_DELAY) != HAL_OK) {
 8000f2a:	4822      	ldr	r0, [pc, #136]	; (8000fb4 <main+0xa0>)
 8000f2c:	f7ff f970 	bl	8000210 <strlen>
 8000f30:	4603      	mov	r3, r0
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	491e      	ldr	r1, [pc, #120]	; (8000fb4 <main+0xa0>)
 8000f3a:	481f      	ldr	r0, [pc, #124]	; (8000fb8 <main+0xa4>)
 8000f3c:	f000 fe55 	bl	8001bea <HAL_UART_Transmit>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <main+0x36>
			Error_handler();
 8000f46:	f000 f8f7 	bl	8001138 <Error_handler>
		}

		memset(msg, 0, sizeof(msg));
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2232      	movs	r2, #50	; 0x32
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 fd7f 	bl	8002a54 <memset>
		sprintf(msg, "Going to Sleep!\r\n");
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4918      	ldr	r1, [pc, #96]	; (8000fbc <main+0xa8>)
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 f9ec 	bl	8003338 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)some_data, (uint16_t)strlen((char*)msg), HAL_MAX_DELAY);
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff f954 	bl	8000210 <strlen>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	4910      	ldr	r1, [pc, #64]	; (8000fb4 <main+0xa0>)
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <main+0xa4>)
 8000f74:	f000 fe39 	bl	8001bea <HAL_UART_Transmit>

		//Systick is not required. Disabling Systick interrupt before Sleep
		HAL_SuspendTick();
 8000f78:	f000 fa20 	bl	80013bc <HAL_SuspendTick>

		//Going to Sleep
		__WFE();
 8000f7c:	bf20      	wfe

		//After waking up, enable Systick interrupt
		HAL_ResumeTick();
 8000f7e:	f000 fa2d 	bl	80013dc <HAL_ResumeTick>

		memset(msg, 0, sizeof(msg));
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2232      	movs	r2, #50	; 0x32
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fd63 	bl	8002a54 <memset>
		sprintf(msg, "Woke up!\r\n");
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	490b      	ldr	r1, [pc, #44]	; (8000fc0 <main+0xac>)
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 f9d0 	bl	8003338 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)some_data, (uint16_t)strlen((char*)msg), HAL_MAX_DELAY);
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff f938 	bl	8000210 <strlen>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	4902      	ldr	r1, [pc, #8]	; (8000fb4 <main+0xa0>)
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <main+0xa4>)
 8000fac:	f000 fe1d 	bl	8001bea <HAL_UART_Transmit>
		if(HAL_UART_Transmit(&huart2, (uint8_t*)some_data, (uint16_t)strlen((char*)some_data), HAL_MAX_DELAY) != HAL_OK) {
 8000fb0:	e7bb      	b.n	8000f2a <main+0x16>
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000220 	.word	0x20000220
 8000fbc:	08005848 	.word	0x08005848
 8000fc0:	0800585c 	.word	0x0800585c

08000fc4 <GPIO_AnalogConfig>:
	//SYSTICK IRQn interrupt configuration
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

}

void GPIO_AnalogConfig(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GpioA, GpioC;

	uint32_t gpio_pins = 	GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | \
 8000fca:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
							GPIO_PIN_5| GPIO_PIN_6 | GPIO_PIN_7  | \
							GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
							GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | \
							GPIO_PIN_14 | GPIO_PIN_15;
	GpioA.Pin = gpio_pins;
 8000fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd2:	61bb      	str	r3, [r7, #24]
	GpioA.Mode = GPIO_MODE_ANALOG;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GpioA);
 8000fd8:	f107 0318 	add.w	r3, r7, #24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4809      	ldr	r0, [pc, #36]	; (8001004 <GPIO_AnalogConfig+0x40>)
 8000fe0:	f000 fbbc 	bl	800175c <HAL_GPIO_Init>

	gpio_pins = 			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | \
 8000fe4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
							GPIO_PIN_3| GPIO_PIN_4 | GPIO_PIN_5  | \
							GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | \
							GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
							GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;

	GpioC.Pin = gpio_pins;
 8000fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fec:	607b      	str	r3, [r7, #4]
	GpioC.Mode = GPIO_MODE_ANALOG;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOC, &GpioC);
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <GPIO_AnalogConfig+0x44>)
 8000ff8:	f000 fbb0 	bl	800175c <HAL_GPIO_Init>
}
 8000ffc:	bf00      	nop
 8000ffe:	3730      	adds	r7, #48	; 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40020000 	.word	0x40020000
 8001008:	40020800 	.word	0x40020800

0800100c <GPIO_Init>:

void GPIO_Init(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <GPIO_Init+0x84>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <GPIO_Init+0x84>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <GPIO_Init+0x84>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <GPIO_Init+0x84>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a16      	ldr	r2, [pc, #88]	; (8001090 <GPIO_Init+0x84>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <GPIO_Init+0x84>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
	__HAL_RCC_GPIOA_CLK_SLEEP_DISABLE();
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <GPIO_Init+0x84>)
 800104c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <GPIO_Init+0x84>)
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	6513      	str	r3, [r2, #80]	; 0x50
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &ledgpio);
#endif

	buttongpio.Pin = GPIO_PIN_13;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	60bb      	str	r3, [r7, #8]
	buttongpio.Mode = GPIO_MODE_EVT_FALLING; //event falling-edge
 800105c:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 8001060:	60fb      	str	r3, [r7, #12]
	buttongpio.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &buttongpio);
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	4619      	mov	r1, r3
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <GPIO_Init+0x88>)
 800106e:	f000 fb75 	bl	800175c <HAL_GPIO_Init>
	//Do not need interrupt priority settings for events, as all that occurs is the event register will be set
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001078:	4807      	ldr	r0, [pc, #28]	; (8001098 <GPIO_Init+0x8c>)
 800107a:	f000 fd03 	bl	8001a84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2120      	movs	r1, #32
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <GPIO_Init+0x8c>)
 8001084:	f000 fcfe 	bl	8001a84 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	3730      	adds	r7, #48	; 0x30
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40020800 	.word	0x40020800
 8001098:	40020000 	.word	0x40020000

0800109c <UART2_Init>:

void UART2_Init(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

	huart2.Instance = USART2; //linking
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <UART2_Init+0x44>)
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <UART2_Init+0x48>)
 80010a4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 921600;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <UART2_Init+0x44>)
 80010a8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80010ac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <UART2_Init+0x44>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <UART2_Init+0x44>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <UART2_Init+0x44>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <UART2_Init+0x44>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <UART2_Init+0x44>)
 80010c8:	2208      	movs	r2, #8
 80010ca:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) {
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <UART2_Init+0x44>)
 80010ce:	f000 fd3f 	bl	8001b50 <HAL_UART_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <UART2_Init+0x40>

		//There is a problem
		Error_handler();
 80010d8:	f000 f82e 	bl	8001138 <Error_handler>
	}
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000220 	.word	0x20000220
 80010e4:	40004400 	.word	0x40004400

080010e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]

	//The UART Transmit in the while(1) loop occurs instead due to using events instead of interrupts
	if(HAL_UART_Transmit(&huart2, (uint8_t*)some_data, (uint16_t)strlen((char*)some_data), HAL_MAX_DELAY) != HAL_OK) {
 80010f2:	480a      	ldr	r0, [pc, #40]	; (800111c <HAL_GPIO_EXTI_Callback+0x34>)
 80010f4:	f7ff f88c 	bl	8000210 <strlen>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	4906      	ldr	r1, [pc, #24]	; (800111c <HAL_GPIO_EXTI_Callback+0x34>)
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <HAL_GPIO_EXTI_Callback+0x38>)
 8001104:	f000 fd71 	bl	8001bea <HAL_UART_Transmit>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_GPIO_EXTI_Callback+0x2a>
		Error_handler();
 800110e:	f000 f813 	bl	8001138 <Error_handler>
	}
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000000 	.word	0x20000000
 8001120:	20000220 	.word	0x20000220

08001124 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <Error_handler>:

void Error_handler(void) {
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

	while(1);
 800113c:	e7fe      	b.n	800113c <Error_handler+0x4>
	...

08001140 <HAL_MspInit>:
 *      Author: Oliver
 */

#include "main.h"

void HAL_MspInit(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	/* Low level processor specific inits */

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //not required, as this will set to default setting
 8001144:	2003      	movs	r0, #3
 8001146:	f000 fa29 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//System Control Block (SCB) -> System Handler Control and State Register (SHCSR)
	SCB->SHCSR |= (0x7 << 16);  //Set bits 16,17,18 (MEMFAULTENA, BUSFAULTENA, USGFAULTENA)
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_MspInit+0x40>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <HAL_MspInit+0x40>)
 8001150:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001154:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	f06f 000b 	mvn.w	r0, #11
 800115e:	f000 fa28 	bl	80015b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	f06f 000a 	mvn.w	r0, #10
 800116a:	f000 fa22 	bl	80015b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	f06f 0009 	mvn.w	r0, #9
 8001176:	f000 fa1c 	bl	80015b2 <HAL_NVIC_SetPriority>
	//HAL_Init() in main.c already takes care of SysTick_IRQn priority setting
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	/* Low level inits of the USART2 peripheral */

	//1. Enable the required peripheral clock for the USART2 and GPIOA peripherals
	__HAL_RCC_USART2_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	4b21      	ldr	r3, [pc, #132]	; (8001218 <HAL_UART_MspInit+0x94>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	4a20      	ldr	r2, [pc, #128]	; (8001218 <HAL_UART_MspInit+0x94>)
 8001196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119a:	6413      	str	r3, [r2, #64]	; 0x40
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <HAL_UART_MspInit+0x94>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART2_CLK_SLEEP_DISABLE(); //automatically disables/reenables UART2 clock during sleep and active periods.
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_UART_MspInit+0x94>)
 80011aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ac:	4a1a      	ldr	r2, [pc, #104]	; (8001218 <HAL_UART_MspInit+0x94>)
 80011ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011b2:	6613      	str	r3, [r2, #96]	; 0x60

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_UART_MspInit+0x94>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	4a16      	ldr	r2, [pc, #88]	; (8001218 <HAL_UART_MspInit+0x94>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6313      	str	r3, [r2, #48]	; 0x30
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_UART_MspInit+0x94>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

	//2. Pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //USART2_TX
 80011d0:	2304      	movs	r3, #4
 80011d2:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80011e0:	2307      	movs	r3, #7
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	480c      	ldr	r0, [pc, #48]	; (800121c <HAL_UART_MspInit+0x98>)
 80011ec:	f000 fab6 	bl	800175c <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //USART2_RX
 80011f0:	2308      	movs	r3, #8
 80011f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <HAL_UART_MspInit+0x98>)
 80011fc:	f000 faae 	bl	800175c <HAL_GPIO_Init>

	//3. Enable the peripheral IRQ in the NVIC
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001200:	2026      	movs	r0, #38	; 0x26
 8001202:	f000 f9f2 	bl	80015ea <HAL_NVIC_EnableIRQ>

	//4. Set the priorities based on application needs
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2026      	movs	r0, #38	; 0x26
 800120c:	f000 f9d1 	bl	80015b2 <HAL_NVIC_SetPriority>
}
 8001210:	bf00      	nop
 8001212:	3728      	adds	r7, #40	; 0x28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	40020000 	.word	0x40020000

08001220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <SystemInit+0x58>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122a:	4a13      	ldr	r2, [pc, #76]	; (8001278 <SystemInit+0x58>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t)0x00000001;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <SystemInit+0x5c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a10      	ldr	r2, [pc, #64]	; (800127c <SystemInit+0x5c>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <SystemInit+0x5c>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <SystemInit+0x5c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a0c      	ldr	r2, [pc, #48]	; (800127c <SystemInit+0x5c>)
 800124c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <SystemInit+0x5c>)
 8001258:	4a09      	ldr	r2, [pc, #36]	; (8001280 <SystemInit+0x60>)
 800125a:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t)0xFFFBFFFF;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <SystemInit+0x5c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <SystemInit+0x5c>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001266:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <SystemInit+0x5c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	40023800 	.word	0x40023800
 8001280:	24003010 	.word	0x24003010

08001284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800128a:	490e      	ldr	r1, [pc, #56]	; (80012c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800128c:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a0:	4c0b      	ldr	r4, [pc, #44]	; (80012d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012ae:	f7ff ffb7 	bl	8001220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b2:	f001 fbab 	bl	8002a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b6:	f7ff fe2d 	bl	8000f14 <main>
  bx  lr    
 80012ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80012c8:	08005c64 	.word	0x08005c64
  ldr r2, =_sbss
 80012cc:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80012d0:	20000278 	.word	0x20000278

080012d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <HAL_Init+0x40>)
 80012e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <HAL_Init+0x40>)
 80012ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_Init+0x40>)
 80012fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 f94b 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f808 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130c:	f7ff ff18 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023c00 	.word	0x40023c00

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x54>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x58>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f963 	bl	8001606 <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e00e      	b.n	8001368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d80a      	bhi.n	8001366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f000 f92b 	bl	80015b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_InitTick+0x5c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000001c 	.word	0x2000001c
 8001374:	20000024 	.word	0x20000024
 8001378:	20000020 	.word	0x20000020

0800137c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000024 	.word	0x20000024
 80013a0:	20000264 	.word	0x20000264

080013a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000264 	.word	0x20000264

080013bc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_SuspendTick+0x1c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <HAL_SuspendTick+0x1c>)
 80013c6:	f023 0302 	bic.w	r3, r3, #2
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_ResumeTick+0x1c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_ResumeTick+0x1c>)
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <__NVIC_EnableIRQ+0x38>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001568:	d301      	bcc.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <SysTick_Config+0x40>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	210f      	movs	r1, #15
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f7ff ff8e 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SysTick_Config+0x40>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SysTick_Config+0x40>)
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e000e010 	.word	0xe000e010

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff29 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff3e 	bl	8001444 <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff8e 	bl	80014f0 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5d 	bl	800149c <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff31 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffa2 	bl	8001558 <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001622:	f000 f802 	bl	800162a <HAL_SYSTICK_Callback>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001644:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001646:	f7ff fead 	bl	80013a4 <HAL_GetTick>
 800164a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d008      	beq.n	800166a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2280      	movs	r2, #128	; 0x80
 800165c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e052      	b.n	8001710 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0216 	bic.w	r2, r2, #22
 8001678:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001688:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <HAL_DMA_Abort+0x62>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0208 	bic.w	r2, r2, #8
 80016a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ba:	e013      	b.n	80016e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016bc:	f7ff fe72 	bl	80013a4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d90c      	bls.n	80016e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2220      	movs	r2, #32
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2203      	movs	r2, #3
 80016d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e015      	b.n	8001710 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1e4      	bne.n	80016bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f6:	223f      	movs	r2, #63	; 0x3f
 80016f8:	409a      	lsls	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d004      	beq.n	8001736 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00c      	b.n	8001750 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2205      	movs	r2, #5
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	e165      	b.n	8001a44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001778:	2201      	movs	r2, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	429a      	cmp	r2, r3
 8001792:	f040 8154 	bne.w	8001a3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d005      	beq.n	80017ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d130      	bne.n	8001810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e4:	2201      	movs	r2, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 0201 	and.w	r2, r3, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b03      	cmp	r3, #3
 800181a:	d017      	beq.n	800184c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d123      	bne.n	80018a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	69b9      	ldr	r1, [r7, #24]
 800189c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0203 	and.w	r2, r3, #3
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80ae 	beq.w	8001a3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_GPIO_Init+0x300>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a5c      	ldr	r2, [pc, #368]	; (8001a5c <HAL_GPIO_Init+0x300>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b5a      	ldr	r3, [pc, #360]	; (8001a5c <HAL_GPIO_Init+0x300>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fe:	4a58      	ldr	r2, [pc, #352]	; (8001a60 <HAL_GPIO_Init+0x304>)
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4f      	ldr	r2, [pc, #316]	; (8001a64 <HAL_GPIO_Init+0x308>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d025      	beq.n	8001976 <HAL_GPIO_Init+0x21a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4e      	ldr	r2, [pc, #312]	; (8001a68 <HAL_GPIO_Init+0x30c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01f      	beq.n	8001972 <HAL_GPIO_Init+0x216>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4d      	ldr	r2, [pc, #308]	; (8001a6c <HAL_GPIO_Init+0x310>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d019      	beq.n	800196e <HAL_GPIO_Init+0x212>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <HAL_GPIO_Init+0x314>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_GPIO_Init+0x20e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4b      	ldr	r2, [pc, #300]	; (8001a74 <HAL_GPIO_Init+0x318>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00d      	beq.n	8001966 <HAL_GPIO_Init+0x20a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4a      	ldr	r2, [pc, #296]	; (8001a78 <HAL_GPIO_Init+0x31c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d007      	beq.n	8001962 <HAL_GPIO_Init+0x206>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a49      	ldr	r2, [pc, #292]	; (8001a7c <HAL_GPIO_Init+0x320>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_GPIO_Init+0x202>
 800195a:	2306      	movs	r3, #6
 800195c:	e00c      	b.n	8001978 <HAL_GPIO_Init+0x21c>
 800195e:	2307      	movs	r3, #7
 8001960:	e00a      	b.n	8001978 <HAL_GPIO_Init+0x21c>
 8001962:	2305      	movs	r3, #5
 8001964:	e008      	b.n	8001978 <HAL_GPIO_Init+0x21c>
 8001966:	2304      	movs	r3, #4
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x21c>
 800196a:	2303      	movs	r3, #3
 800196c:	e004      	b.n	8001978 <HAL_GPIO_Init+0x21c>
 800196e:	2302      	movs	r3, #2
 8001970:	e002      	b.n	8001978 <HAL_GPIO_Init+0x21c>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x21c>
 8001976:	2300      	movs	r3, #0
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	f002 0203 	and.w	r2, r2, #3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4093      	lsls	r3, r2
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001988:	4935      	ldr	r1, [pc, #212]	; (8001a60 <HAL_GPIO_Init+0x304>)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001996:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <HAL_GPIO_Init+0x324>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ba:	4a31      	ldr	r2, [pc, #196]	; (8001a80 <HAL_GPIO_Init+0x324>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019c0:	4b2f      	ldr	r3, [pc, #188]	; (8001a80 <HAL_GPIO_Init+0x324>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e4:	4a26      	ldr	r2, [pc, #152]	; (8001a80 <HAL_GPIO_Init+0x324>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <HAL_GPIO_Init+0x324>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0e:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <HAL_GPIO_Init+0x324>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <HAL_GPIO_Init+0x324>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <HAL_GPIO_Init+0x324>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	f67f ae96 	bls.w	8001778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40013800 	.word	0x40013800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40021400 	.word	0x40021400
 8001a7c:	40021800 	.word	0x40021800
 8001a80:	40013c00 	.word	0x40013c00

08001a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa0:	e003      	b.n	8001aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	041a      	lsls	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	619a      	str	r2, [r3, #24]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fb06 	bl	80010e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_RCC_GetHCLKFreq+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	2000001c 	.word	0x2000001c

08001b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b04:	f7ff fff0 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	0a9b      	lsrs	r3, r3, #10
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4903      	ldr	r1, [pc, #12]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08005868 	.word	0x08005868

08001b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b2c:	f7ff ffdc 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	0b5b      	lsrs	r3, r3, #13
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	08005868 	.word	0x08005868

08001b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e03f      	b.n	8001be2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fb04 	bl	8001184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2224      	movs	r2, #36	; 0x24
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fd71 	bl	800267c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b08a      	sub	sp, #40	; 0x28
 8001bee:	af02      	add	r7, sp, #8
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b20      	cmp	r3, #32
 8001c08:	d17c      	bne.n	8001d04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_UART_Transmit+0x2c>
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e075      	b.n	8001d06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_UART_Transmit+0x3e>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e06e      	b.n	8001d06 <HAL_UART_Transmit+0x11c>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2221      	movs	r2, #33	; 0x21
 8001c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c3e:	f7ff fbb1 	bl	80013a4 <HAL_GetTick>
 8001c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	88fa      	ldrh	r2, [r7, #6]
 8001c48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	88fa      	ldrh	r2, [r7, #6]
 8001c4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c58:	d108      	bne.n	8001c6c <HAL_UART_Transmit+0x82>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d104      	bne.n	8001c6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	e003      	b.n	8001c74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c7c:	e02a      	b.n	8001cd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2200      	movs	r2, #0
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 faef 	bl	800226c <UART_WaitOnFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e036      	b.n	8001d06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	e007      	b.n	8001cc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1cf      	bne.n	8001c7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2140      	movs	r1, #64	; 0x40
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 fabf 	bl	800226c <UART_WaitOnFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e006      	b.n	8001d06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	e000      	b.n	8001d06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d04:	2302      	movs	r3, #2
  }
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3720      	adds	r7, #32
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0ba      	sub	sp, #232	; 0xe8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <HAL_UART_IRQHandler+0x66>
 8001d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fbc9 	bl	8002506 <UART_Receive_IT>
      return;
 8001d74:	e256      	b.n	8002224 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80de 	beq.w	8001f3c <HAL_UART_IRQHandler+0x22c>
 8001d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d106      	bne.n	8001d9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80d1 	beq.w	8001f3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <HAL_UART_IRQHandler+0xae>
 8001da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f043 0201 	orr.w	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HAL_UART_IRQHandler+0xd2>
 8001dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f043 0202 	orr.w	r2, r3, #2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_UART_IRQHandler+0xf6>
 8001dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f043 0204 	orr.w	r2, r3, #4
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d011      	beq.n	8001e36 <HAL_UART_IRQHandler+0x126>
 8001e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f043 0208 	orr.w	r2, r3, #8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 81ed 	beq.w	800221a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_UART_IRQHandler+0x14e>
 8001e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fb54 	bl	8002506 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d103      	bne.n	8001e8a <HAL_UART_IRQHandler+0x17a>
 8001e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d04f      	beq.n	8001f2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fa5c 	bl	8002348 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9a:	2b40      	cmp	r3, #64	; 0x40
 8001e9c:	d141      	bne.n	8001f22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3314      	adds	r3, #20
 8001ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eac:	e853 3f00 	ldrex	r3, [r3]
 8001eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	3314      	adds	r3, #20
 8001ec6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001eca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001ed6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001eda:	e841 2300 	strex	r3, r2, [r1]
 8001ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1d9      	bne.n	8001e9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d013      	beq.n	8001f1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	4a7d      	ldr	r2, [pc, #500]	; (80020ec <HAL_UART_IRQHandler+0x3dc>)
 8001ef8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fc0a 	bl	8001718 <HAL_DMA_Abort_IT>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d016      	beq.n	8001f38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f14:	4610      	mov	r0, r2
 8001f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f18:	e00e      	b.n	8001f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f990 	bl	8002240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f20:	e00a      	b.n	8001f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f98c 	bl	8002240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f28:	e006      	b.n	8001f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f988 	bl	8002240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001f36:	e170      	b.n	800221a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f38:	bf00      	nop
    return;
 8001f3a:	e16e      	b.n	800221a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	f040 814a 	bne.w	80021da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8143 	beq.w	80021da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 813c 	beq.w	80021da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f82:	2b40      	cmp	r3, #64	; 0x40
 8001f84:	f040 80b4 	bne.w	80020f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8140 	beq.w	800221e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	f080 8139 	bcs.w	800221e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fbe:	f000 8088 	beq.w	80020d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fd0:	e853 3f00 	ldrex	r3, [r3]
 8001fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	330c      	adds	r3, #12
 8001fea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001fee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ffe:	e841 2300 	strex	r3, r2, [r1]
 8002002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1d9      	bne.n	8001fc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3314      	adds	r3, #20
 8002014:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002018:	e853 3f00 	ldrex	r3, [r3]
 800201c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800201e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3314      	adds	r3, #20
 800202e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002032:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002036:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002038:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800203a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800203e:	e841 2300 	strex	r3, r2, [r1]
 8002042:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1e1      	bne.n	800200e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3314      	adds	r3, #20
 8002050:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002054:	e853 3f00 	ldrex	r3, [r3]
 8002058:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800205a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800205c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3314      	adds	r3, #20
 800206a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800206e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002070:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002072:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002074:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002076:	e841 2300 	strex	r3, r2, [r1]
 800207a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800207c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1e3      	bne.n	800204a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330c      	adds	r3, #12
 8002096:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209a:	e853 3f00 	ldrex	r3, [r3]
 800209e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a2:	f023 0310 	bic.w	r3, r3, #16
 80020a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	330c      	adds	r3, #12
 80020b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80020b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020bc:	e841 2300 	strex	r3, r2, [r1]
 80020c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80020c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e3      	bne.n	8002090 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fab3 	bl	8001638 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020da:	b29b      	uxth	r3, r3
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f8b6 	bl	8002254 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020e8:	e099      	b.n	800221e <HAL_UART_IRQHandler+0x50e>
 80020ea:	bf00      	nop
 80020ec:	0800240f 	.word	0x0800240f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 808b 	beq.w	8002222 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800210c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8086 	beq.w	8002222 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	330c      	adds	r3, #12
 800211c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002120:	e853 3f00 	ldrex	r3, [r3]
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800212c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	330c      	adds	r3, #12
 8002136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800213a:	647a      	str	r2, [r7, #68]	; 0x44
 800213c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800213e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002142:	e841 2300 	strex	r3, r2, [r1]
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e3      	bne.n	8002116 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3314      	adds	r3, #20
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	e853 3f00 	ldrex	r3, [r3]
 800215c:	623b      	str	r3, [r7, #32]
   return(result);
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3314      	adds	r3, #20
 800216e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002172:	633a      	str	r2, [r7, #48]	; 0x30
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800217a:	e841 2300 	strex	r3, r2, [r1]
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1e3      	bne.n	800214e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	330c      	adds	r3, #12
 800219a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	e853 3f00 	ldrex	r3, [r3]
 80021a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0310 	bic.w	r3, r3, #16
 80021aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	330c      	adds	r3, #12
 80021b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021b8:	61fa      	str	r2, [r7, #28]
 80021ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021bc:	69b9      	ldr	r1, [r7, #24]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	e841 2300 	strex	r3, r2, [r1]
 80021c4:	617b      	str	r3, [r7, #20]
   return(result);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e3      	bne.n	8002194 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f83e 	bl	8002254 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021d8:	e023      	b.n	8002222 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_UART_IRQHandler+0x4ea>
 80021e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f91f 	bl	8002436 <UART_Transmit_IT>
    return;
 80021f8:	e014      	b.n	8002224 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00e      	beq.n	8002224 <HAL_UART_IRQHandler+0x514>
 8002206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f95f 	bl	80024d6 <UART_EndTransmit_IT>
    return;
 8002218:	e004      	b.n	8002224 <HAL_UART_IRQHandler+0x514>
    return;
 800221a:	bf00      	nop
 800221c:	e002      	b.n	8002224 <HAL_UART_IRQHandler+0x514>
      return;
 800221e:	bf00      	nop
 8002220:	e000      	b.n	8002224 <HAL_UART_IRQHandler+0x514>
      return;
 8002222:	bf00      	nop
  }
}
 8002224:	37e8      	adds	r7, #232	; 0xe8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop

0800222c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b090      	sub	sp, #64	; 0x40
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800227c:	e050      	b.n	8002320 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d04c      	beq.n	8002320 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <UART_WaitOnFlagUntilTimeout+0x30>
 800228c:	f7ff f88a 	bl	80013a4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002298:	429a      	cmp	r2, r3
 800229a:	d241      	bcs.n	8002320 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	330c      	adds	r3, #12
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	e853 3f00 	ldrex	r3, [r3]
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	330c      	adds	r3, #12
 80022ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022bc:	637a      	str	r2, [r7, #52]	; 0x34
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c4:	e841 2300 	strex	r3, r2, [r1]
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1e5      	bne.n	800229c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3314      	adds	r3, #20
 80022d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	e853 3f00 	ldrex	r3, [r3]
 80022de:	613b      	str	r3, [r7, #16]
   return(result);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f023 0301 	bic.w	r3, r3, #1
 80022e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3314      	adds	r3, #20
 80022ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022f0:	623a      	str	r2, [r7, #32]
 80022f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f4:	69f9      	ldr	r1, [r7, #28]
 80022f6:	6a3a      	ldr	r2, [r7, #32]
 80022f8:	e841 2300 	strex	r3, r2, [r1]
 80022fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1e5      	bne.n	80022d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e00f      	b.n	8002340 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	4013      	ands	r3, r2
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	429a      	cmp	r2, r3
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	429a      	cmp	r2, r3
 800233c:	d09f      	beq.n	800227e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3740      	adds	r7, #64	; 0x40
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002348:	b480      	push	{r7}
 800234a:	b095      	sub	sp, #84	; 0x54
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	330c      	adds	r3, #12
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235a:	e853 3f00 	ldrex	r3, [r3]
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	330c      	adds	r3, #12
 800236e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002370:	643a      	str	r2, [r7, #64]	; 0x40
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002374:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002376:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002378:	e841 2300 	strex	r3, r2, [r1]
 800237c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e5      	bne.n	8002350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3314      	adds	r3, #20
 800238a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	e853 3f00 	ldrex	r3, [r3]
 8002392:	61fb      	str	r3, [r7, #28]
   return(result);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	64bb      	str	r3, [r7, #72]	; 0x48
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3314      	adds	r3, #20
 80023a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ac:	e841 2300 	strex	r3, r2, [r1]
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e5      	bne.n	8002384 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d119      	bne.n	80023f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	330c      	adds	r3, #12
 80023c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	e853 3f00 	ldrex	r3, [r3]
 80023ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f023 0310 	bic.w	r3, r3, #16
 80023d6:	647b      	str	r3, [r7, #68]	; 0x44
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	330c      	adds	r3, #12
 80023de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023e0:	61ba      	str	r2, [r7, #24]
 80023e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e4:	6979      	ldr	r1, [r7, #20]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	e841 2300 	strex	r3, r2, [r1]
 80023ec:	613b      	str	r3, [r7, #16]
   return(result);
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1e5      	bne.n	80023c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002402:	bf00      	nop
 8002404:	3754      	adds	r7, #84	; 0x54
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7ff ff09 	bl	8002240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b21      	cmp	r3, #33	; 0x21
 8002448:	d13e      	bne.n	80024c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002452:	d114      	bne.n	800247e <UART_Transmit_IT+0x48>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d110      	bne.n	800247e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002470:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	1c9a      	adds	r2, r3, #2
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	621a      	str	r2, [r3, #32]
 800247c:	e008      	b.n	8002490 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	1c59      	adds	r1, r3, #1
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6211      	str	r1, [r2, #32]
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29b      	uxth	r3, r3
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4619      	mov	r1, r3
 800249e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10f      	bne.n	80024c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e000      	b.n	80024ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024c8:	2302      	movs	r3, #2
  }
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe fe14 	bl	8001124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b08c      	sub	sp, #48	; 0x30
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b22      	cmp	r3, #34	; 0x22
 8002518:	f040 80ab 	bne.w	8002672 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002524:	d117      	bne.n	8002556 <UART_Receive_IT+0x50>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d113      	bne.n	8002556 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800252e:	2300      	movs	r3, #0
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	b29b      	uxth	r3, r3
 8002540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002544:	b29a      	uxth	r2, r3
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	1c9a      	adds	r2, r3, #2
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
 8002554:	e026      	b.n	80025a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800255c:	2300      	movs	r3, #0
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002568:	d007      	beq.n	800257a <UART_Receive_IT+0x74>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <UART_Receive_IT+0x82>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e008      	b.n	800259a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002594:	b2da      	uxtb	r2, r3
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4619      	mov	r1, r3
 80025b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d15a      	bne.n	800266e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0220 	bic.w	r2, r2, #32
 80025c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d135      	bne.n	8002664 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	330c      	adds	r3, #12
 8002604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	e853 3f00 	ldrex	r3, [r3]
 800260c:	613b      	str	r3, [r7, #16]
   return(result);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f023 0310 	bic.w	r3, r3, #16
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	330c      	adds	r3, #12
 800261c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261e:	623a      	str	r2, [r7, #32]
 8002620:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002622:	69f9      	ldr	r1, [r7, #28]
 8002624:	6a3a      	ldr	r2, [r7, #32]
 8002626:	e841 2300 	strex	r3, r2, [r1]
 800262a:	61bb      	str	r3, [r7, #24]
   return(result);
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1e5      	bne.n	80025fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b10      	cmp	r3, #16
 800263e:	d10a      	bne.n	8002656 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800265a:	4619      	mov	r1, r3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff fdf9 	bl	8002254 <HAL_UARTEx_RxEventCallback>
 8002662:	e002      	b.n	800266a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff fde1 	bl	800222c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e002      	b.n	8002674 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002672:	2302      	movs	r3, #2
  }
}
 8002674:	4618      	mov	r0, r3
 8002676:	3730      	adds	r7, #48	; 0x30
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800267c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002680:	b09f      	sub	sp, #124	; 0x7c
 8002682:	af00      	add	r7, sp, #0
 8002684:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002692:	68d9      	ldr	r1, [r3, #12]
 8002694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	ea40 0301 	orr.w	r3, r0, r1
 800269c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800269e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80026b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026c0:	f021 010c 	bic.w	r1, r1, #12
 80026c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026ca:	430b      	orrs	r3, r1
 80026cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026da:	6999      	ldr	r1, [r3, #24]
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	ea40 0301 	orr.w	r3, r0, r1
 80026e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4bc5      	ldr	r3, [pc, #788]	; (8002a00 <UART_SetConfig+0x384>)
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d004      	beq.n	80026fa <UART_SetConfig+0x7e>
 80026f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4bc3      	ldr	r3, [pc, #780]	; (8002a04 <UART_SetConfig+0x388>)
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d103      	bne.n	8002702 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026fa:	f7ff fa15 	bl	8001b28 <HAL_RCC_GetPCLK2Freq>
 80026fe:	6778      	str	r0, [r7, #116]	; 0x74
 8002700:	e002      	b.n	8002708 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002702:	f7ff f9fd 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
 8002706:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002710:	f040 80b6 	bne.w	8002880 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002716:	461c      	mov	r4, r3
 8002718:	f04f 0500 	mov.w	r5, #0
 800271c:	4622      	mov	r2, r4
 800271e:	462b      	mov	r3, r5
 8002720:	1891      	adds	r1, r2, r2
 8002722:	6439      	str	r1, [r7, #64]	; 0x40
 8002724:	415b      	adcs	r3, r3
 8002726:	647b      	str	r3, [r7, #68]	; 0x44
 8002728:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800272c:	1912      	adds	r2, r2, r4
 800272e:	eb45 0303 	adc.w	r3, r5, r3
 8002732:	f04f 0000 	mov.w	r0, #0
 8002736:	f04f 0100 	mov.w	r1, #0
 800273a:	00d9      	lsls	r1, r3, #3
 800273c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002740:	00d0      	lsls	r0, r2, #3
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	1911      	adds	r1, r2, r4
 8002748:	6639      	str	r1, [r7, #96]	; 0x60
 800274a:	416b      	adcs	r3, r5
 800274c:	667b      	str	r3, [r7, #100]	; 0x64
 800274e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	461a      	mov	r2, r3
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	1891      	adds	r1, r2, r2
 800275a:	63b9      	str	r1, [r7, #56]	; 0x38
 800275c:	415b      	adcs	r3, r3
 800275e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002764:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002768:	f7fe fa3e 	bl	8000be8 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4ba5      	ldr	r3, [pc, #660]	; (8002a08 <UART_SetConfig+0x38c>)
 8002772:	fba3 2302 	umull	r2, r3, r3, r2
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	011e      	lsls	r6, r3, #4
 800277a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277c:	461c      	mov	r4, r3
 800277e:	f04f 0500 	mov.w	r5, #0
 8002782:	4622      	mov	r2, r4
 8002784:	462b      	mov	r3, r5
 8002786:	1891      	adds	r1, r2, r2
 8002788:	6339      	str	r1, [r7, #48]	; 0x30
 800278a:	415b      	adcs	r3, r3
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
 800278e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002792:	1912      	adds	r2, r2, r4
 8002794:	eb45 0303 	adc.w	r3, r5, r3
 8002798:	f04f 0000 	mov.w	r0, #0
 800279c:	f04f 0100 	mov.w	r1, #0
 80027a0:	00d9      	lsls	r1, r3, #3
 80027a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027a6:	00d0      	lsls	r0, r2, #3
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	1911      	adds	r1, r2, r4
 80027ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80027b0:	416b      	adcs	r3, r5
 80027b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	461a      	mov	r2, r3
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	1891      	adds	r1, r2, r2
 80027c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80027c2:	415b      	adcs	r3, r3
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80027ce:	f7fe fa0b 	bl	8000be8 <__aeabi_uldivmod>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4b8c      	ldr	r3, [pc, #560]	; (8002a08 <UART_SetConfig+0x38c>)
 80027d8:	fba3 1302 	umull	r1, r3, r3, r2
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	2164      	movs	r1, #100	; 0x64
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	3332      	adds	r3, #50	; 0x32
 80027ea:	4a87      	ldr	r2, [pc, #540]	; (8002a08 <UART_SetConfig+0x38c>)
 80027ec:	fba2 2303 	umull	r2, r3, r2, r3
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027f8:	441e      	add	r6, r3
 80027fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fc:	4618      	mov	r0, r3
 80027fe:	f04f 0100 	mov.w	r1, #0
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	1894      	adds	r4, r2, r2
 8002808:	623c      	str	r4, [r7, #32]
 800280a:	415b      	adcs	r3, r3
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
 800280e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002812:	1812      	adds	r2, r2, r0
 8002814:	eb41 0303 	adc.w	r3, r1, r3
 8002818:	f04f 0400 	mov.w	r4, #0
 800281c:	f04f 0500 	mov.w	r5, #0
 8002820:	00dd      	lsls	r5, r3, #3
 8002822:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002826:	00d4      	lsls	r4, r2, #3
 8002828:	4622      	mov	r2, r4
 800282a:	462b      	mov	r3, r5
 800282c:	1814      	adds	r4, r2, r0
 800282e:	653c      	str	r4, [r7, #80]	; 0x50
 8002830:	414b      	adcs	r3, r1
 8002832:	657b      	str	r3, [r7, #84]	; 0x54
 8002834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	461a      	mov	r2, r3
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	1891      	adds	r1, r2, r2
 8002840:	61b9      	str	r1, [r7, #24]
 8002842:	415b      	adcs	r3, r3
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800284a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800284e:	f7fe f9cb 	bl	8000be8 <__aeabi_uldivmod>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4b6c      	ldr	r3, [pc, #432]	; (8002a08 <UART_SetConfig+0x38c>)
 8002858:	fba3 1302 	umull	r1, r3, r3, r2
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	2164      	movs	r1, #100	; 0x64
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	3332      	adds	r3, #50	; 0x32
 800286a:	4a67      	ldr	r2, [pc, #412]	; (8002a08 <UART_SetConfig+0x38c>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	095b      	lsrs	r3, r3, #5
 8002872:	f003 0207 	and.w	r2, r3, #7
 8002876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4432      	add	r2, r6
 800287c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800287e:	e0b9      	b.n	80029f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002882:	461c      	mov	r4, r3
 8002884:	f04f 0500 	mov.w	r5, #0
 8002888:	4622      	mov	r2, r4
 800288a:	462b      	mov	r3, r5
 800288c:	1891      	adds	r1, r2, r2
 800288e:	6139      	str	r1, [r7, #16]
 8002890:	415b      	adcs	r3, r3
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002898:	1912      	adds	r2, r2, r4
 800289a:	eb45 0303 	adc.w	r3, r5, r3
 800289e:	f04f 0000 	mov.w	r0, #0
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	00d9      	lsls	r1, r3, #3
 80028a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028ac:	00d0      	lsls	r0, r2, #3
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	eb12 0804 	adds.w	r8, r2, r4
 80028b6:	eb43 0905 	adc.w	r9, r3, r5
 80028ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4618      	mov	r0, r3
 80028c0:	f04f 0100 	mov.w	r1, #0
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	008b      	lsls	r3, r1, #2
 80028ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80028d2:	0082      	lsls	r2, r0, #2
 80028d4:	4640      	mov	r0, r8
 80028d6:	4649      	mov	r1, r9
 80028d8:	f7fe f986 	bl	8000be8 <__aeabi_uldivmod>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4b49      	ldr	r3, [pc, #292]	; (8002a08 <UART_SetConfig+0x38c>)
 80028e2:	fba3 2302 	umull	r2, r3, r3, r2
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	011e      	lsls	r6, r3, #4
 80028ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ec:	4618      	mov	r0, r3
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	1894      	adds	r4, r2, r2
 80028f8:	60bc      	str	r4, [r7, #8]
 80028fa:	415b      	adcs	r3, r3
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002902:	1812      	adds	r2, r2, r0
 8002904:	eb41 0303 	adc.w	r3, r1, r3
 8002908:	f04f 0400 	mov.w	r4, #0
 800290c:	f04f 0500 	mov.w	r5, #0
 8002910:	00dd      	lsls	r5, r3, #3
 8002912:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002916:	00d4      	lsls	r4, r2, #3
 8002918:	4622      	mov	r2, r4
 800291a:	462b      	mov	r3, r5
 800291c:	1814      	adds	r4, r2, r0
 800291e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002920:	414b      	adcs	r3, r1
 8002922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	f04f 0100 	mov.w	r1, #0
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	008b      	lsls	r3, r1, #2
 8002938:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800293c:	0082      	lsls	r2, r0, #2
 800293e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002942:	f7fe f951 	bl	8000be8 <__aeabi_uldivmod>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <UART_SetConfig+0x38c>)
 800294c:	fba3 1302 	umull	r1, r3, r3, r2
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	2164      	movs	r1, #100	; 0x64
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	3332      	adds	r3, #50	; 0x32
 800295e:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <UART_SetConfig+0x38c>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800296a:	441e      	add	r6, r3
 800296c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296e:	4618      	mov	r0, r3
 8002970:	f04f 0100 	mov.w	r1, #0
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	1894      	adds	r4, r2, r2
 800297a:	603c      	str	r4, [r7, #0]
 800297c:	415b      	adcs	r3, r3
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002984:	1812      	adds	r2, r2, r0
 8002986:	eb41 0303 	adc.w	r3, r1, r3
 800298a:	f04f 0400 	mov.w	r4, #0
 800298e:	f04f 0500 	mov.w	r5, #0
 8002992:	00dd      	lsls	r5, r3, #3
 8002994:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002998:	00d4      	lsls	r4, r2, #3
 800299a:	4622      	mov	r2, r4
 800299c:	462b      	mov	r3, r5
 800299e:	eb12 0a00 	adds.w	sl, r2, r0
 80029a2:	eb43 0b01 	adc.w	fp, r3, r1
 80029a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f04f 0100 	mov.w	r1, #0
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	008b      	lsls	r3, r1, #2
 80029ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029be:	0082      	lsls	r2, r0, #2
 80029c0:	4650      	mov	r0, sl
 80029c2:	4659      	mov	r1, fp
 80029c4:	f7fe f910 	bl	8000be8 <__aeabi_uldivmod>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <UART_SetConfig+0x38c>)
 80029ce:	fba3 1302 	umull	r1, r3, r3, r2
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2164      	movs	r1, #100	; 0x64
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	3332      	adds	r3, #50	; 0x32
 80029e0:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <UART_SetConfig+0x38c>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	f003 020f 	and.w	r2, r3, #15
 80029ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4432      	add	r2, r6
 80029f2:	609a      	str	r2, [r3, #8]
}
 80029f4:	bf00      	nop
 80029f6:	377c      	adds	r7, #124	; 0x7c
 80029f8:	46bd      	mov	sp, r7
 80029fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029fe:	bf00      	nop
 8002a00:	40011000 	.word	0x40011000
 8002a04:	40011400 	.word	0x40011400
 8002a08:	51eb851f 	.word	0x51eb851f

08002a0c <__libc_init_array>:
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	4d0d      	ldr	r5, [pc, #52]	; (8002a44 <__libc_init_array+0x38>)
 8002a10:	4c0d      	ldr	r4, [pc, #52]	; (8002a48 <__libc_init_array+0x3c>)
 8002a12:	1b64      	subs	r4, r4, r5
 8002a14:	10a4      	asrs	r4, r4, #2
 8002a16:	2600      	movs	r6, #0
 8002a18:	42a6      	cmp	r6, r4
 8002a1a:	d109      	bne.n	8002a30 <__libc_init_array+0x24>
 8002a1c:	4d0b      	ldr	r5, [pc, #44]	; (8002a4c <__libc_init_array+0x40>)
 8002a1e:	4c0c      	ldr	r4, [pc, #48]	; (8002a50 <__libc_init_array+0x44>)
 8002a20:	f002 ff04 	bl	800582c <_init>
 8002a24:	1b64      	subs	r4, r4, r5
 8002a26:	10a4      	asrs	r4, r4, #2
 8002a28:	2600      	movs	r6, #0
 8002a2a:	42a6      	cmp	r6, r4
 8002a2c:	d105      	bne.n	8002a3a <__libc_init_array+0x2e>
 8002a2e:	bd70      	pop	{r4, r5, r6, pc}
 8002a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a34:	4798      	blx	r3
 8002a36:	3601      	adds	r6, #1
 8002a38:	e7ee      	b.n	8002a18 <__libc_init_array+0xc>
 8002a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3e:	4798      	blx	r3
 8002a40:	3601      	adds	r6, #1
 8002a42:	e7f2      	b.n	8002a2a <__libc_init_array+0x1e>
 8002a44:	08005c5c 	.word	0x08005c5c
 8002a48:	08005c5c 	.word	0x08005c5c
 8002a4c:	08005c5c 	.word	0x08005c5c
 8002a50:	08005c60 	.word	0x08005c60

08002a54 <memset>:
 8002a54:	4402      	add	r2, r0
 8002a56:	4603      	mov	r3, r0
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d100      	bne.n	8002a5e <memset+0xa>
 8002a5c:	4770      	bx	lr
 8002a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a62:	e7f9      	b.n	8002a58 <memset+0x4>

08002a64 <__cvt>:
 8002a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a68:	ec55 4b10 	vmov	r4, r5, d0
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	460e      	mov	r6, r1
 8002a70:	4619      	mov	r1, r3
 8002a72:	462b      	mov	r3, r5
 8002a74:	bfbb      	ittet	lt
 8002a76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002a7a:	461d      	movlt	r5, r3
 8002a7c:	2300      	movge	r3, #0
 8002a7e:	232d      	movlt	r3, #45	; 0x2d
 8002a80:	700b      	strb	r3, [r1, #0]
 8002a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002a84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002a88:	4691      	mov	r9, r2
 8002a8a:	f023 0820 	bic.w	r8, r3, #32
 8002a8e:	bfbc      	itt	lt
 8002a90:	4622      	movlt	r2, r4
 8002a92:	4614      	movlt	r4, r2
 8002a94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002a98:	d005      	beq.n	8002aa6 <__cvt+0x42>
 8002a9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002a9e:	d100      	bne.n	8002aa2 <__cvt+0x3e>
 8002aa0:	3601      	adds	r6, #1
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	e000      	b.n	8002aa8 <__cvt+0x44>
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	ab03      	add	r3, sp, #12
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	ab02      	add	r3, sp, #8
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	ec45 4b10 	vmov	d0, r4, r5
 8002ab4:	4653      	mov	r3, sl
 8002ab6:	4632      	mov	r2, r6
 8002ab8:	f000 fcea 	bl	8003490 <_dtoa_r>
 8002abc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002ac0:	4607      	mov	r7, r0
 8002ac2:	d102      	bne.n	8002aca <__cvt+0x66>
 8002ac4:	f019 0f01 	tst.w	r9, #1
 8002ac8:	d022      	beq.n	8002b10 <__cvt+0xac>
 8002aca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ace:	eb07 0906 	add.w	r9, r7, r6
 8002ad2:	d110      	bne.n	8002af6 <__cvt+0x92>
 8002ad4:	783b      	ldrb	r3, [r7, #0]
 8002ad6:	2b30      	cmp	r3, #48	; 0x30
 8002ad8:	d10a      	bne.n	8002af0 <__cvt+0x8c>
 8002ada:	2200      	movs	r2, #0
 8002adc:	2300      	movs	r3, #0
 8002ade:	4620      	mov	r0, r4
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	f7fe f811 	bl	8000b08 <__aeabi_dcmpeq>
 8002ae6:	b918      	cbnz	r0, 8002af0 <__cvt+0x8c>
 8002ae8:	f1c6 0601 	rsb	r6, r6, #1
 8002aec:	f8ca 6000 	str.w	r6, [sl]
 8002af0:	f8da 3000 	ldr.w	r3, [sl]
 8002af4:	4499      	add	r9, r3
 8002af6:	2200      	movs	r2, #0
 8002af8:	2300      	movs	r3, #0
 8002afa:	4620      	mov	r0, r4
 8002afc:	4629      	mov	r1, r5
 8002afe:	f7fe f803 	bl	8000b08 <__aeabi_dcmpeq>
 8002b02:	b108      	cbz	r0, 8002b08 <__cvt+0xa4>
 8002b04:	f8cd 900c 	str.w	r9, [sp, #12]
 8002b08:	2230      	movs	r2, #48	; 0x30
 8002b0a:	9b03      	ldr	r3, [sp, #12]
 8002b0c:	454b      	cmp	r3, r9
 8002b0e:	d307      	bcc.n	8002b20 <__cvt+0xbc>
 8002b10:	9b03      	ldr	r3, [sp, #12]
 8002b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b14:	1bdb      	subs	r3, r3, r7
 8002b16:	4638      	mov	r0, r7
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	b004      	add	sp, #16
 8002b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b20:	1c59      	adds	r1, r3, #1
 8002b22:	9103      	str	r1, [sp, #12]
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e7f0      	b.n	8002b0a <__cvt+0xa6>

08002b28 <__exponent>:
 8002b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	bfb8      	it	lt
 8002b30:	4249      	neglt	r1, r1
 8002b32:	f803 2b02 	strb.w	r2, [r3], #2
 8002b36:	bfb4      	ite	lt
 8002b38:	222d      	movlt	r2, #45	; 0x2d
 8002b3a:	222b      	movge	r2, #43	; 0x2b
 8002b3c:	2909      	cmp	r1, #9
 8002b3e:	7042      	strb	r2, [r0, #1]
 8002b40:	dd2a      	ble.n	8002b98 <__exponent+0x70>
 8002b42:	f10d 0407 	add.w	r4, sp, #7
 8002b46:	46a4      	mov	ip, r4
 8002b48:	270a      	movs	r7, #10
 8002b4a:	46a6      	mov	lr, r4
 8002b4c:	460a      	mov	r2, r1
 8002b4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8002b52:	fb07 1516 	mls	r5, r7, r6, r1
 8002b56:	3530      	adds	r5, #48	; 0x30
 8002b58:	2a63      	cmp	r2, #99	; 0x63
 8002b5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8002b5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002b62:	4631      	mov	r1, r6
 8002b64:	dcf1      	bgt.n	8002b4a <__exponent+0x22>
 8002b66:	3130      	adds	r1, #48	; 0x30
 8002b68:	f1ae 0502 	sub.w	r5, lr, #2
 8002b6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002b70:	1c44      	adds	r4, r0, #1
 8002b72:	4629      	mov	r1, r5
 8002b74:	4561      	cmp	r1, ip
 8002b76:	d30a      	bcc.n	8002b8e <__exponent+0x66>
 8002b78:	f10d 0209 	add.w	r2, sp, #9
 8002b7c:	eba2 020e 	sub.w	r2, r2, lr
 8002b80:	4565      	cmp	r5, ip
 8002b82:	bf88      	it	hi
 8002b84:	2200      	movhi	r2, #0
 8002b86:	4413      	add	r3, r2
 8002b88:	1a18      	subs	r0, r3, r0
 8002b8a:	b003      	add	sp, #12
 8002b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b92:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002b96:	e7ed      	b.n	8002b74 <__exponent+0x4c>
 8002b98:	2330      	movs	r3, #48	; 0x30
 8002b9a:	3130      	adds	r1, #48	; 0x30
 8002b9c:	7083      	strb	r3, [r0, #2]
 8002b9e:	70c1      	strb	r1, [r0, #3]
 8002ba0:	1d03      	adds	r3, r0, #4
 8002ba2:	e7f1      	b.n	8002b88 <__exponent+0x60>

08002ba4 <_printf_float>:
 8002ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba8:	ed2d 8b02 	vpush	{d8}
 8002bac:	b08d      	sub	sp, #52	; 0x34
 8002bae:	460c      	mov	r4, r1
 8002bb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002bb4:	4616      	mov	r6, r2
 8002bb6:	461f      	mov	r7, r3
 8002bb8:	4605      	mov	r5, r0
 8002bba:	f001 fa55 	bl	8004068 <_localeconv_r>
 8002bbe:	f8d0 a000 	ldr.w	sl, [r0]
 8002bc2:	4650      	mov	r0, sl
 8002bc4:	f7fd fb24 	bl	8000210 <strlen>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	930a      	str	r3, [sp, #40]	; 0x28
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	9305      	str	r3, [sp, #20]
 8002bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8002bd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002bd8:	3307      	adds	r3, #7
 8002bda:	f023 0307 	bic.w	r3, r3, #7
 8002bde:	f103 0208 	add.w	r2, r3, #8
 8002be2:	f8c8 2000 	str.w	r2, [r8]
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002bee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002bf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002bf6:	9307      	str	r3, [sp, #28]
 8002bf8:	f8cd 8018 	str.w	r8, [sp, #24]
 8002bfc:	ee08 0a10 	vmov	s16, r0
 8002c00:	4b9f      	ldr	r3, [pc, #636]	; (8002e80 <_printf_float+0x2dc>)
 8002c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c06:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0a:	f7fd ffaf 	bl	8000b6c <__aeabi_dcmpun>
 8002c0e:	bb88      	cbnz	r0, 8002c74 <_printf_float+0xd0>
 8002c10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c14:	4b9a      	ldr	r3, [pc, #616]	; (8002e80 <_printf_float+0x2dc>)
 8002c16:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1a:	f7fd ff89 	bl	8000b30 <__aeabi_dcmple>
 8002c1e:	bb48      	cbnz	r0, 8002c74 <_printf_float+0xd0>
 8002c20:	2200      	movs	r2, #0
 8002c22:	2300      	movs	r3, #0
 8002c24:	4640      	mov	r0, r8
 8002c26:	4649      	mov	r1, r9
 8002c28:	f7fd ff78 	bl	8000b1c <__aeabi_dcmplt>
 8002c2c:	b110      	cbz	r0, 8002c34 <_printf_float+0x90>
 8002c2e:	232d      	movs	r3, #45	; 0x2d
 8002c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c34:	4b93      	ldr	r3, [pc, #588]	; (8002e84 <_printf_float+0x2e0>)
 8002c36:	4894      	ldr	r0, [pc, #592]	; (8002e88 <_printf_float+0x2e4>)
 8002c38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002c3c:	bf94      	ite	ls
 8002c3e:	4698      	movls	r8, r3
 8002c40:	4680      	movhi	r8, r0
 8002c42:	2303      	movs	r3, #3
 8002c44:	6123      	str	r3, [r4, #16]
 8002c46:	9b05      	ldr	r3, [sp, #20]
 8002c48:	f023 0204 	bic.w	r2, r3, #4
 8002c4c:	6022      	str	r2, [r4, #0]
 8002c4e:	f04f 0900 	mov.w	r9, #0
 8002c52:	9700      	str	r7, [sp, #0]
 8002c54:	4633      	mov	r3, r6
 8002c56:	aa0b      	add	r2, sp, #44	; 0x2c
 8002c58:	4621      	mov	r1, r4
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	f000 f9d8 	bl	8003010 <_printf_common>
 8002c60:	3001      	adds	r0, #1
 8002c62:	f040 8090 	bne.w	8002d86 <_printf_float+0x1e2>
 8002c66:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6a:	b00d      	add	sp, #52	; 0x34
 8002c6c:	ecbd 8b02 	vpop	{d8}
 8002c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c74:	4642      	mov	r2, r8
 8002c76:	464b      	mov	r3, r9
 8002c78:	4640      	mov	r0, r8
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	f7fd ff76 	bl	8000b6c <__aeabi_dcmpun>
 8002c80:	b140      	cbz	r0, 8002c94 <_printf_float+0xf0>
 8002c82:	464b      	mov	r3, r9
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bfbc      	itt	lt
 8002c88:	232d      	movlt	r3, #45	; 0x2d
 8002c8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002c8e:	487f      	ldr	r0, [pc, #508]	; (8002e8c <_printf_float+0x2e8>)
 8002c90:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <_printf_float+0x2ec>)
 8002c92:	e7d1      	b.n	8002c38 <_printf_float+0x94>
 8002c94:	6863      	ldr	r3, [r4, #4]
 8002c96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002c9a:	9206      	str	r2, [sp, #24]
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	d13f      	bne.n	8002d20 <_printf_float+0x17c>
 8002ca0:	2306      	movs	r3, #6
 8002ca2:	6063      	str	r3, [r4, #4]
 8002ca4:	9b05      	ldr	r3, [sp, #20]
 8002ca6:	6861      	ldr	r1, [r4, #4]
 8002ca8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002cac:	2300      	movs	r3, #0
 8002cae:	9303      	str	r3, [sp, #12]
 8002cb0:	ab0a      	add	r3, sp, #40	; 0x28
 8002cb2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002cb6:	ab09      	add	r3, sp, #36	; 0x24
 8002cb8:	ec49 8b10 	vmov	d0, r8, r9
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	6022      	str	r2, [r4, #0]
 8002cc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	f7ff fecd 	bl	8002a64 <__cvt>
 8002cca:	9b06      	ldr	r3, [sp, #24]
 8002ccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002cce:	2b47      	cmp	r3, #71	; 0x47
 8002cd0:	4680      	mov	r8, r0
 8002cd2:	d108      	bne.n	8002ce6 <_printf_float+0x142>
 8002cd4:	1cc8      	adds	r0, r1, #3
 8002cd6:	db02      	blt.n	8002cde <_printf_float+0x13a>
 8002cd8:	6863      	ldr	r3, [r4, #4]
 8002cda:	4299      	cmp	r1, r3
 8002cdc:	dd41      	ble.n	8002d62 <_printf_float+0x1be>
 8002cde:	f1ab 0b02 	sub.w	fp, fp, #2
 8002ce2:	fa5f fb8b 	uxtb.w	fp, fp
 8002ce6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002cea:	d820      	bhi.n	8002d2e <_printf_float+0x18a>
 8002cec:	3901      	subs	r1, #1
 8002cee:	465a      	mov	r2, fp
 8002cf0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002cf4:	9109      	str	r1, [sp, #36]	; 0x24
 8002cf6:	f7ff ff17 	bl	8002b28 <__exponent>
 8002cfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cfc:	1813      	adds	r3, r2, r0
 8002cfe:	2a01      	cmp	r2, #1
 8002d00:	4681      	mov	r9, r0
 8002d02:	6123      	str	r3, [r4, #16]
 8002d04:	dc02      	bgt.n	8002d0c <_printf_float+0x168>
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	07d2      	lsls	r2, r2, #31
 8002d0a:	d501      	bpl.n	8002d10 <_printf_float+0x16c>
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	6123      	str	r3, [r4, #16]
 8002d10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d09c      	beq.n	8002c52 <_printf_float+0xae>
 8002d18:	232d      	movs	r3, #45	; 0x2d
 8002d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d1e:	e798      	b.n	8002c52 <_printf_float+0xae>
 8002d20:	9a06      	ldr	r2, [sp, #24]
 8002d22:	2a47      	cmp	r2, #71	; 0x47
 8002d24:	d1be      	bne.n	8002ca4 <_printf_float+0x100>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1bc      	bne.n	8002ca4 <_printf_float+0x100>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e7b9      	b.n	8002ca2 <_printf_float+0xfe>
 8002d2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002d32:	d118      	bne.n	8002d66 <_printf_float+0x1c2>
 8002d34:	2900      	cmp	r1, #0
 8002d36:	6863      	ldr	r3, [r4, #4]
 8002d38:	dd0b      	ble.n	8002d52 <_printf_float+0x1ae>
 8002d3a:	6121      	str	r1, [r4, #16]
 8002d3c:	b913      	cbnz	r3, 8002d44 <_printf_float+0x1a0>
 8002d3e:	6822      	ldr	r2, [r4, #0]
 8002d40:	07d0      	lsls	r0, r2, #31
 8002d42:	d502      	bpl.n	8002d4a <_printf_float+0x1a6>
 8002d44:	3301      	adds	r3, #1
 8002d46:	440b      	add	r3, r1
 8002d48:	6123      	str	r3, [r4, #16]
 8002d4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8002d4c:	f04f 0900 	mov.w	r9, #0
 8002d50:	e7de      	b.n	8002d10 <_printf_float+0x16c>
 8002d52:	b913      	cbnz	r3, 8002d5a <_printf_float+0x1b6>
 8002d54:	6822      	ldr	r2, [r4, #0]
 8002d56:	07d2      	lsls	r2, r2, #31
 8002d58:	d501      	bpl.n	8002d5e <_printf_float+0x1ba>
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	e7f4      	b.n	8002d48 <_printf_float+0x1a4>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e7f2      	b.n	8002d48 <_printf_float+0x1a4>
 8002d62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d68:	4299      	cmp	r1, r3
 8002d6a:	db05      	blt.n	8002d78 <_printf_float+0x1d4>
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	6121      	str	r1, [r4, #16]
 8002d70:	07d8      	lsls	r0, r3, #31
 8002d72:	d5ea      	bpl.n	8002d4a <_printf_float+0x1a6>
 8002d74:	1c4b      	adds	r3, r1, #1
 8002d76:	e7e7      	b.n	8002d48 <_printf_float+0x1a4>
 8002d78:	2900      	cmp	r1, #0
 8002d7a:	bfd4      	ite	le
 8002d7c:	f1c1 0202 	rsble	r2, r1, #2
 8002d80:	2201      	movgt	r2, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	e7e0      	b.n	8002d48 <_printf_float+0x1a4>
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	055a      	lsls	r2, r3, #21
 8002d8a:	d407      	bmi.n	8002d9c <_printf_float+0x1f8>
 8002d8c:	6923      	ldr	r3, [r4, #16]
 8002d8e:	4642      	mov	r2, r8
 8002d90:	4631      	mov	r1, r6
 8002d92:	4628      	mov	r0, r5
 8002d94:	47b8      	blx	r7
 8002d96:	3001      	adds	r0, #1
 8002d98:	d12c      	bne.n	8002df4 <_printf_float+0x250>
 8002d9a:	e764      	b.n	8002c66 <_printf_float+0xc2>
 8002d9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002da0:	f240 80e0 	bls.w	8002f64 <_printf_float+0x3c0>
 8002da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002da8:	2200      	movs	r2, #0
 8002daa:	2300      	movs	r3, #0
 8002dac:	f7fd feac 	bl	8000b08 <__aeabi_dcmpeq>
 8002db0:	2800      	cmp	r0, #0
 8002db2:	d034      	beq.n	8002e1e <_printf_float+0x27a>
 8002db4:	4a37      	ldr	r2, [pc, #220]	; (8002e94 <_printf_float+0x2f0>)
 8002db6:	2301      	movs	r3, #1
 8002db8:	4631      	mov	r1, r6
 8002dba:	4628      	mov	r0, r5
 8002dbc:	47b8      	blx	r7
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	f43f af51 	beq.w	8002c66 <_printf_float+0xc2>
 8002dc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	db02      	blt.n	8002dd2 <_printf_float+0x22e>
 8002dcc:	6823      	ldr	r3, [r4, #0]
 8002dce:	07d8      	lsls	r0, r3, #31
 8002dd0:	d510      	bpl.n	8002df4 <_printf_float+0x250>
 8002dd2:	ee18 3a10 	vmov	r3, s16
 8002dd6:	4652      	mov	r2, sl
 8002dd8:	4631      	mov	r1, r6
 8002dda:	4628      	mov	r0, r5
 8002ddc:	47b8      	blx	r7
 8002dde:	3001      	adds	r0, #1
 8002de0:	f43f af41 	beq.w	8002c66 <_printf_float+0xc2>
 8002de4:	f04f 0800 	mov.w	r8, #0
 8002de8:	f104 091a 	add.w	r9, r4, #26
 8002dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dee:	3b01      	subs	r3, #1
 8002df0:	4543      	cmp	r3, r8
 8002df2:	dc09      	bgt.n	8002e08 <_printf_float+0x264>
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	079b      	lsls	r3, r3, #30
 8002df8:	f100 8105 	bmi.w	8003006 <_printf_float+0x462>
 8002dfc:	68e0      	ldr	r0, [r4, #12]
 8002dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e00:	4298      	cmp	r0, r3
 8002e02:	bfb8      	it	lt
 8002e04:	4618      	movlt	r0, r3
 8002e06:	e730      	b.n	8002c6a <_printf_float+0xc6>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	464a      	mov	r2, r9
 8002e0c:	4631      	mov	r1, r6
 8002e0e:	4628      	mov	r0, r5
 8002e10:	47b8      	blx	r7
 8002e12:	3001      	adds	r0, #1
 8002e14:	f43f af27 	beq.w	8002c66 <_printf_float+0xc2>
 8002e18:	f108 0801 	add.w	r8, r8, #1
 8002e1c:	e7e6      	b.n	8002dec <_printf_float+0x248>
 8002e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	dc39      	bgt.n	8002e98 <_printf_float+0x2f4>
 8002e24:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <_printf_float+0x2f0>)
 8002e26:	2301      	movs	r3, #1
 8002e28:	4631      	mov	r1, r6
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	47b8      	blx	r7
 8002e2e:	3001      	adds	r0, #1
 8002e30:	f43f af19 	beq.w	8002c66 <_printf_float+0xc2>
 8002e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	d102      	bne.n	8002e42 <_printf_float+0x29e>
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	07d9      	lsls	r1, r3, #31
 8002e40:	d5d8      	bpl.n	8002df4 <_printf_float+0x250>
 8002e42:	ee18 3a10 	vmov	r3, s16
 8002e46:	4652      	mov	r2, sl
 8002e48:	4631      	mov	r1, r6
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	47b8      	blx	r7
 8002e4e:	3001      	adds	r0, #1
 8002e50:	f43f af09 	beq.w	8002c66 <_printf_float+0xc2>
 8002e54:	f04f 0900 	mov.w	r9, #0
 8002e58:	f104 0a1a 	add.w	sl, r4, #26
 8002e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e5e:	425b      	negs	r3, r3
 8002e60:	454b      	cmp	r3, r9
 8002e62:	dc01      	bgt.n	8002e68 <_printf_float+0x2c4>
 8002e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e66:	e792      	b.n	8002d8e <_printf_float+0x1ea>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	4652      	mov	r2, sl
 8002e6c:	4631      	mov	r1, r6
 8002e6e:	4628      	mov	r0, r5
 8002e70:	47b8      	blx	r7
 8002e72:	3001      	adds	r0, #1
 8002e74:	f43f aef7 	beq.w	8002c66 <_printf_float+0xc2>
 8002e78:	f109 0901 	add.w	r9, r9, #1
 8002e7c:	e7ee      	b.n	8002e5c <_printf_float+0x2b8>
 8002e7e:	bf00      	nop
 8002e80:	7fefffff 	.word	0x7fefffff
 8002e84:	08005874 	.word	0x08005874
 8002e88:	08005878 	.word	0x08005878
 8002e8c:	08005880 	.word	0x08005880
 8002e90:	0800587c 	.word	0x0800587c
 8002e94:	08005884 	.word	0x08005884
 8002e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	bfa8      	it	ge
 8002ea0:	461a      	movge	r2, r3
 8002ea2:	2a00      	cmp	r2, #0
 8002ea4:	4691      	mov	r9, r2
 8002ea6:	dc37      	bgt.n	8002f18 <_printf_float+0x374>
 8002ea8:	f04f 0b00 	mov.w	fp, #0
 8002eac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002eb0:	f104 021a 	add.w	r2, r4, #26
 8002eb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002eb6:	9305      	str	r3, [sp, #20]
 8002eb8:	eba3 0309 	sub.w	r3, r3, r9
 8002ebc:	455b      	cmp	r3, fp
 8002ebe:	dc33      	bgt.n	8002f28 <_printf_float+0x384>
 8002ec0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	db3b      	blt.n	8002f40 <_printf_float+0x39c>
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	07da      	lsls	r2, r3, #31
 8002ecc:	d438      	bmi.n	8002f40 <_printf_float+0x39c>
 8002ece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ed0:	9b05      	ldr	r3, [sp, #20]
 8002ed2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	eba2 0901 	sub.w	r9, r2, r1
 8002eda:	4599      	cmp	r9, r3
 8002edc:	bfa8      	it	ge
 8002ede:	4699      	movge	r9, r3
 8002ee0:	f1b9 0f00 	cmp.w	r9, #0
 8002ee4:	dc35      	bgt.n	8002f52 <_printf_float+0x3ae>
 8002ee6:	f04f 0800 	mov.w	r8, #0
 8002eea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002eee:	f104 0a1a 	add.w	sl, r4, #26
 8002ef2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	eba3 0309 	sub.w	r3, r3, r9
 8002efc:	4543      	cmp	r3, r8
 8002efe:	f77f af79 	ble.w	8002df4 <_printf_float+0x250>
 8002f02:	2301      	movs	r3, #1
 8002f04:	4652      	mov	r2, sl
 8002f06:	4631      	mov	r1, r6
 8002f08:	4628      	mov	r0, r5
 8002f0a:	47b8      	blx	r7
 8002f0c:	3001      	adds	r0, #1
 8002f0e:	f43f aeaa 	beq.w	8002c66 <_printf_float+0xc2>
 8002f12:	f108 0801 	add.w	r8, r8, #1
 8002f16:	e7ec      	b.n	8002ef2 <_printf_float+0x34e>
 8002f18:	4613      	mov	r3, r2
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	4642      	mov	r2, r8
 8002f1e:	4628      	mov	r0, r5
 8002f20:	47b8      	blx	r7
 8002f22:	3001      	adds	r0, #1
 8002f24:	d1c0      	bne.n	8002ea8 <_printf_float+0x304>
 8002f26:	e69e      	b.n	8002c66 <_printf_float+0xc2>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	4631      	mov	r1, r6
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	9205      	str	r2, [sp, #20]
 8002f30:	47b8      	blx	r7
 8002f32:	3001      	adds	r0, #1
 8002f34:	f43f ae97 	beq.w	8002c66 <_printf_float+0xc2>
 8002f38:	9a05      	ldr	r2, [sp, #20]
 8002f3a:	f10b 0b01 	add.w	fp, fp, #1
 8002f3e:	e7b9      	b.n	8002eb4 <_printf_float+0x310>
 8002f40:	ee18 3a10 	vmov	r3, s16
 8002f44:	4652      	mov	r2, sl
 8002f46:	4631      	mov	r1, r6
 8002f48:	4628      	mov	r0, r5
 8002f4a:	47b8      	blx	r7
 8002f4c:	3001      	adds	r0, #1
 8002f4e:	d1be      	bne.n	8002ece <_printf_float+0x32a>
 8002f50:	e689      	b.n	8002c66 <_printf_float+0xc2>
 8002f52:	9a05      	ldr	r2, [sp, #20]
 8002f54:	464b      	mov	r3, r9
 8002f56:	4442      	add	r2, r8
 8002f58:	4631      	mov	r1, r6
 8002f5a:	4628      	mov	r0, r5
 8002f5c:	47b8      	blx	r7
 8002f5e:	3001      	adds	r0, #1
 8002f60:	d1c1      	bne.n	8002ee6 <_printf_float+0x342>
 8002f62:	e680      	b.n	8002c66 <_printf_float+0xc2>
 8002f64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f66:	2a01      	cmp	r2, #1
 8002f68:	dc01      	bgt.n	8002f6e <_printf_float+0x3ca>
 8002f6a:	07db      	lsls	r3, r3, #31
 8002f6c:	d538      	bpl.n	8002fe0 <_printf_float+0x43c>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	4642      	mov	r2, r8
 8002f72:	4631      	mov	r1, r6
 8002f74:	4628      	mov	r0, r5
 8002f76:	47b8      	blx	r7
 8002f78:	3001      	adds	r0, #1
 8002f7a:	f43f ae74 	beq.w	8002c66 <_printf_float+0xc2>
 8002f7e:	ee18 3a10 	vmov	r3, s16
 8002f82:	4652      	mov	r2, sl
 8002f84:	4631      	mov	r1, r6
 8002f86:	4628      	mov	r0, r5
 8002f88:	47b8      	blx	r7
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	f43f ae6b 	beq.w	8002c66 <_printf_float+0xc2>
 8002f90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f94:	2200      	movs	r2, #0
 8002f96:	2300      	movs	r3, #0
 8002f98:	f7fd fdb6 	bl	8000b08 <__aeabi_dcmpeq>
 8002f9c:	b9d8      	cbnz	r0, 8002fd6 <_printf_float+0x432>
 8002f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fa0:	f108 0201 	add.w	r2, r8, #1
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	4631      	mov	r1, r6
 8002fa8:	4628      	mov	r0, r5
 8002faa:	47b8      	blx	r7
 8002fac:	3001      	adds	r0, #1
 8002fae:	d10e      	bne.n	8002fce <_printf_float+0x42a>
 8002fb0:	e659      	b.n	8002c66 <_printf_float+0xc2>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	4652      	mov	r2, sl
 8002fb6:	4631      	mov	r1, r6
 8002fb8:	4628      	mov	r0, r5
 8002fba:	47b8      	blx	r7
 8002fbc:	3001      	adds	r0, #1
 8002fbe:	f43f ae52 	beq.w	8002c66 <_printf_float+0xc2>
 8002fc2:	f108 0801 	add.w	r8, r8, #1
 8002fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	4543      	cmp	r3, r8
 8002fcc:	dcf1      	bgt.n	8002fb2 <_printf_float+0x40e>
 8002fce:	464b      	mov	r3, r9
 8002fd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002fd4:	e6dc      	b.n	8002d90 <_printf_float+0x1ec>
 8002fd6:	f04f 0800 	mov.w	r8, #0
 8002fda:	f104 0a1a 	add.w	sl, r4, #26
 8002fde:	e7f2      	b.n	8002fc6 <_printf_float+0x422>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	4642      	mov	r2, r8
 8002fe4:	e7df      	b.n	8002fa6 <_printf_float+0x402>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	464a      	mov	r2, r9
 8002fea:	4631      	mov	r1, r6
 8002fec:	4628      	mov	r0, r5
 8002fee:	47b8      	blx	r7
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	f43f ae38 	beq.w	8002c66 <_printf_float+0xc2>
 8002ff6:	f108 0801 	add.w	r8, r8, #1
 8002ffa:	68e3      	ldr	r3, [r4, #12]
 8002ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002ffe:	1a5b      	subs	r3, r3, r1
 8003000:	4543      	cmp	r3, r8
 8003002:	dcf0      	bgt.n	8002fe6 <_printf_float+0x442>
 8003004:	e6fa      	b.n	8002dfc <_printf_float+0x258>
 8003006:	f04f 0800 	mov.w	r8, #0
 800300a:	f104 0919 	add.w	r9, r4, #25
 800300e:	e7f4      	b.n	8002ffa <_printf_float+0x456>

08003010 <_printf_common>:
 8003010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003014:	4616      	mov	r6, r2
 8003016:	4699      	mov	r9, r3
 8003018:	688a      	ldr	r2, [r1, #8]
 800301a:	690b      	ldr	r3, [r1, #16]
 800301c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003020:	4293      	cmp	r3, r2
 8003022:	bfb8      	it	lt
 8003024:	4613      	movlt	r3, r2
 8003026:	6033      	str	r3, [r6, #0]
 8003028:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800302c:	4607      	mov	r7, r0
 800302e:	460c      	mov	r4, r1
 8003030:	b10a      	cbz	r2, 8003036 <_printf_common+0x26>
 8003032:	3301      	adds	r3, #1
 8003034:	6033      	str	r3, [r6, #0]
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	0699      	lsls	r1, r3, #26
 800303a:	bf42      	ittt	mi
 800303c:	6833      	ldrmi	r3, [r6, #0]
 800303e:	3302      	addmi	r3, #2
 8003040:	6033      	strmi	r3, [r6, #0]
 8003042:	6825      	ldr	r5, [r4, #0]
 8003044:	f015 0506 	ands.w	r5, r5, #6
 8003048:	d106      	bne.n	8003058 <_printf_common+0x48>
 800304a:	f104 0a19 	add.w	sl, r4, #25
 800304e:	68e3      	ldr	r3, [r4, #12]
 8003050:	6832      	ldr	r2, [r6, #0]
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	42ab      	cmp	r3, r5
 8003056:	dc26      	bgt.n	80030a6 <_printf_common+0x96>
 8003058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800305c:	1e13      	subs	r3, r2, #0
 800305e:	6822      	ldr	r2, [r4, #0]
 8003060:	bf18      	it	ne
 8003062:	2301      	movne	r3, #1
 8003064:	0692      	lsls	r2, r2, #26
 8003066:	d42b      	bmi.n	80030c0 <_printf_common+0xb0>
 8003068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800306c:	4649      	mov	r1, r9
 800306e:	4638      	mov	r0, r7
 8003070:	47c0      	blx	r8
 8003072:	3001      	adds	r0, #1
 8003074:	d01e      	beq.n	80030b4 <_printf_common+0xa4>
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	68e5      	ldr	r5, [r4, #12]
 800307a:	6832      	ldr	r2, [r6, #0]
 800307c:	f003 0306 	and.w	r3, r3, #6
 8003080:	2b04      	cmp	r3, #4
 8003082:	bf08      	it	eq
 8003084:	1aad      	subeq	r5, r5, r2
 8003086:	68a3      	ldr	r3, [r4, #8]
 8003088:	6922      	ldr	r2, [r4, #16]
 800308a:	bf0c      	ite	eq
 800308c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003090:	2500      	movne	r5, #0
 8003092:	4293      	cmp	r3, r2
 8003094:	bfc4      	itt	gt
 8003096:	1a9b      	subgt	r3, r3, r2
 8003098:	18ed      	addgt	r5, r5, r3
 800309a:	2600      	movs	r6, #0
 800309c:	341a      	adds	r4, #26
 800309e:	42b5      	cmp	r5, r6
 80030a0:	d11a      	bne.n	80030d8 <_printf_common+0xc8>
 80030a2:	2000      	movs	r0, #0
 80030a4:	e008      	b.n	80030b8 <_printf_common+0xa8>
 80030a6:	2301      	movs	r3, #1
 80030a8:	4652      	mov	r2, sl
 80030aa:	4649      	mov	r1, r9
 80030ac:	4638      	mov	r0, r7
 80030ae:	47c0      	blx	r8
 80030b0:	3001      	adds	r0, #1
 80030b2:	d103      	bne.n	80030bc <_printf_common+0xac>
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030bc:	3501      	adds	r5, #1
 80030be:	e7c6      	b.n	800304e <_printf_common+0x3e>
 80030c0:	18e1      	adds	r1, r4, r3
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	2030      	movs	r0, #48	; 0x30
 80030c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030ca:	4422      	add	r2, r4
 80030cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030d4:	3302      	adds	r3, #2
 80030d6:	e7c7      	b.n	8003068 <_printf_common+0x58>
 80030d8:	2301      	movs	r3, #1
 80030da:	4622      	mov	r2, r4
 80030dc:	4649      	mov	r1, r9
 80030de:	4638      	mov	r0, r7
 80030e0:	47c0      	blx	r8
 80030e2:	3001      	adds	r0, #1
 80030e4:	d0e6      	beq.n	80030b4 <_printf_common+0xa4>
 80030e6:	3601      	adds	r6, #1
 80030e8:	e7d9      	b.n	800309e <_printf_common+0x8e>
	...

080030ec <_printf_i>:
 80030ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030f0:	460c      	mov	r4, r1
 80030f2:	4691      	mov	r9, r2
 80030f4:	7e27      	ldrb	r7, [r4, #24]
 80030f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030f8:	2f78      	cmp	r7, #120	; 0x78
 80030fa:	4680      	mov	r8, r0
 80030fc:	469a      	mov	sl, r3
 80030fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003102:	d807      	bhi.n	8003114 <_printf_i+0x28>
 8003104:	2f62      	cmp	r7, #98	; 0x62
 8003106:	d80a      	bhi.n	800311e <_printf_i+0x32>
 8003108:	2f00      	cmp	r7, #0
 800310a:	f000 80d8 	beq.w	80032be <_printf_i+0x1d2>
 800310e:	2f58      	cmp	r7, #88	; 0x58
 8003110:	f000 80a3 	beq.w	800325a <_printf_i+0x16e>
 8003114:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800311c:	e03a      	b.n	8003194 <_printf_i+0xa8>
 800311e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003122:	2b15      	cmp	r3, #21
 8003124:	d8f6      	bhi.n	8003114 <_printf_i+0x28>
 8003126:	a001      	add	r0, pc, #4	; (adr r0, 800312c <_printf_i+0x40>)
 8003128:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800312c:	08003185 	.word	0x08003185
 8003130:	08003199 	.word	0x08003199
 8003134:	08003115 	.word	0x08003115
 8003138:	08003115 	.word	0x08003115
 800313c:	08003115 	.word	0x08003115
 8003140:	08003115 	.word	0x08003115
 8003144:	08003199 	.word	0x08003199
 8003148:	08003115 	.word	0x08003115
 800314c:	08003115 	.word	0x08003115
 8003150:	08003115 	.word	0x08003115
 8003154:	08003115 	.word	0x08003115
 8003158:	080032a5 	.word	0x080032a5
 800315c:	080031c9 	.word	0x080031c9
 8003160:	08003287 	.word	0x08003287
 8003164:	08003115 	.word	0x08003115
 8003168:	08003115 	.word	0x08003115
 800316c:	080032c7 	.word	0x080032c7
 8003170:	08003115 	.word	0x08003115
 8003174:	080031c9 	.word	0x080031c9
 8003178:	08003115 	.word	0x08003115
 800317c:	08003115 	.word	0x08003115
 8003180:	0800328f 	.word	0x0800328f
 8003184:	680b      	ldr	r3, [r1, #0]
 8003186:	1d1a      	adds	r2, r3, #4
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	600a      	str	r2, [r1, #0]
 800318c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003194:	2301      	movs	r3, #1
 8003196:	e0a3      	b.n	80032e0 <_printf_i+0x1f4>
 8003198:	6825      	ldr	r5, [r4, #0]
 800319a:	6808      	ldr	r0, [r1, #0]
 800319c:	062e      	lsls	r6, r5, #24
 800319e:	f100 0304 	add.w	r3, r0, #4
 80031a2:	d50a      	bpl.n	80031ba <_printf_i+0xce>
 80031a4:	6805      	ldr	r5, [r0, #0]
 80031a6:	600b      	str	r3, [r1, #0]
 80031a8:	2d00      	cmp	r5, #0
 80031aa:	da03      	bge.n	80031b4 <_printf_i+0xc8>
 80031ac:	232d      	movs	r3, #45	; 0x2d
 80031ae:	426d      	negs	r5, r5
 80031b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031b4:	485e      	ldr	r0, [pc, #376]	; (8003330 <_printf_i+0x244>)
 80031b6:	230a      	movs	r3, #10
 80031b8:	e019      	b.n	80031ee <_printf_i+0x102>
 80031ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80031be:	6805      	ldr	r5, [r0, #0]
 80031c0:	600b      	str	r3, [r1, #0]
 80031c2:	bf18      	it	ne
 80031c4:	b22d      	sxthne	r5, r5
 80031c6:	e7ef      	b.n	80031a8 <_printf_i+0xbc>
 80031c8:	680b      	ldr	r3, [r1, #0]
 80031ca:	6825      	ldr	r5, [r4, #0]
 80031cc:	1d18      	adds	r0, r3, #4
 80031ce:	6008      	str	r0, [r1, #0]
 80031d0:	0628      	lsls	r0, r5, #24
 80031d2:	d501      	bpl.n	80031d8 <_printf_i+0xec>
 80031d4:	681d      	ldr	r5, [r3, #0]
 80031d6:	e002      	b.n	80031de <_printf_i+0xf2>
 80031d8:	0669      	lsls	r1, r5, #25
 80031da:	d5fb      	bpl.n	80031d4 <_printf_i+0xe8>
 80031dc:	881d      	ldrh	r5, [r3, #0]
 80031de:	4854      	ldr	r0, [pc, #336]	; (8003330 <_printf_i+0x244>)
 80031e0:	2f6f      	cmp	r7, #111	; 0x6f
 80031e2:	bf0c      	ite	eq
 80031e4:	2308      	moveq	r3, #8
 80031e6:	230a      	movne	r3, #10
 80031e8:	2100      	movs	r1, #0
 80031ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031ee:	6866      	ldr	r6, [r4, #4]
 80031f0:	60a6      	str	r6, [r4, #8]
 80031f2:	2e00      	cmp	r6, #0
 80031f4:	bfa2      	ittt	ge
 80031f6:	6821      	ldrge	r1, [r4, #0]
 80031f8:	f021 0104 	bicge.w	r1, r1, #4
 80031fc:	6021      	strge	r1, [r4, #0]
 80031fe:	b90d      	cbnz	r5, 8003204 <_printf_i+0x118>
 8003200:	2e00      	cmp	r6, #0
 8003202:	d04d      	beq.n	80032a0 <_printf_i+0x1b4>
 8003204:	4616      	mov	r6, r2
 8003206:	fbb5 f1f3 	udiv	r1, r5, r3
 800320a:	fb03 5711 	mls	r7, r3, r1, r5
 800320e:	5dc7      	ldrb	r7, [r0, r7]
 8003210:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003214:	462f      	mov	r7, r5
 8003216:	42bb      	cmp	r3, r7
 8003218:	460d      	mov	r5, r1
 800321a:	d9f4      	bls.n	8003206 <_printf_i+0x11a>
 800321c:	2b08      	cmp	r3, #8
 800321e:	d10b      	bne.n	8003238 <_printf_i+0x14c>
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	07df      	lsls	r7, r3, #31
 8003224:	d508      	bpl.n	8003238 <_printf_i+0x14c>
 8003226:	6923      	ldr	r3, [r4, #16]
 8003228:	6861      	ldr	r1, [r4, #4]
 800322a:	4299      	cmp	r1, r3
 800322c:	bfde      	ittt	le
 800322e:	2330      	movle	r3, #48	; 0x30
 8003230:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003234:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003238:	1b92      	subs	r2, r2, r6
 800323a:	6122      	str	r2, [r4, #16]
 800323c:	f8cd a000 	str.w	sl, [sp]
 8003240:	464b      	mov	r3, r9
 8003242:	aa03      	add	r2, sp, #12
 8003244:	4621      	mov	r1, r4
 8003246:	4640      	mov	r0, r8
 8003248:	f7ff fee2 	bl	8003010 <_printf_common>
 800324c:	3001      	adds	r0, #1
 800324e:	d14c      	bne.n	80032ea <_printf_i+0x1fe>
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	b004      	add	sp, #16
 8003256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800325a:	4835      	ldr	r0, [pc, #212]	; (8003330 <_printf_i+0x244>)
 800325c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	680e      	ldr	r6, [r1, #0]
 8003264:	061f      	lsls	r7, r3, #24
 8003266:	f856 5b04 	ldr.w	r5, [r6], #4
 800326a:	600e      	str	r6, [r1, #0]
 800326c:	d514      	bpl.n	8003298 <_printf_i+0x1ac>
 800326e:	07d9      	lsls	r1, r3, #31
 8003270:	bf44      	itt	mi
 8003272:	f043 0320 	orrmi.w	r3, r3, #32
 8003276:	6023      	strmi	r3, [r4, #0]
 8003278:	b91d      	cbnz	r5, 8003282 <_printf_i+0x196>
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	f023 0320 	bic.w	r3, r3, #32
 8003280:	6023      	str	r3, [r4, #0]
 8003282:	2310      	movs	r3, #16
 8003284:	e7b0      	b.n	80031e8 <_printf_i+0xfc>
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	f043 0320 	orr.w	r3, r3, #32
 800328c:	6023      	str	r3, [r4, #0]
 800328e:	2378      	movs	r3, #120	; 0x78
 8003290:	4828      	ldr	r0, [pc, #160]	; (8003334 <_printf_i+0x248>)
 8003292:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003296:	e7e3      	b.n	8003260 <_printf_i+0x174>
 8003298:	065e      	lsls	r6, r3, #25
 800329a:	bf48      	it	mi
 800329c:	b2ad      	uxthmi	r5, r5
 800329e:	e7e6      	b.n	800326e <_printf_i+0x182>
 80032a0:	4616      	mov	r6, r2
 80032a2:	e7bb      	b.n	800321c <_printf_i+0x130>
 80032a4:	680b      	ldr	r3, [r1, #0]
 80032a6:	6826      	ldr	r6, [r4, #0]
 80032a8:	6960      	ldr	r0, [r4, #20]
 80032aa:	1d1d      	adds	r5, r3, #4
 80032ac:	600d      	str	r5, [r1, #0]
 80032ae:	0635      	lsls	r5, r6, #24
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	d501      	bpl.n	80032b8 <_printf_i+0x1cc>
 80032b4:	6018      	str	r0, [r3, #0]
 80032b6:	e002      	b.n	80032be <_printf_i+0x1d2>
 80032b8:	0671      	lsls	r1, r6, #25
 80032ba:	d5fb      	bpl.n	80032b4 <_printf_i+0x1c8>
 80032bc:	8018      	strh	r0, [r3, #0]
 80032be:	2300      	movs	r3, #0
 80032c0:	6123      	str	r3, [r4, #16]
 80032c2:	4616      	mov	r6, r2
 80032c4:	e7ba      	b.n	800323c <_printf_i+0x150>
 80032c6:	680b      	ldr	r3, [r1, #0]
 80032c8:	1d1a      	adds	r2, r3, #4
 80032ca:	600a      	str	r2, [r1, #0]
 80032cc:	681e      	ldr	r6, [r3, #0]
 80032ce:	6862      	ldr	r2, [r4, #4]
 80032d0:	2100      	movs	r1, #0
 80032d2:	4630      	mov	r0, r6
 80032d4:	f7fc ffa4 	bl	8000220 <memchr>
 80032d8:	b108      	cbz	r0, 80032de <_printf_i+0x1f2>
 80032da:	1b80      	subs	r0, r0, r6
 80032dc:	6060      	str	r0, [r4, #4]
 80032de:	6863      	ldr	r3, [r4, #4]
 80032e0:	6123      	str	r3, [r4, #16]
 80032e2:	2300      	movs	r3, #0
 80032e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032e8:	e7a8      	b.n	800323c <_printf_i+0x150>
 80032ea:	6923      	ldr	r3, [r4, #16]
 80032ec:	4632      	mov	r2, r6
 80032ee:	4649      	mov	r1, r9
 80032f0:	4640      	mov	r0, r8
 80032f2:	47d0      	blx	sl
 80032f4:	3001      	adds	r0, #1
 80032f6:	d0ab      	beq.n	8003250 <_printf_i+0x164>
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	079b      	lsls	r3, r3, #30
 80032fc:	d413      	bmi.n	8003326 <_printf_i+0x23a>
 80032fe:	68e0      	ldr	r0, [r4, #12]
 8003300:	9b03      	ldr	r3, [sp, #12]
 8003302:	4298      	cmp	r0, r3
 8003304:	bfb8      	it	lt
 8003306:	4618      	movlt	r0, r3
 8003308:	e7a4      	b.n	8003254 <_printf_i+0x168>
 800330a:	2301      	movs	r3, #1
 800330c:	4632      	mov	r2, r6
 800330e:	4649      	mov	r1, r9
 8003310:	4640      	mov	r0, r8
 8003312:	47d0      	blx	sl
 8003314:	3001      	adds	r0, #1
 8003316:	d09b      	beq.n	8003250 <_printf_i+0x164>
 8003318:	3501      	adds	r5, #1
 800331a:	68e3      	ldr	r3, [r4, #12]
 800331c:	9903      	ldr	r1, [sp, #12]
 800331e:	1a5b      	subs	r3, r3, r1
 8003320:	42ab      	cmp	r3, r5
 8003322:	dcf2      	bgt.n	800330a <_printf_i+0x21e>
 8003324:	e7eb      	b.n	80032fe <_printf_i+0x212>
 8003326:	2500      	movs	r5, #0
 8003328:	f104 0619 	add.w	r6, r4, #25
 800332c:	e7f5      	b.n	800331a <_printf_i+0x22e>
 800332e:	bf00      	nop
 8003330:	08005886 	.word	0x08005886
 8003334:	08005897 	.word	0x08005897

08003338 <siprintf>:
 8003338:	b40e      	push	{r1, r2, r3}
 800333a:	b500      	push	{lr}
 800333c:	b09c      	sub	sp, #112	; 0x70
 800333e:	ab1d      	add	r3, sp, #116	; 0x74
 8003340:	9002      	str	r0, [sp, #8]
 8003342:	9006      	str	r0, [sp, #24]
 8003344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003348:	4809      	ldr	r0, [pc, #36]	; (8003370 <siprintf+0x38>)
 800334a:	9107      	str	r1, [sp, #28]
 800334c:	9104      	str	r1, [sp, #16]
 800334e:	4909      	ldr	r1, [pc, #36]	; (8003374 <siprintf+0x3c>)
 8003350:	f853 2b04 	ldr.w	r2, [r3], #4
 8003354:	9105      	str	r1, [sp, #20]
 8003356:	6800      	ldr	r0, [r0, #0]
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	a902      	add	r1, sp, #8
 800335c:	f001 fb32 	bl	80049c4 <_svfiprintf_r>
 8003360:	9b02      	ldr	r3, [sp, #8]
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	b01c      	add	sp, #112	; 0x70
 8003368:	f85d eb04 	ldr.w	lr, [sp], #4
 800336c:	b003      	add	sp, #12
 800336e:	4770      	bx	lr
 8003370:	20000028 	.word	0x20000028
 8003374:	ffff0208 	.word	0xffff0208

08003378 <quorem>:
 8003378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800337c:	6903      	ldr	r3, [r0, #16]
 800337e:	690c      	ldr	r4, [r1, #16]
 8003380:	42a3      	cmp	r3, r4
 8003382:	4607      	mov	r7, r0
 8003384:	f2c0 8081 	blt.w	800348a <quorem+0x112>
 8003388:	3c01      	subs	r4, #1
 800338a:	f101 0814 	add.w	r8, r1, #20
 800338e:	f100 0514 	add.w	r5, r0, #20
 8003392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800339c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80033a0:	3301      	adds	r3, #1
 80033a2:	429a      	cmp	r2, r3
 80033a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80033a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80033ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80033b0:	d331      	bcc.n	8003416 <quorem+0x9e>
 80033b2:	f04f 0e00 	mov.w	lr, #0
 80033b6:	4640      	mov	r0, r8
 80033b8:	46ac      	mov	ip, r5
 80033ba:	46f2      	mov	sl, lr
 80033bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80033c0:	b293      	uxth	r3, r2
 80033c2:	fb06 e303 	mla	r3, r6, r3, lr
 80033c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	ebaa 0303 	sub.w	r3, sl, r3
 80033d0:	0c12      	lsrs	r2, r2, #16
 80033d2:	f8dc a000 	ldr.w	sl, [ip]
 80033d6:	fb06 e202 	mla	r2, r6, r2, lr
 80033da:	fa13 f38a 	uxtah	r3, r3, sl
 80033de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80033e2:	fa1f fa82 	uxth.w	sl, r2
 80033e6:	f8dc 2000 	ldr.w	r2, [ip]
 80033ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80033ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033f8:	4581      	cmp	r9, r0
 80033fa:	f84c 3b04 	str.w	r3, [ip], #4
 80033fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003402:	d2db      	bcs.n	80033bc <quorem+0x44>
 8003404:	f855 300b 	ldr.w	r3, [r5, fp]
 8003408:	b92b      	cbnz	r3, 8003416 <quorem+0x9e>
 800340a:	9b01      	ldr	r3, [sp, #4]
 800340c:	3b04      	subs	r3, #4
 800340e:	429d      	cmp	r5, r3
 8003410:	461a      	mov	r2, r3
 8003412:	d32e      	bcc.n	8003472 <quorem+0xfa>
 8003414:	613c      	str	r4, [r7, #16]
 8003416:	4638      	mov	r0, r7
 8003418:	f001 f8be 	bl	8004598 <__mcmp>
 800341c:	2800      	cmp	r0, #0
 800341e:	db24      	blt.n	800346a <quorem+0xf2>
 8003420:	3601      	adds	r6, #1
 8003422:	4628      	mov	r0, r5
 8003424:	f04f 0c00 	mov.w	ip, #0
 8003428:	f858 2b04 	ldr.w	r2, [r8], #4
 800342c:	f8d0 e000 	ldr.w	lr, [r0]
 8003430:	b293      	uxth	r3, r2
 8003432:	ebac 0303 	sub.w	r3, ip, r3
 8003436:	0c12      	lsrs	r2, r2, #16
 8003438:	fa13 f38e 	uxtah	r3, r3, lr
 800343c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003440:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003444:	b29b      	uxth	r3, r3
 8003446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800344a:	45c1      	cmp	r9, r8
 800344c:	f840 3b04 	str.w	r3, [r0], #4
 8003450:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003454:	d2e8      	bcs.n	8003428 <quorem+0xb0>
 8003456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800345a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800345e:	b922      	cbnz	r2, 800346a <quorem+0xf2>
 8003460:	3b04      	subs	r3, #4
 8003462:	429d      	cmp	r5, r3
 8003464:	461a      	mov	r2, r3
 8003466:	d30a      	bcc.n	800347e <quorem+0x106>
 8003468:	613c      	str	r4, [r7, #16]
 800346a:	4630      	mov	r0, r6
 800346c:	b003      	add	sp, #12
 800346e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	3b04      	subs	r3, #4
 8003476:	2a00      	cmp	r2, #0
 8003478:	d1cc      	bne.n	8003414 <quorem+0x9c>
 800347a:	3c01      	subs	r4, #1
 800347c:	e7c7      	b.n	800340e <quorem+0x96>
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	3b04      	subs	r3, #4
 8003482:	2a00      	cmp	r2, #0
 8003484:	d1f0      	bne.n	8003468 <quorem+0xf0>
 8003486:	3c01      	subs	r4, #1
 8003488:	e7eb      	b.n	8003462 <quorem+0xea>
 800348a:	2000      	movs	r0, #0
 800348c:	e7ee      	b.n	800346c <quorem+0xf4>
	...

08003490 <_dtoa_r>:
 8003490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003494:	ed2d 8b02 	vpush	{d8}
 8003498:	ec57 6b10 	vmov	r6, r7, d0
 800349c:	b095      	sub	sp, #84	; 0x54
 800349e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80034a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80034a4:	9105      	str	r1, [sp, #20]
 80034a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80034aa:	4604      	mov	r4, r0
 80034ac:	9209      	str	r2, [sp, #36]	; 0x24
 80034ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80034b0:	b975      	cbnz	r5, 80034d0 <_dtoa_r+0x40>
 80034b2:	2010      	movs	r0, #16
 80034b4:	f000 fddc 	bl	8004070 <malloc>
 80034b8:	4602      	mov	r2, r0
 80034ba:	6260      	str	r0, [r4, #36]	; 0x24
 80034bc:	b920      	cbnz	r0, 80034c8 <_dtoa_r+0x38>
 80034be:	4bb2      	ldr	r3, [pc, #712]	; (8003788 <_dtoa_r+0x2f8>)
 80034c0:	21ea      	movs	r1, #234	; 0xea
 80034c2:	48b2      	ldr	r0, [pc, #712]	; (800378c <_dtoa_r+0x2fc>)
 80034c4:	f001 fb8e 	bl	8004be4 <__assert_func>
 80034c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80034cc:	6005      	str	r5, [r0, #0]
 80034ce:	60c5      	str	r5, [r0, #12]
 80034d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	b151      	cbz	r1, 80034ec <_dtoa_r+0x5c>
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	604a      	str	r2, [r1, #4]
 80034da:	2301      	movs	r3, #1
 80034dc:	4093      	lsls	r3, r2
 80034de:	608b      	str	r3, [r1, #8]
 80034e0:	4620      	mov	r0, r4
 80034e2:	f000 fe1b 	bl	800411c <_Bfree>
 80034e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	1e3b      	subs	r3, r7, #0
 80034ee:	bfb9      	ittee	lt
 80034f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80034f4:	9303      	strlt	r3, [sp, #12]
 80034f6:	2300      	movge	r3, #0
 80034f8:	f8c8 3000 	strge.w	r3, [r8]
 80034fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003500:	4ba3      	ldr	r3, [pc, #652]	; (8003790 <_dtoa_r+0x300>)
 8003502:	bfbc      	itt	lt
 8003504:	2201      	movlt	r2, #1
 8003506:	f8c8 2000 	strlt.w	r2, [r8]
 800350a:	ea33 0309 	bics.w	r3, r3, r9
 800350e:	d11b      	bne.n	8003548 <_dtoa_r+0xb8>
 8003510:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003512:	f242 730f 	movw	r3, #9999	; 0x270f
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800351c:	4333      	orrs	r3, r6
 800351e:	f000 857a 	beq.w	8004016 <_dtoa_r+0xb86>
 8003522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003524:	b963      	cbnz	r3, 8003540 <_dtoa_r+0xb0>
 8003526:	4b9b      	ldr	r3, [pc, #620]	; (8003794 <_dtoa_r+0x304>)
 8003528:	e024      	b.n	8003574 <_dtoa_r+0xe4>
 800352a:	4b9b      	ldr	r3, [pc, #620]	; (8003798 <_dtoa_r+0x308>)
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	3308      	adds	r3, #8
 8003530:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	9800      	ldr	r0, [sp, #0]
 8003536:	b015      	add	sp, #84	; 0x54
 8003538:	ecbd 8b02 	vpop	{d8}
 800353c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003540:	4b94      	ldr	r3, [pc, #592]	; (8003794 <_dtoa_r+0x304>)
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	3303      	adds	r3, #3
 8003546:	e7f3      	b.n	8003530 <_dtoa_r+0xa0>
 8003548:	ed9d 7b02 	vldr	d7, [sp, #8]
 800354c:	2200      	movs	r2, #0
 800354e:	ec51 0b17 	vmov	r0, r1, d7
 8003552:	2300      	movs	r3, #0
 8003554:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003558:	f7fd fad6 	bl	8000b08 <__aeabi_dcmpeq>
 800355c:	4680      	mov	r8, r0
 800355e:	b158      	cbz	r0, 8003578 <_dtoa_r+0xe8>
 8003560:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003562:	2301      	movs	r3, #1
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8551 	beq.w	8004010 <_dtoa_r+0xb80>
 800356e:	488b      	ldr	r0, [pc, #556]	; (800379c <_dtoa_r+0x30c>)
 8003570:	6018      	str	r0, [r3, #0]
 8003572:	1e43      	subs	r3, r0, #1
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	e7dd      	b.n	8003534 <_dtoa_r+0xa4>
 8003578:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800357c:	aa12      	add	r2, sp, #72	; 0x48
 800357e:	a913      	add	r1, sp, #76	; 0x4c
 8003580:	4620      	mov	r0, r4
 8003582:	f001 f8ad 	bl	80046e0 <__d2b>
 8003586:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800358a:	4683      	mov	fp, r0
 800358c:	2d00      	cmp	r5, #0
 800358e:	d07c      	beq.n	800368a <_dtoa_r+0x1fa>
 8003590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003592:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800359a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800359e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80035a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80035a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80035aa:	4b7d      	ldr	r3, [pc, #500]	; (80037a0 <_dtoa_r+0x310>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	4630      	mov	r0, r6
 80035b0:	4639      	mov	r1, r7
 80035b2:	f7fc fe89 	bl	80002c8 <__aeabi_dsub>
 80035b6:	a36e      	add	r3, pc, #440	; (adr r3, 8003770 <_dtoa_r+0x2e0>)
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f7fd f83c 	bl	8000638 <__aeabi_dmul>
 80035c0:	a36d      	add	r3, pc, #436	; (adr r3, 8003778 <_dtoa_r+0x2e8>)
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f7fc fe81 	bl	80002cc <__adddf3>
 80035ca:	4606      	mov	r6, r0
 80035cc:	4628      	mov	r0, r5
 80035ce:	460f      	mov	r7, r1
 80035d0:	f7fc ffc8 	bl	8000564 <__aeabi_i2d>
 80035d4:	a36a      	add	r3, pc, #424	; (adr r3, 8003780 <_dtoa_r+0x2f0>)
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f7fd f82d 	bl	8000638 <__aeabi_dmul>
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	4630      	mov	r0, r6
 80035e4:	4639      	mov	r1, r7
 80035e6:	f7fc fe71 	bl	80002cc <__adddf3>
 80035ea:	4606      	mov	r6, r0
 80035ec:	460f      	mov	r7, r1
 80035ee:	f7fd fad3 	bl	8000b98 <__aeabi_d2iz>
 80035f2:	2200      	movs	r2, #0
 80035f4:	4682      	mov	sl, r0
 80035f6:	2300      	movs	r3, #0
 80035f8:	4630      	mov	r0, r6
 80035fa:	4639      	mov	r1, r7
 80035fc:	f7fd fa8e 	bl	8000b1c <__aeabi_dcmplt>
 8003600:	b148      	cbz	r0, 8003616 <_dtoa_r+0x186>
 8003602:	4650      	mov	r0, sl
 8003604:	f7fc ffae 	bl	8000564 <__aeabi_i2d>
 8003608:	4632      	mov	r2, r6
 800360a:	463b      	mov	r3, r7
 800360c:	f7fd fa7c 	bl	8000b08 <__aeabi_dcmpeq>
 8003610:	b908      	cbnz	r0, 8003616 <_dtoa_r+0x186>
 8003612:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003616:	f1ba 0f16 	cmp.w	sl, #22
 800361a:	d854      	bhi.n	80036c6 <_dtoa_r+0x236>
 800361c:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <_dtoa_r+0x314>)
 800361e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800362a:	f7fd fa77 	bl	8000b1c <__aeabi_dcmplt>
 800362e:	2800      	cmp	r0, #0
 8003630:	d04b      	beq.n	80036ca <_dtoa_r+0x23a>
 8003632:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003636:	2300      	movs	r3, #0
 8003638:	930e      	str	r3, [sp, #56]	; 0x38
 800363a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800363c:	1b5d      	subs	r5, r3, r5
 800363e:	1e6b      	subs	r3, r5, #1
 8003640:	9304      	str	r3, [sp, #16]
 8003642:	bf43      	ittte	mi
 8003644:	2300      	movmi	r3, #0
 8003646:	f1c5 0801 	rsbmi	r8, r5, #1
 800364a:	9304      	strmi	r3, [sp, #16]
 800364c:	f04f 0800 	movpl.w	r8, #0
 8003650:	f1ba 0f00 	cmp.w	sl, #0
 8003654:	db3b      	blt.n	80036ce <_dtoa_r+0x23e>
 8003656:	9b04      	ldr	r3, [sp, #16]
 8003658:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800365c:	4453      	add	r3, sl
 800365e:	9304      	str	r3, [sp, #16]
 8003660:	2300      	movs	r3, #0
 8003662:	9306      	str	r3, [sp, #24]
 8003664:	9b05      	ldr	r3, [sp, #20]
 8003666:	2b09      	cmp	r3, #9
 8003668:	d869      	bhi.n	800373e <_dtoa_r+0x2ae>
 800366a:	2b05      	cmp	r3, #5
 800366c:	bfc4      	itt	gt
 800366e:	3b04      	subgt	r3, #4
 8003670:	9305      	strgt	r3, [sp, #20]
 8003672:	9b05      	ldr	r3, [sp, #20]
 8003674:	f1a3 0302 	sub.w	r3, r3, #2
 8003678:	bfcc      	ite	gt
 800367a:	2500      	movgt	r5, #0
 800367c:	2501      	movle	r5, #1
 800367e:	2b03      	cmp	r3, #3
 8003680:	d869      	bhi.n	8003756 <_dtoa_r+0x2c6>
 8003682:	e8df f003 	tbb	[pc, r3]
 8003686:	4e2c      	.short	0x4e2c
 8003688:	5a4c      	.short	0x5a4c
 800368a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800368e:	441d      	add	r5, r3
 8003690:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003694:	2b20      	cmp	r3, #32
 8003696:	bfc1      	itttt	gt
 8003698:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800369c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80036a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80036a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80036a8:	bfda      	itte	le
 80036aa:	f1c3 0320 	rsble	r3, r3, #32
 80036ae:	fa06 f003 	lslle.w	r0, r6, r3
 80036b2:	4318      	orrgt	r0, r3
 80036b4:	f7fc ff46 	bl	8000544 <__aeabi_ui2d>
 80036b8:	2301      	movs	r3, #1
 80036ba:	4606      	mov	r6, r0
 80036bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80036c0:	3d01      	subs	r5, #1
 80036c2:	9310      	str	r3, [sp, #64]	; 0x40
 80036c4:	e771      	b.n	80035aa <_dtoa_r+0x11a>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e7b6      	b.n	8003638 <_dtoa_r+0x1a8>
 80036ca:	900e      	str	r0, [sp, #56]	; 0x38
 80036cc:	e7b5      	b.n	800363a <_dtoa_r+0x1aa>
 80036ce:	f1ca 0300 	rsb	r3, sl, #0
 80036d2:	9306      	str	r3, [sp, #24]
 80036d4:	2300      	movs	r3, #0
 80036d6:	eba8 080a 	sub.w	r8, r8, sl
 80036da:	930d      	str	r3, [sp, #52]	; 0x34
 80036dc:	e7c2      	b.n	8003664 <_dtoa_r+0x1d4>
 80036de:	2300      	movs	r3, #0
 80036e0:	9308      	str	r3, [sp, #32]
 80036e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	dc39      	bgt.n	800375c <_dtoa_r+0x2cc>
 80036e8:	f04f 0901 	mov.w	r9, #1
 80036ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80036f0:	464b      	mov	r3, r9
 80036f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80036f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80036f8:	2200      	movs	r2, #0
 80036fa:	6042      	str	r2, [r0, #4]
 80036fc:	2204      	movs	r2, #4
 80036fe:	f102 0614 	add.w	r6, r2, #20
 8003702:	429e      	cmp	r6, r3
 8003704:	6841      	ldr	r1, [r0, #4]
 8003706:	d92f      	bls.n	8003768 <_dtoa_r+0x2d8>
 8003708:	4620      	mov	r0, r4
 800370a:	f000 fcc7 	bl	800409c <_Balloc>
 800370e:	9000      	str	r0, [sp, #0]
 8003710:	2800      	cmp	r0, #0
 8003712:	d14b      	bne.n	80037ac <_dtoa_r+0x31c>
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <_dtoa_r+0x318>)
 8003716:	4602      	mov	r2, r0
 8003718:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800371c:	e6d1      	b.n	80034c2 <_dtoa_r+0x32>
 800371e:	2301      	movs	r3, #1
 8003720:	e7de      	b.n	80036e0 <_dtoa_r+0x250>
 8003722:	2300      	movs	r3, #0
 8003724:	9308      	str	r3, [sp, #32]
 8003726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003728:	eb0a 0903 	add.w	r9, sl, r3
 800372c:	f109 0301 	add.w	r3, r9, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	bfb8      	it	lt
 8003736:	2301      	movlt	r3, #1
 8003738:	e7dd      	b.n	80036f6 <_dtoa_r+0x266>
 800373a:	2301      	movs	r3, #1
 800373c:	e7f2      	b.n	8003724 <_dtoa_r+0x294>
 800373e:	2501      	movs	r5, #1
 8003740:	2300      	movs	r3, #0
 8003742:	9305      	str	r3, [sp, #20]
 8003744:	9508      	str	r5, [sp, #32]
 8003746:	f04f 39ff 	mov.w	r9, #4294967295
 800374a:	2200      	movs	r2, #0
 800374c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003750:	2312      	movs	r3, #18
 8003752:	9209      	str	r2, [sp, #36]	; 0x24
 8003754:	e7cf      	b.n	80036f6 <_dtoa_r+0x266>
 8003756:	2301      	movs	r3, #1
 8003758:	9308      	str	r3, [sp, #32]
 800375a:	e7f4      	b.n	8003746 <_dtoa_r+0x2b6>
 800375c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003760:	f8cd 9004 	str.w	r9, [sp, #4]
 8003764:	464b      	mov	r3, r9
 8003766:	e7c6      	b.n	80036f6 <_dtoa_r+0x266>
 8003768:	3101      	adds	r1, #1
 800376a:	6041      	str	r1, [r0, #4]
 800376c:	0052      	lsls	r2, r2, #1
 800376e:	e7c6      	b.n	80036fe <_dtoa_r+0x26e>
 8003770:	636f4361 	.word	0x636f4361
 8003774:	3fd287a7 	.word	0x3fd287a7
 8003778:	8b60c8b3 	.word	0x8b60c8b3
 800377c:	3fc68a28 	.word	0x3fc68a28
 8003780:	509f79fb 	.word	0x509f79fb
 8003784:	3fd34413 	.word	0x3fd34413
 8003788:	080058b5 	.word	0x080058b5
 800378c:	080058cc 	.word	0x080058cc
 8003790:	7ff00000 	.word	0x7ff00000
 8003794:	080058b1 	.word	0x080058b1
 8003798:	080058a8 	.word	0x080058a8
 800379c:	08005885 	.word	0x08005885
 80037a0:	3ff80000 	.word	0x3ff80000
 80037a4:	080059c8 	.word	0x080059c8
 80037a8:	0800592b 	.word	0x0800592b
 80037ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037ae:	9a00      	ldr	r2, [sp, #0]
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	9b01      	ldr	r3, [sp, #4]
 80037b4:	2b0e      	cmp	r3, #14
 80037b6:	f200 80ad 	bhi.w	8003914 <_dtoa_r+0x484>
 80037ba:	2d00      	cmp	r5, #0
 80037bc:	f000 80aa 	beq.w	8003914 <_dtoa_r+0x484>
 80037c0:	f1ba 0f00 	cmp.w	sl, #0
 80037c4:	dd36      	ble.n	8003834 <_dtoa_r+0x3a4>
 80037c6:	4ac3      	ldr	r2, [pc, #780]	; (8003ad4 <_dtoa_r+0x644>)
 80037c8:	f00a 030f 	and.w	r3, sl, #15
 80037cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80037d0:	ed93 7b00 	vldr	d7, [r3]
 80037d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80037d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80037dc:	eeb0 8a47 	vmov.f32	s16, s14
 80037e0:	eef0 8a67 	vmov.f32	s17, s15
 80037e4:	d016      	beq.n	8003814 <_dtoa_r+0x384>
 80037e6:	4bbc      	ldr	r3, [pc, #752]	; (8003ad8 <_dtoa_r+0x648>)
 80037e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80037ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80037f0:	f7fd f84c 	bl	800088c <__aeabi_ddiv>
 80037f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037f8:	f007 070f 	and.w	r7, r7, #15
 80037fc:	2503      	movs	r5, #3
 80037fe:	4eb6      	ldr	r6, [pc, #728]	; (8003ad8 <_dtoa_r+0x648>)
 8003800:	b957      	cbnz	r7, 8003818 <_dtoa_r+0x388>
 8003802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003806:	ec53 2b18 	vmov	r2, r3, d8
 800380a:	f7fd f83f 	bl	800088c <__aeabi_ddiv>
 800380e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003812:	e029      	b.n	8003868 <_dtoa_r+0x3d8>
 8003814:	2502      	movs	r5, #2
 8003816:	e7f2      	b.n	80037fe <_dtoa_r+0x36e>
 8003818:	07f9      	lsls	r1, r7, #31
 800381a:	d508      	bpl.n	800382e <_dtoa_r+0x39e>
 800381c:	ec51 0b18 	vmov	r0, r1, d8
 8003820:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003824:	f7fc ff08 	bl	8000638 <__aeabi_dmul>
 8003828:	ec41 0b18 	vmov	d8, r0, r1
 800382c:	3501      	adds	r5, #1
 800382e:	107f      	asrs	r7, r7, #1
 8003830:	3608      	adds	r6, #8
 8003832:	e7e5      	b.n	8003800 <_dtoa_r+0x370>
 8003834:	f000 80a6 	beq.w	8003984 <_dtoa_r+0x4f4>
 8003838:	f1ca 0600 	rsb	r6, sl, #0
 800383c:	4ba5      	ldr	r3, [pc, #660]	; (8003ad4 <_dtoa_r+0x644>)
 800383e:	4fa6      	ldr	r7, [pc, #664]	; (8003ad8 <_dtoa_r+0x648>)
 8003840:	f006 020f 	and.w	r2, r6, #15
 8003844:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003850:	f7fc fef2 	bl	8000638 <__aeabi_dmul>
 8003854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003858:	1136      	asrs	r6, r6, #4
 800385a:	2300      	movs	r3, #0
 800385c:	2502      	movs	r5, #2
 800385e:	2e00      	cmp	r6, #0
 8003860:	f040 8085 	bne.w	800396e <_dtoa_r+0x4de>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1d2      	bne.n	800380e <_dtoa_r+0x37e>
 8003868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 808c 	beq.w	8003988 <_dtoa_r+0x4f8>
 8003870:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003874:	4b99      	ldr	r3, [pc, #612]	; (8003adc <_dtoa_r+0x64c>)
 8003876:	2200      	movs	r2, #0
 8003878:	4630      	mov	r0, r6
 800387a:	4639      	mov	r1, r7
 800387c:	f7fd f94e 	bl	8000b1c <__aeabi_dcmplt>
 8003880:	2800      	cmp	r0, #0
 8003882:	f000 8081 	beq.w	8003988 <_dtoa_r+0x4f8>
 8003886:	9b01      	ldr	r3, [sp, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d07d      	beq.n	8003988 <_dtoa_r+0x4f8>
 800388c:	f1b9 0f00 	cmp.w	r9, #0
 8003890:	dd3c      	ble.n	800390c <_dtoa_r+0x47c>
 8003892:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003896:	9307      	str	r3, [sp, #28]
 8003898:	2200      	movs	r2, #0
 800389a:	4b91      	ldr	r3, [pc, #580]	; (8003ae0 <_dtoa_r+0x650>)
 800389c:	4630      	mov	r0, r6
 800389e:	4639      	mov	r1, r7
 80038a0:	f7fc feca 	bl	8000638 <__aeabi_dmul>
 80038a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038a8:	3501      	adds	r5, #1
 80038aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80038ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80038b2:	4628      	mov	r0, r5
 80038b4:	f7fc fe56 	bl	8000564 <__aeabi_i2d>
 80038b8:	4632      	mov	r2, r6
 80038ba:	463b      	mov	r3, r7
 80038bc:	f7fc febc 	bl	8000638 <__aeabi_dmul>
 80038c0:	4b88      	ldr	r3, [pc, #544]	; (8003ae4 <_dtoa_r+0x654>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	f7fc fd02 	bl	80002cc <__adddf3>
 80038c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80038cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038d0:	9303      	str	r3, [sp, #12]
 80038d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d15c      	bne.n	8003992 <_dtoa_r+0x502>
 80038d8:	4b83      	ldr	r3, [pc, #524]	; (8003ae8 <_dtoa_r+0x658>)
 80038da:	2200      	movs	r2, #0
 80038dc:	4630      	mov	r0, r6
 80038de:	4639      	mov	r1, r7
 80038e0:	f7fc fcf2 	bl	80002c8 <__aeabi_dsub>
 80038e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038e8:	4606      	mov	r6, r0
 80038ea:	460f      	mov	r7, r1
 80038ec:	f7fd f934 	bl	8000b58 <__aeabi_dcmpgt>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	f040 8296 	bne.w	8003e22 <_dtoa_r+0x992>
 80038f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80038fa:	4630      	mov	r0, r6
 80038fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003900:	4639      	mov	r1, r7
 8003902:	f7fd f90b 	bl	8000b1c <__aeabi_dcmplt>
 8003906:	2800      	cmp	r0, #0
 8003908:	f040 8288 	bne.w	8003e1c <_dtoa_r+0x98c>
 800390c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003910:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003916:	2b00      	cmp	r3, #0
 8003918:	f2c0 8158 	blt.w	8003bcc <_dtoa_r+0x73c>
 800391c:	f1ba 0f0e 	cmp.w	sl, #14
 8003920:	f300 8154 	bgt.w	8003bcc <_dtoa_r+0x73c>
 8003924:	4b6b      	ldr	r3, [pc, #428]	; (8003ad4 <_dtoa_r+0x644>)
 8003926:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800392a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800392e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003930:	2b00      	cmp	r3, #0
 8003932:	f280 80e3 	bge.w	8003afc <_dtoa_r+0x66c>
 8003936:	9b01      	ldr	r3, [sp, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f300 80df 	bgt.w	8003afc <_dtoa_r+0x66c>
 800393e:	f040 826d 	bne.w	8003e1c <_dtoa_r+0x98c>
 8003942:	4b69      	ldr	r3, [pc, #420]	; (8003ae8 <_dtoa_r+0x658>)
 8003944:	2200      	movs	r2, #0
 8003946:	4640      	mov	r0, r8
 8003948:	4649      	mov	r1, r9
 800394a:	f7fc fe75 	bl	8000638 <__aeabi_dmul>
 800394e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003952:	f7fd f8f7 	bl	8000b44 <__aeabi_dcmpge>
 8003956:	9e01      	ldr	r6, [sp, #4]
 8003958:	4637      	mov	r7, r6
 800395a:	2800      	cmp	r0, #0
 800395c:	f040 8243 	bne.w	8003de6 <_dtoa_r+0x956>
 8003960:	9d00      	ldr	r5, [sp, #0]
 8003962:	2331      	movs	r3, #49	; 0x31
 8003964:	f805 3b01 	strb.w	r3, [r5], #1
 8003968:	f10a 0a01 	add.w	sl, sl, #1
 800396c:	e23f      	b.n	8003dee <_dtoa_r+0x95e>
 800396e:	07f2      	lsls	r2, r6, #31
 8003970:	d505      	bpl.n	800397e <_dtoa_r+0x4ee>
 8003972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003976:	f7fc fe5f 	bl	8000638 <__aeabi_dmul>
 800397a:	3501      	adds	r5, #1
 800397c:	2301      	movs	r3, #1
 800397e:	1076      	asrs	r6, r6, #1
 8003980:	3708      	adds	r7, #8
 8003982:	e76c      	b.n	800385e <_dtoa_r+0x3ce>
 8003984:	2502      	movs	r5, #2
 8003986:	e76f      	b.n	8003868 <_dtoa_r+0x3d8>
 8003988:	9b01      	ldr	r3, [sp, #4]
 800398a:	f8cd a01c 	str.w	sl, [sp, #28]
 800398e:	930c      	str	r3, [sp, #48]	; 0x30
 8003990:	e78d      	b.n	80038ae <_dtoa_r+0x41e>
 8003992:	9900      	ldr	r1, [sp, #0]
 8003994:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003998:	4b4e      	ldr	r3, [pc, #312]	; (8003ad4 <_dtoa_r+0x644>)
 800399a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800399e:	4401      	add	r1, r0
 80039a0:	9102      	str	r1, [sp, #8]
 80039a2:	9908      	ldr	r1, [sp, #32]
 80039a4:	eeb0 8a47 	vmov.f32	s16, s14
 80039a8:	eef0 8a67 	vmov.f32	s17, s15
 80039ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80039b4:	2900      	cmp	r1, #0
 80039b6:	d045      	beq.n	8003a44 <_dtoa_r+0x5b4>
 80039b8:	494c      	ldr	r1, [pc, #304]	; (8003aec <_dtoa_r+0x65c>)
 80039ba:	2000      	movs	r0, #0
 80039bc:	f7fc ff66 	bl	800088c <__aeabi_ddiv>
 80039c0:	ec53 2b18 	vmov	r2, r3, d8
 80039c4:	f7fc fc80 	bl	80002c8 <__aeabi_dsub>
 80039c8:	9d00      	ldr	r5, [sp, #0]
 80039ca:	ec41 0b18 	vmov	d8, r0, r1
 80039ce:	4639      	mov	r1, r7
 80039d0:	4630      	mov	r0, r6
 80039d2:	f7fd f8e1 	bl	8000b98 <__aeabi_d2iz>
 80039d6:	900c      	str	r0, [sp, #48]	; 0x30
 80039d8:	f7fc fdc4 	bl	8000564 <__aeabi_i2d>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4630      	mov	r0, r6
 80039e2:	4639      	mov	r1, r7
 80039e4:	f7fc fc70 	bl	80002c8 <__aeabi_dsub>
 80039e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039ea:	3330      	adds	r3, #48	; 0x30
 80039ec:	f805 3b01 	strb.w	r3, [r5], #1
 80039f0:	ec53 2b18 	vmov	r2, r3, d8
 80039f4:	4606      	mov	r6, r0
 80039f6:	460f      	mov	r7, r1
 80039f8:	f7fd f890 	bl	8000b1c <__aeabi_dcmplt>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d165      	bne.n	8003acc <_dtoa_r+0x63c>
 8003a00:	4632      	mov	r2, r6
 8003a02:	463b      	mov	r3, r7
 8003a04:	4935      	ldr	r1, [pc, #212]	; (8003adc <_dtoa_r+0x64c>)
 8003a06:	2000      	movs	r0, #0
 8003a08:	f7fc fc5e 	bl	80002c8 <__aeabi_dsub>
 8003a0c:	ec53 2b18 	vmov	r2, r3, d8
 8003a10:	f7fd f884 	bl	8000b1c <__aeabi_dcmplt>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	f040 80b9 	bne.w	8003b8c <_dtoa_r+0x6fc>
 8003a1a:	9b02      	ldr	r3, [sp, #8]
 8003a1c:	429d      	cmp	r5, r3
 8003a1e:	f43f af75 	beq.w	800390c <_dtoa_r+0x47c>
 8003a22:	4b2f      	ldr	r3, [pc, #188]	; (8003ae0 <_dtoa_r+0x650>)
 8003a24:	ec51 0b18 	vmov	r0, r1, d8
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f7fc fe05 	bl	8000638 <__aeabi_dmul>
 8003a2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <_dtoa_r+0x650>)
 8003a30:	ec41 0b18 	vmov	d8, r0, r1
 8003a34:	2200      	movs	r2, #0
 8003a36:	4630      	mov	r0, r6
 8003a38:	4639      	mov	r1, r7
 8003a3a:	f7fc fdfd 	bl	8000638 <__aeabi_dmul>
 8003a3e:	4606      	mov	r6, r0
 8003a40:	460f      	mov	r7, r1
 8003a42:	e7c4      	b.n	80039ce <_dtoa_r+0x53e>
 8003a44:	ec51 0b17 	vmov	r0, r1, d7
 8003a48:	f7fc fdf6 	bl	8000638 <__aeabi_dmul>
 8003a4c:	9b02      	ldr	r3, [sp, #8]
 8003a4e:	9d00      	ldr	r5, [sp, #0]
 8003a50:	930c      	str	r3, [sp, #48]	; 0x30
 8003a52:	ec41 0b18 	vmov	d8, r0, r1
 8003a56:	4639      	mov	r1, r7
 8003a58:	4630      	mov	r0, r6
 8003a5a:	f7fd f89d 	bl	8000b98 <__aeabi_d2iz>
 8003a5e:	9011      	str	r0, [sp, #68]	; 0x44
 8003a60:	f7fc fd80 	bl	8000564 <__aeabi_i2d>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4630      	mov	r0, r6
 8003a6a:	4639      	mov	r1, r7
 8003a6c:	f7fc fc2c 	bl	80002c8 <__aeabi_dsub>
 8003a70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a72:	3330      	adds	r3, #48	; 0x30
 8003a74:	f805 3b01 	strb.w	r3, [r5], #1
 8003a78:	9b02      	ldr	r3, [sp, #8]
 8003a7a:	429d      	cmp	r5, r3
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	460f      	mov	r7, r1
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	d134      	bne.n	8003af0 <_dtoa_r+0x660>
 8003a86:	4b19      	ldr	r3, [pc, #100]	; (8003aec <_dtoa_r+0x65c>)
 8003a88:	ec51 0b18 	vmov	r0, r1, d8
 8003a8c:	f7fc fc1e 	bl	80002cc <__adddf3>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4630      	mov	r0, r6
 8003a96:	4639      	mov	r1, r7
 8003a98:	f7fd f85e 	bl	8000b58 <__aeabi_dcmpgt>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d175      	bne.n	8003b8c <_dtoa_r+0x6fc>
 8003aa0:	ec53 2b18 	vmov	r2, r3, d8
 8003aa4:	4911      	ldr	r1, [pc, #68]	; (8003aec <_dtoa_r+0x65c>)
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	f7fc fc0e 	bl	80002c8 <__aeabi_dsub>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	4639      	mov	r1, r7
 8003ab4:	f7fd f832 	bl	8000b1c <__aeabi_dcmplt>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	f43f af27 	beq.w	800390c <_dtoa_r+0x47c>
 8003abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ac0:	1e6b      	subs	r3, r5, #1
 8003ac2:	930c      	str	r3, [sp, #48]	; 0x30
 8003ac4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003ac8:	2b30      	cmp	r3, #48	; 0x30
 8003aca:	d0f8      	beq.n	8003abe <_dtoa_r+0x62e>
 8003acc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003ad0:	e04a      	b.n	8003b68 <_dtoa_r+0x6d8>
 8003ad2:	bf00      	nop
 8003ad4:	080059c8 	.word	0x080059c8
 8003ad8:	080059a0 	.word	0x080059a0
 8003adc:	3ff00000 	.word	0x3ff00000
 8003ae0:	40240000 	.word	0x40240000
 8003ae4:	401c0000 	.word	0x401c0000
 8003ae8:	40140000 	.word	0x40140000
 8003aec:	3fe00000 	.word	0x3fe00000
 8003af0:	4baf      	ldr	r3, [pc, #700]	; (8003db0 <_dtoa_r+0x920>)
 8003af2:	f7fc fda1 	bl	8000638 <__aeabi_dmul>
 8003af6:	4606      	mov	r6, r0
 8003af8:	460f      	mov	r7, r1
 8003afa:	e7ac      	b.n	8003a56 <_dtoa_r+0x5c6>
 8003afc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003b00:	9d00      	ldr	r5, [sp, #0]
 8003b02:	4642      	mov	r2, r8
 8003b04:	464b      	mov	r3, r9
 8003b06:	4630      	mov	r0, r6
 8003b08:	4639      	mov	r1, r7
 8003b0a:	f7fc febf 	bl	800088c <__aeabi_ddiv>
 8003b0e:	f7fd f843 	bl	8000b98 <__aeabi_d2iz>
 8003b12:	9002      	str	r0, [sp, #8]
 8003b14:	f7fc fd26 	bl	8000564 <__aeabi_i2d>
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	f7fc fd8c 	bl	8000638 <__aeabi_dmul>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4630      	mov	r0, r6
 8003b26:	4639      	mov	r1, r7
 8003b28:	f7fc fbce 	bl	80002c8 <__aeabi_dsub>
 8003b2c:	9e02      	ldr	r6, [sp, #8]
 8003b2e:	9f01      	ldr	r7, [sp, #4]
 8003b30:	3630      	adds	r6, #48	; 0x30
 8003b32:	f805 6b01 	strb.w	r6, [r5], #1
 8003b36:	9e00      	ldr	r6, [sp, #0]
 8003b38:	1bae      	subs	r6, r5, r6
 8003b3a:	42b7      	cmp	r7, r6
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	d137      	bne.n	8003bb2 <_dtoa_r+0x722>
 8003b42:	f7fc fbc3 	bl	80002cc <__adddf3>
 8003b46:	4642      	mov	r2, r8
 8003b48:	464b      	mov	r3, r9
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	460f      	mov	r7, r1
 8003b4e:	f7fd f803 	bl	8000b58 <__aeabi_dcmpgt>
 8003b52:	b9c8      	cbnz	r0, 8003b88 <_dtoa_r+0x6f8>
 8003b54:	4642      	mov	r2, r8
 8003b56:	464b      	mov	r3, r9
 8003b58:	4630      	mov	r0, r6
 8003b5a:	4639      	mov	r1, r7
 8003b5c:	f7fc ffd4 	bl	8000b08 <__aeabi_dcmpeq>
 8003b60:	b110      	cbz	r0, 8003b68 <_dtoa_r+0x6d8>
 8003b62:	9b02      	ldr	r3, [sp, #8]
 8003b64:	07d9      	lsls	r1, r3, #31
 8003b66:	d40f      	bmi.n	8003b88 <_dtoa_r+0x6f8>
 8003b68:	4620      	mov	r0, r4
 8003b6a:	4659      	mov	r1, fp
 8003b6c:	f000 fad6 	bl	800411c <_Bfree>
 8003b70:	2300      	movs	r3, #0
 8003b72:	702b      	strb	r3, [r5, #0]
 8003b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b76:	f10a 0001 	add.w	r0, sl, #1
 8003b7a:	6018      	str	r0, [r3, #0]
 8003b7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f43f acd8 	beq.w	8003534 <_dtoa_r+0xa4>
 8003b84:	601d      	str	r5, [r3, #0]
 8003b86:	e4d5      	b.n	8003534 <_dtoa_r+0xa4>
 8003b88:	f8cd a01c 	str.w	sl, [sp, #28]
 8003b8c:	462b      	mov	r3, r5
 8003b8e:	461d      	mov	r5, r3
 8003b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003b94:	2a39      	cmp	r2, #57	; 0x39
 8003b96:	d108      	bne.n	8003baa <_dtoa_r+0x71a>
 8003b98:	9a00      	ldr	r2, [sp, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d1f7      	bne.n	8003b8e <_dtoa_r+0x6fe>
 8003b9e:	9a07      	ldr	r2, [sp, #28]
 8003ba0:	9900      	ldr	r1, [sp, #0]
 8003ba2:	3201      	adds	r2, #1
 8003ba4:	9207      	str	r2, [sp, #28]
 8003ba6:	2230      	movs	r2, #48	; 0x30
 8003ba8:	700a      	strb	r2, [r1, #0]
 8003baa:	781a      	ldrb	r2, [r3, #0]
 8003bac:	3201      	adds	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e78c      	b.n	8003acc <_dtoa_r+0x63c>
 8003bb2:	4b7f      	ldr	r3, [pc, #508]	; (8003db0 <_dtoa_r+0x920>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f7fc fd3f 	bl	8000638 <__aeabi_dmul>
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	460f      	mov	r7, r1
 8003bc2:	f7fc ffa1 	bl	8000b08 <__aeabi_dcmpeq>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d09b      	beq.n	8003b02 <_dtoa_r+0x672>
 8003bca:	e7cd      	b.n	8003b68 <_dtoa_r+0x6d8>
 8003bcc:	9a08      	ldr	r2, [sp, #32]
 8003bce:	2a00      	cmp	r2, #0
 8003bd0:	f000 80c4 	beq.w	8003d5c <_dtoa_r+0x8cc>
 8003bd4:	9a05      	ldr	r2, [sp, #20]
 8003bd6:	2a01      	cmp	r2, #1
 8003bd8:	f300 80a8 	bgt.w	8003d2c <_dtoa_r+0x89c>
 8003bdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003bde:	2a00      	cmp	r2, #0
 8003be0:	f000 80a0 	beq.w	8003d24 <_dtoa_r+0x894>
 8003be4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003be8:	9e06      	ldr	r6, [sp, #24]
 8003bea:	4645      	mov	r5, r8
 8003bec:	9a04      	ldr	r2, [sp, #16]
 8003bee:	2101      	movs	r1, #1
 8003bf0:	441a      	add	r2, r3
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4498      	add	r8, r3
 8003bf6:	9204      	str	r2, [sp, #16]
 8003bf8:	f000 fb4c 	bl	8004294 <__i2b>
 8003bfc:	4607      	mov	r7, r0
 8003bfe:	2d00      	cmp	r5, #0
 8003c00:	dd0b      	ble.n	8003c1a <_dtoa_r+0x78a>
 8003c02:	9b04      	ldr	r3, [sp, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	dd08      	ble.n	8003c1a <_dtoa_r+0x78a>
 8003c08:	42ab      	cmp	r3, r5
 8003c0a:	9a04      	ldr	r2, [sp, #16]
 8003c0c:	bfa8      	it	ge
 8003c0e:	462b      	movge	r3, r5
 8003c10:	eba8 0803 	sub.w	r8, r8, r3
 8003c14:	1aed      	subs	r5, r5, r3
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	9304      	str	r3, [sp, #16]
 8003c1a:	9b06      	ldr	r3, [sp, #24]
 8003c1c:	b1fb      	cbz	r3, 8003c5e <_dtoa_r+0x7ce>
 8003c1e:	9b08      	ldr	r3, [sp, #32]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 809f 	beq.w	8003d64 <_dtoa_r+0x8d4>
 8003c26:	2e00      	cmp	r6, #0
 8003c28:	dd11      	ble.n	8003c4e <_dtoa_r+0x7be>
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	4632      	mov	r2, r6
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f000 fbec 	bl	800440c <__pow5mult>
 8003c34:	465a      	mov	r2, fp
 8003c36:	4601      	mov	r1, r0
 8003c38:	4607      	mov	r7, r0
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f000 fb40 	bl	80042c0 <__multiply>
 8003c40:	4659      	mov	r1, fp
 8003c42:	9007      	str	r0, [sp, #28]
 8003c44:	4620      	mov	r0, r4
 8003c46:	f000 fa69 	bl	800411c <_Bfree>
 8003c4a:	9b07      	ldr	r3, [sp, #28]
 8003c4c:	469b      	mov	fp, r3
 8003c4e:	9b06      	ldr	r3, [sp, #24]
 8003c50:	1b9a      	subs	r2, r3, r6
 8003c52:	d004      	beq.n	8003c5e <_dtoa_r+0x7ce>
 8003c54:	4659      	mov	r1, fp
 8003c56:	4620      	mov	r0, r4
 8003c58:	f000 fbd8 	bl	800440c <__pow5mult>
 8003c5c:	4683      	mov	fp, r0
 8003c5e:	2101      	movs	r1, #1
 8003c60:	4620      	mov	r0, r4
 8003c62:	f000 fb17 	bl	8004294 <__i2b>
 8003c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	dd7c      	ble.n	8003d68 <_dtoa_r+0x8d8>
 8003c6e:	461a      	mov	r2, r3
 8003c70:	4601      	mov	r1, r0
 8003c72:	4620      	mov	r0, r4
 8003c74:	f000 fbca 	bl	800440c <__pow5mult>
 8003c78:	9b05      	ldr	r3, [sp, #20]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	4606      	mov	r6, r0
 8003c7e:	dd76      	ble.n	8003d6e <_dtoa_r+0x8de>
 8003c80:	2300      	movs	r3, #0
 8003c82:	9306      	str	r3, [sp, #24]
 8003c84:	6933      	ldr	r3, [r6, #16]
 8003c86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003c8a:	6918      	ldr	r0, [r3, #16]
 8003c8c:	f000 fab2 	bl	80041f4 <__hi0bits>
 8003c90:	f1c0 0020 	rsb	r0, r0, #32
 8003c94:	9b04      	ldr	r3, [sp, #16]
 8003c96:	4418      	add	r0, r3
 8003c98:	f010 001f 	ands.w	r0, r0, #31
 8003c9c:	f000 8086 	beq.w	8003dac <_dtoa_r+0x91c>
 8003ca0:	f1c0 0320 	rsb	r3, r0, #32
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	dd7f      	ble.n	8003da8 <_dtoa_r+0x918>
 8003ca8:	f1c0 001c 	rsb	r0, r0, #28
 8003cac:	9b04      	ldr	r3, [sp, #16]
 8003cae:	4403      	add	r3, r0
 8003cb0:	4480      	add	r8, r0
 8003cb2:	4405      	add	r5, r0
 8003cb4:	9304      	str	r3, [sp, #16]
 8003cb6:	f1b8 0f00 	cmp.w	r8, #0
 8003cba:	dd05      	ble.n	8003cc8 <_dtoa_r+0x838>
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	4642      	mov	r2, r8
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f000 fbfd 	bl	80044c0 <__lshift>
 8003cc6:	4683      	mov	fp, r0
 8003cc8:	9b04      	ldr	r3, [sp, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	dd05      	ble.n	8003cda <_dtoa_r+0x84a>
 8003cce:	4631      	mov	r1, r6
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f000 fbf4 	bl	80044c0 <__lshift>
 8003cd8:	4606      	mov	r6, r0
 8003cda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d069      	beq.n	8003db4 <_dtoa_r+0x924>
 8003ce0:	4631      	mov	r1, r6
 8003ce2:	4658      	mov	r0, fp
 8003ce4:	f000 fc58 	bl	8004598 <__mcmp>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	da63      	bge.n	8003db4 <_dtoa_r+0x924>
 8003cec:	2300      	movs	r3, #0
 8003cee:	4659      	mov	r1, fp
 8003cf0:	220a      	movs	r2, #10
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f000 fa34 	bl	8004160 <__multadd>
 8003cf8:	9b08      	ldr	r3, [sp, #32]
 8003cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cfe:	4683      	mov	fp, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 818f 	beq.w	8004024 <_dtoa_r+0xb94>
 8003d06:	4639      	mov	r1, r7
 8003d08:	2300      	movs	r3, #0
 8003d0a:	220a      	movs	r2, #10
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f000 fa27 	bl	8004160 <__multadd>
 8003d12:	f1b9 0f00 	cmp.w	r9, #0
 8003d16:	4607      	mov	r7, r0
 8003d18:	f300 808e 	bgt.w	8003e38 <_dtoa_r+0x9a8>
 8003d1c:	9b05      	ldr	r3, [sp, #20]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	dc50      	bgt.n	8003dc4 <_dtoa_r+0x934>
 8003d22:	e089      	b.n	8003e38 <_dtoa_r+0x9a8>
 8003d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003d2a:	e75d      	b.n	8003be8 <_dtoa_r+0x758>
 8003d2c:	9b01      	ldr	r3, [sp, #4]
 8003d2e:	1e5e      	subs	r6, r3, #1
 8003d30:	9b06      	ldr	r3, [sp, #24]
 8003d32:	42b3      	cmp	r3, r6
 8003d34:	bfbf      	itttt	lt
 8003d36:	9b06      	ldrlt	r3, [sp, #24]
 8003d38:	9606      	strlt	r6, [sp, #24]
 8003d3a:	1af2      	sublt	r2, r6, r3
 8003d3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8003d3e:	bfb6      	itet	lt
 8003d40:	189b      	addlt	r3, r3, r2
 8003d42:	1b9e      	subge	r6, r3, r6
 8003d44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8003d46:	9b01      	ldr	r3, [sp, #4]
 8003d48:	bfb8      	it	lt
 8003d4a:	2600      	movlt	r6, #0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bfb5      	itete	lt
 8003d50:	eba8 0503 	sublt.w	r5, r8, r3
 8003d54:	9b01      	ldrge	r3, [sp, #4]
 8003d56:	2300      	movlt	r3, #0
 8003d58:	4645      	movge	r5, r8
 8003d5a:	e747      	b.n	8003bec <_dtoa_r+0x75c>
 8003d5c:	9e06      	ldr	r6, [sp, #24]
 8003d5e:	9f08      	ldr	r7, [sp, #32]
 8003d60:	4645      	mov	r5, r8
 8003d62:	e74c      	b.n	8003bfe <_dtoa_r+0x76e>
 8003d64:	9a06      	ldr	r2, [sp, #24]
 8003d66:	e775      	b.n	8003c54 <_dtoa_r+0x7c4>
 8003d68:	9b05      	ldr	r3, [sp, #20]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	dc18      	bgt.n	8003da0 <_dtoa_r+0x910>
 8003d6e:	9b02      	ldr	r3, [sp, #8]
 8003d70:	b9b3      	cbnz	r3, 8003da0 <_dtoa_r+0x910>
 8003d72:	9b03      	ldr	r3, [sp, #12]
 8003d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d78:	b9a3      	cbnz	r3, 8003da4 <_dtoa_r+0x914>
 8003d7a:	9b03      	ldr	r3, [sp, #12]
 8003d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d80:	0d1b      	lsrs	r3, r3, #20
 8003d82:	051b      	lsls	r3, r3, #20
 8003d84:	b12b      	cbz	r3, 8003d92 <_dtoa_r+0x902>
 8003d86:	9b04      	ldr	r3, [sp, #16]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	9304      	str	r3, [sp, #16]
 8003d8c:	f108 0801 	add.w	r8, r8, #1
 8003d90:	2301      	movs	r3, #1
 8003d92:	9306      	str	r3, [sp, #24]
 8003d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f47f af74 	bne.w	8003c84 <_dtoa_r+0x7f4>
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	e779      	b.n	8003c94 <_dtoa_r+0x804>
 8003da0:	2300      	movs	r3, #0
 8003da2:	e7f6      	b.n	8003d92 <_dtoa_r+0x902>
 8003da4:	9b02      	ldr	r3, [sp, #8]
 8003da6:	e7f4      	b.n	8003d92 <_dtoa_r+0x902>
 8003da8:	d085      	beq.n	8003cb6 <_dtoa_r+0x826>
 8003daa:	4618      	mov	r0, r3
 8003dac:	301c      	adds	r0, #28
 8003dae:	e77d      	b.n	8003cac <_dtoa_r+0x81c>
 8003db0:	40240000 	.word	0x40240000
 8003db4:	9b01      	ldr	r3, [sp, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	dc38      	bgt.n	8003e2c <_dtoa_r+0x99c>
 8003dba:	9b05      	ldr	r3, [sp, #20]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	dd35      	ble.n	8003e2c <_dtoa_r+0x99c>
 8003dc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003dc4:	f1b9 0f00 	cmp.w	r9, #0
 8003dc8:	d10d      	bne.n	8003de6 <_dtoa_r+0x956>
 8003dca:	4631      	mov	r1, r6
 8003dcc:	464b      	mov	r3, r9
 8003dce:	2205      	movs	r2, #5
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f000 f9c5 	bl	8004160 <__multadd>
 8003dd6:	4601      	mov	r1, r0
 8003dd8:	4606      	mov	r6, r0
 8003dda:	4658      	mov	r0, fp
 8003ddc:	f000 fbdc 	bl	8004598 <__mcmp>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	f73f adbd 	bgt.w	8003960 <_dtoa_r+0x4d0>
 8003de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de8:	9d00      	ldr	r5, [sp, #0]
 8003dea:	ea6f 0a03 	mvn.w	sl, r3
 8003dee:	f04f 0800 	mov.w	r8, #0
 8003df2:	4631      	mov	r1, r6
 8003df4:	4620      	mov	r0, r4
 8003df6:	f000 f991 	bl	800411c <_Bfree>
 8003dfa:	2f00      	cmp	r7, #0
 8003dfc:	f43f aeb4 	beq.w	8003b68 <_dtoa_r+0x6d8>
 8003e00:	f1b8 0f00 	cmp.w	r8, #0
 8003e04:	d005      	beq.n	8003e12 <_dtoa_r+0x982>
 8003e06:	45b8      	cmp	r8, r7
 8003e08:	d003      	beq.n	8003e12 <_dtoa_r+0x982>
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f000 f985 	bl	800411c <_Bfree>
 8003e12:	4639      	mov	r1, r7
 8003e14:	4620      	mov	r0, r4
 8003e16:	f000 f981 	bl	800411c <_Bfree>
 8003e1a:	e6a5      	b.n	8003b68 <_dtoa_r+0x6d8>
 8003e1c:	2600      	movs	r6, #0
 8003e1e:	4637      	mov	r7, r6
 8003e20:	e7e1      	b.n	8003de6 <_dtoa_r+0x956>
 8003e22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003e24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8003e28:	4637      	mov	r7, r6
 8003e2a:	e599      	b.n	8003960 <_dtoa_r+0x4d0>
 8003e2c:	9b08      	ldr	r3, [sp, #32]
 8003e2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80fd 	beq.w	8004032 <_dtoa_r+0xba2>
 8003e38:	2d00      	cmp	r5, #0
 8003e3a:	dd05      	ble.n	8003e48 <_dtoa_r+0x9b8>
 8003e3c:	4639      	mov	r1, r7
 8003e3e:	462a      	mov	r2, r5
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 fb3d 	bl	80044c0 <__lshift>
 8003e46:	4607      	mov	r7, r0
 8003e48:	9b06      	ldr	r3, [sp, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d05c      	beq.n	8003f08 <_dtoa_r+0xa78>
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4620      	mov	r0, r4
 8003e52:	f000 f923 	bl	800409c <_Balloc>
 8003e56:	4605      	mov	r5, r0
 8003e58:	b928      	cbnz	r0, 8003e66 <_dtoa_r+0x9d6>
 8003e5a:	4b80      	ldr	r3, [pc, #512]	; (800405c <_dtoa_r+0xbcc>)
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003e62:	f7ff bb2e 	b.w	80034c2 <_dtoa_r+0x32>
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	3202      	adds	r2, #2
 8003e6a:	0092      	lsls	r2, r2, #2
 8003e6c:	f107 010c 	add.w	r1, r7, #12
 8003e70:	300c      	adds	r0, #12
 8003e72:	f000 f905 	bl	8004080 <memcpy>
 8003e76:	2201      	movs	r2, #1
 8003e78:	4629      	mov	r1, r5
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f000 fb20 	bl	80044c0 <__lshift>
 8003e80:	9b00      	ldr	r3, [sp, #0]
 8003e82:	3301      	adds	r3, #1
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	9b00      	ldr	r3, [sp, #0]
 8003e88:	444b      	add	r3, r9
 8003e8a:	9307      	str	r3, [sp, #28]
 8003e8c:	9b02      	ldr	r3, [sp, #8]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	46b8      	mov	r8, r7
 8003e94:	9306      	str	r3, [sp, #24]
 8003e96:	4607      	mov	r7, r0
 8003e98:	9b01      	ldr	r3, [sp, #4]
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	4658      	mov	r0, fp
 8003ea0:	9302      	str	r3, [sp, #8]
 8003ea2:	f7ff fa69 	bl	8003378 <quorem>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	3330      	adds	r3, #48	; 0x30
 8003eaa:	9004      	str	r0, [sp, #16]
 8003eac:	4641      	mov	r1, r8
 8003eae:	4658      	mov	r0, fp
 8003eb0:	9308      	str	r3, [sp, #32]
 8003eb2:	f000 fb71 	bl	8004598 <__mcmp>
 8003eb6:	463a      	mov	r2, r7
 8003eb8:	4681      	mov	r9, r0
 8003eba:	4631      	mov	r1, r6
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f000 fb87 	bl	80045d0 <__mdiff>
 8003ec2:	68c2      	ldr	r2, [r0, #12]
 8003ec4:	9b08      	ldr	r3, [sp, #32]
 8003ec6:	4605      	mov	r5, r0
 8003ec8:	bb02      	cbnz	r2, 8003f0c <_dtoa_r+0xa7c>
 8003eca:	4601      	mov	r1, r0
 8003ecc:	4658      	mov	r0, fp
 8003ece:	f000 fb63 	bl	8004598 <__mcmp>
 8003ed2:	9b08      	ldr	r3, [sp, #32]
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4620      	mov	r0, r4
 8003eda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8003ede:	f000 f91d 	bl	800411c <_Bfree>
 8003ee2:	9b05      	ldr	r3, [sp, #20]
 8003ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ee6:	9d01      	ldr	r5, [sp, #4]
 8003ee8:	ea43 0102 	orr.w	r1, r3, r2
 8003eec:	9b06      	ldr	r3, [sp, #24]
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	9b08      	ldr	r3, [sp, #32]
 8003ef2:	d10d      	bne.n	8003f10 <_dtoa_r+0xa80>
 8003ef4:	2b39      	cmp	r3, #57	; 0x39
 8003ef6:	d029      	beq.n	8003f4c <_dtoa_r+0xabc>
 8003ef8:	f1b9 0f00 	cmp.w	r9, #0
 8003efc:	dd01      	ble.n	8003f02 <_dtoa_r+0xa72>
 8003efe:	9b04      	ldr	r3, [sp, #16]
 8003f00:	3331      	adds	r3, #49	; 0x31
 8003f02:	9a02      	ldr	r2, [sp, #8]
 8003f04:	7013      	strb	r3, [r2, #0]
 8003f06:	e774      	b.n	8003df2 <_dtoa_r+0x962>
 8003f08:	4638      	mov	r0, r7
 8003f0a:	e7b9      	b.n	8003e80 <_dtoa_r+0x9f0>
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	e7e2      	b.n	8003ed6 <_dtoa_r+0xa46>
 8003f10:	f1b9 0f00 	cmp.w	r9, #0
 8003f14:	db06      	blt.n	8003f24 <_dtoa_r+0xa94>
 8003f16:	9905      	ldr	r1, [sp, #20]
 8003f18:	ea41 0909 	orr.w	r9, r1, r9
 8003f1c:	9906      	ldr	r1, [sp, #24]
 8003f1e:	ea59 0101 	orrs.w	r1, r9, r1
 8003f22:	d120      	bne.n	8003f66 <_dtoa_r+0xad6>
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	ddec      	ble.n	8003f02 <_dtoa_r+0xa72>
 8003f28:	4659      	mov	r1, fp
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	f000 fac6 	bl	80044c0 <__lshift>
 8003f34:	4631      	mov	r1, r6
 8003f36:	4683      	mov	fp, r0
 8003f38:	f000 fb2e 	bl	8004598 <__mcmp>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	9b01      	ldr	r3, [sp, #4]
 8003f40:	dc02      	bgt.n	8003f48 <_dtoa_r+0xab8>
 8003f42:	d1de      	bne.n	8003f02 <_dtoa_r+0xa72>
 8003f44:	07da      	lsls	r2, r3, #31
 8003f46:	d5dc      	bpl.n	8003f02 <_dtoa_r+0xa72>
 8003f48:	2b39      	cmp	r3, #57	; 0x39
 8003f4a:	d1d8      	bne.n	8003efe <_dtoa_r+0xa6e>
 8003f4c:	9a02      	ldr	r2, [sp, #8]
 8003f4e:	2339      	movs	r3, #57	; 0x39
 8003f50:	7013      	strb	r3, [r2, #0]
 8003f52:	462b      	mov	r3, r5
 8003f54:	461d      	mov	r5, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003f5c:	2a39      	cmp	r2, #57	; 0x39
 8003f5e:	d050      	beq.n	8004002 <_dtoa_r+0xb72>
 8003f60:	3201      	adds	r2, #1
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	e745      	b.n	8003df2 <_dtoa_r+0x962>
 8003f66:	2a00      	cmp	r2, #0
 8003f68:	dd03      	ble.n	8003f72 <_dtoa_r+0xae2>
 8003f6a:	2b39      	cmp	r3, #57	; 0x39
 8003f6c:	d0ee      	beq.n	8003f4c <_dtoa_r+0xabc>
 8003f6e:	3301      	adds	r3, #1
 8003f70:	e7c7      	b.n	8003f02 <_dtoa_r+0xa72>
 8003f72:	9a01      	ldr	r2, [sp, #4]
 8003f74:	9907      	ldr	r1, [sp, #28]
 8003f76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003f7a:	428a      	cmp	r2, r1
 8003f7c:	d02a      	beq.n	8003fd4 <_dtoa_r+0xb44>
 8003f7e:	4659      	mov	r1, fp
 8003f80:	2300      	movs	r3, #0
 8003f82:	220a      	movs	r2, #10
 8003f84:	4620      	mov	r0, r4
 8003f86:	f000 f8eb 	bl	8004160 <__multadd>
 8003f8a:	45b8      	cmp	r8, r7
 8003f8c:	4683      	mov	fp, r0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	f04f 020a 	mov.w	r2, #10
 8003f96:	4641      	mov	r1, r8
 8003f98:	4620      	mov	r0, r4
 8003f9a:	d107      	bne.n	8003fac <_dtoa_r+0xb1c>
 8003f9c:	f000 f8e0 	bl	8004160 <__multadd>
 8003fa0:	4680      	mov	r8, r0
 8003fa2:	4607      	mov	r7, r0
 8003fa4:	9b01      	ldr	r3, [sp, #4]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	e775      	b.n	8003e98 <_dtoa_r+0xa08>
 8003fac:	f000 f8d8 	bl	8004160 <__multadd>
 8003fb0:	4639      	mov	r1, r7
 8003fb2:	4680      	mov	r8, r0
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	220a      	movs	r2, #10
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f000 f8d1 	bl	8004160 <__multadd>
 8003fbe:	4607      	mov	r7, r0
 8003fc0:	e7f0      	b.n	8003fa4 <_dtoa_r+0xb14>
 8003fc2:	f1b9 0f00 	cmp.w	r9, #0
 8003fc6:	9a00      	ldr	r2, [sp, #0]
 8003fc8:	bfcc      	ite	gt
 8003fca:	464d      	movgt	r5, r9
 8003fcc:	2501      	movle	r5, #1
 8003fce:	4415      	add	r5, r2
 8003fd0:	f04f 0800 	mov.w	r8, #0
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	4620      	mov	r0, r4
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	f000 fa70 	bl	80044c0 <__lshift>
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4683      	mov	fp, r0
 8003fe4:	f000 fad8 	bl	8004598 <__mcmp>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	dcb2      	bgt.n	8003f52 <_dtoa_r+0xac2>
 8003fec:	d102      	bne.n	8003ff4 <_dtoa_r+0xb64>
 8003fee:	9b01      	ldr	r3, [sp, #4]
 8003ff0:	07db      	lsls	r3, r3, #31
 8003ff2:	d4ae      	bmi.n	8003f52 <_dtoa_r+0xac2>
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003ffc:	2a30      	cmp	r2, #48	; 0x30
 8003ffe:	d0fa      	beq.n	8003ff6 <_dtoa_r+0xb66>
 8004000:	e6f7      	b.n	8003df2 <_dtoa_r+0x962>
 8004002:	9a00      	ldr	r2, [sp, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d1a5      	bne.n	8003f54 <_dtoa_r+0xac4>
 8004008:	f10a 0a01 	add.w	sl, sl, #1
 800400c:	2331      	movs	r3, #49	; 0x31
 800400e:	e779      	b.n	8003f04 <_dtoa_r+0xa74>
 8004010:	4b13      	ldr	r3, [pc, #76]	; (8004060 <_dtoa_r+0xbd0>)
 8004012:	f7ff baaf 	b.w	8003574 <_dtoa_r+0xe4>
 8004016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f aa86 	bne.w	800352a <_dtoa_r+0x9a>
 800401e:	4b11      	ldr	r3, [pc, #68]	; (8004064 <_dtoa_r+0xbd4>)
 8004020:	f7ff baa8 	b.w	8003574 <_dtoa_r+0xe4>
 8004024:	f1b9 0f00 	cmp.w	r9, #0
 8004028:	dc03      	bgt.n	8004032 <_dtoa_r+0xba2>
 800402a:	9b05      	ldr	r3, [sp, #20]
 800402c:	2b02      	cmp	r3, #2
 800402e:	f73f aec9 	bgt.w	8003dc4 <_dtoa_r+0x934>
 8004032:	9d00      	ldr	r5, [sp, #0]
 8004034:	4631      	mov	r1, r6
 8004036:	4658      	mov	r0, fp
 8004038:	f7ff f99e 	bl	8003378 <quorem>
 800403c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004040:	f805 3b01 	strb.w	r3, [r5], #1
 8004044:	9a00      	ldr	r2, [sp, #0]
 8004046:	1aaa      	subs	r2, r5, r2
 8004048:	4591      	cmp	r9, r2
 800404a:	ddba      	ble.n	8003fc2 <_dtoa_r+0xb32>
 800404c:	4659      	mov	r1, fp
 800404e:	2300      	movs	r3, #0
 8004050:	220a      	movs	r2, #10
 8004052:	4620      	mov	r0, r4
 8004054:	f000 f884 	bl	8004160 <__multadd>
 8004058:	4683      	mov	fp, r0
 800405a:	e7eb      	b.n	8004034 <_dtoa_r+0xba4>
 800405c:	0800592b 	.word	0x0800592b
 8004060:	08005884 	.word	0x08005884
 8004064:	080058a8 	.word	0x080058a8

08004068 <_localeconv_r>:
 8004068:	4800      	ldr	r0, [pc, #0]	; (800406c <_localeconv_r+0x4>)
 800406a:	4770      	bx	lr
 800406c:	2000017c 	.word	0x2000017c

08004070 <malloc>:
 8004070:	4b02      	ldr	r3, [pc, #8]	; (800407c <malloc+0xc>)
 8004072:	4601      	mov	r1, r0
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	f000 bbef 	b.w	8004858 <_malloc_r>
 800407a:	bf00      	nop
 800407c:	20000028 	.word	0x20000028

08004080 <memcpy>:
 8004080:	440a      	add	r2, r1
 8004082:	4291      	cmp	r1, r2
 8004084:	f100 33ff 	add.w	r3, r0, #4294967295
 8004088:	d100      	bne.n	800408c <memcpy+0xc>
 800408a:	4770      	bx	lr
 800408c:	b510      	push	{r4, lr}
 800408e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004096:	4291      	cmp	r1, r2
 8004098:	d1f9      	bne.n	800408e <memcpy+0xe>
 800409a:	bd10      	pop	{r4, pc}

0800409c <_Balloc>:
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80040a0:	4604      	mov	r4, r0
 80040a2:	460d      	mov	r5, r1
 80040a4:	b976      	cbnz	r6, 80040c4 <_Balloc+0x28>
 80040a6:	2010      	movs	r0, #16
 80040a8:	f7ff ffe2 	bl	8004070 <malloc>
 80040ac:	4602      	mov	r2, r0
 80040ae:	6260      	str	r0, [r4, #36]	; 0x24
 80040b0:	b920      	cbnz	r0, 80040bc <_Balloc+0x20>
 80040b2:	4b18      	ldr	r3, [pc, #96]	; (8004114 <_Balloc+0x78>)
 80040b4:	4818      	ldr	r0, [pc, #96]	; (8004118 <_Balloc+0x7c>)
 80040b6:	2166      	movs	r1, #102	; 0x66
 80040b8:	f000 fd94 	bl	8004be4 <__assert_func>
 80040bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80040c0:	6006      	str	r6, [r0, #0]
 80040c2:	60c6      	str	r6, [r0, #12]
 80040c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80040c6:	68f3      	ldr	r3, [r6, #12]
 80040c8:	b183      	cbz	r3, 80040ec <_Balloc+0x50>
 80040ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80040d2:	b9b8      	cbnz	r0, 8004104 <_Balloc+0x68>
 80040d4:	2101      	movs	r1, #1
 80040d6:	fa01 f605 	lsl.w	r6, r1, r5
 80040da:	1d72      	adds	r2, r6, #5
 80040dc:	0092      	lsls	r2, r2, #2
 80040de:	4620      	mov	r0, r4
 80040e0:	f000 fb5a 	bl	8004798 <_calloc_r>
 80040e4:	b160      	cbz	r0, 8004100 <_Balloc+0x64>
 80040e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80040ea:	e00e      	b.n	800410a <_Balloc+0x6e>
 80040ec:	2221      	movs	r2, #33	; 0x21
 80040ee:	2104      	movs	r1, #4
 80040f0:	4620      	mov	r0, r4
 80040f2:	f000 fb51 	bl	8004798 <_calloc_r>
 80040f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040f8:	60f0      	str	r0, [r6, #12]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e4      	bne.n	80040ca <_Balloc+0x2e>
 8004100:	2000      	movs	r0, #0
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	6802      	ldr	r2, [r0, #0]
 8004106:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800410a:	2300      	movs	r3, #0
 800410c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004110:	e7f7      	b.n	8004102 <_Balloc+0x66>
 8004112:	bf00      	nop
 8004114:	080058b5 	.word	0x080058b5
 8004118:	0800593c 	.word	0x0800593c

0800411c <_Bfree>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004120:	4605      	mov	r5, r0
 8004122:	460c      	mov	r4, r1
 8004124:	b976      	cbnz	r6, 8004144 <_Bfree+0x28>
 8004126:	2010      	movs	r0, #16
 8004128:	f7ff ffa2 	bl	8004070 <malloc>
 800412c:	4602      	mov	r2, r0
 800412e:	6268      	str	r0, [r5, #36]	; 0x24
 8004130:	b920      	cbnz	r0, 800413c <_Bfree+0x20>
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <_Bfree+0x3c>)
 8004134:	4809      	ldr	r0, [pc, #36]	; (800415c <_Bfree+0x40>)
 8004136:	218a      	movs	r1, #138	; 0x8a
 8004138:	f000 fd54 	bl	8004be4 <__assert_func>
 800413c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004140:	6006      	str	r6, [r0, #0]
 8004142:	60c6      	str	r6, [r0, #12]
 8004144:	b13c      	cbz	r4, 8004156 <_Bfree+0x3a>
 8004146:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004148:	6862      	ldr	r2, [r4, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004150:	6021      	str	r1, [r4, #0]
 8004152:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	080058b5 	.word	0x080058b5
 800415c:	0800593c 	.word	0x0800593c

08004160 <__multadd>:
 8004160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004164:	690e      	ldr	r6, [r1, #16]
 8004166:	4607      	mov	r7, r0
 8004168:	4698      	mov	r8, r3
 800416a:	460c      	mov	r4, r1
 800416c:	f101 0014 	add.w	r0, r1, #20
 8004170:	2300      	movs	r3, #0
 8004172:	6805      	ldr	r5, [r0, #0]
 8004174:	b2a9      	uxth	r1, r5
 8004176:	fb02 8101 	mla	r1, r2, r1, r8
 800417a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800417e:	0c2d      	lsrs	r5, r5, #16
 8004180:	fb02 c505 	mla	r5, r2, r5, ip
 8004184:	b289      	uxth	r1, r1
 8004186:	3301      	adds	r3, #1
 8004188:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800418c:	429e      	cmp	r6, r3
 800418e:	f840 1b04 	str.w	r1, [r0], #4
 8004192:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004196:	dcec      	bgt.n	8004172 <__multadd+0x12>
 8004198:	f1b8 0f00 	cmp.w	r8, #0
 800419c:	d022      	beq.n	80041e4 <__multadd+0x84>
 800419e:	68a3      	ldr	r3, [r4, #8]
 80041a0:	42b3      	cmp	r3, r6
 80041a2:	dc19      	bgt.n	80041d8 <__multadd+0x78>
 80041a4:	6861      	ldr	r1, [r4, #4]
 80041a6:	4638      	mov	r0, r7
 80041a8:	3101      	adds	r1, #1
 80041aa:	f7ff ff77 	bl	800409c <_Balloc>
 80041ae:	4605      	mov	r5, r0
 80041b0:	b928      	cbnz	r0, 80041be <__multadd+0x5e>
 80041b2:	4602      	mov	r2, r0
 80041b4:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <__multadd+0x8c>)
 80041b6:	480e      	ldr	r0, [pc, #56]	; (80041f0 <__multadd+0x90>)
 80041b8:	21b5      	movs	r1, #181	; 0xb5
 80041ba:	f000 fd13 	bl	8004be4 <__assert_func>
 80041be:	6922      	ldr	r2, [r4, #16]
 80041c0:	3202      	adds	r2, #2
 80041c2:	f104 010c 	add.w	r1, r4, #12
 80041c6:	0092      	lsls	r2, r2, #2
 80041c8:	300c      	adds	r0, #12
 80041ca:	f7ff ff59 	bl	8004080 <memcpy>
 80041ce:	4621      	mov	r1, r4
 80041d0:	4638      	mov	r0, r7
 80041d2:	f7ff ffa3 	bl	800411c <_Bfree>
 80041d6:	462c      	mov	r4, r5
 80041d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80041dc:	3601      	adds	r6, #1
 80041de:	f8c3 8014 	str.w	r8, [r3, #20]
 80041e2:	6126      	str	r6, [r4, #16]
 80041e4:	4620      	mov	r0, r4
 80041e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ea:	bf00      	nop
 80041ec:	0800592b 	.word	0x0800592b
 80041f0:	0800593c 	.word	0x0800593c

080041f4 <__hi0bits>:
 80041f4:	0c03      	lsrs	r3, r0, #16
 80041f6:	041b      	lsls	r3, r3, #16
 80041f8:	b9d3      	cbnz	r3, 8004230 <__hi0bits+0x3c>
 80041fa:	0400      	lsls	r0, r0, #16
 80041fc:	2310      	movs	r3, #16
 80041fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004202:	bf04      	itt	eq
 8004204:	0200      	lsleq	r0, r0, #8
 8004206:	3308      	addeq	r3, #8
 8004208:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800420c:	bf04      	itt	eq
 800420e:	0100      	lsleq	r0, r0, #4
 8004210:	3304      	addeq	r3, #4
 8004212:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004216:	bf04      	itt	eq
 8004218:	0080      	lsleq	r0, r0, #2
 800421a:	3302      	addeq	r3, #2
 800421c:	2800      	cmp	r0, #0
 800421e:	db05      	blt.n	800422c <__hi0bits+0x38>
 8004220:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004224:	f103 0301 	add.w	r3, r3, #1
 8004228:	bf08      	it	eq
 800422a:	2320      	moveq	r3, #32
 800422c:	4618      	mov	r0, r3
 800422e:	4770      	bx	lr
 8004230:	2300      	movs	r3, #0
 8004232:	e7e4      	b.n	80041fe <__hi0bits+0xa>

08004234 <__lo0bits>:
 8004234:	6803      	ldr	r3, [r0, #0]
 8004236:	f013 0207 	ands.w	r2, r3, #7
 800423a:	4601      	mov	r1, r0
 800423c:	d00b      	beq.n	8004256 <__lo0bits+0x22>
 800423e:	07da      	lsls	r2, r3, #31
 8004240:	d424      	bmi.n	800428c <__lo0bits+0x58>
 8004242:	0798      	lsls	r0, r3, #30
 8004244:	bf49      	itett	mi
 8004246:	085b      	lsrmi	r3, r3, #1
 8004248:	089b      	lsrpl	r3, r3, #2
 800424a:	2001      	movmi	r0, #1
 800424c:	600b      	strmi	r3, [r1, #0]
 800424e:	bf5c      	itt	pl
 8004250:	600b      	strpl	r3, [r1, #0]
 8004252:	2002      	movpl	r0, #2
 8004254:	4770      	bx	lr
 8004256:	b298      	uxth	r0, r3
 8004258:	b9b0      	cbnz	r0, 8004288 <__lo0bits+0x54>
 800425a:	0c1b      	lsrs	r3, r3, #16
 800425c:	2010      	movs	r0, #16
 800425e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004262:	bf04      	itt	eq
 8004264:	0a1b      	lsreq	r3, r3, #8
 8004266:	3008      	addeq	r0, #8
 8004268:	071a      	lsls	r2, r3, #28
 800426a:	bf04      	itt	eq
 800426c:	091b      	lsreq	r3, r3, #4
 800426e:	3004      	addeq	r0, #4
 8004270:	079a      	lsls	r2, r3, #30
 8004272:	bf04      	itt	eq
 8004274:	089b      	lsreq	r3, r3, #2
 8004276:	3002      	addeq	r0, #2
 8004278:	07da      	lsls	r2, r3, #31
 800427a:	d403      	bmi.n	8004284 <__lo0bits+0x50>
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	f100 0001 	add.w	r0, r0, #1
 8004282:	d005      	beq.n	8004290 <__lo0bits+0x5c>
 8004284:	600b      	str	r3, [r1, #0]
 8004286:	4770      	bx	lr
 8004288:	4610      	mov	r0, r2
 800428a:	e7e8      	b.n	800425e <__lo0bits+0x2a>
 800428c:	2000      	movs	r0, #0
 800428e:	4770      	bx	lr
 8004290:	2020      	movs	r0, #32
 8004292:	4770      	bx	lr

08004294 <__i2b>:
 8004294:	b510      	push	{r4, lr}
 8004296:	460c      	mov	r4, r1
 8004298:	2101      	movs	r1, #1
 800429a:	f7ff feff 	bl	800409c <_Balloc>
 800429e:	4602      	mov	r2, r0
 80042a0:	b928      	cbnz	r0, 80042ae <__i2b+0x1a>
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <__i2b+0x24>)
 80042a4:	4805      	ldr	r0, [pc, #20]	; (80042bc <__i2b+0x28>)
 80042a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80042aa:	f000 fc9b 	bl	8004be4 <__assert_func>
 80042ae:	2301      	movs	r3, #1
 80042b0:	6144      	str	r4, [r0, #20]
 80042b2:	6103      	str	r3, [r0, #16]
 80042b4:	bd10      	pop	{r4, pc}
 80042b6:	bf00      	nop
 80042b8:	0800592b 	.word	0x0800592b
 80042bc:	0800593c 	.word	0x0800593c

080042c0 <__multiply>:
 80042c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c4:	4614      	mov	r4, r2
 80042c6:	690a      	ldr	r2, [r1, #16]
 80042c8:	6923      	ldr	r3, [r4, #16]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	bfb8      	it	lt
 80042ce:	460b      	movlt	r3, r1
 80042d0:	460d      	mov	r5, r1
 80042d2:	bfbc      	itt	lt
 80042d4:	4625      	movlt	r5, r4
 80042d6:	461c      	movlt	r4, r3
 80042d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80042dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80042e0:	68ab      	ldr	r3, [r5, #8]
 80042e2:	6869      	ldr	r1, [r5, #4]
 80042e4:	eb0a 0709 	add.w	r7, sl, r9
 80042e8:	42bb      	cmp	r3, r7
 80042ea:	b085      	sub	sp, #20
 80042ec:	bfb8      	it	lt
 80042ee:	3101      	addlt	r1, #1
 80042f0:	f7ff fed4 	bl	800409c <_Balloc>
 80042f4:	b930      	cbnz	r0, 8004304 <__multiply+0x44>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b42      	ldr	r3, [pc, #264]	; (8004404 <__multiply+0x144>)
 80042fa:	4843      	ldr	r0, [pc, #268]	; (8004408 <__multiply+0x148>)
 80042fc:	f240 115d 	movw	r1, #349	; 0x15d
 8004300:	f000 fc70 	bl	8004be4 <__assert_func>
 8004304:	f100 0614 	add.w	r6, r0, #20
 8004308:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800430c:	4633      	mov	r3, r6
 800430e:	2200      	movs	r2, #0
 8004310:	4543      	cmp	r3, r8
 8004312:	d31e      	bcc.n	8004352 <__multiply+0x92>
 8004314:	f105 0c14 	add.w	ip, r5, #20
 8004318:	f104 0314 	add.w	r3, r4, #20
 800431c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004320:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004324:	9202      	str	r2, [sp, #8]
 8004326:	ebac 0205 	sub.w	r2, ip, r5
 800432a:	3a15      	subs	r2, #21
 800432c:	f022 0203 	bic.w	r2, r2, #3
 8004330:	3204      	adds	r2, #4
 8004332:	f105 0115 	add.w	r1, r5, #21
 8004336:	458c      	cmp	ip, r1
 8004338:	bf38      	it	cc
 800433a:	2204      	movcc	r2, #4
 800433c:	9201      	str	r2, [sp, #4]
 800433e:	9a02      	ldr	r2, [sp, #8]
 8004340:	9303      	str	r3, [sp, #12]
 8004342:	429a      	cmp	r2, r3
 8004344:	d808      	bhi.n	8004358 <__multiply+0x98>
 8004346:	2f00      	cmp	r7, #0
 8004348:	dc55      	bgt.n	80043f6 <__multiply+0x136>
 800434a:	6107      	str	r7, [r0, #16]
 800434c:	b005      	add	sp, #20
 800434e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004352:	f843 2b04 	str.w	r2, [r3], #4
 8004356:	e7db      	b.n	8004310 <__multiply+0x50>
 8004358:	f8b3 a000 	ldrh.w	sl, [r3]
 800435c:	f1ba 0f00 	cmp.w	sl, #0
 8004360:	d020      	beq.n	80043a4 <__multiply+0xe4>
 8004362:	f105 0e14 	add.w	lr, r5, #20
 8004366:	46b1      	mov	r9, r6
 8004368:	2200      	movs	r2, #0
 800436a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800436e:	f8d9 b000 	ldr.w	fp, [r9]
 8004372:	b2a1      	uxth	r1, r4
 8004374:	fa1f fb8b 	uxth.w	fp, fp
 8004378:	fb0a b101 	mla	r1, sl, r1, fp
 800437c:	4411      	add	r1, r2
 800437e:	f8d9 2000 	ldr.w	r2, [r9]
 8004382:	0c24      	lsrs	r4, r4, #16
 8004384:	0c12      	lsrs	r2, r2, #16
 8004386:	fb0a 2404 	mla	r4, sl, r4, r2
 800438a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800438e:	b289      	uxth	r1, r1
 8004390:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004394:	45f4      	cmp	ip, lr
 8004396:	f849 1b04 	str.w	r1, [r9], #4
 800439a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800439e:	d8e4      	bhi.n	800436a <__multiply+0xaa>
 80043a0:	9901      	ldr	r1, [sp, #4]
 80043a2:	5072      	str	r2, [r6, r1]
 80043a4:	9a03      	ldr	r2, [sp, #12]
 80043a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80043aa:	3304      	adds	r3, #4
 80043ac:	f1b9 0f00 	cmp.w	r9, #0
 80043b0:	d01f      	beq.n	80043f2 <__multiply+0x132>
 80043b2:	6834      	ldr	r4, [r6, #0]
 80043b4:	f105 0114 	add.w	r1, r5, #20
 80043b8:	46b6      	mov	lr, r6
 80043ba:	f04f 0a00 	mov.w	sl, #0
 80043be:	880a      	ldrh	r2, [r1, #0]
 80043c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80043c4:	fb09 b202 	mla	r2, r9, r2, fp
 80043c8:	4492      	add	sl, r2
 80043ca:	b2a4      	uxth	r4, r4
 80043cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80043d0:	f84e 4b04 	str.w	r4, [lr], #4
 80043d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80043d8:	f8be 2000 	ldrh.w	r2, [lr]
 80043dc:	0c24      	lsrs	r4, r4, #16
 80043de:	fb09 2404 	mla	r4, r9, r4, r2
 80043e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80043e6:	458c      	cmp	ip, r1
 80043e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80043ec:	d8e7      	bhi.n	80043be <__multiply+0xfe>
 80043ee:	9a01      	ldr	r2, [sp, #4]
 80043f0:	50b4      	str	r4, [r6, r2]
 80043f2:	3604      	adds	r6, #4
 80043f4:	e7a3      	b.n	800433e <__multiply+0x7e>
 80043f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1a5      	bne.n	800434a <__multiply+0x8a>
 80043fe:	3f01      	subs	r7, #1
 8004400:	e7a1      	b.n	8004346 <__multiply+0x86>
 8004402:	bf00      	nop
 8004404:	0800592b 	.word	0x0800592b
 8004408:	0800593c 	.word	0x0800593c

0800440c <__pow5mult>:
 800440c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004410:	4615      	mov	r5, r2
 8004412:	f012 0203 	ands.w	r2, r2, #3
 8004416:	4606      	mov	r6, r0
 8004418:	460f      	mov	r7, r1
 800441a:	d007      	beq.n	800442c <__pow5mult+0x20>
 800441c:	4c25      	ldr	r4, [pc, #148]	; (80044b4 <__pow5mult+0xa8>)
 800441e:	3a01      	subs	r2, #1
 8004420:	2300      	movs	r3, #0
 8004422:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004426:	f7ff fe9b 	bl	8004160 <__multadd>
 800442a:	4607      	mov	r7, r0
 800442c:	10ad      	asrs	r5, r5, #2
 800442e:	d03d      	beq.n	80044ac <__pow5mult+0xa0>
 8004430:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004432:	b97c      	cbnz	r4, 8004454 <__pow5mult+0x48>
 8004434:	2010      	movs	r0, #16
 8004436:	f7ff fe1b 	bl	8004070 <malloc>
 800443a:	4602      	mov	r2, r0
 800443c:	6270      	str	r0, [r6, #36]	; 0x24
 800443e:	b928      	cbnz	r0, 800444c <__pow5mult+0x40>
 8004440:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <__pow5mult+0xac>)
 8004442:	481e      	ldr	r0, [pc, #120]	; (80044bc <__pow5mult+0xb0>)
 8004444:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004448:	f000 fbcc 	bl	8004be4 <__assert_func>
 800444c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004450:	6004      	str	r4, [r0, #0]
 8004452:	60c4      	str	r4, [r0, #12]
 8004454:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004458:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800445c:	b94c      	cbnz	r4, 8004472 <__pow5mult+0x66>
 800445e:	f240 2171 	movw	r1, #625	; 0x271
 8004462:	4630      	mov	r0, r6
 8004464:	f7ff ff16 	bl	8004294 <__i2b>
 8004468:	2300      	movs	r3, #0
 800446a:	f8c8 0008 	str.w	r0, [r8, #8]
 800446e:	4604      	mov	r4, r0
 8004470:	6003      	str	r3, [r0, #0]
 8004472:	f04f 0900 	mov.w	r9, #0
 8004476:	07eb      	lsls	r3, r5, #31
 8004478:	d50a      	bpl.n	8004490 <__pow5mult+0x84>
 800447a:	4639      	mov	r1, r7
 800447c:	4622      	mov	r2, r4
 800447e:	4630      	mov	r0, r6
 8004480:	f7ff ff1e 	bl	80042c0 <__multiply>
 8004484:	4639      	mov	r1, r7
 8004486:	4680      	mov	r8, r0
 8004488:	4630      	mov	r0, r6
 800448a:	f7ff fe47 	bl	800411c <_Bfree>
 800448e:	4647      	mov	r7, r8
 8004490:	106d      	asrs	r5, r5, #1
 8004492:	d00b      	beq.n	80044ac <__pow5mult+0xa0>
 8004494:	6820      	ldr	r0, [r4, #0]
 8004496:	b938      	cbnz	r0, 80044a8 <__pow5mult+0x9c>
 8004498:	4622      	mov	r2, r4
 800449a:	4621      	mov	r1, r4
 800449c:	4630      	mov	r0, r6
 800449e:	f7ff ff0f 	bl	80042c0 <__multiply>
 80044a2:	6020      	str	r0, [r4, #0]
 80044a4:	f8c0 9000 	str.w	r9, [r0]
 80044a8:	4604      	mov	r4, r0
 80044aa:	e7e4      	b.n	8004476 <__pow5mult+0x6a>
 80044ac:	4638      	mov	r0, r7
 80044ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044b2:	bf00      	nop
 80044b4:	08005a90 	.word	0x08005a90
 80044b8:	080058b5 	.word	0x080058b5
 80044bc:	0800593c 	.word	0x0800593c

080044c0 <__lshift>:
 80044c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044c4:	460c      	mov	r4, r1
 80044c6:	6849      	ldr	r1, [r1, #4]
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80044ce:	68a3      	ldr	r3, [r4, #8]
 80044d0:	4607      	mov	r7, r0
 80044d2:	4691      	mov	r9, r2
 80044d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80044d8:	f108 0601 	add.w	r6, r8, #1
 80044dc:	42b3      	cmp	r3, r6
 80044de:	db0b      	blt.n	80044f8 <__lshift+0x38>
 80044e0:	4638      	mov	r0, r7
 80044e2:	f7ff fddb 	bl	800409c <_Balloc>
 80044e6:	4605      	mov	r5, r0
 80044e8:	b948      	cbnz	r0, 80044fe <__lshift+0x3e>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4b28      	ldr	r3, [pc, #160]	; (8004590 <__lshift+0xd0>)
 80044ee:	4829      	ldr	r0, [pc, #164]	; (8004594 <__lshift+0xd4>)
 80044f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80044f4:	f000 fb76 	bl	8004be4 <__assert_func>
 80044f8:	3101      	adds	r1, #1
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	e7ee      	b.n	80044dc <__lshift+0x1c>
 80044fe:	2300      	movs	r3, #0
 8004500:	f100 0114 	add.w	r1, r0, #20
 8004504:	f100 0210 	add.w	r2, r0, #16
 8004508:	4618      	mov	r0, r3
 800450a:	4553      	cmp	r3, sl
 800450c:	db33      	blt.n	8004576 <__lshift+0xb6>
 800450e:	6920      	ldr	r0, [r4, #16]
 8004510:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004514:	f104 0314 	add.w	r3, r4, #20
 8004518:	f019 091f 	ands.w	r9, r9, #31
 800451c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004520:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004524:	d02b      	beq.n	800457e <__lshift+0xbe>
 8004526:	f1c9 0e20 	rsb	lr, r9, #32
 800452a:	468a      	mov	sl, r1
 800452c:	2200      	movs	r2, #0
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	fa00 f009 	lsl.w	r0, r0, r9
 8004534:	4302      	orrs	r2, r0
 8004536:	f84a 2b04 	str.w	r2, [sl], #4
 800453a:	f853 2b04 	ldr.w	r2, [r3], #4
 800453e:	459c      	cmp	ip, r3
 8004540:	fa22 f20e 	lsr.w	r2, r2, lr
 8004544:	d8f3      	bhi.n	800452e <__lshift+0x6e>
 8004546:	ebac 0304 	sub.w	r3, ip, r4
 800454a:	3b15      	subs	r3, #21
 800454c:	f023 0303 	bic.w	r3, r3, #3
 8004550:	3304      	adds	r3, #4
 8004552:	f104 0015 	add.w	r0, r4, #21
 8004556:	4584      	cmp	ip, r0
 8004558:	bf38      	it	cc
 800455a:	2304      	movcc	r3, #4
 800455c:	50ca      	str	r2, [r1, r3]
 800455e:	b10a      	cbz	r2, 8004564 <__lshift+0xa4>
 8004560:	f108 0602 	add.w	r6, r8, #2
 8004564:	3e01      	subs	r6, #1
 8004566:	4638      	mov	r0, r7
 8004568:	612e      	str	r6, [r5, #16]
 800456a:	4621      	mov	r1, r4
 800456c:	f7ff fdd6 	bl	800411c <_Bfree>
 8004570:	4628      	mov	r0, r5
 8004572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004576:	f842 0f04 	str.w	r0, [r2, #4]!
 800457a:	3301      	adds	r3, #1
 800457c:	e7c5      	b.n	800450a <__lshift+0x4a>
 800457e:	3904      	subs	r1, #4
 8004580:	f853 2b04 	ldr.w	r2, [r3], #4
 8004584:	f841 2f04 	str.w	r2, [r1, #4]!
 8004588:	459c      	cmp	ip, r3
 800458a:	d8f9      	bhi.n	8004580 <__lshift+0xc0>
 800458c:	e7ea      	b.n	8004564 <__lshift+0xa4>
 800458e:	bf00      	nop
 8004590:	0800592b 	.word	0x0800592b
 8004594:	0800593c 	.word	0x0800593c

08004598 <__mcmp>:
 8004598:	b530      	push	{r4, r5, lr}
 800459a:	6902      	ldr	r2, [r0, #16]
 800459c:	690c      	ldr	r4, [r1, #16]
 800459e:	1b12      	subs	r2, r2, r4
 80045a0:	d10e      	bne.n	80045c0 <__mcmp+0x28>
 80045a2:	f100 0314 	add.w	r3, r0, #20
 80045a6:	3114      	adds	r1, #20
 80045a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80045ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80045b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80045b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80045b8:	42a5      	cmp	r5, r4
 80045ba:	d003      	beq.n	80045c4 <__mcmp+0x2c>
 80045bc:	d305      	bcc.n	80045ca <__mcmp+0x32>
 80045be:	2201      	movs	r2, #1
 80045c0:	4610      	mov	r0, r2
 80045c2:	bd30      	pop	{r4, r5, pc}
 80045c4:	4283      	cmp	r3, r0
 80045c6:	d3f3      	bcc.n	80045b0 <__mcmp+0x18>
 80045c8:	e7fa      	b.n	80045c0 <__mcmp+0x28>
 80045ca:	f04f 32ff 	mov.w	r2, #4294967295
 80045ce:	e7f7      	b.n	80045c0 <__mcmp+0x28>

080045d0 <__mdiff>:
 80045d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d4:	460c      	mov	r4, r1
 80045d6:	4606      	mov	r6, r0
 80045d8:	4611      	mov	r1, r2
 80045da:	4620      	mov	r0, r4
 80045dc:	4617      	mov	r7, r2
 80045de:	f7ff ffdb 	bl	8004598 <__mcmp>
 80045e2:	1e05      	subs	r5, r0, #0
 80045e4:	d110      	bne.n	8004608 <__mdiff+0x38>
 80045e6:	4629      	mov	r1, r5
 80045e8:	4630      	mov	r0, r6
 80045ea:	f7ff fd57 	bl	800409c <_Balloc>
 80045ee:	b930      	cbnz	r0, 80045fe <__mdiff+0x2e>
 80045f0:	4b39      	ldr	r3, [pc, #228]	; (80046d8 <__mdiff+0x108>)
 80045f2:	4602      	mov	r2, r0
 80045f4:	f240 2132 	movw	r1, #562	; 0x232
 80045f8:	4838      	ldr	r0, [pc, #224]	; (80046dc <__mdiff+0x10c>)
 80045fa:	f000 faf3 	bl	8004be4 <__assert_func>
 80045fe:	2301      	movs	r3, #1
 8004600:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004608:	bfa4      	itt	ge
 800460a:	463b      	movge	r3, r7
 800460c:	4627      	movge	r7, r4
 800460e:	4630      	mov	r0, r6
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	bfa6      	itte	ge
 8004614:	461c      	movge	r4, r3
 8004616:	2500      	movge	r5, #0
 8004618:	2501      	movlt	r5, #1
 800461a:	f7ff fd3f 	bl	800409c <_Balloc>
 800461e:	b920      	cbnz	r0, 800462a <__mdiff+0x5a>
 8004620:	4b2d      	ldr	r3, [pc, #180]	; (80046d8 <__mdiff+0x108>)
 8004622:	4602      	mov	r2, r0
 8004624:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004628:	e7e6      	b.n	80045f8 <__mdiff+0x28>
 800462a:	693e      	ldr	r6, [r7, #16]
 800462c:	60c5      	str	r5, [r0, #12]
 800462e:	6925      	ldr	r5, [r4, #16]
 8004630:	f107 0114 	add.w	r1, r7, #20
 8004634:	f104 0914 	add.w	r9, r4, #20
 8004638:	f100 0e14 	add.w	lr, r0, #20
 800463c:	f107 0210 	add.w	r2, r7, #16
 8004640:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8004644:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8004648:	46f2      	mov	sl, lr
 800464a:	2700      	movs	r7, #0
 800464c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004650:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004654:	fa1f f883 	uxth.w	r8, r3
 8004658:	fa17 f78b 	uxtah	r7, r7, fp
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	eba7 0808 	sub.w	r8, r7, r8
 8004662:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004666:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800466a:	fa1f f888 	uxth.w	r8, r8
 800466e:	141f      	asrs	r7, r3, #16
 8004670:	454d      	cmp	r5, r9
 8004672:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004676:	f84a 3b04 	str.w	r3, [sl], #4
 800467a:	d8e7      	bhi.n	800464c <__mdiff+0x7c>
 800467c:	1b2b      	subs	r3, r5, r4
 800467e:	3b15      	subs	r3, #21
 8004680:	f023 0303 	bic.w	r3, r3, #3
 8004684:	3304      	adds	r3, #4
 8004686:	3415      	adds	r4, #21
 8004688:	42a5      	cmp	r5, r4
 800468a:	bf38      	it	cc
 800468c:	2304      	movcc	r3, #4
 800468e:	4419      	add	r1, r3
 8004690:	4473      	add	r3, lr
 8004692:	469e      	mov	lr, r3
 8004694:	460d      	mov	r5, r1
 8004696:	4565      	cmp	r5, ip
 8004698:	d30e      	bcc.n	80046b8 <__mdiff+0xe8>
 800469a:	f10c 0203 	add.w	r2, ip, #3
 800469e:	1a52      	subs	r2, r2, r1
 80046a0:	f022 0203 	bic.w	r2, r2, #3
 80046a4:	3903      	subs	r1, #3
 80046a6:	458c      	cmp	ip, r1
 80046a8:	bf38      	it	cc
 80046aa:	2200      	movcc	r2, #0
 80046ac:	441a      	add	r2, r3
 80046ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80046b2:	b17b      	cbz	r3, 80046d4 <__mdiff+0x104>
 80046b4:	6106      	str	r6, [r0, #16]
 80046b6:	e7a5      	b.n	8004604 <__mdiff+0x34>
 80046b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80046bc:	fa17 f488 	uxtah	r4, r7, r8
 80046c0:	1422      	asrs	r2, r4, #16
 80046c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80046c6:	b2a4      	uxth	r4, r4
 80046c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80046cc:	f84e 4b04 	str.w	r4, [lr], #4
 80046d0:	1417      	asrs	r7, r2, #16
 80046d2:	e7e0      	b.n	8004696 <__mdiff+0xc6>
 80046d4:	3e01      	subs	r6, #1
 80046d6:	e7ea      	b.n	80046ae <__mdiff+0xde>
 80046d8:	0800592b 	.word	0x0800592b
 80046dc:	0800593c 	.word	0x0800593c

080046e0 <__d2b>:
 80046e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80046e4:	4689      	mov	r9, r1
 80046e6:	2101      	movs	r1, #1
 80046e8:	ec57 6b10 	vmov	r6, r7, d0
 80046ec:	4690      	mov	r8, r2
 80046ee:	f7ff fcd5 	bl	800409c <_Balloc>
 80046f2:	4604      	mov	r4, r0
 80046f4:	b930      	cbnz	r0, 8004704 <__d2b+0x24>
 80046f6:	4602      	mov	r2, r0
 80046f8:	4b25      	ldr	r3, [pc, #148]	; (8004790 <__d2b+0xb0>)
 80046fa:	4826      	ldr	r0, [pc, #152]	; (8004794 <__d2b+0xb4>)
 80046fc:	f240 310a 	movw	r1, #778	; 0x30a
 8004700:	f000 fa70 	bl	8004be4 <__assert_func>
 8004704:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004708:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800470c:	bb35      	cbnz	r5, 800475c <__d2b+0x7c>
 800470e:	2e00      	cmp	r6, #0
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	d028      	beq.n	8004766 <__d2b+0x86>
 8004714:	4668      	mov	r0, sp
 8004716:	9600      	str	r6, [sp, #0]
 8004718:	f7ff fd8c 	bl	8004234 <__lo0bits>
 800471c:	9900      	ldr	r1, [sp, #0]
 800471e:	b300      	cbz	r0, 8004762 <__d2b+0x82>
 8004720:	9a01      	ldr	r2, [sp, #4]
 8004722:	f1c0 0320 	rsb	r3, r0, #32
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	430b      	orrs	r3, r1
 800472c:	40c2      	lsrs	r2, r0
 800472e:	6163      	str	r3, [r4, #20]
 8004730:	9201      	str	r2, [sp, #4]
 8004732:	9b01      	ldr	r3, [sp, #4]
 8004734:	61a3      	str	r3, [r4, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf14      	ite	ne
 800473a:	2202      	movne	r2, #2
 800473c:	2201      	moveq	r2, #1
 800473e:	6122      	str	r2, [r4, #16]
 8004740:	b1d5      	cbz	r5, 8004778 <__d2b+0x98>
 8004742:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004746:	4405      	add	r5, r0
 8004748:	f8c9 5000 	str.w	r5, [r9]
 800474c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004750:	f8c8 0000 	str.w	r0, [r8]
 8004754:	4620      	mov	r0, r4
 8004756:	b003      	add	sp, #12
 8004758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800475c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004760:	e7d5      	b.n	800470e <__d2b+0x2e>
 8004762:	6161      	str	r1, [r4, #20]
 8004764:	e7e5      	b.n	8004732 <__d2b+0x52>
 8004766:	a801      	add	r0, sp, #4
 8004768:	f7ff fd64 	bl	8004234 <__lo0bits>
 800476c:	9b01      	ldr	r3, [sp, #4]
 800476e:	6163      	str	r3, [r4, #20]
 8004770:	2201      	movs	r2, #1
 8004772:	6122      	str	r2, [r4, #16]
 8004774:	3020      	adds	r0, #32
 8004776:	e7e3      	b.n	8004740 <__d2b+0x60>
 8004778:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800477c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004780:	f8c9 0000 	str.w	r0, [r9]
 8004784:	6918      	ldr	r0, [r3, #16]
 8004786:	f7ff fd35 	bl	80041f4 <__hi0bits>
 800478a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800478e:	e7df      	b.n	8004750 <__d2b+0x70>
 8004790:	0800592b 	.word	0x0800592b
 8004794:	0800593c 	.word	0x0800593c

08004798 <_calloc_r>:
 8004798:	b513      	push	{r0, r1, r4, lr}
 800479a:	434a      	muls	r2, r1
 800479c:	4611      	mov	r1, r2
 800479e:	9201      	str	r2, [sp, #4]
 80047a0:	f000 f85a 	bl	8004858 <_malloc_r>
 80047a4:	4604      	mov	r4, r0
 80047a6:	b118      	cbz	r0, 80047b0 <_calloc_r+0x18>
 80047a8:	9a01      	ldr	r2, [sp, #4]
 80047aa:	2100      	movs	r1, #0
 80047ac:	f7fe f952 	bl	8002a54 <memset>
 80047b0:	4620      	mov	r0, r4
 80047b2:	b002      	add	sp, #8
 80047b4:	bd10      	pop	{r4, pc}
	...

080047b8 <_free_r>:
 80047b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047ba:	2900      	cmp	r1, #0
 80047bc:	d048      	beq.n	8004850 <_free_r+0x98>
 80047be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047c2:	9001      	str	r0, [sp, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f1a1 0404 	sub.w	r4, r1, #4
 80047ca:	bfb8      	it	lt
 80047cc:	18e4      	addlt	r4, r4, r3
 80047ce:	f000 fa65 	bl	8004c9c <__malloc_lock>
 80047d2:	4a20      	ldr	r2, [pc, #128]	; (8004854 <_free_r+0x9c>)
 80047d4:	9801      	ldr	r0, [sp, #4]
 80047d6:	6813      	ldr	r3, [r2, #0]
 80047d8:	4615      	mov	r5, r2
 80047da:	b933      	cbnz	r3, 80047ea <_free_r+0x32>
 80047dc:	6063      	str	r3, [r4, #4]
 80047de:	6014      	str	r4, [r2, #0]
 80047e0:	b003      	add	sp, #12
 80047e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047e6:	f000 ba5f 	b.w	8004ca8 <__malloc_unlock>
 80047ea:	42a3      	cmp	r3, r4
 80047ec:	d90b      	bls.n	8004806 <_free_r+0x4e>
 80047ee:	6821      	ldr	r1, [r4, #0]
 80047f0:	1862      	adds	r2, r4, r1
 80047f2:	4293      	cmp	r3, r2
 80047f4:	bf04      	itt	eq
 80047f6:	681a      	ldreq	r2, [r3, #0]
 80047f8:	685b      	ldreq	r3, [r3, #4]
 80047fa:	6063      	str	r3, [r4, #4]
 80047fc:	bf04      	itt	eq
 80047fe:	1852      	addeq	r2, r2, r1
 8004800:	6022      	streq	r2, [r4, #0]
 8004802:	602c      	str	r4, [r5, #0]
 8004804:	e7ec      	b.n	80047e0 <_free_r+0x28>
 8004806:	461a      	mov	r2, r3
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	b10b      	cbz	r3, 8004810 <_free_r+0x58>
 800480c:	42a3      	cmp	r3, r4
 800480e:	d9fa      	bls.n	8004806 <_free_r+0x4e>
 8004810:	6811      	ldr	r1, [r2, #0]
 8004812:	1855      	adds	r5, r2, r1
 8004814:	42a5      	cmp	r5, r4
 8004816:	d10b      	bne.n	8004830 <_free_r+0x78>
 8004818:	6824      	ldr	r4, [r4, #0]
 800481a:	4421      	add	r1, r4
 800481c:	1854      	adds	r4, r2, r1
 800481e:	42a3      	cmp	r3, r4
 8004820:	6011      	str	r1, [r2, #0]
 8004822:	d1dd      	bne.n	80047e0 <_free_r+0x28>
 8004824:	681c      	ldr	r4, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	6053      	str	r3, [r2, #4]
 800482a:	4421      	add	r1, r4
 800482c:	6011      	str	r1, [r2, #0]
 800482e:	e7d7      	b.n	80047e0 <_free_r+0x28>
 8004830:	d902      	bls.n	8004838 <_free_r+0x80>
 8004832:	230c      	movs	r3, #12
 8004834:	6003      	str	r3, [r0, #0]
 8004836:	e7d3      	b.n	80047e0 <_free_r+0x28>
 8004838:	6825      	ldr	r5, [r4, #0]
 800483a:	1961      	adds	r1, r4, r5
 800483c:	428b      	cmp	r3, r1
 800483e:	bf04      	itt	eq
 8004840:	6819      	ldreq	r1, [r3, #0]
 8004842:	685b      	ldreq	r3, [r3, #4]
 8004844:	6063      	str	r3, [r4, #4]
 8004846:	bf04      	itt	eq
 8004848:	1949      	addeq	r1, r1, r5
 800484a:	6021      	streq	r1, [r4, #0]
 800484c:	6054      	str	r4, [r2, #4]
 800484e:	e7c7      	b.n	80047e0 <_free_r+0x28>
 8004850:	b003      	add	sp, #12
 8004852:	bd30      	pop	{r4, r5, pc}
 8004854:	20000214 	.word	0x20000214

08004858 <_malloc_r>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	1ccd      	adds	r5, r1, #3
 800485c:	f025 0503 	bic.w	r5, r5, #3
 8004860:	3508      	adds	r5, #8
 8004862:	2d0c      	cmp	r5, #12
 8004864:	bf38      	it	cc
 8004866:	250c      	movcc	r5, #12
 8004868:	2d00      	cmp	r5, #0
 800486a:	4606      	mov	r6, r0
 800486c:	db01      	blt.n	8004872 <_malloc_r+0x1a>
 800486e:	42a9      	cmp	r1, r5
 8004870:	d903      	bls.n	800487a <_malloc_r+0x22>
 8004872:	230c      	movs	r3, #12
 8004874:	6033      	str	r3, [r6, #0]
 8004876:	2000      	movs	r0, #0
 8004878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800487a:	f000 fa0f 	bl	8004c9c <__malloc_lock>
 800487e:	4921      	ldr	r1, [pc, #132]	; (8004904 <_malloc_r+0xac>)
 8004880:	680a      	ldr	r2, [r1, #0]
 8004882:	4614      	mov	r4, r2
 8004884:	b99c      	cbnz	r4, 80048ae <_malloc_r+0x56>
 8004886:	4f20      	ldr	r7, [pc, #128]	; (8004908 <_malloc_r+0xb0>)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	b923      	cbnz	r3, 8004896 <_malloc_r+0x3e>
 800488c:	4621      	mov	r1, r4
 800488e:	4630      	mov	r0, r6
 8004890:	f000 f998 	bl	8004bc4 <_sbrk_r>
 8004894:	6038      	str	r0, [r7, #0]
 8004896:	4629      	mov	r1, r5
 8004898:	4630      	mov	r0, r6
 800489a:	f000 f993 	bl	8004bc4 <_sbrk_r>
 800489e:	1c43      	adds	r3, r0, #1
 80048a0:	d123      	bne.n	80048ea <_malloc_r+0x92>
 80048a2:	230c      	movs	r3, #12
 80048a4:	6033      	str	r3, [r6, #0]
 80048a6:	4630      	mov	r0, r6
 80048a8:	f000 f9fe 	bl	8004ca8 <__malloc_unlock>
 80048ac:	e7e3      	b.n	8004876 <_malloc_r+0x1e>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	1b5b      	subs	r3, r3, r5
 80048b2:	d417      	bmi.n	80048e4 <_malloc_r+0x8c>
 80048b4:	2b0b      	cmp	r3, #11
 80048b6:	d903      	bls.n	80048c0 <_malloc_r+0x68>
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	441c      	add	r4, r3
 80048bc:	6025      	str	r5, [r4, #0]
 80048be:	e004      	b.n	80048ca <_malloc_r+0x72>
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	42a2      	cmp	r2, r4
 80048c4:	bf0c      	ite	eq
 80048c6:	600b      	streq	r3, [r1, #0]
 80048c8:	6053      	strne	r3, [r2, #4]
 80048ca:	4630      	mov	r0, r6
 80048cc:	f000 f9ec 	bl	8004ca8 <__malloc_unlock>
 80048d0:	f104 000b 	add.w	r0, r4, #11
 80048d4:	1d23      	adds	r3, r4, #4
 80048d6:	f020 0007 	bic.w	r0, r0, #7
 80048da:	1ac2      	subs	r2, r0, r3
 80048dc:	d0cc      	beq.n	8004878 <_malloc_r+0x20>
 80048de:	1a1b      	subs	r3, r3, r0
 80048e0:	50a3      	str	r3, [r4, r2]
 80048e2:	e7c9      	b.n	8004878 <_malloc_r+0x20>
 80048e4:	4622      	mov	r2, r4
 80048e6:	6864      	ldr	r4, [r4, #4]
 80048e8:	e7cc      	b.n	8004884 <_malloc_r+0x2c>
 80048ea:	1cc4      	adds	r4, r0, #3
 80048ec:	f024 0403 	bic.w	r4, r4, #3
 80048f0:	42a0      	cmp	r0, r4
 80048f2:	d0e3      	beq.n	80048bc <_malloc_r+0x64>
 80048f4:	1a21      	subs	r1, r4, r0
 80048f6:	4630      	mov	r0, r6
 80048f8:	f000 f964 	bl	8004bc4 <_sbrk_r>
 80048fc:	3001      	adds	r0, #1
 80048fe:	d1dd      	bne.n	80048bc <_malloc_r+0x64>
 8004900:	e7cf      	b.n	80048a2 <_malloc_r+0x4a>
 8004902:	bf00      	nop
 8004904:	20000214 	.word	0x20000214
 8004908:	20000218 	.word	0x20000218

0800490c <__ssputs_r>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	688e      	ldr	r6, [r1, #8]
 8004912:	429e      	cmp	r6, r3
 8004914:	4682      	mov	sl, r0
 8004916:	460c      	mov	r4, r1
 8004918:	4690      	mov	r8, r2
 800491a:	461f      	mov	r7, r3
 800491c:	d838      	bhi.n	8004990 <__ssputs_r+0x84>
 800491e:	898a      	ldrh	r2, [r1, #12]
 8004920:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004924:	d032      	beq.n	800498c <__ssputs_r+0x80>
 8004926:	6825      	ldr	r5, [r4, #0]
 8004928:	6909      	ldr	r1, [r1, #16]
 800492a:	eba5 0901 	sub.w	r9, r5, r1
 800492e:	6965      	ldr	r5, [r4, #20]
 8004930:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004934:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004938:	3301      	adds	r3, #1
 800493a:	444b      	add	r3, r9
 800493c:	106d      	asrs	r5, r5, #1
 800493e:	429d      	cmp	r5, r3
 8004940:	bf38      	it	cc
 8004942:	461d      	movcc	r5, r3
 8004944:	0553      	lsls	r3, r2, #21
 8004946:	d531      	bpl.n	80049ac <__ssputs_r+0xa0>
 8004948:	4629      	mov	r1, r5
 800494a:	f7ff ff85 	bl	8004858 <_malloc_r>
 800494e:	4606      	mov	r6, r0
 8004950:	b950      	cbnz	r0, 8004968 <__ssputs_r+0x5c>
 8004952:	230c      	movs	r3, #12
 8004954:	f8ca 3000 	str.w	r3, [sl]
 8004958:	89a3      	ldrh	r3, [r4, #12]
 800495a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800495e:	81a3      	strh	r3, [r4, #12]
 8004960:	f04f 30ff 	mov.w	r0, #4294967295
 8004964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004968:	6921      	ldr	r1, [r4, #16]
 800496a:	464a      	mov	r2, r9
 800496c:	f7ff fb88 	bl	8004080 <memcpy>
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497a:	81a3      	strh	r3, [r4, #12]
 800497c:	6126      	str	r6, [r4, #16]
 800497e:	6165      	str	r5, [r4, #20]
 8004980:	444e      	add	r6, r9
 8004982:	eba5 0509 	sub.w	r5, r5, r9
 8004986:	6026      	str	r6, [r4, #0]
 8004988:	60a5      	str	r5, [r4, #8]
 800498a:	463e      	mov	r6, r7
 800498c:	42be      	cmp	r6, r7
 800498e:	d900      	bls.n	8004992 <__ssputs_r+0x86>
 8004990:	463e      	mov	r6, r7
 8004992:	4632      	mov	r2, r6
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	4641      	mov	r1, r8
 8004998:	f000 f966 	bl	8004c68 <memmove>
 800499c:	68a3      	ldr	r3, [r4, #8]
 800499e:	6822      	ldr	r2, [r4, #0]
 80049a0:	1b9b      	subs	r3, r3, r6
 80049a2:	4432      	add	r2, r6
 80049a4:	60a3      	str	r3, [r4, #8]
 80049a6:	6022      	str	r2, [r4, #0]
 80049a8:	2000      	movs	r0, #0
 80049aa:	e7db      	b.n	8004964 <__ssputs_r+0x58>
 80049ac:	462a      	mov	r2, r5
 80049ae:	f000 f981 	bl	8004cb4 <_realloc_r>
 80049b2:	4606      	mov	r6, r0
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d1e1      	bne.n	800497c <__ssputs_r+0x70>
 80049b8:	6921      	ldr	r1, [r4, #16]
 80049ba:	4650      	mov	r0, sl
 80049bc:	f7ff fefc 	bl	80047b8 <_free_r>
 80049c0:	e7c7      	b.n	8004952 <__ssputs_r+0x46>
	...

080049c4 <_svfiprintf_r>:
 80049c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c8:	4698      	mov	r8, r3
 80049ca:	898b      	ldrh	r3, [r1, #12]
 80049cc:	061b      	lsls	r3, r3, #24
 80049ce:	b09d      	sub	sp, #116	; 0x74
 80049d0:	4607      	mov	r7, r0
 80049d2:	460d      	mov	r5, r1
 80049d4:	4614      	mov	r4, r2
 80049d6:	d50e      	bpl.n	80049f6 <_svfiprintf_r+0x32>
 80049d8:	690b      	ldr	r3, [r1, #16]
 80049da:	b963      	cbnz	r3, 80049f6 <_svfiprintf_r+0x32>
 80049dc:	2140      	movs	r1, #64	; 0x40
 80049de:	f7ff ff3b 	bl	8004858 <_malloc_r>
 80049e2:	6028      	str	r0, [r5, #0]
 80049e4:	6128      	str	r0, [r5, #16]
 80049e6:	b920      	cbnz	r0, 80049f2 <_svfiprintf_r+0x2e>
 80049e8:	230c      	movs	r3, #12
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	e0d1      	b.n	8004b96 <_svfiprintf_r+0x1d2>
 80049f2:	2340      	movs	r3, #64	; 0x40
 80049f4:	616b      	str	r3, [r5, #20]
 80049f6:	2300      	movs	r3, #0
 80049f8:	9309      	str	r3, [sp, #36]	; 0x24
 80049fa:	2320      	movs	r3, #32
 80049fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a00:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a04:	2330      	movs	r3, #48	; 0x30
 8004a06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004bb0 <_svfiprintf_r+0x1ec>
 8004a0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a0e:	f04f 0901 	mov.w	r9, #1
 8004a12:	4623      	mov	r3, r4
 8004a14:	469a      	mov	sl, r3
 8004a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a1a:	b10a      	cbz	r2, 8004a20 <_svfiprintf_r+0x5c>
 8004a1c:	2a25      	cmp	r2, #37	; 0x25
 8004a1e:	d1f9      	bne.n	8004a14 <_svfiprintf_r+0x50>
 8004a20:	ebba 0b04 	subs.w	fp, sl, r4
 8004a24:	d00b      	beq.n	8004a3e <_svfiprintf_r+0x7a>
 8004a26:	465b      	mov	r3, fp
 8004a28:	4622      	mov	r2, r4
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	4638      	mov	r0, r7
 8004a2e:	f7ff ff6d 	bl	800490c <__ssputs_r>
 8004a32:	3001      	adds	r0, #1
 8004a34:	f000 80aa 	beq.w	8004b8c <_svfiprintf_r+0x1c8>
 8004a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a3a:	445a      	add	r2, fp
 8004a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80a2 	beq.w	8004b8c <_svfiprintf_r+0x1c8>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a52:	f10a 0a01 	add.w	sl, sl, #1
 8004a56:	9304      	str	r3, [sp, #16]
 8004a58:	9307      	str	r3, [sp, #28]
 8004a5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a5e:	931a      	str	r3, [sp, #104]	; 0x68
 8004a60:	4654      	mov	r4, sl
 8004a62:	2205      	movs	r2, #5
 8004a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a68:	4851      	ldr	r0, [pc, #324]	; (8004bb0 <_svfiprintf_r+0x1ec>)
 8004a6a:	f7fb fbd9 	bl	8000220 <memchr>
 8004a6e:	9a04      	ldr	r2, [sp, #16]
 8004a70:	b9d8      	cbnz	r0, 8004aaa <_svfiprintf_r+0xe6>
 8004a72:	06d0      	lsls	r0, r2, #27
 8004a74:	bf44      	itt	mi
 8004a76:	2320      	movmi	r3, #32
 8004a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a7c:	0711      	lsls	r1, r2, #28
 8004a7e:	bf44      	itt	mi
 8004a80:	232b      	movmi	r3, #43	; 0x2b
 8004a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a86:	f89a 3000 	ldrb.w	r3, [sl]
 8004a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a8c:	d015      	beq.n	8004aba <_svfiprintf_r+0xf6>
 8004a8e:	9a07      	ldr	r2, [sp, #28]
 8004a90:	4654      	mov	r4, sl
 8004a92:	2000      	movs	r0, #0
 8004a94:	f04f 0c0a 	mov.w	ip, #10
 8004a98:	4621      	mov	r1, r4
 8004a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a9e:	3b30      	subs	r3, #48	; 0x30
 8004aa0:	2b09      	cmp	r3, #9
 8004aa2:	d94e      	bls.n	8004b42 <_svfiprintf_r+0x17e>
 8004aa4:	b1b0      	cbz	r0, 8004ad4 <_svfiprintf_r+0x110>
 8004aa6:	9207      	str	r2, [sp, #28]
 8004aa8:	e014      	b.n	8004ad4 <_svfiprintf_r+0x110>
 8004aaa:	eba0 0308 	sub.w	r3, r0, r8
 8004aae:	fa09 f303 	lsl.w	r3, r9, r3
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	9304      	str	r3, [sp, #16]
 8004ab6:	46a2      	mov	sl, r4
 8004ab8:	e7d2      	b.n	8004a60 <_svfiprintf_r+0x9c>
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	1d19      	adds	r1, r3, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	9103      	str	r1, [sp, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bfbb      	ittet	lt
 8004ac6:	425b      	neglt	r3, r3
 8004ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8004acc:	9307      	strge	r3, [sp, #28]
 8004ace:	9307      	strlt	r3, [sp, #28]
 8004ad0:	bfb8      	it	lt
 8004ad2:	9204      	strlt	r2, [sp, #16]
 8004ad4:	7823      	ldrb	r3, [r4, #0]
 8004ad6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ad8:	d10c      	bne.n	8004af4 <_svfiprintf_r+0x130>
 8004ada:	7863      	ldrb	r3, [r4, #1]
 8004adc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ade:	d135      	bne.n	8004b4c <_svfiprintf_r+0x188>
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	1d1a      	adds	r2, r3, #4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	9203      	str	r2, [sp, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bfb8      	it	lt
 8004aec:	f04f 33ff 	movlt.w	r3, #4294967295
 8004af0:	3402      	adds	r4, #2
 8004af2:	9305      	str	r3, [sp, #20]
 8004af4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004bc0 <_svfiprintf_r+0x1fc>
 8004af8:	7821      	ldrb	r1, [r4, #0]
 8004afa:	2203      	movs	r2, #3
 8004afc:	4650      	mov	r0, sl
 8004afe:	f7fb fb8f 	bl	8000220 <memchr>
 8004b02:	b140      	cbz	r0, 8004b16 <_svfiprintf_r+0x152>
 8004b04:	2340      	movs	r3, #64	; 0x40
 8004b06:	eba0 000a 	sub.w	r0, r0, sl
 8004b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b0e:	9b04      	ldr	r3, [sp, #16]
 8004b10:	4303      	orrs	r3, r0
 8004b12:	3401      	adds	r4, #1
 8004b14:	9304      	str	r3, [sp, #16]
 8004b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b1a:	4826      	ldr	r0, [pc, #152]	; (8004bb4 <_svfiprintf_r+0x1f0>)
 8004b1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b20:	2206      	movs	r2, #6
 8004b22:	f7fb fb7d 	bl	8000220 <memchr>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d038      	beq.n	8004b9c <_svfiprintf_r+0x1d8>
 8004b2a:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <_svfiprintf_r+0x1f4>)
 8004b2c:	bb1b      	cbnz	r3, 8004b76 <_svfiprintf_r+0x1b2>
 8004b2e:	9b03      	ldr	r3, [sp, #12]
 8004b30:	3307      	adds	r3, #7
 8004b32:	f023 0307 	bic.w	r3, r3, #7
 8004b36:	3308      	adds	r3, #8
 8004b38:	9303      	str	r3, [sp, #12]
 8004b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3c:	4433      	add	r3, r6
 8004b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b40:	e767      	b.n	8004a12 <_svfiprintf_r+0x4e>
 8004b42:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b46:	460c      	mov	r4, r1
 8004b48:	2001      	movs	r0, #1
 8004b4a:	e7a5      	b.n	8004a98 <_svfiprintf_r+0xd4>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	3401      	adds	r4, #1
 8004b50:	9305      	str	r3, [sp, #20]
 8004b52:	4619      	mov	r1, r3
 8004b54:	f04f 0c0a 	mov.w	ip, #10
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b5e:	3a30      	subs	r2, #48	; 0x30
 8004b60:	2a09      	cmp	r2, #9
 8004b62:	d903      	bls.n	8004b6c <_svfiprintf_r+0x1a8>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0c5      	beq.n	8004af4 <_svfiprintf_r+0x130>
 8004b68:	9105      	str	r1, [sp, #20]
 8004b6a:	e7c3      	b.n	8004af4 <_svfiprintf_r+0x130>
 8004b6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b70:	4604      	mov	r4, r0
 8004b72:	2301      	movs	r3, #1
 8004b74:	e7f0      	b.n	8004b58 <_svfiprintf_r+0x194>
 8004b76:	ab03      	add	r3, sp, #12
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	462a      	mov	r2, r5
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <_svfiprintf_r+0x1f8>)
 8004b7e:	a904      	add	r1, sp, #16
 8004b80:	4638      	mov	r0, r7
 8004b82:	f7fe f80f 	bl	8002ba4 <_printf_float>
 8004b86:	1c42      	adds	r2, r0, #1
 8004b88:	4606      	mov	r6, r0
 8004b8a:	d1d6      	bne.n	8004b3a <_svfiprintf_r+0x176>
 8004b8c:	89ab      	ldrh	r3, [r5, #12]
 8004b8e:	065b      	lsls	r3, r3, #25
 8004b90:	f53f af2c 	bmi.w	80049ec <_svfiprintf_r+0x28>
 8004b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b96:	b01d      	add	sp, #116	; 0x74
 8004b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b9c:	ab03      	add	r3, sp, #12
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	462a      	mov	r2, r5
 8004ba2:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <_svfiprintf_r+0x1f8>)
 8004ba4:	a904      	add	r1, sp, #16
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	f7fe faa0 	bl	80030ec <_printf_i>
 8004bac:	e7eb      	b.n	8004b86 <_svfiprintf_r+0x1c2>
 8004bae:	bf00      	nop
 8004bb0:	08005a9c 	.word	0x08005a9c
 8004bb4:	08005aa6 	.word	0x08005aa6
 8004bb8:	08002ba5 	.word	0x08002ba5
 8004bbc:	0800490d 	.word	0x0800490d
 8004bc0:	08005aa2 	.word	0x08005aa2

08004bc4 <_sbrk_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4d06      	ldr	r5, [pc, #24]	; (8004be0 <_sbrk_r+0x1c>)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4604      	mov	r4, r0
 8004bcc:	4608      	mov	r0, r1
 8004bce:	602b      	str	r3, [r5, #0]
 8004bd0:	f000 fe14 	bl	80057fc <_sbrk>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d102      	bne.n	8004bde <_sbrk_r+0x1a>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	b103      	cbz	r3, 8004bde <_sbrk_r+0x1a>
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	20000268 	.word	0x20000268

08004be4 <__assert_func>:
 8004be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004be6:	4614      	mov	r4, r2
 8004be8:	461a      	mov	r2, r3
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <__assert_func+0x2c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4605      	mov	r5, r0
 8004bf0:	68d8      	ldr	r0, [r3, #12]
 8004bf2:	b14c      	cbz	r4, 8004c08 <__assert_func+0x24>
 8004bf4:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <__assert_func+0x30>)
 8004bf6:	9100      	str	r1, [sp, #0]
 8004bf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004bfc:	4906      	ldr	r1, [pc, #24]	; (8004c18 <__assert_func+0x34>)
 8004bfe:	462b      	mov	r3, r5
 8004c00:	f000 f80e 	bl	8004c20 <fiprintf>
 8004c04:	f000 faa4 	bl	8005150 <abort>
 8004c08:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <__assert_func+0x38>)
 8004c0a:	461c      	mov	r4, r3
 8004c0c:	e7f3      	b.n	8004bf6 <__assert_func+0x12>
 8004c0e:	bf00      	nop
 8004c10:	20000028 	.word	0x20000028
 8004c14:	08005aad 	.word	0x08005aad
 8004c18:	08005aba 	.word	0x08005aba
 8004c1c:	08005ae8 	.word	0x08005ae8

08004c20 <fiprintf>:
 8004c20:	b40e      	push	{r1, r2, r3}
 8004c22:	b503      	push	{r0, r1, lr}
 8004c24:	4601      	mov	r1, r0
 8004c26:	ab03      	add	r3, sp, #12
 8004c28:	4805      	ldr	r0, [pc, #20]	; (8004c40 <fiprintf+0x20>)
 8004c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c2e:	6800      	ldr	r0, [r0, #0]
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	f000 f88f 	bl	8004d54 <_vfiprintf_r>
 8004c36:	b002      	add	sp, #8
 8004c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c3c:	b003      	add	sp, #12
 8004c3e:	4770      	bx	lr
 8004c40:	20000028 	.word	0x20000028

08004c44 <__ascii_mbtowc>:
 8004c44:	b082      	sub	sp, #8
 8004c46:	b901      	cbnz	r1, 8004c4a <__ascii_mbtowc+0x6>
 8004c48:	a901      	add	r1, sp, #4
 8004c4a:	b142      	cbz	r2, 8004c5e <__ascii_mbtowc+0x1a>
 8004c4c:	b14b      	cbz	r3, 8004c62 <__ascii_mbtowc+0x1e>
 8004c4e:	7813      	ldrb	r3, [r2, #0]
 8004c50:	600b      	str	r3, [r1, #0]
 8004c52:	7812      	ldrb	r2, [r2, #0]
 8004c54:	1e10      	subs	r0, r2, #0
 8004c56:	bf18      	it	ne
 8004c58:	2001      	movne	r0, #1
 8004c5a:	b002      	add	sp, #8
 8004c5c:	4770      	bx	lr
 8004c5e:	4610      	mov	r0, r2
 8004c60:	e7fb      	b.n	8004c5a <__ascii_mbtowc+0x16>
 8004c62:	f06f 0001 	mvn.w	r0, #1
 8004c66:	e7f8      	b.n	8004c5a <__ascii_mbtowc+0x16>

08004c68 <memmove>:
 8004c68:	4288      	cmp	r0, r1
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	eb01 0402 	add.w	r4, r1, r2
 8004c70:	d902      	bls.n	8004c78 <memmove+0x10>
 8004c72:	4284      	cmp	r4, r0
 8004c74:	4623      	mov	r3, r4
 8004c76:	d807      	bhi.n	8004c88 <memmove+0x20>
 8004c78:	1e43      	subs	r3, r0, #1
 8004c7a:	42a1      	cmp	r1, r4
 8004c7c:	d008      	beq.n	8004c90 <memmove+0x28>
 8004c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c86:	e7f8      	b.n	8004c7a <memmove+0x12>
 8004c88:	4402      	add	r2, r0
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	428a      	cmp	r2, r1
 8004c8e:	d100      	bne.n	8004c92 <memmove+0x2a>
 8004c90:	bd10      	pop	{r4, pc}
 8004c92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c9a:	e7f7      	b.n	8004c8c <memmove+0x24>

08004c9c <__malloc_lock>:
 8004c9c:	4801      	ldr	r0, [pc, #4]	; (8004ca4 <__malloc_lock+0x8>)
 8004c9e:	f000 bc17 	b.w	80054d0 <__retarget_lock_acquire_recursive>
 8004ca2:	bf00      	nop
 8004ca4:	20000270 	.word	0x20000270

08004ca8 <__malloc_unlock>:
 8004ca8:	4801      	ldr	r0, [pc, #4]	; (8004cb0 <__malloc_unlock+0x8>)
 8004caa:	f000 bc12 	b.w	80054d2 <__retarget_lock_release_recursive>
 8004cae:	bf00      	nop
 8004cb0:	20000270 	.word	0x20000270

08004cb4 <_realloc_r>:
 8004cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb6:	4607      	mov	r7, r0
 8004cb8:	4614      	mov	r4, r2
 8004cba:	460e      	mov	r6, r1
 8004cbc:	b921      	cbnz	r1, 8004cc8 <_realloc_r+0x14>
 8004cbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	f7ff bdc8 	b.w	8004858 <_malloc_r>
 8004cc8:	b922      	cbnz	r2, 8004cd4 <_realloc_r+0x20>
 8004cca:	f7ff fd75 	bl	80047b8 <_free_r>
 8004cce:	4625      	mov	r5, r4
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cd4:	f000 fc62 	bl	800559c <_malloc_usable_size_r>
 8004cd8:	42a0      	cmp	r0, r4
 8004cda:	d20f      	bcs.n	8004cfc <_realloc_r+0x48>
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4638      	mov	r0, r7
 8004ce0:	f7ff fdba 	bl	8004858 <_malloc_r>
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d0f2      	beq.n	8004cd0 <_realloc_r+0x1c>
 8004cea:	4631      	mov	r1, r6
 8004cec:	4622      	mov	r2, r4
 8004cee:	f7ff f9c7 	bl	8004080 <memcpy>
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	f7ff fd5f 	bl	80047b8 <_free_r>
 8004cfa:	e7e9      	b.n	8004cd0 <_realloc_r+0x1c>
 8004cfc:	4635      	mov	r5, r6
 8004cfe:	e7e7      	b.n	8004cd0 <_realloc_r+0x1c>

08004d00 <__sfputc_r>:
 8004d00:	6893      	ldr	r3, [r2, #8]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	b410      	push	{r4}
 8004d08:	6093      	str	r3, [r2, #8]
 8004d0a:	da08      	bge.n	8004d1e <__sfputc_r+0x1e>
 8004d0c:	6994      	ldr	r4, [r2, #24]
 8004d0e:	42a3      	cmp	r3, r4
 8004d10:	db01      	blt.n	8004d16 <__sfputc_r+0x16>
 8004d12:	290a      	cmp	r1, #10
 8004d14:	d103      	bne.n	8004d1e <__sfputc_r+0x1e>
 8004d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d1a:	f000 b94b 	b.w	8004fb4 <__swbuf_r>
 8004d1e:	6813      	ldr	r3, [r2, #0]
 8004d20:	1c58      	adds	r0, r3, #1
 8004d22:	6010      	str	r0, [r2, #0]
 8004d24:	7019      	strb	r1, [r3, #0]
 8004d26:	4608      	mov	r0, r1
 8004d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <__sfputs_r>:
 8004d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d30:	4606      	mov	r6, r0
 8004d32:	460f      	mov	r7, r1
 8004d34:	4614      	mov	r4, r2
 8004d36:	18d5      	adds	r5, r2, r3
 8004d38:	42ac      	cmp	r4, r5
 8004d3a:	d101      	bne.n	8004d40 <__sfputs_r+0x12>
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e007      	b.n	8004d50 <__sfputs_r+0x22>
 8004d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d44:	463a      	mov	r2, r7
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7ff ffda 	bl	8004d00 <__sfputc_r>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d1f3      	bne.n	8004d38 <__sfputs_r+0xa>
 8004d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d54 <_vfiprintf_r>:
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	460d      	mov	r5, r1
 8004d5a:	b09d      	sub	sp, #116	; 0x74
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	4698      	mov	r8, r3
 8004d60:	4606      	mov	r6, r0
 8004d62:	b118      	cbz	r0, 8004d6c <_vfiprintf_r+0x18>
 8004d64:	6983      	ldr	r3, [r0, #24]
 8004d66:	b90b      	cbnz	r3, 8004d6c <_vfiprintf_r+0x18>
 8004d68:	f000 fb14 	bl	8005394 <__sinit>
 8004d6c:	4b89      	ldr	r3, [pc, #548]	; (8004f94 <_vfiprintf_r+0x240>)
 8004d6e:	429d      	cmp	r5, r3
 8004d70:	d11b      	bne.n	8004daa <_vfiprintf_r+0x56>
 8004d72:	6875      	ldr	r5, [r6, #4]
 8004d74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d76:	07d9      	lsls	r1, r3, #31
 8004d78:	d405      	bmi.n	8004d86 <_vfiprintf_r+0x32>
 8004d7a:	89ab      	ldrh	r3, [r5, #12]
 8004d7c:	059a      	lsls	r2, r3, #22
 8004d7e:	d402      	bmi.n	8004d86 <_vfiprintf_r+0x32>
 8004d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d82:	f000 fba5 	bl	80054d0 <__retarget_lock_acquire_recursive>
 8004d86:	89ab      	ldrh	r3, [r5, #12]
 8004d88:	071b      	lsls	r3, r3, #28
 8004d8a:	d501      	bpl.n	8004d90 <_vfiprintf_r+0x3c>
 8004d8c:	692b      	ldr	r3, [r5, #16]
 8004d8e:	b9eb      	cbnz	r3, 8004dcc <_vfiprintf_r+0x78>
 8004d90:	4629      	mov	r1, r5
 8004d92:	4630      	mov	r0, r6
 8004d94:	f000 f96e 	bl	8005074 <__swsetup_r>
 8004d98:	b1c0      	cbz	r0, 8004dcc <_vfiprintf_r+0x78>
 8004d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d9c:	07dc      	lsls	r4, r3, #31
 8004d9e:	d50e      	bpl.n	8004dbe <_vfiprintf_r+0x6a>
 8004da0:	f04f 30ff 	mov.w	r0, #4294967295
 8004da4:	b01d      	add	sp, #116	; 0x74
 8004da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004daa:	4b7b      	ldr	r3, [pc, #492]	; (8004f98 <_vfiprintf_r+0x244>)
 8004dac:	429d      	cmp	r5, r3
 8004dae:	d101      	bne.n	8004db4 <_vfiprintf_r+0x60>
 8004db0:	68b5      	ldr	r5, [r6, #8]
 8004db2:	e7df      	b.n	8004d74 <_vfiprintf_r+0x20>
 8004db4:	4b79      	ldr	r3, [pc, #484]	; (8004f9c <_vfiprintf_r+0x248>)
 8004db6:	429d      	cmp	r5, r3
 8004db8:	bf08      	it	eq
 8004dba:	68f5      	ldreq	r5, [r6, #12]
 8004dbc:	e7da      	b.n	8004d74 <_vfiprintf_r+0x20>
 8004dbe:	89ab      	ldrh	r3, [r5, #12]
 8004dc0:	0598      	lsls	r0, r3, #22
 8004dc2:	d4ed      	bmi.n	8004da0 <_vfiprintf_r+0x4c>
 8004dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dc6:	f000 fb84 	bl	80054d2 <__retarget_lock_release_recursive>
 8004dca:	e7e9      	b.n	8004da0 <_vfiprintf_r+0x4c>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd0:	2320      	movs	r3, #32
 8004dd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dda:	2330      	movs	r3, #48	; 0x30
 8004ddc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004fa0 <_vfiprintf_r+0x24c>
 8004de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004de4:	f04f 0901 	mov.w	r9, #1
 8004de8:	4623      	mov	r3, r4
 8004dea:	469a      	mov	sl, r3
 8004dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004df0:	b10a      	cbz	r2, 8004df6 <_vfiprintf_r+0xa2>
 8004df2:	2a25      	cmp	r2, #37	; 0x25
 8004df4:	d1f9      	bne.n	8004dea <_vfiprintf_r+0x96>
 8004df6:	ebba 0b04 	subs.w	fp, sl, r4
 8004dfa:	d00b      	beq.n	8004e14 <_vfiprintf_r+0xc0>
 8004dfc:	465b      	mov	r3, fp
 8004dfe:	4622      	mov	r2, r4
 8004e00:	4629      	mov	r1, r5
 8004e02:	4630      	mov	r0, r6
 8004e04:	f7ff ff93 	bl	8004d2e <__sfputs_r>
 8004e08:	3001      	adds	r0, #1
 8004e0a:	f000 80aa 	beq.w	8004f62 <_vfiprintf_r+0x20e>
 8004e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e10:	445a      	add	r2, fp
 8004e12:	9209      	str	r2, [sp, #36]	; 0x24
 8004e14:	f89a 3000 	ldrb.w	r3, [sl]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80a2 	beq.w	8004f62 <_vfiprintf_r+0x20e>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f04f 32ff 	mov.w	r2, #4294967295
 8004e24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e28:	f10a 0a01 	add.w	sl, sl, #1
 8004e2c:	9304      	str	r3, [sp, #16]
 8004e2e:	9307      	str	r3, [sp, #28]
 8004e30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e34:	931a      	str	r3, [sp, #104]	; 0x68
 8004e36:	4654      	mov	r4, sl
 8004e38:	2205      	movs	r2, #5
 8004e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e3e:	4858      	ldr	r0, [pc, #352]	; (8004fa0 <_vfiprintf_r+0x24c>)
 8004e40:	f7fb f9ee 	bl	8000220 <memchr>
 8004e44:	9a04      	ldr	r2, [sp, #16]
 8004e46:	b9d8      	cbnz	r0, 8004e80 <_vfiprintf_r+0x12c>
 8004e48:	06d1      	lsls	r1, r2, #27
 8004e4a:	bf44      	itt	mi
 8004e4c:	2320      	movmi	r3, #32
 8004e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e52:	0713      	lsls	r3, r2, #28
 8004e54:	bf44      	itt	mi
 8004e56:	232b      	movmi	r3, #43	; 0x2b
 8004e58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e60:	2b2a      	cmp	r3, #42	; 0x2a
 8004e62:	d015      	beq.n	8004e90 <_vfiprintf_r+0x13c>
 8004e64:	9a07      	ldr	r2, [sp, #28]
 8004e66:	4654      	mov	r4, sl
 8004e68:	2000      	movs	r0, #0
 8004e6a:	f04f 0c0a 	mov.w	ip, #10
 8004e6e:	4621      	mov	r1, r4
 8004e70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e74:	3b30      	subs	r3, #48	; 0x30
 8004e76:	2b09      	cmp	r3, #9
 8004e78:	d94e      	bls.n	8004f18 <_vfiprintf_r+0x1c4>
 8004e7a:	b1b0      	cbz	r0, 8004eaa <_vfiprintf_r+0x156>
 8004e7c:	9207      	str	r2, [sp, #28]
 8004e7e:	e014      	b.n	8004eaa <_vfiprintf_r+0x156>
 8004e80:	eba0 0308 	sub.w	r3, r0, r8
 8004e84:	fa09 f303 	lsl.w	r3, r9, r3
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	9304      	str	r3, [sp, #16]
 8004e8c:	46a2      	mov	sl, r4
 8004e8e:	e7d2      	b.n	8004e36 <_vfiprintf_r+0xe2>
 8004e90:	9b03      	ldr	r3, [sp, #12]
 8004e92:	1d19      	adds	r1, r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	9103      	str	r1, [sp, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	bfbb      	ittet	lt
 8004e9c:	425b      	neglt	r3, r3
 8004e9e:	f042 0202 	orrlt.w	r2, r2, #2
 8004ea2:	9307      	strge	r3, [sp, #28]
 8004ea4:	9307      	strlt	r3, [sp, #28]
 8004ea6:	bfb8      	it	lt
 8004ea8:	9204      	strlt	r2, [sp, #16]
 8004eaa:	7823      	ldrb	r3, [r4, #0]
 8004eac:	2b2e      	cmp	r3, #46	; 0x2e
 8004eae:	d10c      	bne.n	8004eca <_vfiprintf_r+0x176>
 8004eb0:	7863      	ldrb	r3, [r4, #1]
 8004eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004eb4:	d135      	bne.n	8004f22 <_vfiprintf_r+0x1ce>
 8004eb6:	9b03      	ldr	r3, [sp, #12]
 8004eb8:	1d1a      	adds	r2, r3, #4
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	9203      	str	r2, [sp, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bfb8      	it	lt
 8004ec2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ec6:	3402      	adds	r4, #2
 8004ec8:	9305      	str	r3, [sp, #20]
 8004eca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004fb0 <_vfiprintf_r+0x25c>
 8004ece:	7821      	ldrb	r1, [r4, #0]
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	4650      	mov	r0, sl
 8004ed4:	f7fb f9a4 	bl	8000220 <memchr>
 8004ed8:	b140      	cbz	r0, 8004eec <_vfiprintf_r+0x198>
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	eba0 000a 	sub.w	r0, r0, sl
 8004ee0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ee4:	9b04      	ldr	r3, [sp, #16]
 8004ee6:	4303      	orrs	r3, r0
 8004ee8:	3401      	adds	r4, #1
 8004eea:	9304      	str	r3, [sp, #16]
 8004eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef0:	482c      	ldr	r0, [pc, #176]	; (8004fa4 <_vfiprintf_r+0x250>)
 8004ef2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ef6:	2206      	movs	r2, #6
 8004ef8:	f7fb f992 	bl	8000220 <memchr>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	d03f      	beq.n	8004f80 <_vfiprintf_r+0x22c>
 8004f00:	4b29      	ldr	r3, [pc, #164]	; (8004fa8 <_vfiprintf_r+0x254>)
 8004f02:	bb1b      	cbnz	r3, 8004f4c <_vfiprintf_r+0x1f8>
 8004f04:	9b03      	ldr	r3, [sp, #12]
 8004f06:	3307      	adds	r3, #7
 8004f08:	f023 0307 	bic.w	r3, r3, #7
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	9303      	str	r3, [sp, #12]
 8004f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f12:	443b      	add	r3, r7
 8004f14:	9309      	str	r3, [sp, #36]	; 0x24
 8004f16:	e767      	b.n	8004de8 <_vfiprintf_r+0x94>
 8004f18:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	2001      	movs	r0, #1
 8004f20:	e7a5      	b.n	8004e6e <_vfiprintf_r+0x11a>
 8004f22:	2300      	movs	r3, #0
 8004f24:	3401      	adds	r4, #1
 8004f26:	9305      	str	r3, [sp, #20]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f04f 0c0a 	mov.w	ip, #10
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f34:	3a30      	subs	r2, #48	; 0x30
 8004f36:	2a09      	cmp	r2, #9
 8004f38:	d903      	bls.n	8004f42 <_vfiprintf_r+0x1ee>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0c5      	beq.n	8004eca <_vfiprintf_r+0x176>
 8004f3e:	9105      	str	r1, [sp, #20]
 8004f40:	e7c3      	b.n	8004eca <_vfiprintf_r+0x176>
 8004f42:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f46:	4604      	mov	r4, r0
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e7f0      	b.n	8004f2e <_vfiprintf_r+0x1da>
 8004f4c:	ab03      	add	r3, sp, #12
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	462a      	mov	r2, r5
 8004f52:	4b16      	ldr	r3, [pc, #88]	; (8004fac <_vfiprintf_r+0x258>)
 8004f54:	a904      	add	r1, sp, #16
 8004f56:	4630      	mov	r0, r6
 8004f58:	f7fd fe24 	bl	8002ba4 <_printf_float>
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	1c78      	adds	r0, r7, #1
 8004f60:	d1d6      	bne.n	8004f10 <_vfiprintf_r+0x1bc>
 8004f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f64:	07d9      	lsls	r1, r3, #31
 8004f66:	d405      	bmi.n	8004f74 <_vfiprintf_r+0x220>
 8004f68:	89ab      	ldrh	r3, [r5, #12]
 8004f6a:	059a      	lsls	r2, r3, #22
 8004f6c:	d402      	bmi.n	8004f74 <_vfiprintf_r+0x220>
 8004f6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f70:	f000 faaf 	bl	80054d2 <__retarget_lock_release_recursive>
 8004f74:	89ab      	ldrh	r3, [r5, #12]
 8004f76:	065b      	lsls	r3, r3, #25
 8004f78:	f53f af12 	bmi.w	8004da0 <_vfiprintf_r+0x4c>
 8004f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f7e:	e711      	b.n	8004da4 <_vfiprintf_r+0x50>
 8004f80:	ab03      	add	r3, sp, #12
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	462a      	mov	r2, r5
 8004f86:	4b09      	ldr	r3, [pc, #36]	; (8004fac <_vfiprintf_r+0x258>)
 8004f88:	a904      	add	r1, sp, #16
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	f7fe f8ae 	bl	80030ec <_printf_i>
 8004f90:	e7e4      	b.n	8004f5c <_vfiprintf_r+0x208>
 8004f92:	bf00      	nop
 8004f94:	08005c14 	.word	0x08005c14
 8004f98:	08005c34 	.word	0x08005c34
 8004f9c:	08005bf4 	.word	0x08005bf4
 8004fa0:	08005a9c 	.word	0x08005a9c
 8004fa4:	08005aa6 	.word	0x08005aa6
 8004fa8:	08002ba5 	.word	0x08002ba5
 8004fac:	08004d2f 	.word	0x08004d2f
 8004fb0:	08005aa2 	.word	0x08005aa2

08004fb4 <__swbuf_r>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	460e      	mov	r6, r1
 8004fb8:	4614      	mov	r4, r2
 8004fba:	4605      	mov	r5, r0
 8004fbc:	b118      	cbz	r0, 8004fc6 <__swbuf_r+0x12>
 8004fbe:	6983      	ldr	r3, [r0, #24]
 8004fc0:	b90b      	cbnz	r3, 8004fc6 <__swbuf_r+0x12>
 8004fc2:	f000 f9e7 	bl	8005394 <__sinit>
 8004fc6:	4b21      	ldr	r3, [pc, #132]	; (800504c <__swbuf_r+0x98>)
 8004fc8:	429c      	cmp	r4, r3
 8004fca:	d12b      	bne.n	8005024 <__swbuf_r+0x70>
 8004fcc:	686c      	ldr	r4, [r5, #4]
 8004fce:	69a3      	ldr	r3, [r4, #24]
 8004fd0:	60a3      	str	r3, [r4, #8]
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	071a      	lsls	r2, r3, #28
 8004fd6:	d52f      	bpl.n	8005038 <__swbuf_r+0x84>
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	b36b      	cbz	r3, 8005038 <__swbuf_r+0x84>
 8004fdc:	6923      	ldr	r3, [r4, #16]
 8004fde:	6820      	ldr	r0, [r4, #0]
 8004fe0:	1ac0      	subs	r0, r0, r3
 8004fe2:	6963      	ldr	r3, [r4, #20]
 8004fe4:	b2f6      	uxtb	r6, r6
 8004fe6:	4283      	cmp	r3, r0
 8004fe8:	4637      	mov	r7, r6
 8004fea:	dc04      	bgt.n	8004ff6 <__swbuf_r+0x42>
 8004fec:	4621      	mov	r1, r4
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f000 f93c 	bl	800526c <_fflush_r>
 8004ff4:	bb30      	cbnz	r0, 8005044 <__swbuf_r+0x90>
 8004ff6:	68a3      	ldr	r3, [r4, #8]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	60a3      	str	r3, [r4, #8]
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	6022      	str	r2, [r4, #0]
 8005002:	701e      	strb	r6, [r3, #0]
 8005004:	6963      	ldr	r3, [r4, #20]
 8005006:	3001      	adds	r0, #1
 8005008:	4283      	cmp	r3, r0
 800500a:	d004      	beq.n	8005016 <__swbuf_r+0x62>
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	07db      	lsls	r3, r3, #31
 8005010:	d506      	bpl.n	8005020 <__swbuf_r+0x6c>
 8005012:	2e0a      	cmp	r6, #10
 8005014:	d104      	bne.n	8005020 <__swbuf_r+0x6c>
 8005016:	4621      	mov	r1, r4
 8005018:	4628      	mov	r0, r5
 800501a:	f000 f927 	bl	800526c <_fflush_r>
 800501e:	b988      	cbnz	r0, 8005044 <__swbuf_r+0x90>
 8005020:	4638      	mov	r0, r7
 8005022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005024:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <__swbuf_r+0x9c>)
 8005026:	429c      	cmp	r4, r3
 8005028:	d101      	bne.n	800502e <__swbuf_r+0x7a>
 800502a:	68ac      	ldr	r4, [r5, #8]
 800502c:	e7cf      	b.n	8004fce <__swbuf_r+0x1a>
 800502e:	4b09      	ldr	r3, [pc, #36]	; (8005054 <__swbuf_r+0xa0>)
 8005030:	429c      	cmp	r4, r3
 8005032:	bf08      	it	eq
 8005034:	68ec      	ldreq	r4, [r5, #12]
 8005036:	e7ca      	b.n	8004fce <__swbuf_r+0x1a>
 8005038:	4621      	mov	r1, r4
 800503a:	4628      	mov	r0, r5
 800503c:	f000 f81a 	bl	8005074 <__swsetup_r>
 8005040:	2800      	cmp	r0, #0
 8005042:	d0cb      	beq.n	8004fdc <__swbuf_r+0x28>
 8005044:	f04f 37ff 	mov.w	r7, #4294967295
 8005048:	e7ea      	b.n	8005020 <__swbuf_r+0x6c>
 800504a:	bf00      	nop
 800504c:	08005c14 	.word	0x08005c14
 8005050:	08005c34 	.word	0x08005c34
 8005054:	08005bf4 	.word	0x08005bf4

08005058 <__ascii_wctomb>:
 8005058:	b149      	cbz	r1, 800506e <__ascii_wctomb+0x16>
 800505a:	2aff      	cmp	r2, #255	; 0xff
 800505c:	bf85      	ittet	hi
 800505e:	238a      	movhi	r3, #138	; 0x8a
 8005060:	6003      	strhi	r3, [r0, #0]
 8005062:	700a      	strbls	r2, [r1, #0]
 8005064:	f04f 30ff 	movhi.w	r0, #4294967295
 8005068:	bf98      	it	ls
 800506a:	2001      	movls	r0, #1
 800506c:	4770      	bx	lr
 800506e:	4608      	mov	r0, r1
 8005070:	4770      	bx	lr
	...

08005074 <__swsetup_r>:
 8005074:	4b32      	ldr	r3, [pc, #200]	; (8005140 <__swsetup_r+0xcc>)
 8005076:	b570      	push	{r4, r5, r6, lr}
 8005078:	681d      	ldr	r5, [r3, #0]
 800507a:	4606      	mov	r6, r0
 800507c:	460c      	mov	r4, r1
 800507e:	b125      	cbz	r5, 800508a <__swsetup_r+0x16>
 8005080:	69ab      	ldr	r3, [r5, #24]
 8005082:	b913      	cbnz	r3, 800508a <__swsetup_r+0x16>
 8005084:	4628      	mov	r0, r5
 8005086:	f000 f985 	bl	8005394 <__sinit>
 800508a:	4b2e      	ldr	r3, [pc, #184]	; (8005144 <__swsetup_r+0xd0>)
 800508c:	429c      	cmp	r4, r3
 800508e:	d10f      	bne.n	80050b0 <__swsetup_r+0x3c>
 8005090:	686c      	ldr	r4, [r5, #4]
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005098:	0719      	lsls	r1, r3, #28
 800509a:	d42c      	bmi.n	80050f6 <__swsetup_r+0x82>
 800509c:	06dd      	lsls	r5, r3, #27
 800509e:	d411      	bmi.n	80050c4 <__swsetup_r+0x50>
 80050a0:	2309      	movs	r3, #9
 80050a2:	6033      	str	r3, [r6, #0]
 80050a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050a8:	81a3      	strh	r3, [r4, #12]
 80050aa:	f04f 30ff 	mov.w	r0, #4294967295
 80050ae:	e03e      	b.n	800512e <__swsetup_r+0xba>
 80050b0:	4b25      	ldr	r3, [pc, #148]	; (8005148 <__swsetup_r+0xd4>)
 80050b2:	429c      	cmp	r4, r3
 80050b4:	d101      	bne.n	80050ba <__swsetup_r+0x46>
 80050b6:	68ac      	ldr	r4, [r5, #8]
 80050b8:	e7eb      	b.n	8005092 <__swsetup_r+0x1e>
 80050ba:	4b24      	ldr	r3, [pc, #144]	; (800514c <__swsetup_r+0xd8>)
 80050bc:	429c      	cmp	r4, r3
 80050be:	bf08      	it	eq
 80050c0:	68ec      	ldreq	r4, [r5, #12]
 80050c2:	e7e6      	b.n	8005092 <__swsetup_r+0x1e>
 80050c4:	0758      	lsls	r0, r3, #29
 80050c6:	d512      	bpl.n	80050ee <__swsetup_r+0x7a>
 80050c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ca:	b141      	cbz	r1, 80050de <__swsetup_r+0x6a>
 80050cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050d0:	4299      	cmp	r1, r3
 80050d2:	d002      	beq.n	80050da <__swsetup_r+0x66>
 80050d4:	4630      	mov	r0, r6
 80050d6:	f7ff fb6f 	bl	80047b8 <_free_r>
 80050da:	2300      	movs	r3, #0
 80050dc:	6363      	str	r3, [r4, #52]	; 0x34
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	2300      	movs	r3, #0
 80050e8:	6063      	str	r3, [r4, #4]
 80050ea:	6923      	ldr	r3, [r4, #16]
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	89a3      	ldrh	r3, [r4, #12]
 80050f0:	f043 0308 	orr.w	r3, r3, #8
 80050f4:	81a3      	strh	r3, [r4, #12]
 80050f6:	6923      	ldr	r3, [r4, #16]
 80050f8:	b94b      	cbnz	r3, 800510e <__swsetup_r+0x9a>
 80050fa:	89a3      	ldrh	r3, [r4, #12]
 80050fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005104:	d003      	beq.n	800510e <__swsetup_r+0x9a>
 8005106:	4621      	mov	r1, r4
 8005108:	4630      	mov	r0, r6
 800510a:	f000 fa07 	bl	800551c <__smakebuf_r>
 800510e:	89a0      	ldrh	r0, [r4, #12]
 8005110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005114:	f010 0301 	ands.w	r3, r0, #1
 8005118:	d00a      	beq.n	8005130 <__swsetup_r+0xbc>
 800511a:	2300      	movs	r3, #0
 800511c:	60a3      	str	r3, [r4, #8]
 800511e:	6963      	ldr	r3, [r4, #20]
 8005120:	425b      	negs	r3, r3
 8005122:	61a3      	str	r3, [r4, #24]
 8005124:	6923      	ldr	r3, [r4, #16]
 8005126:	b943      	cbnz	r3, 800513a <__swsetup_r+0xc6>
 8005128:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800512c:	d1ba      	bne.n	80050a4 <__swsetup_r+0x30>
 800512e:	bd70      	pop	{r4, r5, r6, pc}
 8005130:	0781      	lsls	r1, r0, #30
 8005132:	bf58      	it	pl
 8005134:	6963      	ldrpl	r3, [r4, #20]
 8005136:	60a3      	str	r3, [r4, #8]
 8005138:	e7f4      	b.n	8005124 <__swsetup_r+0xb0>
 800513a:	2000      	movs	r0, #0
 800513c:	e7f7      	b.n	800512e <__swsetup_r+0xba>
 800513e:	bf00      	nop
 8005140:	20000028 	.word	0x20000028
 8005144:	08005c14 	.word	0x08005c14
 8005148:	08005c34 	.word	0x08005c34
 800514c:	08005bf4 	.word	0x08005bf4

08005150 <abort>:
 8005150:	b508      	push	{r3, lr}
 8005152:	2006      	movs	r0, #6
 8005154:	f000 fa52 	bl	80055fc <raise>
 8005158:	2001      	movs	r0, #1
 800515a:	f000 fb65 	bl	8005828 <_exit>
	...

08005160 <__sflush_r>:
 8005160:	898a      	ldrh	r2, [r1, #12]
 8005162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005166:	4605      	mov	r5, r0
 8005168:	0710      	lsls	r0, r2, #28
 800516a:	460c      	mov	r4, r1
 800516c:	d458      	bmi.n	8005220 <__sflush_r+0xc0>
 800516e:	684b      	ldr	r3, [r1, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	dc05      	bgt.n	8005180 <__sflush_r+0x20>
 8005174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	dc02      	bgt.n	8005180 <__sflush_r+0x20>
 800517a:	2000      	movs	r0, #0
 800517c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005182:	2e00      	cmp	r6, #0
 8005184:	d0f9      	beq.n	800517a <__sflush_r+0x1a>
 8005186:	2300      	movs	r3, #0
 8005188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800518c:	682f      	ldr	r7, [r5, #0]
 800518e:	602b      	str	r3, [r5, #0]
 8005190:	d032      	beq.n	80051f8 <__sflush_r+0x98>
 8005192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	075a      	lsls	r2, r3, #29
 8005198:	d505      	bpl.n	80051a6 <__sflush_r+0x46>
 800519a:	6863      	ldr	r3, [r4, #4]
 800519c:	1ac0      	subs	r0, r0, r3
 800519e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051a0:	b10b      	cbz	r3, 80051a6 <__sflush_r+0x46>
 80051a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051a4:	1ac0      	subs	r0, r0, r3
 80051a6:	2300      	movs	r3, #0
 80051a8:	4602      	mov	r2, r0
 80051aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051ac:	6a21      	ldr	r1, [r4, #32]
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b0      	blx	r6
 80051b2:	1c43      	adds	r3, r0, #1
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	d106      	bne.n	80051c6 <__sflush_r+0x66>
 80051b8:	6829      	ldr	r1, [r5, #0]
 80051ba:	291d      	cmp	r1, #29
 80051bc:	d82c      	bhi.n	8005218 <__sflush_r+0xb8>
 80051be:	4a2a      	ldr	r2, [pc, #168]	; (8005268 <__sflush_r+0x108>)
 80051c0:	40ca      	lsrs	r2, r1
 80051c2:	07d6      	lsls	r6, r2, #31
 80051c4:	d528      	bpl.n	8005218 <__sflush_r+0xb8>
 80051c6:	2200      	movs	r2, #0
 80051c8:	6062      	str	r2, [r4, #4]
 80051ca:	04d9      	lsls	r1, r3, #19
 80051cc:	6922      	ldr	r2, [r4, #16]
 80051ce:	6022      	str	r2, [r4, #0]
 80051d0:	d504      	bpl.n	80051dc <__sflush_r+0x7c>
 80051d2:	1c42      	adds	r2, r0, #1
 80051d4:	d101      	bne.n	80051da <__sflush_r+0x7a>
 80051d6:	682b      	ldr	r3, [r5, #0]
 80051d8:	b903      	cbnz	r3, 80051dc <__sflush_r+0x7c>
 80051da:	6560      	str	r0, [r4, #84]	; 0x54
 80051dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051de:	602f      	str	r7, [r5, #0]
 80051e0:	2900      	cmp	r1, #0
 80051e2:	d0ca      	beq.n	800517a <__sflush_r+0x1a>
 80051e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051e8:	4299      	cmp	r1, r3
 80051ea:	d002      	beq.n	80051f2 <__sflush_r+0x92>
 80051ec:	4628      	mov	r0, r5
 80051ee:	f7ff fae3 	bl	80047b8 <_free_r>
 80051f2:	2000      	movs	r0, #0
 80051f4:	6360      	str	r0, [r4, #52]	; 0x34
 80051f6:	e7c1      	b.n	800517c <__sflush_r+0x1c>
 80051f8:	6a21      	ldr	r1, [r4, #32]
 80051fa:	2301      	movs	r3, #1
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b0      	blx	r6
 8005200:	1c41      	adds	r1, r0, #1
 8005202:	d1c7      	bne.n	8005194 <__sflush_r+0x34>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0c4      	beq.n	8005194 <__sflush_r+0x34>
 800520a:	2b1d      	cmp	r3, #29
 800520c:	d001      	beq.n	8005212 <__sflush_r+0xb2>
 800520e:	2b16      	cmp	r3, #22
 8005210:	d101      	bne.n	8005216 <__sflush_r+0xb6>
 8005212:	602f      	str	r7, [r5, #0]
 8005214:	e7b1      	b.n	800517a <__sflush_r+0x1a>
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	e7ad      	b.n	800517c <__sflush_r+0x1c>
 8005220:	690f      	ldr	r7, [r1, #16]
 8005222:	2f00      	cmp	r7, #0
 8005224:	d0a9      	beq.n	800517a <__sflush_r+0x1a>
 8005226:	0793      	lsls	r3, r2, #30
 8005228:	680e      	ldr	r6, [r1, #0]
 800522a:	bf08      	it	eq
 800522c:	694b      	ldreq	r3, [r1, #20]
 800522e:	600f      	str	r7, [r1, #0]
 8005230:	bf18      	it	ne
 8005232:	2300      	movne	r3, #0
 8005234:	eba6 0807 	sub.w	r8, r6, r7
 8005238:	608b      	str	r3, [r1, #8]
 800523a:	f1b8 0f00 	cmp.w	r8, #0
 800523e:	dd9c      	ble.n	800517a <__sflush_r+0x1a>
 8005240:	6a21      	ldr	r1, [r4, #32]
 8005242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005244:	4643      	mov	r3, r8
 8005246:	463a      	mov	r2, r7
 8005248:	4628      	mov	r0, r5
 800524a:	47b0      	blx	r6
 800524c:	2800      	cmp	r0, #0
 800524e:	dc06      	bgt.n	800525e <__sflush_r+0xfe>
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005256:	81a3      	strh	r3, [r4, #12]
 8005258:	f04f 30ff 	mov.w	r0, #4294967295
 800525c:	e78e      	b.n	800517c <__sflush_r+0x1c>
 800525e:	4407      	add	r7, r0
 8005260:	eba8 0800 	sub.w	r8, r8, r0
 8005264:	e7e9      	b.n	800523a <__sflush_r+0xda>
 8005266:	bf00      	nop
 8005268:	20400001 	.word	0x20400001

0800526c <_fflush_r>:
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	690b      	ldr	r3, [r1, #16]
 8005270:	4605      	mov	r5, r0
 8005272:	460c      	mov	r4, r1
 8005274:	b913      	cbnz	r3, 800527c <_fflush_r+0x10>
 8005276:	2500      	movs	r5, #0
 8005278:	4628      	mov	r0, r5
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	b118      	cbz	r0, 8005286 <_fflush_r+0x1a>
 800527e:	6983      	ldr	r3, [r0, #24]
 8005280:	b90b      	cbnz	r3, 8005286 <_fflush_r+0x1a>
 8005282:	f000 f887 	bl	8005394 <__sinit>
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <_fflush_r+0x6c>)
 8005288:	429c      	cmp	r4, r3
 800528a:	d11b      	bne.n	80052c4 <_fflush_r+0x58>
 800528c:	686c      	ldr	r4, [r5, #4]
 800528e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0ef      	beq.n	8005276 <_fflush_r+0xa>
 8005296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005298:	07d0      	lsls	r0, r2, #31
 800529a:	d404      	bmi.n	80052a6 <_fflush_r+0x3a>
 800529c:	0599      	lsls	r1, r3, #22
 800529e:	d402      	bmi.n	80052a6 <_fflush_r+0x3a>
 80052a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052a2:	f000 f915 	bl	80054d0 <__retarget_lock_acquire_recursive>
 80052a6:	4628      	mov	r0, r5
 80052a8:	4621      	mov	r1, r4
 80052aa:	f7ff ff59 	bl	8005160 <__sflush_r>
 80052ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052b0:	07da      	lsls	r2, r3, #31
 80052b2:	4605      	mov	r5, r0
 80052b4:	d4e0      	bmi.n	8005278 <_fflush_r+0xc>
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	059b      	lsls	r3, r3, #22
 80052ba:	d4dd      	bmi.n	8005278 <_fflush_r+0xc>
 80052bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052be:	f000 f908 	bl	80054d2 <__retarget_lock_release_recursive>
 80052c2:	e7d9      	b.n	8005278 <_fflush_r+0xc>
 80052c4:	4b05      	ldr	r3, [pc, #20]	; (80052dc <_fflush_r+0x70>)
 80052c6:	429c      	cmp	r4, r3
 80052c8:	d101      	bne.n	80052ce <_fflush_r+0x62>
 80052ca:	68ac      	ldr	r4, [r5, #8]
 80052cc:	e7df      	b.n	800528e <_fflush_r+0x22>
 80052ce:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <_fflush_r+0x74>)
 80052d0:	429c      	cmp	r4, r3
 80052d2:	bf08      	it	eq
 80052d4:	68ec      	ldreq	r4, [r5, #12]
 80052d6:	e7da      	b.n	800528e <_fflush_r+0x22>
 80052d8:	08005c14 	.word	0x08005c14
 80052dc:	08005c34 	.word	0x08005c34
 80052e0:	08005bf4 	.word	0x08005bf4

080052e4 <std>:
 80052e4:	2300      	movs	r3, #0
 80052e6:	b510      	push	{r4, lr}
 80052e8:	4604      	mov	r4, r0
 80052ea:	e9c0 3300 	strd	r3, r3, [r0]
 80052ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052f2:	6083      	str	r3, [r0, #8]
 80052f4:	8181      	strh	r1, [r0, #12]
 80052f6:	6643      	str	r3, [r0, #100]	; 0x64
 80052f8:	81c2      	strh	r2, [r0, #14]
 80052fa:	6183      	str	r3, [r0, #24]
 80052fc:	4619      	mov	r1, r3
 80052fe:	2208      	movs	r2, #8
 8005300:	305c      	adds	r0, #92	; 0x5c
 8005302:	f7fd fba7 	bl	8002a54 <memset>
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <std+0x38>)
 8005308:	6263      	str	r3, [r4, #36]	; 0x24
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <std+0x3c>)
 800530c:	62a3      	str	r3, [r4, #40]	; 0x28
 800530e:	4b05      	ldr	r3, [pc, #20]	; (8005324 <std+0x40>)
 8005310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005312:	4b05      	ldr	r3, [pc, #20]	; (8005328 <std+0x44>)
 8005314:	6224      	str	r4, [r4, #32]
 8005316:	6323      	str	r3, [r4, #48]	; 0x30
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	08005635 	.word	0x08005635
 8005320:	08005657 	.word	0x08005657
 8005324:	0800568f 	.word	0x0800568f
 8005328:	080056b3 	.word	0x080056b3

0800532c <_cleanup_r>:
 800532c:	4901      	ldr	r1, [pc, #4]	; (8005334 <_cleanup_r+0x8>)
 800532e:	f000 b8af 	b.w	8005490 <_fwalk_reent>
 8005332:	bf00      	nop
 8005334:	0800526d 	.word	0x0800526d

08005338 <__sfmoreglue>:
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	1e4a      	subs	r2, r1, #1
 800533c:	2568      	movs	r5, #104	; 0x68
 800533e:	4355      	muls	r5, r2
 8005340:	460e      	mov	r6, r1
 8005342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005346:	f7ff fa87 	bl	8004858 <_malloc_r>
 800534a:	4604      	mov	r4, r0
 800534c:	b140      	cbz	r0, 8005360 <__sfmoreglue+0x28>
 800534e:	2100      	movs	r1, #0
 8005350:	e9c0 1600 	strd	r1, r6, [r0]
 8005354:	300c      	adds	r0, #12
 8005356:	60a0      	str	r0, [r4, #8]
 8005358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800535c:	f7fd fb7a 	bl	8002a54 <memset>
 8005360:	4620      	mov	r0, r4
 8005362:	bd70      	pop	{r4, r5, r6, pc}

08005364 <__sfp_lock_acquire>:
 8005364:	4801      	ldr	r0, [pc, #4]	; (800536c <__sfp_lock_acquire+0x8>)
 8005366:	f000 b8b3 	b.w	80054d0 <__retarget_lock_acquire_recursive>
 800536a:	bf00      	nop
 800536c:	20000274 	.word	0x20000274

08005370 <__sfp_lock_release>:
 8005370:	4801      	ldr	r0, [pc, #4]	; (8005378 <__sfp_lock_release+0x8>)
 8005372:	f000 b8ae 	b.w	80054d2 <__retarget_lock_release_recursive>
 8005376:	bf00      	nop
 8005378:	20000274 	.word	0x20000274

0800537c <__sinit_lock_acquire>:
 800537c:	4801      	ldr	r0, [pc, #4]	; (8005384 <__sinit_lock_acquire+0x8>)
 800537e:	f000 b8a7 	b.w	80054d0 <__retarget_lock_acquire_recursive>
 8005382:	bf00      	nop
 8005384:	2000026f 	.word	0x2000026f

08005388 <__sinit_lock_release>:
 8005388:	4801      	ldr	r0, [pc, #4]	; (8005390 <__sinit_lock_release+0x8>)
 800538a:	f000 b8a2 	b.w	80054d2 <__retarget_lock_release_recursive>
 800538e:	bf00      	nop
 8005390:	2000026f 	.word	0x2000026f

08005394 <__sinit>:
 8005394:	b510      	push	{r4, lr}
 8005396:	4604      	mov	r4, r0
 8005398:	f7ff fff0 	bl	800537c <__sinit_lock_acquire>
 800539c:	69a3      	ldr	r3, [r4, #24]
 800539e:	b11b      	cbz	r3, 80053a8 <__sinit+0x14>
 80053a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a4:	f7ff bff0 	b.w	8005388 <__sinit_lock_release>
 80053a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053ac:	6523      	str	r3, [r4, #80]	; 0x50
 80053ae:	4b13      	ldr	r3, [pc, #76]	; (80053fc <__sinit+0x68>)
 80053b0:	4a13      	ldr	r2, [pc, #76]	; (8005400 <__sinit+0x6c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80053b6:	42a3      	cmp	r3, r4
 80053b8:	bf04      	itt	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	61a3      	streq	r3, [r4, #24]
 80053be:	4620      	mov	r0, r4
 80053c0:	f000 f820 	bl	8005404 <__sfp>
 80053c4:	6060      	str	r0, [r4, #4]
 80053c6:	4620      	mov	r0, r4
 80053c8:	f000 f81c 	bl	8005404 <__sfp>
 80053cc:	60a0      	str	r0, [r4, #8]
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 f818 	bl	8005404 <__sfp>
 80053d4:	2200      	movs	r2, #0
 80053d6:	60e0      	str	r0, [r4, #12]
 80053d8:	2104      	movs	r1, #4
 80053da:	6860      	ldr	r0, [r4, #4]
 80053dc:	f7ff ff82 	bl	80052e4 <std>
 80053e0:	68a0      	ldr	r0, [r4, #8]
 80053e2:	2201      	movs	r2, #1
 80053e4:	2109      	movs	r1, #9
 80053e6:	f7ff ff7d 	bl	80052e4 <std>
 80053ea:	68e0      	ldr	r0, [r4, #12]
 80053ec:	2202      	movs	r2, #2
 80053ee:	2112      	movs	r1, #18
 80053f0:	f7ff ff78 	bl	80052e4 <std>
 80053f4:	2301      	movs	r3, #1
 80053f6:	61a3      	str	r3, [r4, #24]
 80053f8:	e7d2      	b.n	80053a0 <__sinit+0xc>
 80053fa:	bf00      	nop
 80053fc:	08005870 	.word	0x08005870
 8005400:	0800532d 	.word	0x0800532d

08005404 <__sfp>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	4607      	mov	r7, r0
 8005408:	f7ff ffac 	bl	8005364 <__sfp_lock_acquire>
 800540c:	4b1e      	ldr	r3, [pc, #120]	; (8005488 <__sfp+0x84>)
 800540e:	681e      	ldr	r6, [r3, #0]
 8005410:	69b3      	ldr	r3, [r6, #24]
 8005412:	b913      	cbnz	r3, 800541a <__sfp+0x16>
 8005414:	4630      	mov	r0, r6
 8005416:	f7ff ffbd 	bl	8005394 <__sinit>
 800541a:	3648      	adds	r6, #72	; 0x48
 800541c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005420:	3b01      	subs	r3, #1
 8005422:	d503      	bpl.n	800542c <__sfp+0x28>
 8005424:	6833      	ldr	r3, [r6, #0]
 8005426:	b30b      	cbz	r3, 800546c <__sfp+0x68>
 8005428:	6836      	ldr	r6, [r6, #0]
 800542a:	e7f7      	b.n	800541c <__sfp+0x18>
 800542c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005430:	b9d5      	cbnz	r5, 8005468 <__sfp+0x64>
 8005432:	4b16      	ldr	r3, [pc, #88]	; (800548c <__sfp+0x88>)
 8005434:	60e3      	str	r3, [r4, #12]
 8005436:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800543a:	6665      	str	r5, [r4, #100]	; 0x64
 800543c:	f000 f847 	bl	80054ce <__retarget_lock_init_recursive>
 8005440:	f7ff ff96 	bl	8005370 <__sfp_lock_release>
 8005444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800544c:	6025      	str	r5, [r4, #0]
 800544e:	61a5      	str	r5, [r4, #24]
 8005450:	2208      	movs	r2, #8
 8005452:	4629      	mov	r1, r5
 8005454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005458:	f7fd fafc 	bl	8002a54 <memset>
 800545c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005464:	4620      	mov	r0, r4
 8005466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005468:	3468      	adds	r4, #104	; 0x68
 800546a:	e7d9      	b.n	8005420 <__sfp+0x1c>
 800546c:	2104      	movs	r1, #4
 800546e:	4638      	mov	r0, r7
 8005470:	f7ff ff62 	bl	8005338 <__sfmoreglue>
 8005474:	4604      	mov	r4, r0
 8005476:	6030      	str	r0, [r6, #0]
 8005478:	2800      	cmp	r0, #0
 800547a:	d1d5      	bne.n	8005428 <__sfp+0x24>
 800547c:	f7ff ff78 	bl	8005370 <__sfp_lock_release>
 8005480:	230c      	movs	r3, #12
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	e7ee      	b.n	8005464 <__sfp+0x60>
 8005486:	bf00      	nop
 8005488:	08005870 	.word	0x08005870
 800548c:	ffff0001 	.word	0xffff0001

08005490 <_fwalk_reent>:
 8005490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005494:	4606      	mov	r6, r0
 8005496:	4688      	mov	r8, r1
 8005498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800549c:	2700      	movs	r7, #0
 800549e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054a2:	f1b9 0901 	subs.w	r9, r9, #1
 80054a6:	d505      	bpl.n	80054b4 <_fwalk_reent+0x24>
 80054a8:	6824      	ldr	r4, [r4, #0]
 80054aa:	2c00      	cmp	r4, #0
 80054ac:	d1f7      	bne.n	800549e <_fwalk_reent+0xe>
 80054ae:	4638      	mov	r0, r7
 80054b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054b4:	89ab      	ldrh	r3, [r5, #12]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d907      	bls.n	80054ca <_fwalk_reent+0x3a>
 80054ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054be:	3301      	adds	r3, #1
 80054c0:	d003      	beq.n	80054ca <_fwalk_reent+0x3a>
 80054c2:	4629      	mov	r1, r5
 80054c4:	4630      	mov	r0, r6
 80054c6:	47c0      	blx	r8
 80054c8:	4307      	orrs	r7, r0
 80054ca:	3568      	adds	r5, #104	; 0x68
 80054cc:	e7e9      	b.n	80054a2 <_fwalk_reent+0x12>

080054ce <__retarget_lock_init_recursive>:
 80054ce:	4770      	bx	lr

080054d0 <__retarget_lock_acquire_recursive>:
 80054d0:	4770      	bx	lr

080054d2 <__retarget_lock_release_recursive>:
 80054d2:	4770      	bx	lr

080054d4 <__swhatbuf_r>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	460e      	mov	r6, r1
 80054d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054dc:	2900      	cmp	r1, #0
 80054de:	b096      	sub	sp, #88	; 0x58
 80054e0:	4614      	mov	r4, r2
 80054e2:	461d      	mov	r5, r3
 80054e4:	da07      	bge.n	80054f6 <__swhatbuf_r+0x22>
 80054e6:	2300      	movs	r3, #0
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	89b3      	ldrh	r3, [r6, #12]
 80054ec:	061a      	lsls	r2, r3, #24
 80054ee:	d410      	bmi.n	8005512 <__swhatbuf_r+0x3e>
 80054f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f4:	e00e      	b.n	8005514 <__swhatbuf_r+0x40>
 80054f6:	466a      	mov	r2, sp
 80054f8:	f000 f902 	bl	8005700 <_fstat_r>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	dbf2      	blt.n	80054e6 <__swhatbuf_r+0x12>
 8005500:	9a01      	ldr	r2, [sp, #4]
 8005502:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005506:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800550a:	425a      	negs	r2, r3
 800550c:	415a      	adcs	r2, r3
 800550e:	602a      	str	r2, [r5, #0]
 8005510:	e7ee      	b.n	80054f0 <__swhatbuf_r+0x1c>
 8005512:	2340      	movs	r3, #64	; 0x40
 8005514:	2000      	movs	r0, #0
 8005516:	6023      	str	r3, [r4, #0]
 8005518:	b016      	add	sp, #88	; 0x58
 800551a:	bd70      	pop	{r4, r5, r6, pc}

0800551c <__smakebuf_r>:
 800551c:	898b      	ldrh	r3, [r1, #12]
 800551e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005520:	079d      	lsls	r5, r3, #30
 8005522:	4606      	mov	r6, r0
 8005524:	460c      	mov	r4, r1
 8005526:	d507      	bpl.n	8005538 <__smakebuf_r+0x1c>
 8005528:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	6123      	str	r3, [r4, #16]
 8005530:	2301      	movs	r3, #1
 8005532:	6163      	str	r3, [r4, #20]
 8005534:	b002      	add	sp, #8
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	ab01      	add	r3, sp, #4
 800553a:	466a      	mov	r2, sp
 800553c:	f7ff ffca 	bl	80054d4 <__swhatbuf_r>
 8005540:	9900      	ldr	r1, [sp, #0]
 8005542:	4605      	mov	r5, r0
 8005544:	4630      	mov	r0, r6
 8005546:	f7ff f987 	bl	8004858 <_malloc_r>
 800554a:	b948      	cbnz	r0, 8005560 <__smakebuf_r+0x44>
 800554c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005550:	059a      	lsls	r2, r3, #22
 8005552:	d4ef      	bmi.n	8005534 <__smakebuf_r+0x18>
 8005554:	f023 0303 	bic.w	r3, r3, #3
 8005558:	f043 0302 	orr.w	r3, r3, #2
 800555c:	81a3      	strh	r3, [r4, #12]
 800555e:	e7e3      	b.n	8005528 <__smakebuf_r+0xc>
 8005560:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <__smakebuf_r+0x7c>)
 8005562:	62b3      	str	r3, [r6, #40]	; 0x28
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	6020      	str	r0, [r4, #0]
 8005568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	9b00      	ldr	r3, [sp, #0]
 8005570:	6163      	str	r3, [r4, #20]
 8005572:	9b01      	ldr	r3, [sp, #4]
 8005574:	6120      	str	r0, [r4, #16]
 8005576:	b15b      	cbz	r3, 8005590 <__smakebuf_r+0x74>
 8005578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800557c:	4630      	mov	r0, r6
 800557e:	f000 f8d1 	bl	8005724 <_isatty_r>
 8005582:	b128      	cbz	r0, 8005590 <__smakebuf_r+0x74>
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	f023 0303 	bic.w	r3, r3, #3
 800558a:	f043 0301 	orr.w	r3, r3, #1
 800558e:	81a3      	strh	r3, [r4, #12]
 8005590:	89a0      	ldrh	r0, [r4, #12]
 8005592:	4305      	orrs	r5, r0
 8005594:	81a5      	strh	r5, [r4, #12]
 8005596:	e7cd      	b.n	8005534 <__smakebuf_r+0x18>
 8005598:	0800532d 	.word	0x0800532d

0800559c <_malloc_usable_size_r>:
 800559c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055a0:	1f18      	subs	r0, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bfbc      	itt	lt
 80055a6:	580b      	ldrlt	r3, [r1, r0]
 80055a8:	18c0      	addlt	r0, r0, r3
 80055aa:	4770      	bx	lr

080055ac <_raise_r>:
 80055ac:	291f      	cmp	r1, #31
 80055ae:	b538      	push	{r3, r4, r5, lr}
 80055b0:	4604      	mov	r4, r0
 80055b2:	460d      	mov	r5, r1
 80055b4:	d904      	bls.n	80055c0 <_raise_r+0x14>
 80055b6:	2316      	movs	r3, #22
 80055b8:	6003      	str	r3, [r0, #0]
 80055ba:	f04f 30ff 	mov.w	r0, #4294967295
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80055c2:	b112      	cbz	r2, 80055ca <_raise_r+0x1e>
 80055c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80055c8:	b94b      	cbnz	r3, 80055de <_raise_r+0x32>
 80055ca:	4620      	mov	r0, r4
 80055cc:	f000 f830 	bl	8005630 <_getpid_r>
 80055d0:	462a      	mov	r2, r5
 80055d2:	4601      	mov	r1, r0
 80055d4:	4620      	mov	r0, r4
 80055d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055da:	f000 b817 	b.w	800560c <_kill_r>
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d00a      	beq.n	80055f8 <_raise_r+0x4c>
 80055e2:	1c59      	adds	r1, r3, #1
 80055e4:	d103      	bne.n	80055ee <_raise_r+0x42>
 80055e6:	2316      	movs	r3, #22
 80055e8:	6003      	str	r3, [r0, #0]
 80055ea:	2001      	movs	r0, #1
 80055ec:	e7e7      	b.n	80055be <_raise_r+0x12>
 80055ee:	2400      	movs	r4, #0
 80055f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80055f4:	4628      	mov	r0, r5
 80055f6:	4798      	blx	r3
 80055f8:	2000      	movs	r0, #0
 80055fa:	e7e0      	b.n	80055be <_raise_r+0x12>

080055fc <raise>:
 80055fc:	4b02      	ldr	r3, [pc, #8]	; (8005608 <raise+0xc>)
 80055fe:	4601      	mov	r1, r0
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	f7ff bfd3 	b.w	80055ac <_raise_r>
 8005606:	bf00      	nop
 8005608:	20000028 	.word	0x20000028

0800560c <_kill_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4d07      	ldr	r5, [pc, #28]	; (800562c <_kill_r+0x20>)
 8005610:	2300      	movs	r3, #0
 8005612:	4604      	mov	r4, r0
 8005614:	4608      	mov	r0, r1
 8005616:	4611      	mov	r1, r2
 8005618:	602b      	str	r3, [r5, #0]
 800561a:	f000 f8d7 	bl	80057cc <_kill>
 800561e:	1c43      	adds	r3, r0, #1
 8005620:	d102      	bne.n	8005628 <_kill_r+0x1c>
 8005622:	682b      	ldr	r3, [r5, #0]
 8005624:	b103      	cbz	r3, 8005628 <_kill_r+0x1c>
 8005626:	6023      	str	r3, [r4, #0]
 8005628:	bd38      	pop	{r3, r4, r5, pc}
 800562a:	bf00      	nop
 800562c:	20000268 	.word	0x20000268

08005630 <_getpid_r>:
 8005630:	f000 b8bc 	b.w	80057ac <_getpid>

08005634 <__sread>:
 8005634:	b510      	push	{r4, lr}
 8005636:	460c      	mov	r4, r1
 8005638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800563c:	f000 f894 	bl	8005768 <_read_r>
 8005640:	2800      	cmp	r0, #0
 8005642:	bfab      	itete	ge
 8005644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005646:	89a3      	ldrhlt	r3, [r4, #12]
 8005648:	181b      	addge	r3, r3, r0
 800564a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800564e:	bfac      	ite	ge
 8005650:	6563      	strge	r3, [r4, #84]	; 0x54
 8005652:	81a3      	strhlt	r3, [r4, #12]
 8005654:	bd10      	pop	{r4, pc}

08005656 <__swrite>:
 8005656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800565a:	461f      	mov	r7, r3
 800565c:	898b      	ldrh	r3, [r1, #12]
 800565e:	05db      	lsls	r3, r3, #23
 8005660:	4605      	mov	r5, r0
 8005662:	460c      	mov	r4, r1
 8005664:	4616      	mov	r6, r2
 8005666:	d505      	bpl.n	8005674 <__swrite+0x1e>
 8005668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800566c:	2302      	movs	r3, #2
 800566e:	2200      	movs	r2, #0
 8005670:	f000 f868 	bl	8005744 <_lseek_r>
 8005674:	89a3      	ldrh	r3, [r4, #12]
 8005676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800567a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800567e:	81a3      	strh	r3, [r4, #12]
 8005680:	4632      	mov	r2, r6
 8005682:	463b      	mov	r3, r7
 8005684:	4628      	mov	r0, r5
 8005686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800568a:	f000 b817 	b.w	80056bc <_write_r>

0800568e <__sseek>:
 800568e:	b510      	push	{r4, lr}
 8005690:	460c      	mov	r4, r1
 8005692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005696:	f000 f855 	bl	8005744 <_lseek_r>
 800569a:	1c43      	adds	r3, r0, #1
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	bf15      	itete	ne
 80056a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80056a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056aa:	81a3      	strheq	r3, [r4, #12]
 80056ac:	bf18      	it	ne
 80056ae:	81a3      	strhne	r3, [r4, #12]
 80056b0:	bd10      	pop	{r4, pc}

080056b2 <__sclose>:
 80056b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b6:	f000 b813 	b.w	80056e0 <_close_r>
	...

080056bc <_write_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4d07      	ldr	r5, [pc, #28]	; (80056dc <_write_r+0x20>)
 80056c0:	4604      	mov	r4, r0
 80056c2:	4608      	mov	r0, r1
 80056c4:	4611      	mov	r1, r2
 80056c6:	2200      	movs	r2, #0
 80056c8:	602a      	str	r2, [r5, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f000 f8a4 	bl	8005818 <_write>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_write_r+0x1e>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_write_r+0x1e>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	20000268 	.word	0x20000268

080056e0 <_close_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4d06      	ldr	r5, [pc, #24]	; (80056fc <_close_r+0x1c>)
 80056e4:	2300      	movs	r3, #0
 80056e6:	4604      	mov	r4, r0
 80056e8:	4608      	mov	r0, r1
 80056ea:	602b      	str	r3, [r5, #0]
 80056ec:	f000 f84e 	bl	800578c <_close>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	d102      	bne.n	80056fa <_close_r+0x1a>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	b103      	cbz	r3, 80056fa <_close_r+0x1a>
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	bd38      	pop	{r3, r4, r5, pc}
 80056fc:	20000268 	.word	0x20000268

08005700 <_fstat_r>:
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4d07      	ldr	r5, [pc, #28]	; (8005720 <_fstat_r+0x20>)
 8005704:	2300      	movs	r3, #0
 8005706:	4604      	mov	r4, r0
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	602b      	str	r3, [r5, #0]
 800570e:	f000 f845 	bl	800579c <_fstat>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	d102      	bne.n	800571c <_fstat_r+0x1c>
 8005716:	682b      	ldr	r3, [r5, #0]
 8005718:	b103      	cbz	r3, 800571c <_fstat_r+0x1c>
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	bd38      	pop	{r3, r4, r5, pc}
 800571e:	bf00      	nop
 8005720:	20000268 	.word	0x20000268

08005724 <_isatty_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4d06      	ldr	r5, [pc, #24]	; (8005740 <_isatty_r+0x1c>)
 8005728:	2300      	movs	r3, #0
 800572a:	4604      	mov	r4, r0
 800572c:	4608      	mov	r0, r1
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	f000 f844 	bl	80057bc <_isatty>
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d102      	bne.n	800573e <_isatty_r+0x1a>
 8005738:	682b      	ldr	r3, [r5, #0]
 800573a:	b103      	cbz	r3, 800573e <_isatty_r+0x1a>
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	bd38      	pop	{r3, r4, r5, pc}
 8005740:	20000268 	.word	0x20000268

08005744 <_lseek_r>:
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4d07      	ldr	r5, [pc, #28]	; (8005764 <_lseek_r+0x20>)
 8005748:	4604      	mov	r4, r0
 800574a:	4608      	mov	r0, r1
 800574c:	4611      	mov	r1, r2
 800574e:	2200      	movs	r2, #0
 8005750:	602a      	str	r2, [r5, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	f000 f842 	bl	80057dc <_lseek>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_lseek_r+0x1e>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_lseek_r+0x1e>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	20000268 	.word	0x20000268

08005768 <_read_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d07      	ldr	r5, [pc, #28]	; (8005788 <_read_r+0x20>)
 800576c:	4604      	mov	r4, r0
 800576e:	4608      	mov	r0, r1
 8005770:	4611      	mov	r1, r2
 8005772:	2200      	movs	r2, #0
 8005774:	602a      	str	r2, [r5, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	f000 f838 	bl	80057ec <_read>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d102      	bne.n	8005786 <_read_r+0x1e>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	b103      	cbz	r3, 8005786 <_read_r+0x1e>
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	20000268 	.word	0x20000268

0800578c <_close>:
 800578c:	4b02      	ldr	r3, [pc, #8]	; (8005798 <_close+0xc>)
 800578e:	2258      	movs	r2, #88	; 0x58
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	f04f 30ff 	mov.w	r0, #4294967295
 8005796:	4770      	bx	lr
 8005798:	20000268 	.word	0x20000268

0800579c <_fstat>:
 800579c:	4b02      	ldr	r3, [pc, #8]	; (80057a8 <_fstat+0xc>)
 800579e:	2258      	movs	r2, #88	; 0x58
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	f04f 30ff 	mov.w	r0, #4294967295
 80057a6:	4770      	bx	lr
 80057a8:	20000268 	.word	0x20000268

080057ac <_getpid>:
 80057ac:	4b02      	ldr	r3, [pc, #8]	; (80057b8 <_getpid+0xc>)
 80057ae:	2258      	movs	r2, #88	; 0x58
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	f04f 30ff 	mov.w	r0, #4294967295
 80057b6:	4770      	bx	lr
 80057b8:	20000268 	.word	0x20000268

080057bc <_isatty>:
 80057bc:	4b02      	ldr	r3, [pc, #8]	; (80057c8 <_isatty+0xc>)
 80057be:	2258      	movs	r2, #88	; 0x58
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	2000      	movs	r0, #0
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000268 	.word	0x20000268

080057cc <_kill>:
 80057cc:	4b02      	ldr	r3, [pc, #8]	; (80057d8 <_kill+0xc>)
 80057ce:	2258      	movs	r2, #88	; 0x58
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	f04f 30ff 	mov.w	r0, #4294967295
 80057d6:	4770      	bx	lr
 80057d8:	20000268 	.word	0x20000268

080057dc <_lseek>:
 80057dc:	4b02      	ldr	r3, [pc, #8]	; (80057e8 <_lseek+0xc>)
 80057de:	2258      	movs	r2, #88	; 0x58
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	f04f 30ff 	mov.w	r0, #4294967295
 80057e6:	4770      	bx	lr
 80057e8:	20000268 	.word	0x20000268

080057ec <_read>:
 80057ec:	4b02      	ldr	r3, [pc, #8]	; (80057f8 <_read+0xc>)
 80057ee:	2258      	movs	r2, #88	; 0x58
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	f04f 30ff 	mov.w	r0, #4294967295
 80057f6:	4770      	bx	lr
 80057f8:	20000268 	.word	0x20000268

080057fc <_sbrk>:
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <_sbrk+0x14>)
 80057fe:	6819      	ldr	r1, [r3, #0]
 8005800:	4602      	mov	r2, r0
 8005802:	b909      	cbnz	r1, 8005808 <_sbrk+0xc>
 8005804:	4903      	ldr	r1, [pc, #12]	; (8005814 <_sbrk+0x18>)
 8005806:	6019      	str	r1, [r3, #0]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	4402      	add	r2, r0
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	4770      	bx	lr
 8005810:	2000021c 	.word	0x2000021c
 8005814:	20000278 	.word	0x20000278

08005818 <_write>:
 8005818:	4b02      	ldr	r3, [pc, #8]	; (8005824 <_write+0xc>)
 800581a:	2258      	movs	r2, #88	; 0x58
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	f04f 30ff 	mov.w	r0, #4294967295
 8005822:	4770      	bx	lr
 8005824:	20000268 	.word	0x20000268

08005828 <_exit>:
 8005828:	e7fe      	b.n	8005828 <_exit>
	...

0800582c <_init>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr

08005838 <_fini>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	bf00      	nop
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr
