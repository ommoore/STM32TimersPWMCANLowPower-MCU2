
PLL_SYSCLK_HSI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000327c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003548  08003548  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003550  08003550  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003554  08003554  00013554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000070  080035c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080035c8  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e40  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000146d  00000000  00000000  00028ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  0002a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b8  00000000  00000000  0002a980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f6d  00000000  00000000  0002af38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089a6  00000000  00000000  0004bea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8285  00000000  00000000  0005484b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011cad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002290  00000000  00000000  0011cb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  0011edb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  0011ee50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003434 	.word	0x08003434

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003434 	.word	0x08003434

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <SysTick_Handler>:
 *      Author: Oliver
 */

#include "main.h"

void SysTick_Handler(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

	HAL_IncTick();
 80005bc:	f000 fa38 	bl	8000a30 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005c0:	f000 fb84 	bl	8000ccc <HAL_SYSTICK_IRQHandler>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <main>:
void SystemClock_Config_HSI(uint8_t clock_freq);


UART_HandleTypeDef huart2;

int main(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b09a      	sub	sp, #104	; 0x68
 80005cc:	af00      	add	r7, sp, #0

	char msg[100];

	HAL_Init();
 80005ce:	f000 f9dd 	bl	800098c <HAL_Init>
	SystemClock_Config_HSI(SYS_CLOCK_FREQ_120MHZ);
 80005d2:	2078      	movs	r0, #120	; 0x78
 80005d4:	f000 f876 	bl	80006c4 <SystemClock_Config_HSI>

	UART2_Init();
 80005d8:	f000 f904 	bl	80007e4 <UART2_Init>

	memset(msg, 0, sizeof(msg));
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2264      	movs	r2, #100	; 0x64
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fdb8 	bl	8002158 <memset>
	sprintf(msg, "SYSCLK : %ldHz\r\n", HAL_RCC_GetSysClockFreq());
 80005e8:	f000 fe2c 	bl	8001244 <HAL_RCC_GetSysClockFreq>
 80005ec:	4602      	mov	r2, r0
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	492f      	ldr	r1, [pc, #188]	; (80006b0 <main+0xe8>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fdd0 	bl	8002198 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fe08 	bl	8000210 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	482a      	ldr	r0, [pc, #168]	; (80006b4 <main+0xec>)
 800060c:	f001 fab7 	bl	8001b7e <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2264      	movs	r2, #100	; 0x64
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fd9e 	bl	8002158 <memset>
	sprintf(msg, "HCLK : %ldHz\r\n", HAL_RCC_GetHCLKFreq());
 800061c:	f000 fdde 	bl	80011dc <HAL_RCC_GetHCLKFreq>
 8000620:	4602      	mov	r2, r0
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4924      	ldr	r1, [pc, #144]	; (80006b8 <main+0xf0>)
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fdb6 	bl	8002198 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fdee 	bl	8000210 <strlen>
 8000634:	4603      	mov	r3, r0
 8000636:	b29a      	uxth	r2, r3
 8000638:	1d39      	adds	r1, r7, #4
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	481d      	ldr	r0, [pc, #116]	; (80006b4 <main+0xec>)
 8000640:	f001 fa9d 	bl	8001b7e <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2264      	movs	r2, #100	; 0x64
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fd84 	bl	8002158 <memset>
	sprintf(msg, "PCLK1 : %ldHz\r\n", HAL_RCC_GetPCLK1Freq());
 8000650:	f000 fdd0 	bl	80011f4 <HAL_RCC_GetPCLK1Freq>
 8000654:	4602      	mov	r2, r0
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4918      	ldr	r1, [pc, #96]	; (80006bc <main+0xf4>)
 800065a:	4618      	mov	r0, r3
 800065c:	f001 fd9c 	bl	8002198 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fdd4 	bl	8000210 <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	b29a      	uxth	r2, r3
 800066c:	1d39      	adds	r1, r7, #4
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	4810      	ldr	r0, [pc, #64]	; (80006b4 <main+0xec>)
 8000674:	f001 fa83 	bl	8001b7e <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2264      	movs	r2, #100	; 0x64
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fd6a 	bl	8002158 <memset>
	sprintf(msg, "PCLK2 : %ldHz\r\n", HAL_RCC_GetPCLK2Freq());
 8000684:	f000 fdca 	bl	800121c <HAL_RCC_GetPCLK2Freq>
 8000688:	4602      	mov	r2, r0
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	490c      	ldr	r1, [pc, #48]	; (80006c0 <main+0xf8>)
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fd82 	bl	8002198 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fdba 	bl	8000210 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	1d39      	adds	r1, r7, #4
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <main+0xec>)
 80006a8:	f001 fa69 	bl	8001b7e <HAL_UART_Transmit>

	while(1);
 80006ac:	e7fe      	b.n	80006ac <main+0xe4>
 80006ae:	bf00      	nop
 80006b0:	0800344c 	.word	0x0800344c
 80006b4:	20000098 	.word	0x20000098
 80006b8:	08003460 	.word	0x08003460
 80006bc:	08003470 	.word	0x08003470
 80006c0:	08003480 	.word	0x08003480

080006c4 <SystemClock_Config_HSI>:

	return 0;
}

void SystemClock_Config_HSI(uint8_t clock_freq) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b096      	sub	sp, #88	; 0x58
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	//Refer to reference manual (HCLK Wait States Latency)
	uint32_t FLatency = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	657b      	str	r3, [r7, #84]	; 0x54

	//HSI is not a great choice for deriving the PLL clock, because of stability issues due to the accuracy varying with temperature change.
	//Using HSI to derive PLL in this example:
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI; //already set to HSI by default
 80006d2:	2302      	movs	r3, #2
 80006d4:	623b      	str	r3, [r7, #32]
	osc_init.HSIState = RCC_HSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	osc_init.HSICalibrationValue = 16;
 80006da:	2310      	movs	r3, #16
 80006dc:	633b      	str	r3, [r7, #48]	; 0x30
	osc_init.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	63bb      	str	r3, [r7, #56]	; 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI; //HSI = 16MHz
 80006e2:	2300      	movs	r3, #0
 80006e4:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq) {
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b78      	cmp	r3, #120	; 0x78
 80006ea:	d038      	beq.n	800075e <SystemClock_Config_HSI+0x9a>
 80006ec:	2b78      	cmp	r3, #120	; 0x78
 80006ee:	dc4f      	bgt.n	8000790 <SystemClock_Config_HSI+0xcc>
 80006f0:	2b32      	cmp	r3, #50	; 0x32
 80006f2:	d002      	beq.n	80006fa <SystemClock_Config_HSI+0x36>
 80006f4:	2b54      	cmp	r3, #84	; 0x54
 80006f6:	d019      	beq.n	800072c <SystemClock_Config_HSI+0x68>

			FLatency = FLASH_ACR_LATENCY_3WS;
			break;
		}
		default:
			break;
 80006f8:	e04a      	b.n	8000790 <SystemClock_Config_HSI+0xcc>
			osc_init.PLL.PLLM = 16;
 80006fa:	2310      	movs	r3, #16
 80006fc:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLN = 100;
 80006fe:	2364      	movs	r3, #100	; 0x64
 8000700:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	64bb      	str	r3, [r7, #72]	; 0x48
			osc_init.PLL.PLLQ = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
			osc_init.PLL.PLLR = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	653b      	str	r3, [r7, #80]	; 0x50
			clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 800070e:	230f      	movs	r3, #15
 8000710:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000724:	61fb      	str	r3, [r7, #28]
			FLatency = FLASH_ACR_LATENCY_1WS;
 8000726:	2301      	movs	r3, #1
 8000728:	657b      	str	r3, [r7, #84]	; 0x54
			break;
 800072a:	e032      	b.n	8000792 <SystemClock_Config_HSI+0xce>
			osc_init.PLL.PLLM = 16;
 800072c:	2310      	movs	r3, #16
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLN = 168;
 8000730:	23a8      	movs	r3, #168	; 0xa8
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
			osc_init.PLL.PLLQ = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
			osc_init.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	653b      	str	r3, [r7, #80]	; 0x50
			clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000740:	230f      	movs	r3, #15
 8000742:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2302      	movs	r3, #2
 8000746:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	61fb      	str	r3, [r7, #28]
			FLatency = FLASH_ACR_LATENCY_2WS;
 8000758:	2302      	movs	r3, #2
 800075a:	657b      	str	r3, [r7, #84]	; 0x54
			break;
 800075c:	e019      	b.n	8000792 <SystemClock_Config_HSI+0xce>
			osc_init.PLL.PLLM = 16;
 800075e:	2310      	movs	r3, #16
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
			osc_init.PLL.PLLN = 240;
 8000762:	23f0      	movs	r3, #240	; 0xf0
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	64bb      	str	r3, [r7, #72]	; 0x48
			osc_init.PLL.PLLQ = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	64fb      	str	r3, [r7, #76]	; 0x4c
			osc_init.PLL.PLLR = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	653b      	str	r3, [r7, #80]	; 0x50
			clk_init.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | \
 8000772:	230f      	movs	r3, #15
 8000774:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 800077e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000782:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	61fb      	str	r3, [r7, #28]
			FLatency = FLASH_ACR_LATENCY_3WS;
 800078a:	2303      	movs	r3, #3
 800078c:	657b      	str	r3, [r7, #84]	; 0x54
			break;
 800078e:	e000      	b.n	8000792 <SystemClock_Config_HSI+0xce>
			break;
 8000790:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	4618      	mov	r0, r3
 8000798:	f000 ff06 	bl	80015a8 <HAL_RCC_OscConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config_HSI+0xe2>
		Error_handler();
 80007a2:	f000 f845 	bl	8000830 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK) {
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fc2f 	bl	8001010 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config_HSI+0xf8>
		Error_handler();
 80007b8:	f000 f83a 	bl	8000830 <Error_handler>
	}

	//Systick config
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80007bc:	f000 fd0e 	bl	80011dc <HAL_RCC_GetHCLKFreq>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <SystemClock_Config_HSI+0x11c>)
 80007c4:	fba2 2303 	umull	r2, r3, r2, r3
 80007c8:	099b      	lsrs	r3, r3, #6
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fa55 	bl	8000c7a <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007d0:	2004      	movs	r0, #4
 80007d2:	f000 fa5f 	bl	8000c94 <HAL_SYSTICK_CLKSourceConfig>
}
 80007d6:	bf00      	nop
 80007d8:	3758      	adds	r7, #88	; 0x58
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	10624dd3 	.word	0x10624dd3

080007e4 <UART2_Init>:

void UART2_Init(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

	huart2.Instance = USART2; //linking
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <UART2_Init+0x44>)
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <UART2_Init+0x48>)
 80007ec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <UART2_Init+0x44>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <UART2_Init+0x44>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <UART2_Init+0x44>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <UART2_Init+0x44>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <UART2_Init+0x44>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <UART2_Init+0x44>)
 8000810:	220c      	movs	r2, #12
 8000812:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK) {
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <UART2_Init+0x44>)
 8000816:	f001 f965 	bl	8001ae4 <HAL_UART_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <UART2_Init+0x40>
		//There is a problem
		Error_handler();
 8000820:	f000 f806 	bl	8000830 <Error_handler>
	}
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000098 	.word	0x20000098
 800082c:	40004400 	.word	0x40004400

08000830 <Error_handler>:

void Error_handler(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	printf("error");
 8000834:	4801      	ldr	r0, [pc, #4]	; (800083c <Error_handler+0xc>)
 8000836:	f001 fc97 	bl	8002168 <iprintf>
	while(1);
 800083a:	e7fe      	b.n	800083a <Error_handler+0xa>
 800083c:	08003490 	.word	0x08003490

08000840 <HAL_MspInit>:
 *      Author: Oliver
 */

#include "main.h"

void HAL_MspInit(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	/* Low level processor specific inits */

	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //not required, as this will set to default setting
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f9e3 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//System Control Block (SCB) -> System Handler Control and State Register (SHCSR)
	SCB->SHCSR |= (0x7 << 16);  //Set bits 16,17,18 (MEMFAULTENA, BUSFAULTENA, USGFAULTENA)
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <HAL_MspInit+0x40>)
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <HAL_MspInit+0x40>)
 8000850:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000854:	6253      	str	r3, [r2, #36]	; 0x24

	//3. Configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	f06f 000b 	mvn.w	r0, #11
 800085e:	f000 f9e2 	bl	8000c26 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	f06f 000a 	mvn.w	r0, #10
 800086a:	f000 f9dc 	bl	8000c26 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	f06f 0009 	mvn.w	r0, #9
 8000876:	f000 f9d6 	bl	8000c26 <HAL_NVIC_SetPriority>
	//HAL_Init() in main.c already takes care of SysTick_IRQn priority setting
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	/* Low level inits of the USART2 peripheral */

	//1. Enable the required peripheral clock for the USART2 and GPIOA peripherals
	__HAL_RCC_USART2_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <HAL_UART_MspInit+0x88>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a1d      	ldr	r2, [pc, #116]	; (800090c <HAL_UART_MspInit+0x88>)
 8000896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_UART_MspInit+0x88>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <HAL_UART_MspInit+0x88>)
 80008ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b0:	4a16      	ldr	r2, [pc, #88]	; (800090c <HAL_UART_MspInit+0x88>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	6313      	str	r3, [r2, #48]	; 0x30
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_UART_MspInit+0x88>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008bc:	f003 0301 	and.w	r3, r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]

	//2. Pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2; //USART2_TX
 80008c4:	2304      	movs	r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80008d4:	2307      	movs	r3, #7
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008e0:	f000 fa02 	bl	8000ce8 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //USART2_RX
 80008e4:	2308      	movs	r3, #8
 80008e6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4808      	ldr	r0, [pc, #32]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008f0:	f000 f9fa 	bl	8000ce8 <HAL_GPIO_Init>

	//3. Enable the peripheral IRQ in the NVIC
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008f4:	2026      	movs	r0, #38	; 0x26
 80008f6:	f000 f9b2 	bl	8000c5e <HAL_NVIC_EnableIRQ>

	//4. Set the priorities based on application needs
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	210f      	movs	r1, #15
 80008fe:	2026      	movs	r0, #38	; 0x26
 8000900:	f000 f991 	bl	8000c26 <HAL_NVIC_SetPriority>
}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000

08000914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <SystemInit+0x20>)
 800091a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <SystemInit+0x20>)
 8000920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800093e:	490e      	ldr	r1, [pc, #56]	; (8000978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000940:	4a0e      	ldr	r2, [pc, #56]	; (800097c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000954:	4c0b      	ldr	r4, [pc, #44]	; (8000984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000962:	f7ff ffd7 	bl	8000914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000966:	f001 fbd3 	bl	8002110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800096a:	f7ff fe2d 	bl	80005c8 <main>
  bx  lr    
 800096e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800097c:	08003558 	.word	0x08003558
  ldr r2, =_sbss
 8000980:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000984:	200000f0 	.word	0x200000f0

08000988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC_IRQHandler>
	...

0800098c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <HAL_Init+0x40>)
 8000996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_Init+0x40>)
 80009a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_Init+0x40>)
 80009ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 f92b 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 f808 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c0:	f7ff ff3e 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023c00 	.word	0x40023c00

080009d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x54>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x58>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f943 	bl	8000c7a <HAL_SYSTICK_Config>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00e      	b.n	8000a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d80a      	bhi.n	8000a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f000 f90b 	bl	8000c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_InitTick+0x5c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000004 	.word	0x20000004

08000a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x20>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_IncTick+0x24>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008
 8000a54:	200000dc 	.word	0x200000dc

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000dc 	.word	0x200000dc

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db0b      	blt.n	8000afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	f003 021f 	and.w	r2, r3, #31
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <__NVIC_EnableIRQ+0x38>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	095b      	lsrs	r3, r3, #5
 8000af4:	2001      	movs	r0, #1
 8000af6:	fa00 f202 	lsl.w	r2, r0, r2
 8000afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	; (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff8e 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff29 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff3e 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff8e 	bl	8000b64 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5d 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff31 	bl	8000ad4 <__NVIC_EnableIRQ>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffa2 	bl	8000bcc <SysTick_Config>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	d106      	bne.n	8000cb0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000cae:	e005      	b.n	8000cbc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000cb6:	f023 0304 	bic.w	r3, r3, #4
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000cd0:	f000 f802 	bl	8000cd8 <HAL_SYSTICK_Callback>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	e165      	b.n	8000fd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d04:	2201      	movs	r2, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f040 8154 	bne.w	8000fca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d005      	beq.n	8000d3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d130      	bne.n	8000d9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d70:	2201      	movs	r2, #1
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	091b      	lsrs	r3, r3, #4
 8000d86:	f003 0201 	and.w	r2, r3, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d017      	beq.n	8000dd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d123      	bne.n	8000e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	08da      	lsrs	r2, r3, #3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3208      	adds	r2, #8
 8000dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	220f      	movs	r2, #15
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	08da      	lsrs	r2, r3, #3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3208      	adds	r2, #8
 8000e26:	69b9      	ldr	r1, [r7, #24]
 8000e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0203 	and.w	r2, r3, #3
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 80ae 	beq.w	8000fca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a5c      	ldr	r2, [pc, #368]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b5a      	ldr	r3, [pc, #360]	; (8000fe8 <HAL_GPIO_Init+0x300>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8a:	4a58      	ldr	r2, [pc, #352]	; (8000fec <HAL_GPIO_Init+0x304>)
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3302      	adds	r3, #2
 8000e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_GPIO_Init+0x308>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d025      	beq.n	8000f02 <HAL_GPIO_Init+0x21a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4e      	ldr	r2, [pc, #312]	; (8000ff4 <HAL_GPIO_Init+0x30c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d01f      	beq.n	8000efe <HAL_GPIO_Init+0x216>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4d      	ldr	r2, [pc, #308]	; (8000ff8 <HAL_GPIO_Init+0x310>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d019      	beq.n	8000efa <HAL_GPIO_Init+0x212>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4c      	ldr	r2, [pc, #304]	; (8000ffc <HAL_GPIO_Init+0x314>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d013      	beq.n	8000ef6 <HAL_GPIO_Init+0x20e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4b      	ldr	r2, [pc, #300]	; (8001000 <HAL_GPIO_Init+0x318>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d00d      	beq.n	8000ef2 <HAL_GPIO_Init+0x20a>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4a      	ldr	r2, [pc, #296]	; (8001004 <HAL_GPIO_Init+0x31c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d007      	beq.n	8000eee <HAL_GPIO_Init+0x206>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a49      	ldr	r2, [pc, #292]	; (8001008 <HAL_GPIO_Init+0x320>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d101      	bne.n	8000eea <HAL_GPIO_Init+0x202>
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	e00c      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000eea:	2307      	movs	r3, #7
 8000eec:	e00a      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000eee:	2305      	movs	r3, #5
 8000ef0:	e008      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e004      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x21c>
 8000f02:	2300      	movs	r3, #0
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	f002 0203 	and.w	r2, r2, #3
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	4093      	lsls	r3, r2
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f14:	4935      	ldr	r1, [pc, #212]	; (8000fec <HAL_GPIO_Init+0x304>)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f22:	4b3a      	ldr	r3, [pc, #232]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f46:	4a31      	ldr	r2, [pc, #196]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f70:	4a26      	ldr	r2, [pc, #152]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <HAL_GPIO_Init+0x324>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_GPIO_Init+0x324>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fc4:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_GPIO_Init+0x324>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	f67f ae96 	bls.w	8000d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	40021000 	.word	0x40021000
 8001004:	40021400 	.word	0x40021400
 8001008:	40021800 	.word	0x40021800
 800100c:	40013c00 	.word	0x40013c00

08001010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e0cc      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001024:	4b68      	ldr	r3, [pc, #416]	; (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 030f 	and.w	r3, r3, #15
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d90c      	bls.n	800104c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001032:	4b65      	ldr	r3, [pc, #404]	; (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800103a:	4b63      	ldr	r3, [pc, #396]	; (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0b8      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001064:	4b59      	ldr	r3, [pc, #356]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4a58      	ldr	r2, [pc, #352]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 800106a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800106e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800107c:	4b53      	ldr	r3, [pc, #332]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a52      	ldr	r2, [pc, #328]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001088:	4b50      	ldr	r3, [pc, #320]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	494d      	ldr	r1, [pc, #308]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	4313      	orrs	r3, r2
 8001098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d044      	beq.n	8001130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b47      	ldr	r3, [pc, #284]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d119      	bne.n	80010ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e07f      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d003      	beq.n	80010ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d107      	bne.n	80010de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ce:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d109      	bne.n	80010ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e06f      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010de:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e067      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ee:	4b37      	ldr	r3, [pc, #220]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f023 0203 	bic.w	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4934      	ldr	r1, [pc, #208]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001100:	f7ff fcaa 	bl	8000a58 <HAL_GetTick>
 8001104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001106:	e00a      	b.n	800111e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001108:	f7ff fca6 	bl	8000a58 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	f241 3288 	movw	r2, #5000	; 0x1388
 8001116:	4293      	cmp	r3, r2
 8001118:	d901      	bls.n	800111e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e04f      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 020c 	and.w	r2, r3, #12
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	429a      	cmp	r2, r3
 800112e:	d1eb      	bne.n	8001108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 030f 	and.w	r3, r3, #15
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d20c      	bcs.n	8001158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e032      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4916      	ldr	r1, [pc, #88]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	4313      	orrs	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	490e      	ldr	r1, [pc, #56]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	4313      	orrs	r3, r2
 8001194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001196:	f000 f855 	bl	8001244 <HAL_RCC_GetSysClockFreq>
 800119a:	4602      	mov	r2, r0
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	490a      	ldr	r1, [pc, #40]	; (80011d0 <HAL_RCC_ClockConfig+0x1c0>)
 80011a8:	5ccb      	ldrb	r3, [r1, r3]
 80011aa:	fa22 f303 	lsr.w	r3, r2, r3
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_RCC_ClockConfig+0x1c8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fc0a 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00
 80011cc:	40023800 	.word	0x40023800
 80011d0:	08003498 	.word	0x08003498
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000000 	.word	0x20000000

080011f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80011f8:	f7ff fff0 	bl	80011dc <HAL_RCC_GetHCLKFreq>
 80011fc:	4602      	mov	r2, r0
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	0a9b      	lsrs	r3, r3, #10
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	4903      	ldr	r1, [pc, #12]	; (8001218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800120a:	5ccb      	ldrb	r3, [r1, r3]
 800120c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001210:	4618      	mov	r0, r3
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	080034a8 	.word	0x080034a8

0800121c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001220:	f7ff ffdc 	bl	80011dc <HAL_RCC_GetHCLKFreq>
 8001224:	4602      	mov	r2, r0
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	0b5b      	lsrs	r3, r3, #13
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	4903      	ldr	r1, [pc, #12]	; (8001240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001232:	5ccb      	ldrb	r3, [r1, r3]
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001238:	4618      	mov	r0, r3
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	080034a8 	.word	0x080034a8

08001244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001248:	b088      	sub	sp, #32
 800124a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001260:	4bce      	ldr	r3, [pc, #824]	; (800159c <HAL_RCC_GetSysClockFreq+0x358>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b0c      	cmp	r3, #12
 800126a:	f200 818d 	bhi.w	8001588 <HAL_RCC_GetSysClockFreq+0x344>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <HAL_RCC_GetSysClockFreq+0x30>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	080012a9 	.word	0x080012a9
 8001278:	08001589 	.word	0x08001589
 800127c:	08001589 	.word	0x08001589
 8001280:	08001589 	.word	0x08001589
 8001284:	080012af 	.word	0x080012af
 8001288:	08001589 	.word	0x08001589
 800128c:	08001589 	.word	0x08001589
 8001290:	08001589 	.word	0x08001589
 8001294:	080012b5 	.word	0x080012b5
 8001298:	08001589 	.word	0x08001589
 800129c:	08001589 	.word	0x08001589
 80012a0:	08001589 	.word	0x08001589
 80012a4:	08001429 	.word	0x08001429
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012a8:	4bbd      	ldr	r3, [pc, #756]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80012aa:	61bb      	str	r3, [r7, #24]
       break;
 80012ac:	e16f      	b.n	800158e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012ae:	4bbd      	ldr	r3, [pc, #756]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x360>)
 80012b0:	61bb      	str	r3, [r7, #24]
      break;
 80012b2:	e16c      	b.n	800158e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012b4:	4bb9      	ldr	r3, [pc, #740]	; (800159c <HAL_RCC_GetSysClockFreq+0x358>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012bc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012be:	4bb7      	ldr	r3, [pc, #732]	; (800159c <HAL_RCC_GetSysClockFreq+0x358>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d053      	beq.n	8001372 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ca:	4bb4      	ldr	r3, [pc, #720]	; (800159c <HAL_RCC_GetSysClockFreq+0x358>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	099b      	lsrs	r3, r3, #6
 80012d0:	461a      	mov	r2, r3
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80012da:	f04f 0100 	mov.w	r1, #0
 80012de:	ea02 0400 	and.w	r4, r2, r0
 80012e2:	603c      	str	r4, [r7, #0]
 80012e4:	400b      	ands	r3, r1
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80012ec:	4620      	mov	r0, r4
 80012ee:	4629      	mov	r1, r5
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	014b      	lsls	r3, r1, #5
 80012fa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80012fe:	0142      	lsls	r2, r0, #5
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	4623      	mov	r3, r4
 8001306:	1ac0      	subs	r0, r0, r3
 8001308:	462b      	mov	r3, r5
 800130a:	eb61 0103 	sbc.w	r1, r1, r3
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	018b      	lsls	r3, r1, #6
 8001318:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800131c:	0182      	lsls	r2, r0, #6
 800131e:	1a12      	subs	r2, r2, r0
 8001320:	eb63 0301 	sbc.w	r3, r3, r1
 8001324:	f04f 0000 	mov.w	r0, #0
 8001328:	f04f 0100 	mov.w	r1, #0
 800132c:	00d9      	lsls	r1, r3, #3
 800132e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001332:	00d0      	lsls	r0, r2, #3
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4621      	mov	r1, r4
 800133a:	1852      	adds	r2, r2, r1
 800133c:	4629      	mov	r1, r5
 800133e:	eb43 0101 	adc.w	r1, r3, r1
 8001342:	460b      	mov	r3, r1
 8001344:	f04f 0000 	mov.w	r0, #0
 8001348:	f04f 0100 	mov.w	r1, #0
 800134c:	0259      	lsls	r1, r3, #9
 800134e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001352:	0250      	lsls	r0, r2, #9
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	461a      	mov	r2, r3
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	f7fe ffac 	bl	80002c0 <__aeabi_uldivmod>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4613      	mov	r3, r2
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	e04c      	b.n	800140c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001372:	4b8a      	ldr	r3, [pc, #552]	; (800159c <HAL_RCC_GetSysClockFreq+0x358>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	099b      	lsrs	r3, r3, #6
 8001378:	461a      	mov	r2, r3
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001382:	f04f 0100 	mov.w	r1, #0
 8001386:	ea02 0a00 	and.w	sl, r2, r0
 800138a:	ea03 0b01 	and.w	fp, r3, r1
 800138e:	4650      	mov	r0, sl
 8001390:	4659      	mov	r1, fp
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	014b      	lsls	r3, r1, #5
 800139c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80013a0:	0142      	lsls	r2, r0, #5
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	ebb0 000a 	subs.w	r0, r0, sl
 80013aa:	eb61 010b 	sbc.w	r1, r1, fp
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	018b      	lsls	r3, r1, #6
 80013b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80013bc:	0182      	lsls	r2, r0, #6
 80013be:	1a12      	subs	r2, r2, r0
 80013c0:	eb63 0301 	sbc.w	r3, r3, r1
 80013c4:	f04f 0000 	mov.w	r0, #0
 80013c8:	f04f 0100 	mov.w	r1, #0
 80013cc:	00d9      	lsls	r1, r3, #3
 80013ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80013d2:	00d0      	lsls	r0, r2, #3
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	eb12 020a 	adds.w	r2, r2, sl
 80013dc:	eb43 030b 	adc.w	r3, r3, fp
 80013e0:	f04f 0000 	mov.w	r0, #0
 80013e4:	f04f 0100 	mov.w	r1, #0
 80013e8:	0299      	lsls	r1, r3, #10
 80013ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80013ee:	0290      	lsls	r0, r2, #10
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	461a      	mov	r2, r3
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	f7fe ff5e 	bl	80002c0 <__aeabi_uldivmod>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4613      	mov	r3, r2
 800140a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800140c:	4b63      	ldr	r3, [pc, #396]	; (800159c <HAL_RCC_GetSysClockFreq+0x358>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	0c1b      	lsrs	r3, r3, #16
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	3301      	adds	r3, #1
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	fbb2 f3f3 	udiv	r3, r2, r3
 8001424:	61bb      	str	r3, [r7, #24]
      break;
 8001426:	e0b2      	b.n	800158e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001428:	4b5c      	ldr	r3, [pc, #368]	; (800159c <HAL_RCC_GetSysClockFreq+0x358>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001430:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001432:	4b5a      	ldr	r3, [pc, #360]	; (800159c <HAL_RCC_GetSysClockFreq+0x358>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d04d      	beq.n	80014da <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800143e:	4b57      	ldr	r3, [pc, #348]	; (800159c <HAL_RCC_GetSysClockFreq+0x358>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	099b      	lsrs	r3, r3, #6
 8001444:	461a      	mov	r2, r3
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800144e:	f04f 0100 	mov.w	r1, #0
 8001452:	ea02 0800 	and.w	r8, r2, r0
 8001456:	ea03 0901 	and.w	r9, r3, r1
 800145a:	4640      	mov	r0, r8
 800145c:	4649      	mov	r1, r9
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	014b      	lsls	r3, r1, #5
 8001468:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800146c:	0142      	lsls	r2, r0, #5
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	ebb0 0008 	subs.w	r0, r0, r8
 8001476:	eb61 0109 	sbc.w	r1, r1, r9
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	018b      	lsls	r3, r1, #6
 8001484:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001488:	0182      	lsls	r2, r0, #6
 800148a:	1a12      	subs	r2, r2, r0
 800148c:	eb63 0301 	sbc.w	r3, r3, r1
 8001490:	f04f 0000 	mov.w	r0, #0
 8001494:	f04f 0100 	mov.w	r1, #0
 8001498:	00d9      	lsls	r1, r3, #3
 800149a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800149e:	00d0      	lsls	r0, r2, #3
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	eb12 0208 	adds.w	r2, r2, r8
 80014a8:	eb43 0309 	adc.w	r3, r3, r9
 80014ac:	f04f 0000 	mov.w	r0, #0
 80014b0:	f04f 0100 	mov.w	r1, #0
 80014b4:	0259      	lsls	r1, r3, #9
 80014b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80014ba:	0250      	lsls	r0, r2, #9
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	461a      	mov	r2, r3
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	f7fe fef8 	bl	80002c0 <__aeabi_uldivmod>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4613      	mov	r3, r2
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	e04a      	b.n	8001570 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <HAL_RCC_GetSysClockFreq+0x358>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	099b      	lsrs	r3, r3, #6
 80014e0:	461a      	mov	r2, r3
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80014ea:	f04f 0100 	mov.w	r1, #0
 80014ee:	ea02 0400 	and.w	r4, r2, r0
 80014f2:	ea03 0501 	and.w	r5, r3, r1
 80014f6:	4620      	mov	r0, r4
 80014f8:	4629      	mov	r1, r5
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	f04f 0300 	mov.w	r3, #0
 8001502:	014b      	lsls	r3, r1, #5
 8001504:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001508:	0142      	lsls	r2, r0, #5
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	1b00      	subs	r0, r0, r4
 8001510:	eb61 0105 	sbc.w	r1, r1, r5
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	018b      	lsls	r3, r1, #6
 800151e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001522:	0182      	lsls	r2, r0, #6
 8001524:	1a12      	subs	r2, r2, r0
 8001526:	eb63 0301 	sbc.w	r3, r3, r1
 800152a:	f04f 0000 	mov.w	r0, #0
 800152e:	f04f 0100 	mov.w	r1, #0
 8001532:	00d9      	lsls	r1, r3, #3
 8001534:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001538:	00d0      	lsls	r0, r2, #3
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	1912      	adds	r2, r2, r4
 8001540:	eb45 0303 	adc.w	r3, r5, r3
 8001544:	f04f 0000 	mov.w	r0, #0
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	0299      	lsls	r1, r3, #10
 800154e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001552:	0290      	lsls	r0, r2, #10
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	461a      	mov	r2, r3
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	f7fe feac 	bl	80002c0 <__aeabi_uldivmod>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4613      	mov	r3, r2
 800156e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_RCC_GetSysClockFreq+0x358>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	0f1b      	lsrs	r3, r3, #28
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	fbb2 f3f3 	udiv	r3, r2, r3
 8001584:	61bb      	str	r3, [r7, #24]
      break;
 8001586:	e002      	b.n	800158e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800158a:	61bb      	str	r3, [r7, #24]
      break;
 800158c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800158e:	69bb      	ldr	r3, [r7, #24]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	00f42400 	.word	0x00f42400
 80015a4:	007a1200 	.word	0x007a1200

080015a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e28d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8083 	beq.w	80016ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015c8:	4b94      	ldr	r3, [pc, #592]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d019      	beq.n	8001608 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015d4:	4b91      	ldr	r3, [pc, #580]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015e0:	4b8e      	ldr	r3, [pc, #568]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ec:	d00c      	beq.n	8001608 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ee:	4b8b      	ldr	r3, [pc, #556]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d112      	bne.n	8001620 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fa:	4b88      	ldr	r3, [pc, #544]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001606:	d10b      	bne.n	8001620 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	4b84      	ldr	r3, [pc, #528]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d05b      	beq.n	80016cc <HAL_RCC_OscConfig+0x124>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d157      	bne.n	80016cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e25a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d106      	bne.n	8001638 <HAL_RCC_OscConfig+0x90>
 800162a:	4b7c      	ldr	r3, [pc, #496]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a7b      	ldr	r2, [pc, #492]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0xcc>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0xb4>
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a75      	ldr	r2, [pc, #468]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b73      	ldr	r3, [pc, #460]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a72      	ldr	r2, [pc, #456]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0xcc>
 800165c:	4b6f      	ldr	r3, [pc, #444]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a6e      	ldr	r2, [pc, #440]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b6c      	ldr	r3, [pc, #432]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a6b      	ldr	r2, [pc, #428]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff f9ec 	bl	8000a58 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff f9e8 	bl	8000a58 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e21f      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	4b61      	ldr	r3, [pc, #388]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0xdc>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff f9d8 	bl	8000a58 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff f9d4 	bl	8000a58 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e20b      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	4b57      	ldr	r3, [pc, #348]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x104>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d06f      	beq.n	80017ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016da:	4b50      	ldr	r3, [pc, #320]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d017      	beq.n	8001716 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016e6:	4b4d      	ldr	r3, [pc, #308]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d105      	bne.n	80016fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016f2:	4b4a      	ldr	r3, [pc, #296]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00b      	beq.n	8001716 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001706:	2b0c      	cmp	r3, #12
 8001708:	d11c      	bne.n	8001744 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170a:	4b44      	ldr	r3, [pc, #272]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d116      	bne.n	8001744 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_RCC_OscConfig+0x186>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d001      	beq.n	800172e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e1d3      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4937      	ldr	r1, [pc, #220]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800173e:	4313      	orrs	r3, r2
 8001740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001742:	e03a      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d020      	beq.n	800178e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HAL_RCC_OscConfig+0x278>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001752:	f7ff f981 	bl	8000a58 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff f97d 	bl	8000a58 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1b4      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b28      	ldr	r3, [pc, #160]	; (800181c <HAL_RCC_OscConfig+0x274>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4925      	ldr	r1, [pc, #148]	; (800181c <HAL_RCC_OscConfig+0x274>)
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_RCC_OscConfig+0x278>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff f960 	bl	8000a58 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff f95c 	bl	8000a58 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e193      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d036      	beq.n	8001834 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d016      	beq.n	80017fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_RCC_OscConfig+0x27c>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff f940 	bl	8000a58 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017dc:	f7ff f93c 	bl	8000a58 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e173      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80017f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x234>
 80017fa:	e01b      	b.n	8001834 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_RCC_OscConfig+0x27c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001802:	f7ff f929 	bl	8000a58 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001808:	e00e      	b.n	8001828 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180a:	f7ff f925 	bl	8000a58 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d907      	bls.n	8001828 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e15c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
 800181c:	40023800 	.word	0x40023800
 8001820:	42470000 	.word	0x42470000
 8001824:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001828:	4b8a      	ldr	r3, [pc, #552]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 800182a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ea      	bne.n	800180a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8097 	beq.w	8001970 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001846:	4b83      	ldr	r3, [pc, #524]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b7f      	ldr	r3, [pc, #508]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a7e      	ldr	r2, [pc, #504]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186e:	2301      	movs	r3, #1
 8001870:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	4b79      	ldr	r3, [pc, #484]	; (8001a58 <HAL_RCC_OscConfig+0x4b0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d118      	bne.n	80018b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187e:	4b76      	ldr	r3, [pc, #472]	; (8001a58 <HAL_RCC_OscConfig+0x4b0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a75      	ldr	r2, [pc, #468]	; (8001a58 <HAL_RCC_OscConfig+0x4b0>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188a:	f7ff f8e5 	bl	8000a58 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001892:	f7ff f8e1 	bl	8000a58 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e118      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	4b6c      	ldr	r3, [pc, #432]	; (8001a58 <HAL_RCC_OscConfig+0x4b0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x31e>
 80018b8:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a65      	ldr	r2, [pc, #404]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
 80018c4:	e01c      	b.n	8001900 <HAL_RCC_OscConfig+0x358>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x340>
 80018ce:	4b61      	ldr	r3, [pc, #388]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	4a60      	ldr	r2, [pc, #384]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6713      	str	r3, [r2, #112]	; 0x70
 80018da:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018de:	4a5d      	ldr	r2, [pc, #372]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6713      	str	r3, [r2, #112]	; 0x70
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0x358>
 80018e8:	4b5a      	ldr	r3, [pc, #360]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a59      	ldr	r2, [pc, #356]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70
 80018f4:	4b57      	ldr	r3, [pc, #348]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a56      	ldr	r2, [pc, #344]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80018fa:	f023 0304 	bic.w	r3, r3, #4
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d015      	beq.n	8001934 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff f8a6 	bl	8000a58 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff f8a2 	bl	8000a58 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0d7      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001926:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0ee      	beq.n	8001910 <HAL_RCC_OscConfig+0x368>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7ff f890 	bl	8000a58 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193a:	e00a      	b.n	8001952 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7ff f88c 	bl	8000a58 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0c1      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ee      	bne.n	800193c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a3a      	ldr	r2, [pc, #232]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 800196a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80ad 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800197a:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b08      	cmp	r3, #8
 8001984:	d060      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d145      	bne.n	8001a1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_RCC_OscConfig+0x4b4>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff f860 	bl	8000a58 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f85c 	bl	8000a58 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e093      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	019b      	lsls	r3, r3, #6
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	431a      	orrs	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	071b      	lsls	r3, r3, #28
 80019e6:	491b      	ldr	r1, [pc, #108]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x4b4>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff f831 	bl	8000a58 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff f82d 	bl	8000a58 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e064      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x452>
 8001a18:	e05c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_RCC_OscConfig+0x4b4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff f81a 	bl	8000a58 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f816 	bl	8000a58 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e04d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_RCC_OscConfig+0x4ac>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x480>
 8001a46:	e045      	b.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e040      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <HAL_RCC_OscConfig+0x538>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d030      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d129      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d122      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a90:	4013      	ands	r3, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d119      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d10f      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e03f      	b.n	8001b76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d106      	bne.n	8001b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe feba 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2224      	movs	r2, #36	; 0x24
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f929 	bl	8001d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b08a      	sub	sp, #40	; 0x28
 8001b82:	af02      	add	r7, sp, #8
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	d17c      	bne.n	8001c98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <HAL_UART_Transmit+0x2c>
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e075      	b.n	8001c9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_UART_Transmit+0x3e>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e06e      	b.n	8001c9a <HAL_UART_Transmit+0x11c>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2221      	movs	r2, #33	; 0x21
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bd2:	f7fe ff41 	bl	8000a58 <HAL_GetTick>
 8001bd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	88fa      	ldrh	r2, [r7, #6]
 8001bdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	88fa      	ldrh	r2, [r7, #6]
 8001be2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bec:	d108      	bne.n	8001c00 <HAL_UART_Transmit+0x82>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d104      	bne.n	8001c00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	e003      	b.n	8001c08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c10:	e02a      	b.n	8001c68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f000 f840 	bl	8001ca2 <UART_WaitOnFlagUntilTimeout>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e036      	b.n	8001c9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10b      	bne.n	8001c4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	3302      	adds	r3, #2
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	e007      	b.n	8001c5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	3301      	adds	r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1cf      	bne.n	8001c12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2140      	movs	r1, #64	; 0x40
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f810 	bl	8001ca2 <UART_WaitOnFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e006      	b.n	8001c9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e000      	b.n	8001c9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
  }
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b090      	sub	sp, #64	; 0x40
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb2:	e050      	b.n	8001d56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cba:	d04c      	beq.n	8001d56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cc2:	f7fe fec9 	bl	8000a58 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d241      	bcs.n	8001d56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	330c      	adds	r3, #12
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	e853 3f00 	ldrex	r3, [r3]
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	330c      	adds	r3, #12
 8001cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cf2:	637a      	str	r2, [r7, #52]	; 0x34
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cf6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cfa:	e841 2300 	strex	r3, r2, [r1]
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1e5      	bne.n	8001cd2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3314      	adds	r3, #20
 8001d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	e853 3f00 	ldrex	r3, [r3]
 8001d14:	613b      	str	r3, [r7, #16]
   return(result);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3314      	adds	r3, #20
 8001d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d26:	623a      	str	r2, [r7, #32]
 8001d28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d2a:	69f9      	ldr	r1, [r7, #28]
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	e841 2300 	strex	r3, r2, [r1]
 8001d32:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1e5      	bne.n	8001d06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e00f      	b.n	8001d76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	bf0c      	ite	eq
 8001d66:	2301      	moveq	r3, #1
 8001d68:	2300      	movne	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d09f      	beq.n	8001cb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3740      	adds	r7, #64	; 0x40
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d84:	b09f      	sub	sp, #124	; 0x7c
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d96:	68d9      	ldr	r1, [r3, #12]
 8001d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	ea40 0301 	orr.w	r3, r0, r1
 8001da0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001dc4:	f021 010c 	bic.w	r1, r1, #12
 8001dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dce:	430b      	orrs	r3, r1
 8001dd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dde:	6999      	ldr	r1, [r3, #24]
 8001de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	ea40 0301 	orr.w	r3, r0, r1
 8001de8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4bc5      	ldr	r3, [pc, #788]	; (8002104 <UART_SetConfig+0x384>)
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d004      	beq.n	8001dfe <UART_SetConfig+0x7e>
 8001df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4bc3      	ldr	r3, [pc, #780]	; (8002108 <UART_SetConfig+0x388>)
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d103      	bne.n	8001e06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001dfe:	f7ff fa0d 	bl	800121c <HAL_RCC_GetPCLK2Freq>
 8001e02:	6778      	str	r0, [r7, #116]	; 0x74
 8001e04:	e002      	b.n	8001e0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e06:	f7ff f9f5 	bl	80011f4 <HAL_RCC_GetPCLK1Freq>
 8001e0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e14:	f040 80b6 	bne.w	8001f84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e1a:	461c      	mov	r4, r3
 8001e1c:	f04f 0500 	mov.w	r5, #0
 8001e20:	4622      	mov	r2, r4
 8001e22:	462b      	mov	r3, r5
 8001e24:	1891      	adds	r1, r2, r2
 8001e26:	6439      	str	r1, [r7, #64]	; 0x40
 8001e28:	415b      	adcs	r3, r3
 8001e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e30:	1912      	adds	r2, r2, r4
 8001e32:	eb45 0303 	adc.w	r3, r5, r3
 8001e36:	f04f 0000 	mov.w	r0, #0
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	00d9      	lsls	r1, r3, #3
 8001e40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e44:	00d0      	lsls	r0, r2, #3
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	1911      	adds	r1, r2, r4
 8001e4c:	6639      	str	r1, [r7, #96]	; 0x60
 8001e4e:	416b      	adcs	r3, r5
 8001e50:	667b      	str	r3, [r7, #100]	; 0x64
 8001e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	461a      	mov	r2, r3
 8001e58:	f04f 0300 	mov.w	r3, #0
 8001e5c:	1891      	adds	r1, r2, r2
 8001e5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e60:	415b      	adcs	r3, r3
 8001e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e6c:	f7fe fa28 	bl	80002c0 <__aeabi_uldivmod>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4ba5      	ldr	r3, [pc, #660]	; (800210c <UART_SetConfig+0x38c>)
 8001e76:	fba3 2302 	umull	r2, r3, r3, r2
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	011e      	lsls	r6, r3, #4
 8001e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e80:	461c      	mov	r4, r3
 8001e82:	f04f 0500 	mov.w	r5, #0
 8001e86:	4622      	mov	r2, r4
 8001e88:	462b      	mov	r3, r5
 8001e8a:	1891      	adds	r1, r2, r2
 8001e8c:	6339      	str	r1, [r7, #48]	; 0x30
 8001e8e:	415b      	adcs	r3, r3
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
 8001e92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e96:	1912      	adds	r2, r2, r4
 8001e98:	eb45 0303 	adc.w	r3, r5, r3
 8001e9c:	f04f 0000 	mov.w	r0, #0
 8001ea0:	f04f 0100 	mov.w	r1, #0
 8001ea4:	00d9      	lsls	r1, r3, #3
 8001ea6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001eaa:	00d0      	lsls	r0, r2, #3
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	1911      	adds	r1, r2, r4
 8001eb2:	65b9      	str	r1, [r7, #88]	; 0x58
 8001eb4:	416b      	adcs	r3, r5
 8001eb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	1891      	adds	r1, r2, r2
 8001ec4:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ec6:	415b      	adcs	r3, r3
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ece:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001ed2:	f7fe f9f5 	bl	80002c0 <__aeabi_uldivmod>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4b8c      	ldr	r3, [pc, #560]	; (800210c <UART_SetConfig+0x38c>)
 8001edc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	2164      	movs	r1, #100	; 0x64
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	3332      	adds	r3, #50	; 0x32
 8001eee:	4a87      	ldr	r2, [pc, #540]	; (800210c <UART_SetConfig+0x38c>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001efc:	441e      	add	r6, r3
 8001efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f00:	4618      	mov	r0, r3
 8001f02:	f04f 0100 	mov.w	r1, #0
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	1894      	adds	r4, r2, r2
 8001f0c:	623c      	str	r4, [r7, #32]
 8001f0e:	415b      	adcs	r3, r3
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
 8001f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f16:	1812      	adds	r2, r2, r0
 8001f18:	eb41 0303 	adc.w	r3, r1, r3
 8001f1c:	f04f 0400 	mov.w	r4, #0
 8001f20:	f04f 0500 	mov.w	r5, #0
 8001f24:	00dd      	lsls	r5, r3, #3
 8001f26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f2a:	00d4      	lsls	r4, r2, #3
 8001f2c:	4622      	mov	r2, r4
 8001f2e:	462b      	mov	r3, r5
 8001f30:	1814      	adds	r4, r2, r0
 8001f32:	653c      	str	r4, [r7, #80]	; 0x50
 8001f34:	414b      	adcs	r3, r1
 8001f36:	657b      	str	r3, [r7, #84]	; 0x54
 8001f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	1891      	adds	r1, r2, r2
 8001f44:	61b9      	str	r1, [r7, #24]
 8001f46:	415b      	adcs	r3, r3
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001f52:	f7fe f9b5 	bl	80002c0 <__aeabi_uldivmod>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4b6c      	ldr	r3, [pc, #432]	; (800210c <UART_SetConfig+0x38c>)
 8001f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f60:	095b      	lsrs	r3, r3, #5
 8001f62:	2164      	movs	r1, #100	; 0x64
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	3332      	adds	r3, #50	; 0x32
 8001f6e:	4a67      	ldr	r2, [pc, #412]	; (800210c <UART_SetConfig+0x38c>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	f003 0207 	and.w	r2, r3, #7
 8001f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4432      	add	r2, r6
 8001f80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f82:	e0b9      	b.n	80020f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f86:	461c      	mov	r4, r3
 8001f88:	f04f 0500 	mov.w	r5, #0
 8001f8c:	4622      	mov	r2, r4
 8001f8e:	462b      	mov	r3, r5
 8001f90:	1891      	adds	r1, r2, r2
 8001f92:	6139      	str	r1, [r7, #16]
 8001f94:	415b      	adcs	r3, r3
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f9c:	1912      	adds	r2, r2, r4
 8001f9e:	eb45 0303 	adc.w	r3, r5, r3
 8001fa2:	f04f 0000 	mov.w	r0, #0
 8001fa6:	f04f 0100 	mov.w	r1, #0
 8001faa:	00d9      	lsls	r1, r3, #3
 8001fac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001fb0:	00d0      	lsls	r0, r2, #3
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	eb12 0804 	adds.w	r8, r2, r4
 8001fba:	eb43 0905 	adc.w	r9, r3, r5
 8001fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f04f 0100 	mov.w	r1, #0
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	008b      	lsls	r3, r1, #2
 8001fd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001fd6:	0082      	lsls	r2, r0, #2
 8001fd8:	4640      	mov	r0, r8
 8001fda:	4649      	mov	r1, r9
 8001fdc:	f7fe f970 	bl	80002c0 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4b49      	ldr	r3, [pc, #292]	; (800210c <UART_SetConfig+0x38c>)
 8001fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	011e      	lsls	r6, r3, #4
 8001fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	1894      	adds	r4, r2, r2
 8001ffc:	60bc      	str	r4, [r7, #8]
 8001ffe:	415b      	adcs	r3, r3
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002006:	1812      	adds	r2, r2, r0
 8002008:	eb41 0303 	adc.w	r3, r1, r3
 800200c:	f04f 0400 	mov.w	r4, #0
 8002010:	f04f 0500 	mov.w	r5, #0
 8002014:	00dd      	lsls	r5, r3, #3
 8002016:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800201a:	00d4      	lsls	r4, r2, #3
 800201c:	4622      	mov	r2, r4
 800201e:	462b      	mov	r3, r5
 8002020:	1814      	adds	r4, r2, r0
 8002022:	64bc      	str	r4, [r7, #72]	; 0x48
 8002024:	414b      	adcs	r3, r1
 8002026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4618      	mov	r0, r3
 800202e:	f04f 0100 	mov.w	r1, #0
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	008b      	lsls	r3, r1, #2
 800203c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002040:	0082      	lsls	r2, r0, #2
 8002042:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002046:	f7fe f93b 	bl	80002c0 <__aeabi_uldivmod>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4b2f      	ldr	r3, [pc, #188]	; (800210c <UART_SetConfig+0x38c>)
 8002050:	fba3 1302 	umull	r1, r3, r3, r2
 8002054:	095b      	lsrs	r3, r3, #5
 8002056:	2164      	movs	r1, #100	; 0x64
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	3332      	adds	r3, #50	; 0x32
 8002062:	4a2a      	ldr	r2, [pc, #168]	; (800210c <UART_SetConfig+0x38c>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	095b      	lsrs	r3, r3, #5
 800206a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800206e:	441e      	add	r6, r3
 8002070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002072:	4618      	mov	r0, r3
 8002074:	f04f 0100 	mov.w	r1, #0
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	1894      	adds	r4, r2, r2
 800207e:	603c      	str	r4, [r7, #0]
 8002080:	415b      	adcs	r3, r3
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002088:	1812      	adds	r2, r2, r0
 800208a:	eb41 0303 	adc.w	r3, r1, r3
 800208e:	f04f 0400 	mov.w	r4, #0
 8002092:	f04f 0500 	mov.w	r5, #0
 8002096:	00dd      	lsls	r5, r3, #3
 8002098:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800209c:	00d4      	lsls	r4, r2, #3
 800209e:	4622      	mov	r2, r4
 80020a0:	462b      	mov	r3, r5
 80020a2:	eb12 0a00 	adds.w	sl, r2, r0
 80020a6:	eb43 0b01 	adc.w	fp, r3, r1
 80020aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f04f 0100 	mov.w	r1, #0
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	008b      	lsls	r3, r1, #2
 80020be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80020c2:	0082      	lsls	r2, r0, #2
 80020c4:	4650      	mov	r0, sl
 80020c6:	4659      	mov	r1, fp
 80020c8:	f7fe f8fa 	bl	80002c0 <__aeabi_uldivmod>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <UART_SetConfig+0x38c>)
 80020d2:	fba3 1302 	umull	r1, r3, r3, r2
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2164      	movs	r1, #100	; 0x64
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	3332      	adds	r3, #50	; 0x32
 80020e4:	4a09      	ldr	r2, [pc, #36]	; (800210c <UART_SetConfig+0x38c>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	f003 020f 	and.w	r2, r3, #15
 80020f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4432      	add	r2, r6
 80020f6:	609a      	str	r2, [r3, #8]
}
 80020f8:	bf00      	nop
 80020fa:	377c      	adds	r7, #124	; 0x7c
 80020fc:	46bd      	mov	sp, r7
 80020fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002102:	bf00      	nop
 8002104:	40011000 	.word	0x40011000
 8002108:	40011400 	.word	0x40011400
 800210c:	51eb851f 	.word	0x51eb851f

08002110 <__libc_init_array>:
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	4d0d      	ldr	r5, [pc, #52]	; (8002148 <__libc_init_array+0x38>)
 8002114:	4c0d      	ldr	r4, [pc, #52]	; (800214c <__libc_init_array+0x3c>)
 8002116:	1b64      	subs	r4, r4, r5
 8002118:	10a4      	asrs	r4, r4, #2
 800211a:	2600      	movs	r6, #0
 800211c:	42a6      	cmp	r6, r4
 800211e:	d109      	bne.n	8002134 <__libc_init_array+0x24>
 8002120:	4d0b      	ldr	r5, [pc, #44]	; (8002150 <__libc_init_array+0x40>)
 8002122:	4c0c      	ldr	r4, [pc, #48]	; (8002154 <__libc_init_array+0x44>)
 8002124:	f001 f986 	bl	8003434 <_init>
 8002128:	1b64      	subs	r4, r4, r5
 800212a:	10a4      	asrs	r4, r4, #2
 800212c:	2600      	movs	r6, #0
 800212e:	42a6      	cmp	r6, r4
 8002130:	d105      	bne.n	800213e <__libc_init_array+0x2e>
 8002132:	bd70      	pop	{r4, r5, r6, pc}
 8002134:	f855 3b04 	ldr.w	r3, [r5], #4
 8002138:	4798      	blx	r3
 800213a:	3601      	adds	r6, #1
 800213c:	e7ee      	b.n	800211c <__libc_init_array+0xc>
 800213e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002142:	4798      	blx	r3
 8002144:	3601      	adds	r6, #1
 8002146:	e7f2      	b.n	800212e <__libc_init_array+0x1e>
 8002148:	08003550 	.word	0x08003550
 800214c:	08003550 	.word	0x08003550
 8002150:	08003550 	.word	0x08003550
 8002154:	08003554 	.word	0x08003554

08002158 <memset>:
 8002158:	4402      	add	r2, r0
 800215a:	4603      	mov	r3, r0
 800215c:	4293      	cmp	r3, r2
 800215e:	d100      	bne.n	8002162 <memset+0xa>
 8002160:	4770      	bx	lr
 8002162:	f803 1b01 	strb.w	r1, [r3], #1
 8002166:	e7f9      	b.n	800215c <memset+0x4>

08002168 <iprintf>:
 8002168:	b40f      	push	{r0, r1, r2, r3}
 800216a:	4b0a      	ldr	r3, [pc, #40]	; (8002194 <iprintf+0x2c>)
 800216c:	b513      	push	{r0, r1, r4, lr}
 800216e:	681c      	ldr	r4, [r3, #0]
 8002170:	b124      	cbz	r4, 800217c <iprintf+0x14>
 8002172:	69a3      	ldr	r3, [r4, #24]
 8002174:	b913      	cbnz	r3, 800217c <iprintf+0x14>
 8002176:	4620      	mov	r0, r4
 8002178:	f000 f886 	bl	8002288 <__sinit>
 800217c:	ab05      	add	r3, sp, #20
 800217e:	9a04      	ldr	r2, [sp, #16]
 8002180:	68a1      	ldr	r1, [r4, #8]
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	4620      	mov	r0, r4
 8002186:	f000 faff 	bl	8002788 <_vfiprintf_r>
 800218a:	b002      	add	sp, #8
 800218c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002190:	b004      	add	sp, #16
 8002192:	4770      	bx	lr
 8002194:	2000000c 	.word	0x2000000c

08002198 <siprintf>:
 8002198:	b40e      	push	{r1, r2, r3}
 800219a:	b500      	push	{lr}
 800219c:	b09c      	sub	sp, #112	; 0x70
 800219e:	ab1d      	add	r3, sp, #116	; 0x74
 80021a0:	9002      	str	r0, [sp, #8]
 80021a2:	9006      	str	r0, [sp, #24]
 80021a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021a8:	4809      	ldr	r0, [pc, #36]	; (80021d0 <siprintf+0x38>)
 80021aa:	9107      	str	r1, [sp, #28]
 80021ac:	9104      	str	r1, [sp, #16]
 80021ae:	4909      	ldr	r1, [pc, #36]	; (80021d4 <siprintf+0x3c>)
 80021b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80021b4:	9105      	str	r1, [sp, #20]
 80021b6:	6800      	ldr	r0, [r0, #0]
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	a902      	add	r1, sp, #8
 80021bc:	f000 f9ba 	bl	8002534 <_svfiprintf_r>
 80021c0:	9b02      	ldr	r3, [sp, #8]
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	b01c      	add	sp, #112	; 0x70
 80021c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80021cc:	b003      	add	sp, #12
 80021ce:	4770      	bx	lr
 80021d0:	2000000c 	.word	0x2000000c
 80021d4:	ffff0208 	.word	0xffff0208

080021d8 <std>:
 80021d8:	2300      	movs	r3, #0
 80021da:	b510      	push	{r4, lr}
 80021dc:	4604      	mov	r4, r0
 80021de:	e9c0 3300 	strd	r3, r3, [r0]
 80021e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021e6:	6083      	str	r3, [r0, #8]
 80021e8:	8181      	strh	r1, [r0, #12]
 80021ea:	6643      	str	r3, [r0, #100]	; 0x64
 80021ec:	81c2      	strh	r2, [r0, #14]
 80021ee:	6183      	str	r3, [r0, #24]
 80021f0:	4619      	mov	r1, r3
 80021f2:	2208      	movs	r2, #8
 80021f4:	305c      	adds	r0, #92	; 0x5c
 80021f6:	f7ff ffaf 	bl	8002158 <memset>
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <std+0x38>)
 80021fc:	6263      	str	r3, [r4, #36]	; 0x24
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <std+0x3c>)
 8002200:	62a3      	str	r3, [r4, #40]	; 0x28
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <std+0x40>)
 8002204:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002206:	4b05      	ldr	r3, [pc, #20]	; (800221c <std+0x44>)
 8002208:	6224      	str	r4, [r4, #32]
 800220a:	6323      	str	r3, [r4, #48]	; 0x30
 800220c:	bd10      	pop	{r4, pc}
 800220e:	bf00      	nop
 8002210:	08002d31 	.word	0x08002d31
 8002214:	08002d53 	.word	0x08002d53
 8002218:	08002d8b 	.word	0x08002d8b
 800221c:	08002daf 	.word	0x08002daf

08002220 <_cleanup_r>:
 8002220:	4901      	ldr	r1, [pc, #4]	; (8002228 <_cleanup_r+0x8>)
 8002222:	f000 b8af 	b.w	8002384 <_fwalk_reent>
 8002226:	bf00      	nop
 8002228:	08003089 	.word	0x08003089

0800222c <__sfmoreglue>:
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	1e4a      	subs	r2, r1, #1
 8002230:	2568      	movs	r5, #104	; 0x68
 8002232:	4355      	muls	r5, r2
 8002234:	460e      	mov	r6, r1
 8002236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800223a:	f000 f8c5 	bl	80023c8 <_malloc_r>
 800223e:	4604      	mov	r4, r0
 8002240:	b140      	cbz	r0, 8002254 <__sfmoreglue+0x28>
 8002242:	2100      	movs	r1, #0
 8002244:	e9c0 1600 	strd	r1, r6, [r0]
 8002248:	300c      	adds	r0, #12
 800224a:	60a0      	str	r0, [r4, #8]
 800224c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002250:	f7ff ff82 	bl	8002158 <memset>
 8002254:	4620      	mov	r0, r4
 8002256:	bd70      	pop	{r4, r5, r6, pc}

08002258 <__sfp_lock_acquire>:
 8002258:	4801      	ldr	r0, [pc, #4]	; (8002260 <__sfp_lock_acquire+0x8>)
 800225a:	f000 b8b3 	b.w	80023c4 <__retarget_lock_acquire_recursive>
 800225e:	bf00      	nop
 8002260:	200000e8 	.word	0x200000e8

08002264 <__sfp_lock_release>:
 8002264:	4801      	ldr	r0, [pc, #4]	; (800226c <__sfp_lock_release+0x8>)
 8002266:	f000 b8ae 	b.w	80023c6 <__retarget_lock_release_recursive>
 800226a:	bf00      	nop
 800226c:	200000e8 	.word	0x200000e8

08002270 <__sinit_lock_acquire>:
 8002270:	4801      	ldr	r0, [pc, #4]	; (8002278 <__sinit_lock_acquire+0x8>)
 8002272:	f000 b8a7 	b.w	80023c4 <__retarget_lock_acquire_recursive>
 8002276:	bf00      	nop
 8002278:	200000e3 	.word	0x200000e3

0800227c <__sinit_lock_release>:
 800227c:	4801      	ldr	r0, [pc, #4]	; (8002284 <__sinit_lock_release+0x8>)
 800227e:	f000 b8a2 	b.w	80023c6 <__retarget_lock_release_recursive>
 8002282:	bf00      	nop
 8002284:	200000e3 	.word	0x200000e3

08002288 <__sinit>:
 8002288:	b510      	push	{r4, lr}
 800228a:	4604      	mov	r4, r0
 800228c:	f7ff fff0 	bl	8002270 <__sinit_lock_acquire>
 8002290:	69a3      	ldr	r3, [r4, #24]
 8002292:	b11b      	cbz	r3, 800229c <__sinit+0x14>
 8002294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002298:	f7ff bff0 	b.w	800227c <__sinit_lock_release>
 800229c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80022a0:	6523      	str	r3, [r4, #80]	; 0x50
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <__sinit+0x68>)
 80022a4:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <__sinit+0x6c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80022aa:	42a3      	cmp	r3, r4
 80022ac:	bf04      	itt	eq
 80022ae:	2301      	moveq	r3, #1
 80022b0:	61a3      	streq	r3, [r4, #24]
 80022b2:	4620      	mov	r0, r4
 80022b4:	f000 f820 	bl	80022f8 <__sfp>
 80022b8:	6060      	str	r0, [r4, #4]
 80022ba:	4620      	mov	r0, r4
 80022bc:	f000 f81c 	bl	80022f8 <__sfp>
 80022c0:	60a0      	str	r0, [r4, #8]
 80022c2:	4620      	mov	r0, r4
 80022c4:	f000 f818 	bl	80022f8 <__sfp>
 80022c8:	2200      	movs	r2, #0
 80022ca:	60e0      	str	r0, [r4, #12]
 80022cc:	2104      	movs	r1, #4
 80022ce:	6860      	ldr	r0, [r4, #4]
 80022d0:	f7ff ff82 	bl	80021d8 <std>
 80022d4:	68a0      	ldr	r0, [r4, #8]
 80022d6:	2201      	movs	r2, #1
 80022d8:	2109      	movs	r1, #9
 80022da:	f7ff ff7d 	bl	80021d8 <std>
 80022de:	68e0      	ldr	r0, [r4, #12]
 80022e0:	2202      	movs	r2, #2
 80022e2:	2112      	movs	r1, #18
 80022e4:	f7ff ff78 	bl	80021d8 <std>
 80022e8:	2301      	movs	r3, #1
 80022ea:	61a3      	str	r3, [r4, #24]
 80022ec:	e7d2      	b.n	8002294 <__sinit+0xc>
 80022ee:	bf00      	nop
 80022f0:	080034b0 	.word	0x080034b0
 80022f4:	08002221 	.word	0x08002221

080022f8 <__sfp>:
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fa:	4607      	mov	r7, r0
 80022fc:	f7ff ffac 	bl	8002258 <__sfp_lock_acquire>
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <__sfp+0x84>)
 8002302:	681e      	ldr	r6, [r3, #0]
 8002304:	69b3      	ldr	r3, [r6, #24]
 8002306:	b913      	cbnz	r3, 800230e <__sfp+0x16>
 8002308:	4630      	mov	r0, r6
 800230a:	f7ff ffbd 	bl	8002288 <__sinit>
 800230e:	3648      	adds	r6, #72	; 0x48
 8002310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002314:	3b01      	subs	r3, #1
 8002316:	d503      	bpl.n	8002320 <__sfp+0x28>
 8002318:	6833      	ldr	r3, [r6, #0]
 800231a:	b30b      	cbz	r3, 8002360 <__sfp+0x68>
 800231c:	6836      	ldr	r6, [r6, #0]
 800231e:	e7f7      	b.n	8002310 <__sfp+0x18>
 8002320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002324:	b9d5      	cbnz	r5, 800235c <__sfp+0x64>
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <__sfp+0x88>)
 8002328:	60e3      	str	r3, [r4, #12]
 800232a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800232e:	6665      	str	r5, [r4, #100]	; 0x64
 8002330:	f000 f847 	bl	80023c2 <__retarget_lock_init_recursive>
 8002334:	f7ff ff96 	bl	8002264 <__sfp_lock_release>
 8002338:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800233c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002340:	6025      	str	r5, [r4, #0]
 8002342:	61a5      	str	r5, [r4, #24]
 8002344:	2208      	movs	r2, #8
 8002346:	4629      	mov	r1, r5
 8002348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800234c:	f7ff ff04 	bl	8002158 <memset>
 8002350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002358:	4620      	mov	r0, r4
 800235a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800235c:	3468      	adds	r4, #104	; 0x68
 800235e:	e7d9      	b.n	8002314 <__sfp+0x1c>
 8002360:	2104      	movs	r1, #4
 8002362:	4638      	mov	r0, r7
 8002364:	f7ff ff62 	bl	800222c <__sfmoreglue>
 8002368:	4604      	mov	r4, r0
 800236a:	6030      	str	r0, [r6, #0]
 800236c:	2800      	cmp	r0, #0
 800236e:	d1d5      	bne.n	800231c <__sfp+0x24>
 8002370:	f7ff ff78 	bl	8002264 <__sfp_lock_release>
 8002374:	230c      	movs	r3, #12
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	e7ee      	b.n	8002358 <__sfp+0x60>
 800237a:	bf00      	nop
 800237c:	080034b0 	.word	0x080034b0
 8002380:	ffff0001 	.word	0xffff0001

08002384 <_fwalk_reent>:
 8002384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002388:	4606      	mov	r6, r0
 800238a:	4688      	mov	r8, r1
 800238c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002390:	2700      	movs	r7, #0
 8002392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002396:	f1b9 0901 	subs.w	r9, r9, #1
 800239a:	d505      	bpl.n	80023a8 <_fwalk_reent+0x24>
 800239c:	6824      	ldr	r4, [r4, #0]
 800239e:	2c00      	cmp	r4, #0
 80023a0:	d1f7      	bne.n	8002392 <_fwalk_reent+0xe>
 80023a2:	4638      	mov	r0, r7
 80023a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023a8:	89ab      	ldrh	r3, [r5, #12]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d907      	bls.n	80023be <_fwalk_reent+0x3a>
 80023ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023b2:	3301      	adds	r3, #1
 80023b4:	d003      	beq.n	80023be <_fwalk_reent+0x3a>
 80023b6:	4629      	mov	r1, r5
 80023b8:	4630      	mov	r0, r6
 80023ba:	47c0      	blx	r8
 80023bc:	4307      	orrs	r7, r0
 80023be:	3568      	adds	r5, #104	; 0x68
 80023c0:	e7e9      	b.n	8002396 <_fwalk_reent+0x12>

080023c2 <__retarget_lock_init_recursive>:
 80023c2:	4770      	bx	lr

080023c4 <__retarget_lock_acquire_recursive>:
 80023c4:	4770      	bx	lr

080023c6 <__retarget_lock_release_recursive>:
 80023c6:	4770      	bx	lr

080023c8 <_malloc_r>:
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	1ccd      	adds	r5, r1, #3
 80023cc:	f025 0503 	bic.w	r5, r5, #3
 80023d0:	3508      	adds	r5, #8
 80023d2:	2d0c      	cmp	r5, #12
 80023d4:	bf38      	it	cc
 80023d6:	250c      	movcc	r5, #12
 80023d8:	2d00      	cmp	r5, #0
 80023da:	4606      	mov	r6, r0
 80023dc:	db01      	blt.n	80023e2 <_malloc_r+0x1a>
 80023de:	42a9      	cmp	r1, r5
 80023e0:	d903      	bls.n	80023ea <_malloc_r+0x22>
 80023e2:	230c      	movs	r3, #12
 80023e4:	6033      	str	r3, [r6, #0]
 80023e6:	2000      	movs	r0, #0
 80023e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023ea:	f000 ff27 	bl	800323c <__malloc_lock>
 80023ee:	4921      	ldr	r1, [pc, #132]	; (8002474 <_malloc_r+0xac>)
 80023f0:	680a      	ldr	r2, [r1, #0]
 80023f2:	4614      	mov	r4, r2
 80023f4:	b99c      	cbnz	r4, 800241e <_malloc_r+0x56>
 80023f6:	4f20      	ldr	r7, [pc, #128]	; (8002478 <_malloc_r+0xb0>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b923      	cbnz	r3, 8002406 <_malloc_r+0x3e>
 80023fc:	4621      	mov	r1, r4
 80023fe:	4630      	mov	r0, r6
 8002400:	f000 fc86 	bl	8002d10 <_sbrk_r>
 8002404:	6038      	str	r0, [r7, #0]
 8002406:	4629      	mov	r1, r5
 8002408:	4630      	mov	r0, r6
 800240a:	f000 fc81 	bl	8002d10 <_sbrk_r>
 800240e:	1c43      	adds	r3, r0, #1
 8002410:	d123      	bne.n	800245a <_malloc_r+0x92>
 8002412:	230c      	movs	r3, #12
 8002414:	6033      	str	r3, [r6, #0]
 8002416:	4630      	mov	r0, r6
 8002418:	f000 ff16 	bl	8003248 <__malloc_unlock>
 800241c:	e7e3      	b.n	80023e6 <_malloc_r+0x1e>
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	1b5b      	subs	r3, r3, r5
 8002422:	d417      	bmi.n	8002454 <_malloc_r+0x8c>
 8002424:	2b0b      	cmp	r3, #11
 8002426:	d903      	bls.n	8002430 <_malloc_r+0x68>
 8002428:	6023      	str	r3, [r4, #0]
 800242a:	441c      	add	r4, r3
 800242c:	6025      	str	r5, [r4, #0]
 800242e:	e004      	b.n	800243a <_malloc_r+0x72>
 8002430:	6863      	ldr	r3, [r4, #4]
 8002432:	42a2      	cmp	r2, r4
 8002434:	bf0c      	ite	eq
 8002436:	600b      	streq	r3, [r1, #0]
 8002438:	6053      	strne	r3, [r2, #4]
 800243a:	4630      	mov	r0, r6
 800243c:	f000 ff04 	bl	8003248 <__malloc_unlock>
 8002440:	f104 000b 	add.w	r0, r4, #11
 8002444:	1d23      	adds	r3, r4, #4
 8002446:	f020 0007 	bic.w	r0, r0, #7
 800244a:	1ac2      	subs	r2, r0, r3
 800244c:	d0cc      	beq.n	80023e8 <_malloc_r+0x20>
 800244e:	1a1b      	subs	r3, r3, r0
 8002450:	50a3      	str	r3, [r4, r2]
 8002452:	e7c9      	b.n	80023e8 <_malloc_r+0x20>
 8002454:	4622      	mov	r2, r4
 8002456:	6864      	ldr	r4, [r4, #4]
 8002458:	e7cc      	b.n	80023f4 <_malloc_r+0x2c>
 800245a:	1cc4      	adds	r4, r0, #3
 800245c:	f024 0403 	bic.w	r4, r4, #3
 8002460:	42a0      	cmp	r0, r4
 8002462:	d0e3      	beq.n	800242c <_malloc_r+0x64>
 8002464:	1a21      	subs	r1, r4, r0
 8002466:	4630      	mov	r0, r6
 8002468:	f000 fc52 	bl	8002d10 <_sbrk_r>
 800246c:	3001      	adds	r0, #1
 800246e:	d1dd      	bne.n	800242c <_malloc_r+0x64>
 8002470:	e7cf      	b.n	8002412 <_malloc_r+0x4a>
 8002472:	bf00      	nop
 8002474:	2000008c 	.word	0x2000008c
 8002478:	20000090 	.word	0x20000090

0800247c <__ssputs_r>:
 800247c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002480:	688e      	ldr	r6, [r1, #8]
 8002482:	429e      	cmp	r6, r3
 8002484:	4682      	mov	sl, r0
 8002486:	460c      	mov	r4, r1
 8002488:	4690      	mov	r8, r2
 800248a:	461f      	mov	r7, r3
 800248c:	d838      	bhi.n	8002500 <__ssputs_r+0x84>
 800248e:	898a      	ldrh	r2, [r1, #12]
 8002490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002494:	d032      	beq.n	80024fc <__ssputs_r+0x80>
 8002496:	6825      	ldr	r5, [r4, #0]
 8002498:	6909      	ldr	r1, [r1, #16]
 800249a:	eba5 0901 	sub.w	r9, r5, r1
 800249e:	6965      	ldr	r5, [r4, #20]
 80024a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024a8:	3301      	adds	r3, #1
 80024aa:	444b      	add	r3, r9
 80024ac:	106d      	asrs	r5, r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	bf38      	it	cc
 80024b2:	461d      	movcc	r5, r3
 80024b4:	0553      	lsls	r3, r2, #21
 80024b6:	d531      	bpl.n	800251c <__ssputs_r+0xa0>
 80024b8:	4629      	mov	r1, r5
 80024ba:	f7ff ff85 	bl	80023c8 <_malloc_r>
 80024be:	4606      	mov	r6, r0
 80024c0:	b950      	cbnz	r0, 80024d8 <__ssputs_r+0x5c>
 80024c2:	230c      	movs	r3, #12
 80024c4:	f8ca 3000 	str.w	r3, [sl]
 80024c8:	89a3      	ldrh	r3, [r4, #12]
 80024ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ce:	81a3      	strh	r3, [r4, #12]
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024d8:	6921      	ldr	r1, [r4, #16]
 80024da:	464a      	mov	r2, r9
 80024dc:	f000 fe86 	bl	80031ec <memcpy>
 80024e0:	89a3      	ldrh	r3, [r4, #12]
 80024e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ea:	81a3      	strh	r3, [r4, #12]
 80024ec:	6126      	str	r6, [r4, #16]
 80024ee:	6165      	str	r5, [r4, #20]
 80024f0:	444e      	add	r6, r9
 80024f2:	eba5 0509 	sub.w	r5, r5, r9
 80024f6:	6026      	str	r6, [r4, #0]
 80024f8:	60a5      	str	r5, [r4, #8]
 80024fa:	463e      	mov	r6, r7
 80024fc:	42be      	cmp	r6, r7
 80024fe:	d900      	bls.n	8002502 <__ssputs_r+0x86>
 8002500:	463e      	mov	r6, r7
 8002502:	4632      	mov	r2, r6
 8002504:	6820      	ldr	r0, [r4, #0]
 8002506:	4641      	mov	r1, r8
 8002508:	f000 fe7e 	bl	8003208 <memmove>
 800250c:	68a3      	ldr	r3, [r4, #8]
 800250e:	6822      	ldr	r2, [r4, #0]
 8002510:	1b9b      	subs	r3, r3, r6
 8002512:	4432      	add	r2, r6
 8002514:	60a3      	str	r3, [r4, #8]
 8002516:	6022      	str	r2, [r4, #0]
 8002518:	2000      	movs	r0, #0
 800251a:	e7db      	b.n	80024d4 <__ssputs_r+0x58>
 800251c:	462a      	mov	r2, r5
 800251e:	f000 fee9 	bl	80032f4 <_realloc_r>
 8002522:	4606      	mov	r6, r0
 8002524:	2800      	cmp	r0, #0
 8002526:	d1e1      	bne.n	80024ec <__ssputs_r+0x70>
 8002528:	6921      	ldr	r1, [r4, #16]
 800252a:	4650      	mov	r0, sl
 800252c:	f000 fe92 	bl	8003254 <_free_r>
 8002530:	e7c7      	b.n	80024c2 <__ssputs_r+0x46>
	...

08002534 <_svfiprintf_r>:
 8002534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002538:	4698      	mov	r8, r3
 800253a:	898b      	ldrh	r3, [r1, #12]
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	b09d      	sub	sp, #116	; 0x74
 8002540:	4607      	mov	r7, r0
 8002542:	460d      	mov	r5, r1
 8002544:	4614      	mov	r4, r2
 8002546:	d50e      	bpl.n	8002566 <_svfiprintf_r+0x32>
 8002548:	690b      	ldr	r3, [r1, #16]
 800254a:	b963      	cbnz	r3, 8002566 <_svfiprintf_r+0x32>
 800254c:	2140      	movs	r1, #64	; 0x40
 800254e:	f7ff ff3b 	bl	80023c8 <_malloc_r>
 8002552:	6028      	str	r0, [r5, #0]
 8002554:	6128      	str	r0, [r5, #16]
 8002556:	b920      	cbnz	r0, 8002562 <_svfiprintf_r+0x2e>
 8002558:	230c      	movs	r3, #12
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	e0d1      	b.n	8002706 <_svfiprintf_r+0x1d2>
 8002562:	2340      	movs	r3, #64	; 0x40
 8002564:	616b      	str	r3, [r5, #20]
 8002566:	2300      	movs	r3, #0
 8002568:	9309      	str	r3, [sp, #36]	; 0x24
 800256a:	2320      	movs	r3, #32
 800256c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002570:	f8cd 800c 	str.w	r8, [sp, #12]
 8002574:	2330      	movs	r3, #48	; 0x30
 8002576:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002720 <_svfiprintf_r+0x1ec>
 800257a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800257e:	f04f 0901 	mov.w	r9, #1
 8002582:	4623      	mov	r3, r4
 8002584:	469a      	mov	sl, r3
 8002586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800258a:	b10a      	cbz	r2, 8002590 <_svfiprintf_r+0x5c>
 800258c:	2a25      	cmp	r2, #37	; 0x25
 800258e:	d1f9      	bne.n	8002584 <_svfiprintf_r+0x50>
 8002590:	ebba 0b04 	subs.w	fp, sl, r4
 8002594:	d00b      	beq.n	80025ae <_svfiprintf_r+0x7a>
 8002596:	465b      	mov	r3, fp
 8002598:	4622      	mov	r2, r4
 800259a:	4629      	mov	r1, r5
 800259c:	4638      	mov	r0, r7
 800259e:	f7ff ff6d 	bl	800247c <__ssputs_r>
 80025a2:	3001      	adds	r0, #1
 80025a4:	f000 80aa 	beq.w	80026fc <_svfiprintf_r+0x1c8>
 80025a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025aa:	445a      	add	r2, fp
 80025ac:	9209      	str	r2, [sp, #36]	; 0x24
 80025ae:	f89a 3000 	ldrb.w	r3, [sl]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 80a2 	beq.w	80026fc <_svfiprintf_r+0x1c8>
 80025b8:	2300      	movs	r3, #0
 80025ba:	f04f 32ff 	mov.w	r2, #4294967295
 80025be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025c2:	f10a 0a01 	add.w	sl, sl, #1
 80025c6:	9304      	str	r3, [sp, #16]
 80025c8:	9307      	str	r3, [sp, #28]
 80025ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025ce:	931a      	str	r3, [sp, #104]	; 0x68
 80025d0:	4654      	mov	r4, sl
 80025d2:	2205      	movs	r2, #5
 80025d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025d8:	4851      	ldr	r0, [pc, #324]	; (8002720 <_svfiprintf_r+0x1ec>)
 80025da:	f7fd fe21 	bl	8000220 <memchr>
 80025de:	9a04      	ldr	r2, [sp, #16]
 80025e0:	b9d8      	cbnz	r0, 800261a <_svfiprintf_r+0xe6>
 80025e2:	06d0      	lsls	r0, r2, #27
 80025e4:	bf44      	itt	mi
 80025e6:	2320      	movmi	r3, #32
 80025e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025ec:	0711      	lsls	r1, r2, #28
 80025ee:	bf44      	itt	mi
 80025f0:	232b      	movmi	r3, #43	; 0x2b
 80025f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025f6:	f89a 3000 	ldrb.w	r3, [sl]
 80025fa:	2b2a      	cmp	r3, #42	; 0x2a
 80025fc:	d015      	beq.n	800262a <_svfiprintf_r+0xf6>
 80025fe:	9a07      	ldr	r2, [sp, #28]
 8002600:	4654      	mov	r4, sl
 8002602:	2000      	movs	r0, #0
 8002604:	f04f 0c0a 	mov.w	ip, #10
 8002608:	4621      	mov	r1, r4
 800260a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800260e:	3b30      	subs	r3, #48	; 0x30
 8002610:	2b09      	cmp	r3, #9
 8002612:	d94e      	bls.n	80026b2 <_svfiprintf_r+0x17e>
 8002614:	b1b0      	cbz	r0, 8002644 <_svfiprintf_r+0x110>
 8002616:	9207      	str	r2, [sp, #28]
 8002618:	e014      	b.n	8002644 <_svfiprintf_r+0x110>
 800261a:	eba0 0308 	sub.w	r3, r0, r8
 800261e:	fa09 f303 	lsl.w	r3, r9, r3
 8002622:	4313      	orrs	r3, r2
 8002624:	9304      	str	r3, [sp, #16]
 8002626:	46a2      	mov	sl, r4
 8002628:	e7d2      	b.n	80025d0 <_svfiprintf_r+0x9c>
 800262a:	9b03      	ldr	r3, [sp, #12]
 800262c:	1d19      	adds	r1, r3, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	9103      	str	r1, [sp, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	bfbb      	ittet	lt
 8002636:	425b      	neglt	r3, r3
 8002638:	f042 0202 	orrlt.w	r2, r2, #2
 800263c:	9307      	strge	r3, [sp, #28]
 800263e:	9307      	strlt	r3, [sp, #28]
 8002640:	bfb8      	it	lt
 8002642:	9204      	strlt	r2, [sp, #16]
 8002644:	7823      	ldrb	r3, [r4, #0]
 8002646:	2b2e      	cmp	r3, #46	; 0x2e
 8002648:	d10c      	bne.n	8002664 <_svfiprintf_r+0x130>
 800264a:	7863      	ldrb	r3, [r4, #1]
 800264c:	2b2a      	cmp	r3, #42	; 0x2a
 800264e:	d135      	bne.n	80026bc <_svfiprintf_r+0x188>
 8002650:	9b03      	ldr	r3, [sp, #12]
 8002652:	1d1a      	adds	r2, r3, #4
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	9203      	str	r2, [sp, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	bfb8      	it	lt
 800265c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002660:	3402      	adds	r4, #2
 8002662:	9305      	str	r3, [sp, #20]
 8002664:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002730 <_svfiprintf_r+0x1fc>
 8002668:	7821      	ldrb	r1, [r4, #0]
 800266a:	2203      	movs	r2, #3
 800266c:	4650      	mov	r0, sl
 800266e:	f7fd fdd7 	bl	8000220 <memchr>
 8002672:	b140      	cbz	r0, 8002686 <_svfiprintf_r+0x152>
 8002674:	2340      	movs	r3, #64	; 0x40
 8002676:	eba0 000a 	sub.w	r0, r0, sl
 800267a:	fa03 f000 	lsl.w	r0, r3, r0
 800267e:	9b04      	ldr	r3, [sp, #16]
 8002680:	4303      	orrs	r3, r0
 8002682:	3401      	adds	r4, #1
 8002684:	9304      	str	r3, [sp, #16]
 8002686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800268a:	4826      	ldr	r0, [pc, #152]	; (8002724 <_svfiprintf_r+0x1f0>)
 800268c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002690:	2206      	movs	r2, #6
 8002692:	f7fd fdc5 	bl	8000220 <memchr>
 8002696:	2800      	cmp	r0, #0
 8002698:	d038      	beq.n	800270c <_svfiprintf_r+0x1d8>
 800269a:	4b23      	ldr	r3, [pc, #140]	; (8002728 <_svfiprintf_r+0x1f4>)
 800269c:	bb1b      	cbnz	r3, 80026e6 <_svfiprintf_r+0x1b2>
 800269e:	9b03      	ldr	r3, [sp, #12]
 80026a0:	3307      	adds	r3, #7
 80026a2:	f023 0307 	bic.w	r3, r3, #7
 80026a6:	3308      	adds	r3, #8
 80026a8:	9303      	str	r3, [sp, #12]
 80026aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026ac:	4433      	add	r3, r6
 80026ae:	9309      	str	r3, [sp, #36]	; 0x24
 80026b0:	e767      	b.n	8002582 <_svfiprintf_r+0x4e>
 80026b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80026b6:	460c      	mov	r4, r1
 80026b8:	2001      	movs	r0, #1
 80026ba:	e7a5      	b.n	8002608 <_svfiprintf_r+0xd4>
 80026bc:	2300      	movs	r3, #0
 80026be:	3401      	adds	r4, #1
 80026c0:	9305      	str	r3, [sp, #20]
 80026c2:	4619      	mov	r1, r3
 80026c4:	f04f 0c0a 	mov.w	ip, #10
 80026c8:	4620      	mov	r0, r4
 80026ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026ce:	3a30      	subs	r2, #48	; 0x30
 80026d0:	2a09      	cmp	r2, #9
 80026d2:	d903      	bls.n	80026dc <_svfiprintf_r+0x1a8>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0c5      	beq.n	8002664 <_svfiprintf_r+0x130>
 80026d8:	9105      	str	r1, [sp, #20]
 80026da:	e7c3      	b.n	8002664 <_svfiprintf_r+0x130>
 80026dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80026e0:	4604      	mov	r4, r0
 80026e2:	2301      	movs	r3, #1
 80026e4:	e7f0      	b.n	80026c8 <_svfiprintf_r+0x194>
 80026e6:	ab03      	add	r3, sp, #12
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	462a      	mov	r2, r5
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <_svfiprintf_r+0x1f8>)
 80026ee:	a904      	add	r1, sp, #16
 80026f0:	4638      	mov	r0, r7
 80026f2:	f3af 8000 	nop.w
 80026f6:	1c42      	adds	r2, r0, #1
 80026f8:	4606      	mov	r6, r0
 80026fa:	d1d6      	bne.n	80026aa <_svfiprintf_r+0x176>
 80026fc:	89ab      	ldrh	r3, [r5, #12]
 80026fe:	065b      	lsls	r3, r3, #25
 8002700:	f53f af2c 	bmi.w	800255c <_svfiprintf_r+0x28>
 8002704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002706:	b01d      	add	sp, #116	; 0x74
 8002708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800270c:	ab03      	add	r3, sp, #12
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	462a      	mov	r2, r5
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <_svfiprintf_r+0x1f8>)
 8002714:	a904      	add	r1, sp, #16
 8002716:	4638      	mov	r0, r7
 8002718:	f000 f9d4 	bl	8002ac4 <_printf_i>
 800271c:	e7eb      	b.n	80026f6 <_svfiprintf_r+0x1c2>
 800271e:	bf00      	nop
 8002720:	08003514 	.word	0x08003514
 8002724:	0800351e 	.word	0x0800351e
 8002728:	00000000 	.word	0x00000000
 800272c:	0800247d 	.word	0x0800247d
 8002730:	0800351a 	.word	0x0800351a

08002734 <__sfputc_r>:
 8002734:	6893      	ldr	r3, [r2, #8]
 8002736:	3b01      	subs	r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	b410      	push	{r4}
 800273c:	6093      	str	r3, [r2, #8]
 800273e:	da08      	bge.n	8002752 <__sfputc_r+0x1e>
 8002740:	6994      	ldr	r4, [r2, #24]
 8002742:	42a3      	cmp	r3, r4
 8002744:	db01      	blt.n	800274a <__sfputc_r+0x16>
 8002746:	290a      	cmp	r1, #10
 8002748:	d103      	bne.n	8002752 <__sfputc_r+0x1e>
 800274a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800274e:	f000 bb33 	b.w	8002db8 <__swbuf_r>
 8002752:	6813      	ldr	r3, [r2, #0]
 8002754:	1c58      	adds	r0, r3, #1
 8002756:	6010      	str	r0, [r2, #0]
 8002758:	7019      	strb	r1, [r3, #0]
 800275a:	4608      	mov	r0, r1
 800275c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002760:	4770      	bx	lr

08002762 <__sfputs_r>:
 8002762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002764:	4606      	mov	r6, r0
 8002766:	460f      	mov	r7, r1
 8002768:	4614      	mov	r4, r2
 800276a:	18d5      	adds	r5, r2, r3
 800276c:	42ac      	cmp	r4, r5
 800276e:	d101      	bne.n	8002774 <__sfputs_r+0x12>
 8002770:	2000      	movs	r0, #0
 8002772:	e007      	b.n	8002784 <__sfputs_r+0x22>
 8002774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002778:	463a      	mov	r2, r7
 800277a:	4630      	mov	r0, r6
 800277c:	f7ff ffda 	bl	8002734 <__sfputc_r>
 8002780:	1c43      	adds	r3, r0, #1
 8002782:	d1f3      	bne.n	800276c <__sfputs_r+0xa>
 8002784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002788 <_vfiprintf_r>:
 8002788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800278c:	460d      	mov	r5, r1
 800278e:	b09d      	sub	sp, #116	; 0x74
 8002790:	4614      	mov	r4, r2
 8002792:	4698      	mov	r8, r3
 8002794:	4606      	mov	r6, r0
 8002796:	b118      	cbz	r0, 80027a0 <_vfiprintf_r+0x18>
 8002798:	6983      	ldr	r3, [r0, #24]
 800279a:	b90b      	cbnz	r3, 80027a0 <_vfiprintf_r+0x18>
 800279c:	f7ff fd74 	bl	8002288 <__sinit>
 80027a0:	4b89      	ldr	r3, [pc, #548]	; (80029c8 <_vfiprintf_r+0x240>)
 80027a2:	429d      	cmp	r5, r3
 80027a4:	d11b      	bne.n	80027de <_vfiprintf_r+0x56>
 80027a6:	6875      	ldr	r5, [r6, #4]
 80027a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027aa:	07d9      	lsls	r1, r3, #31
 80027ac:	d405      	bmi.n	80027ba <_vfiprintf_r+0x32>
 80027ae:	89ab      	ldrh	r3, [r5, #12]
 80027b0:	059a      	lsls	r2, r3, #22
 80027b2:	d402      	bmi.n	80027ba <_vfiprintf_r+0x32>
 80027b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027b6:	f7ff fe05 	bl	80023c4 <__retarget_lock_acquire_recursive>
 80027ba:	89ab      	ldrh	r3, [r5, #12]
 80027bc:	071b      	lsls	r3, r3, #28
 80027be:	d501      	bpl.n	80027c4 <_vfiprintf_r+0x3c>
 80027c0:	692b      	ldr	r3, [r5, #16]
 80027c2:	b9eb      	cbnz	r3, 8002800 <_vfiprintf_r+0x78>
 80027c4:	4629      	mov	r1, r5
 80027c6:	4630      	mov	r0, r6
 80027c8:	f000 fb5a 	bl	8002e80 <__swsetup_r>
 80027cc:	b1c0      	cbz	r0, 8002800 <_vfiprintf_r+0x78>
 80027ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027d0:	07dc      	lsls	r4, r3, #31
 80027d2:	d50e      	bpl.n	80027f2 <_vfiprintf_r+0x6a>
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295
 80027d8:	b01d      	add	sp, #116	; 0x74
 80027da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027de:	4b7b      	ldr	r3, [pc, #492]	; (80029cc <_vfiprintf_r+0x244>)
 80027e0:	429d      	cmp	r5, r3
 80027e2:	d101      	bne.n	80027e8 <_vfiprintf_r+0x60>
 80027e4:	68b5      	ldr	r5, [r6, #8]
 80027e6:	e7df      	b.n	80027a8 <_vfiprintf_r+0x20>
 80027e8:	4b79      	ldr	r3, [pc, #484]	; (80029d0 <_vfiprintf_r+0x248>)
 80027ea:	429d      	cmp	r5, r3
 80027ec:	bf08      	it	eq
 80027ee:	68f5      	ldreq	r5, [r6, #12]
 80027f0:	e7da      	b.n	80027a8 <_vfiprintf_r+0x20>
 80027f2:	89ab      	ldrh	r3, [r5, #12]
 80027f4:	0598      	lsls	r0, r3, #22
 80027f6:	d4ed      	bmi.n	80027d4 <_vfiprintf_r+0x4c>
 80027f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027fa:	f7ff fde4 	bl	80023c6 <__retarget_lock_release_recursive>
 80027fe:	e7e9      	b.n	80027d4 <_vfiprintf_r+0x4c>
 8002800:	2300      	movs	r3, #0
 8002802:	9309      	str	r3, [sp, #36]	; 0x24
 8002804:	2320      	movs	r3, #32
 8002806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800280a:	f8cd 800c 	str.w	r8, [sp, #12]
 800280e:	2330      	movs	r3, #48	; 0x30
 8002810:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80029d4 <_vfiprintf_r+0x24c>
 8002814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002818:	f04f 0901 	mov.w	r9, #1
 800281c:	4623      	mov	r3, r4
 800281e:	469a      	mov	sl, r3
 8002820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002824:	b10a      	cbz	r2, 800282a <_vfiprintf_r+0xa2>
 8002826:	2a25      	cmp	r2, #37	; 0x25
 8002828:	d1f9      	bne.n	800281e <_vfiprintf_r+0x96>
 800282a:	ebba 0b04 	subs.w	fp, sl, r4
 800282e:	d00b      	beq.n	8002848 <_vfiprintf_r+0xc0>
 8002830:	465b      	mov	r3, fp
 8002832:	4622      	mov	r2, r4
 8002834:	4629      	mov	r1, r5
 8002836:	4630      	mov	r0, r6
 8002838:	f7ff ff93 	bl	8002762 <__sfputs_r>
 800283c:	3001      	adds	r0, #1
 800283e:	f000 80aa 	beq.w	8002996 <_vfiprintf_r+0x20e>
 8002842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002844:	445a      	add	r2, fp
 8002846:	9209      	str	r2, [sp, #36]	; 0x24
 8002848:	f89a 3000 	ldrb.w	r3, [sl]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a2 	beq.w	8002996 <_vfiprintf_r+0x20e>
 8002852:	2300      	movs	r3, #0
 8002854:	f04f 32ff 	mov.w	r2, #4294967295
 8002858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800285c:	f10a 0a01 	add.w	sl, sl, #1
 8002860:	9304      	str	r3, [sp, #16]
 8002862:	9307      	str	r3, [sp, #28]
 8002864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002868:	931a      	str	r3, [sp, #104]	; 0x68
 800286a:	4654      	mov	r4, sl
 800286c:	2205      	movs	r2, #5
 800286e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002872:	4858      	ldr	r0, [pc, #352]	; (80029d4 <_vfiprintf_r+0x24c>)
 8002874:	f7fd fcd4 	bl	8000220 <memchr>
 8002878:	9a04      	ldr	r2, [sp, #16]
 800287a:	b9d8      	cbnz	r0, 80028b4 <_vfiprintf_r+0x12c>
 800287c:	06d1      	lsls	r1, r2, #27
 800287e:	bf44      	itt	mi
 8002880:	2320      	movmi	r3, #32
 8002882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002886:	0713      	lsls	r3, r2, #28
 8002888:	bf44      	itt	mi
 800288a:	232b      	movmi	r3, #43	; 0x2b
 800288c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002890:	f89a 3000 	ldrb.w	r3, [sl]
 8002894:	2b2a      	cmp	r3, #42	; 0x2a
 8002896:	d015      	beq.n	80028c4 <_vfiprintf_r+0x13c>
 8002898:	9a07      	ldr	r2, [sp, #28]
 800289a:	4654      	mov	r4, sl
 800289c:	2000      	movs	r0, #0
 800289e:	f04f 0c0a 	mov.w	ip, #10
 80028a2:	4621      	mov	r1, r4
 80028a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028a8:	3b30      	subs	r3, #48	; 0x30
 80028aa:	2b09      	cmp	r3, #9
 80028ac:	d94e      	bls.n	800294c <_vfiprintf_r+0x1c4>
 80028ae:	b1b0      	cbz	r0, 80028de <_vfiprintf_r+0x156>
 80028b0:	9207      	str	r2, [sp, #28]
 80028b2:	e014      	b.n	80028de <_vfiprintf_r+0x156>
 80028b4:	eba0 0308 	sub.w	r3, r0, r8
 80028b8:	fa09 f303 	lsl.w	r3, r9, r3
 80028bc:	4313      	orrs	r3, r2
 80028be:	9304      	str	r3, [sp, #16]
 80028c0:	46a2      	mov	sl, r4
 80028c2:	e7d2      	b.n	800286a <_vfiprintf_r+0xe2>
 80028c4:	9b03      	ldr	r3, [sp, #12]
 80028c6:	1d19      	adds	r1, r3, #4
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	9103      	str	r1, [sp, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bfbb      	ittet	lt
 80028d0:	425b      	neglt	r3, r3
 80028d2:	f042 0202 	orrlt.w	r2, r2, #2
 80028d6:	9307      	strge	r3, [sp, #28]
 80028d8:	9307      	strlt	r3, [sp, #28]
 80028da:	bfb8      	it	lt
 80028dc:	9204      	strlt	r2, [sp, #16]
 80028de:	7823      	ldrb	r3, [r4, #0]
 80028e0:	2b2e      	cmp	r3, #46	; 0x2e
 80028e2:	d10c      	bne.n	80028fe <_vfiprintf_r+0x176>
 80028e4:	7863      	ldrb	r3, [r4, #1]
 80028e6:	2b2a      	cmp	r3, #42	; 0x2a
 80028e8:	d135      	bne.n	8002956 <_vfiprintf_r+0x1ce>
 80028ea:	9b03      	ldr	r3, [sp, #12]
 80028ec:	1d1a      	adds	r2, r3, #4
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	9203      	str	r2, [sp, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bfb8      	it	lt
 80028f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80028fa:	3402      	adds	r4, #2
 80028fc:	9305      	str	r3, [sp, #20]
 80028fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80029e4 <_vfiprintf_r+0x25c>
 8002902:	7821      	ldrb	r1, [r4, #0]
 8002904:	2203      	movs	r2, #3
 8002906:	4650      	mov	r0, sl
 8002908:	f7fd fc8a 	bl	8000220 <memchr>
 800290c:	b140      	cbz	r0, 8002920 <_vfiprintf_r+0x198>
 800290e:	2340      	movs	r3, #64	; 0x40
 8002910:	eba0 000a 	sub.w	r0, r0, sl
 8002914:	fa03 f000 	lsl.w	r0, r3, r0
 8002918:	9b04      	ldr	r3, [sp, #16]
 800291a:	4303      	orrs	r3, r0
 800291c:	3401      	adds	r4, #1
 800291e:	9304      	str	r3, [sp, #16]
 8002920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002924:	482c      	ldr	r0, [pc, #176]	; (80029d8 <_vfiprintf_r+0x250>)
 8002926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800292a:	2206      	movs	r2, #6
 800292c:	f7fd fc78 	bl	8000220 <memchr>
 8002930:	2800      	cmp	r0, #0
 8002932:	d03f      	beq.n	80029b4 <_vfiprintf_r+0x22c>
 8002934:	4b29      	ldr	r3, [pc, #164]	; (80029dc <_vfiprintf_r+0x254>)
 8002936:	bb1b      	cbnz	r3, 8002980 <_vfiprintf_r+0x1f8>
 8002938:	9b03      	ldr	r3, [sp, #12]
 800293a:	3307      	adds	r3, #7
 800293c:	f023 0307 	bic.w	r3, r3, #7
 8002940:	3308      	adds	r3, #8
 8002942:	9303      	str	r3, [sp, #12]
 8002944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002946:	443b      	add	r3, r7
 8002948:	9309      	str	r3, [sp, #36]	; 0x24
 800294a:	e767      	b.n	800281c <_vfiprintf_r+0x94>
 800294c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002950:	460c      	mov	r4, r1
 8002952:	2001      	movs	r0, #1
 8002954:	e7a5      	b.n	80028a2 <_vfiprintf_r+0x11a>
 8002956:	2300      	movs	r3, #0
 8002958:	3401      	adds	r4, #1
 800295a:	9305      	str	r3, [sp, #20]
 800295c:	4619      	mov	r1, r3
 800295e:	f04f 0c0a 	mov.w	ip, #10
 8002962:	4620      	mov	r0, r4
 8002964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002968:	3a30      	subs	r2, #48	; 0x30
 800296a:	2a09      	cmp	r2, #9
 800296c:	d903      	bls.n	8002976 <_vfiprintf_r+0x1ee>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0c5      	beq.n	80028fe <_vfiprintf_r+0x176>
 8002972:	9105      	str	r1, [sp, #20]
 8002974:	e7c3      	b.n	80028fe <_vfiprintf_r+0x176>
 8002976:	fb0c 2101 	mla	r1, ip, r1, r2
 800297a:	4604      	mov	r4, r0
 800297c:	2301      	movs	r3, #1
 800297e:	e7f0      	b.n	8002962 <_vfiprintf_r+0x1da>
 8002980:	ab03      	add	r3, sp, #12
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	462a      	mov	r2, r5
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <_vfiprintf_r+0x258>)
 8002988:	a904      	add	r1, sp, #16
 800298a:	4630      	mov	r0, r6
 800298c:	f3af 8000 	nop.w
 8002990:	4607      	mov	r7, r0
 8002992:	1c78      	adds	r0, r7, #1
 8002994:	d1d6      	bne.n	8002944 <_vfiprintf_r+0x1bc>
 8002996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002998:	07d9      	lsls	r1, r3, #31
 800299a:	d405      	bmi.n	80029a8 <_vfiprintf_r+0x220>
 800299c:	89ab      	ldrh	r3, [r5, #12]
 800299e:	059a      	lsls	r2, r3, #22
 80029a0:	d402      	bmi.n	80029a8 <_vfiprintf_r+0x220>
 80029a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029a4:	f7ff fd0f 	bl	80023c6 <__retarget_lock_release_recursive>
 80029a8:	89ab      	ldrh	r3, [r5, #12]
 80029aa:	065b      	lsls	r3, r3, #25
 80029ac:	f53f af12 	bmi.w	80027d4 <_vfiprintf_r+0x4c>
 80029b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029b2:	e711      	b.n	80027d8 <_vfiprintf_r+0x50>
 80029b4:	ab03      	add	r3, sp, #12
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	462a      	mov	r2, r5
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <_vfiprintf_r+0x258>)
 80029bc:	a904      	add	r1, sp, #16
 80029be:	4630      	mov	r0, r6
 80029c0:	f000 f880 	bl	8002ac4 <_printf_i>
 80029c4:	e7e4      	b.n	8002990 <_vfiprintf_r+0x208>
 80029c6:	bf00      	nop
 80029c8:	080034d4 	.word	0x080034d4
 80029cc:	080034f4 	.word	0x080034f4
 80029d0:	080034b4 	.word	0x080034b4
 80029d4:	08003514 	.word	0x08003514
 80029d8:	0800351e 	.word	0x0800351e
 80029dc:	00000000 	.word	0x00000000
 80029e0:	08002763 	.word	0x08002763
 80029e4:	0800351a 	.word	0x0800351a

080029e8 <_printf_common>:
 80029e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ec:	4616      	mov	r6, r2
 80029ee:	4699      	mov	r9, r3
 80029f0:	688a      	ldr	r2, [r1, #8]
 80029f2:	690b      	ldr	r3, [r1, #16]
 80029f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029f8:	4293      	cmp	r3, r2
 80029fa:	bfb8      	it	lt
 80029fc:	4613      	movlt	r3, r2
 80029fe:	6033      	str	r3, [r6, #0]
 8002a00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a04:	4607      	mov	r7, r0
 8002a06:	460c      	mov	r4, r1
 8002a08:	b10a      	cbz	r2, 8002a0e <_printf_common+0x26>
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	6033      	str	r3, [r6, #0]
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	0699      	lsls	r1, r3, #26
 8002a12:	bf42      	ittt	mi
 8002a14:	6833      	ldrmi	r3, [r6, #0]
 8002a16:	3302      	addmi	r3, #2
 8002a18:	6033      	strmi	r3, [r6, #0]
 8002a1a:	6825      	ldr	r5, [r4, #0]
 8002a1c:	f015 0506 	ands.w	r5, r5, #6
 8002a20:	d106      	bne.n	8002a30 <_printf_common+0x48>
 8002a22:	f104 0a19 	add.w	sl, r4, #25
 8002a26:	68e3      	ldr	r3, [r4, #12]
 8002a28:	6832      	ldr	r2, [r6, #0]
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	42ab      	cmp	r3, r5
 8002a2e:	dc26      	bgt.n	8002a7e <_printf_common+0x96>
 8002a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a34:	1e13      	subs	r3, r2, #0
 8002a36:	6822      	ldr	r2, [r4, #0]
 8002a38:	bf18      	it	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	0692      	lsls	r2, r2, #26
 8002a3e:	d42b      	bmi.n	8002a98 <_printf_common+0xb0>
 8002a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a44:	4649      	mov	r1, r9
 8002a46:	4638      	mov	r0, r7
 8002a48:	47c0      	blx	r8
 8002a4a:	3001      	adds	r0, #1
 8002a4c:	d01e      	beq.n	8002a8c <_printf_common+0xa4>
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	68e5      	ldr	r5, [r4, #12]
 8002a52:	6832      	ldr	r2, [r6, #0]
 8002a54:	f003 0306 	and.w	r3, r3, #6
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	bf08      	it	eq
 8002a5c:	1aad      	subeq	r5, r5, r2
 8002a5e:	68a3      	ldr	r3, [r4, #8]
 8002a60:	6922      	ldr	r2, [r4, #16]
 8002a62:	bf0c      	ite	eq
 8002a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a68:	2500      	movne	r5, #0
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	bfc4      	itt	gt
 8002a6e:	1a9b      	subgt	r3, r3, r2
 8002a70:	18ed      	addgt	r5, r5, r3
 8002a72:	2600      	movs	r6, #0
 8002a74:	341a      	adds	r4, #26
 8002a76:	42b5      	cmp	r5, r6
 8002a78:	d11a      	bne.n	8002ab0 <_printf_common+0xc8>
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	e008      	b.n	8002a90 <_printf_common+0xa8>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	4652      	mov	r2, sl
 8002a82:	4649      	mov	r1, r9
 8002a84:	4638      	mov	r0, r7
 8002a86:	47c0      	blx	r8
 8002a88:	3001      	adds	r0, #1
 8002a8a:	d103      	bne.n	8002a94 <_printf_common+0xac>
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a94:	3501      	adds	r5, #1
 8002a96:	e7c6      	b.n	8002a26 <_printf_common+0x3e>
 8002a98:	18e1      	adds	r1, r4, r3
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	2030      	movs	r0, #48	; 0x30
 8002a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aa2:	4422      	add	r2, r4
 8002aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002aac:	3302      	adds	r3, #2
 8002aae:	e7c7      	b.n	8002a40 <_printf_common+0x58>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	47c0      	blx	r8
 8002aba:	3001      	adds	r0, #1
 8002abc:	d0e6      	beq.n	8002a8c <_printf_common+0xa4>
 8002abe:	3601      	adds	r6, #1
 8002ac0:	e7d9      	b.n	8002a76 <_printf_common+0x8e>
	...

08002ac4 <_printf_i>:
 8002ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac8:	460c      	mov	r4, r1
 8002aca:	4691      	mov	r9, r2
 8002acc:	7e27      	ldrb	r7, [r4, #24]
 8002ace:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ad0:	2f78      	cmp	r7, #120	; 0x78
 8002ad2:	4680      	mov	r8, r0
 8002ad4:	469a      	mov	sl, r3
 8002ad6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ada:	d807      	bhi.n	8002aec <_printf_i+0x28>
 8002adc:	2f62      	cmp	r7, #98	; 0x62
 8002ade:	d80a      	bhi.n	8002af6 <_printf_i+0x32>
 8002ae0:	2f00      	cmp	r7, #0
 8002ae2:	f000 80d8 	beq.w	8002c96 <_printf_i+0x1d2>
 8002ae6:	2f58      	cmp	r7, #88	; 0x58
 8002ae8:	f000 80a3 	beq.w	8002c32 <_printf_i+0x16e>
 8002aec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002af4:	e03a      	b.n	8002b6c <_printf_i+0xa8>
 8002af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002afa:	2b15      	cmp	r3, #21
 8002afc:	d8f6      	bhi.n	8002aec <_printf_i+0x28>
 8002afe:	a001      	add	r0, pc, #4	; (adr r0, 8002b04 <_printf_i+0x40>)
 8002b00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002b04:	08002b5d 	.word	0x08002b5d
 8002b08:	08002b71 	.word	0x08002b71
 8002b0c:	08002aed 	.word	0x08002aed
 8002b10:	08002aed 	.word	0x08002aed
 8002b14:	08002aed 	.word	0x08002aed
 8002b18:	08002aed 	.word	0x08002aed
 8002b1c:	08002b71 	.word	0x08002b71
 8002b20:	08002aed 	.word	0x08002aed
 8002b24:	08002aed 	.word	0x08002aed
 8002b28:	08002aed 	.word	0x08002aed
 8002b2c:	08002aed 	.word	0x08002aed
 8002b30:	08002c7d 	.word	0x08002c7d
 8002b34:	08002ba1 	.word	0x08002ba1
 8002b38:	08002c5f 	.word	0x08002c5f
 8002b3c:	08002aed 	.word	0x08002aed
 8002b40:	08002aed 	.word	0x08002aed
 8002b44:	08002c9f 	.word	0x08002c9f
 8002b48:	08002aed 	.word	0x08002aed
 8002b4c:	08002ba1 	.word	0x08002ba1
 8002b50:	08002aed 	.word	0x08002aed
 8002b54:	08002aed 	.word	0x08002aed
 8002b58:	08002c67 	.word	0x08002c67
 8002b5c:	680b      	ldr	r3, [r1, #0]
 8002b5e:	1d1a      	adds	r2, r3, #4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	600a      	str	r2, [r1, #0]
 8002b64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0a3      	b.n	8002cb8 <_printf_i+0x1f4>
 8002b70:	6825      	ldr	r5, [r4, #0]
 8002b72:	6808      	ldr	r0, [r1, #0]
 8002b74:	062e      	lsls	r6, r5, #24
 8002b76:	f100 0304 	add.w	r3, r0, #4
 8002b7a:	d50a      	bpl.n	8002b92 <_printf_i+0xce>
 8002b7c:	6805      	ldr	r5, [r0, #0]
 8002b7e:	600b      	str	r3, [r1, #0]
 8002b80:	2d00      	cmp	r5, #0
 8002b82:	da03      	bge.n	8002b8c <_printf_i+0xc8>
 8002b84:	232d      	movs	r3, #45	; 0x2d
 8002b86:	426d      	negs	r5, r5
 8002b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b8c:	485e      	ldr	r0, [pc, #376]	; (8002d08 <_printf_i+0x244>)
 8002b8e:	230a      	movs	r3, #10
 8002b90:	e019      	b.n	8002bc6 <_printf_i+0x102>
 8002b92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002b96:	6805      	ldr	r5, [r0, #0]
 8002b98:	600b      	str	r3, [r1, #0]
 8002b9a:	bf18      	it	ne
 8002b9c:	b22d      	sxthne	r5, r5
 8002b9e:	e7ef      	b.n	8002b80 <_printf_i+0xbc>
 8002ba0:	680b      	ldr	r3, [r1, #0]
 8002ba2:	6825      	ldr	r5, [r4, #0]
 8002ba4:	1d18      	adds	r0, r3, #4
 8002ba6:	6008      	str	r0, [r1, #0]
 8002ba8:	0628      	lsls	r0, r5, #24
 8002baa:	d501      	bpl.n	8002bb0 <_printf_i+0xec>
 8002bac:	681d      	ldr	r5, [r3, #0]
 8002bae:	e002      	b.n	8002bb6 <_printf_i+0xf2>
 8002bb0:	0669      	lsls	r1, r5, #25
 8002bb2:	d5fb      	bpl.n	8002bac <_printf_i+0xe8>
 8002bb4:	881d      	ldrh	r5, [r3, #0]
 8002bb6:	4854      	ldr	r0, [pc, #336]	; (8002d08 <_printf_i+0x244>)
 8002bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8002bba:	bf0c      	ite	eq
 8002bbc:	2308      	moveq	r3, #8
 8002bbe:	230a      	movne	r3, #10
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bc6:	6866      	ldr	r6, [r4, #4]
 8002bc8:	60a6      	str	r6, [r4, #8]
 8002bca:	2e00      	cmp	r6, #0
 8002bcc:	bfa2      	ittt	ge
 8002bce:	6821      	ldrge	r1, [r4, #0]
 8002bd0:	f021 0104 	bicge.w	r1, r1, #4
 8002bd4:	6021      	strge	r1, [r4, #0]
 8002bd6:	b90d      	cbnz	r5, 8002bdc <_printf_i+0x118>
 8002bd8:	2e00      	cmp	r6, #0
 8002bda:	d04d      	beq.n	8002c78 <_printf_i+0x1b4>
 8002bdc:	4616      	mov	r6, r2
 8002bde:	fbb5 f1f3 	udiv	r1, r5, r3
 8002be2:	fb03 5711 	mls	r7, r3, r1, r5
 8002be6:	5dc7      	ldrb	r7, [r0, r7]
 8002be8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bec:	462f      	mov	r7, r5
 8002bee:	42bb      	cmp	r3, r7
 8002bf0:	460d      	mov	r5, r1
 8002bf2:	d9f4      	bls.n	8002bde <_printf_i+0x11a>
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d10b      	bne.n	8002c10 <_printf_i+0x14c>
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	07df      	lsls	r7, r3, #31
 8002bfc:	d508      	bpl.n	8002c10 <_printf_i+0x14c>
 8002bfe:	6923      	ldr	r3, [r4, #16]
 8002c00:	6861      	ldr	r1, [r4, #4]
 8002c02:	4299      	cmp	r1, r3
 8002c04:	bfde      	ittt	le
 8002c06:	2330      	movle	r3, #48	; 0x30
 8002c08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c10:	1b92      	subs	r2, r2, r6
 8002c12:	6122      	str	r2, [r4, #16]
 8002c14:	f8cd a000 	str.w	sl, [sp]
 8002c18:	464b      	mov	r3, r9
 8002c1a:	aa03      	add	r2, sp, #12
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	4640      	mov	r0, r8
 8002c20:	f7ff fee2 	bl	80029e8 <_printf_common>
 8002c24:	3001      	adds	r0, #1
 8002c26:	d14c      	bne.n	8002cc2 <_printf_i+0x1fe>
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	b004      	add	sp, #16
 8002c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c32:	4835      	ldr	r0, [pc, #212]	; (8002d08 <_printf_i+0x244>)
 8002c34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	680e      	ldr	r6, [r1, #0]
 8002c3c:	061f      	lsls	r7, r3, #24
 8002c3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002c42:	600e      	str	r6, [r1, #0]
 8002c44:	d514      	bpl.n	8002c70 <_printf_i+0x1ac>
 8002c46:	07d9      	lsls	r1, r3, #31
 8002c48:	bf44      	itt	mi
 8002c4a:	f043 0320 	orrmi.w	r3, r3, #32
 8002c4e:	6023      	strmi	r3, [r4, #0]
 8002c50:	b91d      	cbnz	r5, 8002c5a <_printf_i+0x196>
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	f023 0320 	bic.w	r3, r3, #32
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	2310      	movs	r3, #16
 8002c5c:	e7b0      	b.n	8002bc0 <_printf_i+0xfc>
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	f043 0320 	orr.w	r3, r3, #32
 8002c64:	6023      	str	r3, [r4, #0]
 8002c66:	2378      	movs	r3, #120	; 0x78
 8002c68:	4828      	ldr	r0, [pc, #160]	; (8002d0c <_printf_i+0x248>)
 8002c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c6e:	e7e3      	b.n	8002c38 <_printf_i+0x174>
 8002c70:	065e      	lsls	r6, r3, #25
 8002c72:	bf48      	it	mi
 8002c74:	b2ad      	uxthmi	r5, r5
 8002c76:	e7e6      	b.n	8002c46 <_printf_i+0x182>
 8002c78:	4616      	mov	r6, r2
 8002c7a:	e7bb      	b.n	8002bf4 <_printf_i+0x130>
 8002c7c:	680b      	ldr	r3, [r1, #0]
 8002c7e:	6826      	ldr	r6, [r4, #0]
 8002c80:	6960      	ldr	r0, [r4, #20]
 8002c82:	1d1d      	adds	r5, r3, #4
 8002c84:	600d      	str	r5, [r1, #0]
 8002c86:	0635      	lsls	r5, r6, #24
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	d501      	bpl.n	8002c90 <_printf_i+0x1cc>
 8002c8c:	6018      	str	r0, [r3, #0]
 8002c8e:	e002      	b.n	8002c96 <_printf_i+0x1d2>
 8002c90:	0671      	lsls	r1, r6, #25
 8002c92:	d5fb      	bpl.n	8002c8c <_printf_i+0x1c8>
 8002c94:	8018      	strh	r0, [r3, #0]
 8002c96:	2300      	movs	r3, #0
 8002c98:	6123      	str	r3, [r4, #16]
 8002c9a:	4616      	mov	r6, r2
 8002c9c:	e7ba      	b.n	8002c14 <_printf_i+0x150>
 8002c9e:	680b      	ldr	r3, [r1, #0]
 8002ca0:	1d1a      	adds	r2, r3, #4
 8002ca2:	600a      	str	r2, [r1, #0]
 8002ca4:	681e      	ldr	r6, [r3, #0]
 8002ca6:	6862      	ldr	r2, [r4, #4]
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4630      	mov	r0, r6
 8002cac:	f7fd fab8 	bl	8000220 <memchr>
 8002cb0:	b108      	cbz	r0, 8002cb6 <_printf_i+0x1f2>
 8002cb2:	1b80      	subs	r0, r0, r6
 8002cb4:	6060      	str	r0, [r4, #4]
 8002cb6:	6863      	ldr	r3, [r4, #4]
 8002cb8:	6123      	str	r3, [r4, #16]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cc0:	e7a8      	b.n	8002c14 <_printf_i+0x150>
 8002cc2:	6923      	ldr	r3, [r4, #16]
 8002cc4:	4632      	mov	r2, r6
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	4640      	mov	r0, r8
 8002cca:	47d0      	blx	sl
 8002ccc:	3001      	adds	r0, #1
 8002cce:	d0ab      	beq.n	8002c28 <_printf_i+0x164>
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	079b      	lsls	r3, r3, #30
 8002cd4:	d413      	bmi.n	8002cfe <_printf_i+0x23a>
 8002cd6:	68e0      	ldr	r0, [r4, #12]
 8002cd8:	9b03      	ldr	r3, [sp, #12]
 8002cda:	4298      	cmp	r0, r3
 8002cdc:	bfb8      	it	lt
 8002cde:	4618      	movlt	r0, r3
 8002ce0:	e7a4      	b.n	8002c2c <_printf_i+0x168>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	4632      	mov	r2, r6
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	4640      	mov	r0, r8
 8002cea:	47d0      	blx	sl
 8002cec:	3001      	adds	r0, #1
 8002cee:	d09b      	beq.n	8002c28 <_printf_i+0x164>
 8002cf0:	3501      	adds	r5, #1
 8002cf2:	68e3      	ldr	r3, [r4, #12]
 8002cf4:	9903      	ldr	r1, [sp, #12]
 8002cf6:	1a5b      	subs	r3, r3, r1
 8002cf8:	42ab      	cmp	r3, r5
 8002cfa:	dcf2      	bgt.n	8002ce2 <_printf_i+0x21e>
 8002cfc:	e7eb      	b.n	8002cd6 <_printf_i+0x212>
 8002cfe:	2500      	movs	r5, #0
 8002d00:	f104 0619 	add.w	r6, r4, #25
 8002d04:	e7f5      	b.n	8002cf2 <_printf_i+0x22e>
 8002d06:	bf00      	nop
 8002d08:	08003525 	.word	0x08003525
 8002d0c:	08003536 	.word	0x08003536

08002d10 <_sbrk_r>:
 8002d10:	b538      	push	{r3, r4, r5, lr}
 8002d12:	4d06      	ldr	r5, [pc, #24]	; (8002d2c <_sbrk_r+0x1c>)
 8002d14:	2300      	movs	r3, #0
 8002d16:	4604      	mov	r4, r0
 8002d18:	4608      	mov	r0, r1
 8002d1a:	602b      	str	r3, [r5, #0]
 8002d1c:	f000 fb74 	bl	8003408 <_sbrk>
 8002d20:	1c43      	adds	r3, r0, #1
 8002d22:	d102      	bne.n	8002d2a <_sbrk_r+0x1a>
 8002d24:	682b      	ldr	r3, [r5, #0]
 8002d26:	b103      	cbz	r3, 8002d2a <_sbrk_r+0x1a>
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	bd38      	pop	{r3, r4, r5, pc}
 8002d2c:	200000ec 	.word	0x200000ec

08002d30 <__sread>:
 8002d30:	b510      	push	{r4, lr}
 8002d32:	460c      	mov	r4, r1
 8002d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d38:	f000 fb02 	bl	8003340 <_read_r>
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	bfab      	itete	ge
 8002d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d42:	89a3      	ldrhlt	r3, [r4, #12]
 8002d44:	181b      	addge	r3, r3, r0
 8002d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d4a:	bfac      	ite	ge
 8002d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d4e:	81a3      	strhlt	r3, [r4, #12]
 8002d50:	bd10      	pop	{r4, pc}

08002d52 <__swrite>:
 8002d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d56:	461f      	mov	r7, r3
 8002d58:	898b      	ldrh	r3, [r1, #12]
 8002d5a:	05db      	lsls	r3, r3, #23
 8002d5c:	4605      	mov	r5, r0
 8002d5e:	460c      	mov	r4, r1
 8002d60:	4616      	mov	r6, r2
 8002d62:	d505      	bpl.n	8002d70 <__swrite+0x1e>
 8002d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d68:	2302      	movs	r3, #2
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f000 f9c8 	bl	8003100 <_lseek_r>
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d7a:	81a3      	strh	r3, [r4, #12]
 8002d7c:	4632      	mov	r2, r6
 8002d7e:	463b      	mov	r3, r7
 8002d80:	4628      	mov	r0, r5
 8002d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d86:	f000 b869 	b.w	8002e5c <_write_r>

08002d8a <__sseek>:
 8002d8a:	b510      	push	{r4, lr}
 8002d8c:	460c      	mov	r4, r1
 8002d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d92:	f000 f9b5 	bl	8003100 <_lseek_r>
 8002d96:	1c43      	adds	r3, r0, #1
 8002d98:	89a3      	ldrh	r3, [r4, #12]
 8002d9a:	bf15      	itete	ne
 8002d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002da6:	81a3      	strheq	r3, [r4, #12]
 8002da8:	bf18      	it	ne
 8002daa:	81a3      	strhne	r3, [r4, #12]
 8002dac:	bd10      	pop	{r4, pc}

08002dae <__sclose>:
 8002dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002db2:	f000 b8d3 	b.w	8002f5c <_close_r>
	...

08002db8 <__swbuf_r>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	460e      	mov	r6, r1
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	4605      	mov	r5, r0
 8002dc0:	b118      	cbz	r0, 8002dca <__swbuf_r+0x12>
 8002dc2:	6983      	ldr	r3, [r0, #24]
 8002dc4:	b90b      	cbnz	r3, 8002dca <__swbuf_r+0x12>
 8002dc6:	f7ff fa5f 	bl	8002288 <__sinit>
 8002dca:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <__swbuf_r+0x98>)
 8002dcc:	429c      	cmp	r4, r3
 8002dce:	d12b      	bne.n	8002e28 <__swbuf_r+0x70>
 8002dd0:	686c      	ldr	r4, [r5, #4]
 8002dd2:	69a3      	ldr	r3, [r4, #24]
 8002dd4:	60a3      	str	r3, [r4, #8]
 8002dd6:	89a3      	ldrh	r3, [r4, #12]
 8002dd8:	071a      	lsls	r2, r3, #28
 8002dda:	d52f      	bpl.n	8002e3c <__swbuf_r+0x84>
 8002ddc:	6923      	ldr	r3, [r4, #16]
 8002dde:	b36b      	cbz	r3, 8002e3c <__swbuf_r+0x84>
 8002de0:	6923      	ldr	r3, [r4, #16]
 8002de2:	6820      	ldr	r0, [r4, #0]
 8002de4:	1ac0      	subs	r0, r0, r3
 8002de6:	6963      	ldr	r3, [r4, #20]
 8002de8:	b2f6      	uxtb	r6, r6
 8002dea:	4283      	cmp	r3, r0
 8002dec:	4637      	mov	r7, r6
 8002dee:	dc04      	bgt.n	8002dfa <__swbuf_r+0x42>
 8002df0:	4621      	mov	r1, r4
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 f948 	bl	8003088 <_fflush_r>
 8002df8:	bb30      	cbnz	r0, 8002e48 <__swbuf_r+0x90>
 8002dfa:	68a3      	ldr	r3, [r4, #8]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	60a3      	str	r3, [r4, #8]
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	6022      	str	r2, [r4, #0]
 8002e06:	701e      	strb	r6, [r3, #0]
 8002e08:	6963      	ldr	r3, [r4, #20]
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	4283      	cmp	r3, r0
 8002e0e:	d004      	beq.n	8002e1a <__swbuf_r+0x62>
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	07db      	lsls	r3, r3, #31
 8002e14:	d506      	bpl.n	8002e24 <__swbuf_r+0x6c>
 8002e16:	2e0a      	cmp	r6, #10
 8002e18:	d104      	bne.n	8002e24 <__swbuf_r+0x6c>
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f000 f933 	bl	8003088 <_fflush_r>
 8002e22:	b988      	cbnz	r0, 8002e48 <__swbuf_r+0x90>
 8002e24:	4638      	mov	r0, r7
 8002e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <__swbuf_r+0x9c>)
 8002e2a:	429c      	cmp	r4, r3
 8002e2c:	d101      	bne.n	8002e32 <__swbuf_r+0x7a>
 8002e2e:	68ac      	ldr	r4, [r5, #8]
 8002e30:	e7cf      	b.n	8002dd2 <__swbuf_r+0x1a>
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <__swbuf_r+0xa0>)
 8002e34:	429c      	cmp	r4, r3
 8002e36:	bf08      	it	eq
 8002e38:	68ec      	ldreq	r4, [r5, #12]
 8002e3a:	e7ca      	b.n	8002dd2 <__swbuf_r+0x1a>
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f000 f81e 	bl	8002e80 <__swsetup_r>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d0cb      	beq.n	8002de0 <__swbuf_r+0x28>
 8002e48:	f04f 37ff 	mov.w	r7, #4294967295
 8002e4c:	e7ea      	b.n	8002e24 <__swbuf_r+0x6c>
 8002e4e:	bf00      	nop
 8002e50:	080034d4 	.word	0x080034d4
 8002e54:	080034f4 	.word	0x080034f4
 8002e58:	080034b4 	.word	0x080034b4

08002e5c <_write_r>:
 8002e5c:	b538      	push	{r3, r4, r5, lr}
 8002e5e:	4d07      	ldr	r5, [pc, #28]	; (8002e7c <_write_r+0x20>)
 8002e60:	4604      	mov	r4, r0
 8002e62:	4608      	mov	r0, r1
 8002e64:	4611      	mov	r1, r2
 8002e66:	2200      	movs	r2, #0
 8002e68:	602a      	str	r2, [r5, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f000 fada 	bl	8003424 <_write>
 8002e70:	1c43      	adds	r3, r0, #1
 8002e72:	d102      	bne.n	8002e7a <_write_r+0x1e>
 8002e74:	682b      	ldr	r3, [r5, #0]
 8002e76:	b103      	cbz	r3, 8002e7a <_write_r+0x1e>
 8002e78:	6023      	str	r3, [r4, #0]
 8002e7a:	bd38      	pop	{r3, r4, r5, pc}
 8002e7c:	200000ec 	.word	0x200000ec

08002e80 <__swsetup_r>:
 8002e80:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <__swsetup_r+0xcc>)
 8002e82:	b570      	push	{r4, r5, r6, lr}
 8002e84:	681d      	ldr	r5, [r3, #0]
 8002e86:	4606      	mov	r6, r0
 8002e88:	460c      	mov	r4, r1
 8002e8a:	b125      	cbz	r5, 8002e96 <__swsetup_r+0x16>
 8002e8c:	69ab      	ldr	r3, [r5, #24]
 8002e8e:	b913      	cbnz	r3, 8002e96 <__swsetup_r+0x16>
 8002e90:	4628      	mov	r0, r5
 8002e92:	f7ff f9f9 	bl	8002288 <__sinit>
 8002e96:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <__swsetup_r+0xd0>)
 8002e98:	429c      	cmp	r4, r3
 8002e9a:	d10f      	bne.n	8002ebc <__swsetup_r+0x3c>
 8002e9c:	686c      	ldr	r4, [r5, #4]
 8002e9e:	89a3      	ldrh	r3, [r4, #12]
 8002ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ea4:	0719      	lsls	r1, r3, #28
 8002ea6:	d42c      	bmi.n	8002f02 <__swsetup_r+0x82>
 8002ea8:	06dd      	lsls	r5, r3, #27
 8002eaa:	d411      	bmi.n	8002ed0 <__swsetup_r+0x50>
 8002eac:	2309      	movs	r3, #9
 8002eae:	6033      	str	r3, [r6, #0]
 8002eb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002eb4:	81a3      	strh	r3, [r4, #12]
 8002eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eba:	e03e      	b.n	8002f3a <__swsetup_r+0xba>
 8002ebc:	4b25      	ldr	r3, [pc, #148]	; (8002f54 <__swsetup_r+0xd4>)
 8002ebe:	429c      	cmp	r4, r3
 8002ec0:	d101      	bne.n	8002ec6 <__swsetup_r+0x46>
 8002ec2:	68ac      	ldr	r4, [r5, #8]
 8002ec4:	e7eb      	b.n	8002e9e <__swsetup_r+0x1e>
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <__swsetup_r+0xd8>)
 8002ec8:	429c      	cmp	r4, r3
 8002eca:	bf08      	it	eq
 8002ecc:	68ec      	ldreq	r4, [r5, #12]
 8002ece:	e7e6      	b.n	8002e9e <__swsetup_r+0x1e>
 8002ed0:	0758      	lsls	r0, r3, #29
 8002ed2:	d512      	bpl.n	8002efa <__swsetup_r+0x7a>
 8002ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ed6:	b141      	cbz	r1, 8002eea <__swsetup_r+0x6a>
 8002ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002edc:	4299      	cmp	r1, r3
 8002ede:	d002      	beq.n	8002ee6 <__swsetup_r+0x66>
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	f000 f9b7 	bl	8003254 <_free_r>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	6363      	str	r3, [r4, #52]	; 0x34
 8002eea:	89a3      	ldrh	r3, [r4, #12]
 8002eec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6063      	str	r3, [r4, #4]
 8002ef6:	6923      	ldr	r3, [r4, #16]
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	89a3      	ldrh	r3, [r4, #12]
 8002efc:	f043 0308 	orr.w	r3, r3, #8
 8002f00:	81a3      	strh	r3, [r4, #12]
 8002f02:	6923      	ldr	r3, [r4, #16]
 8002f04:	b94b      	cbnz	r3, 8002f1a <__swsetup_r+0x9a>
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f10:	d003      	beq.n	8002f1a <__swsetup_r+0x9a>
 8002f12:	4621      	mov	r1, r4
 8002f14:	4630      	mov	r0, r6
 8002f16:	f000 f929 	bl	800316c <__smakebuf_r>
 8002f1a:	89a0      	ldrh	r0, [r4, #12]
 8002f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f20:	f010 0301 	ands.w	r3, r0, #1
 8002f24:	d00a      	beq.n	8002f3c <__swsetup_r+0xbc>
 8002f26:	2300      	movs	r3, #0
 8002f28:	60a3      	str	r3, [r4, #8]
 8002f2a:	6963      	ldr	r3, [r4, #20]
 8002f2c:	425b      	negs	r3, r3
 8002f2e:	61a3      	str	r3, [r4, #24]
 8002f30:	6923      	ldr	r3, [r4, #16]
 8002f32:	b943      	cbnz	r3, 8002f46 <__swsetup_r+0xc6>
 8002f34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f38:	d1ba      	bne.n	8002eb0 <__swsetup_r+0x30>
 8002f3a:	bd70      	pop	{r4, r5, r6, pc}
 8002f3c:	0781      	lsls	r1, r0, #30
 8002f3e:	bf58      	it	pl
 8002f40:	6963      	ldrpl	r3, [r4, #20]
 8002f42:	60a3      	str	r3, [r4, #8]
 8002f44:	e7f4      	b.n	8002f30 <__swsetup_r+0xb0>
 8002f46:	2000      	movs	r0, #0
 8002f48:	e7f7      	b.n	8002f3a <__swsetup_r+0xba>
 8002f4a:	bf00      	nop
 8002f4c:	2000000c 	.word	0x2000000c
 8002f50:	080034d4 	.word	0x080034d4
 8002f54:	080034f4 	.word	0x080034f4
 8002f58:	080034b4 	.word	0x080034b4

08002f5c <_close_r>:
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	4d06      	ldr	r5, [pc, #24]	; (8002f78 <_close_r+0x1c>)
 8002f60:	2300      	movs	r3, #0
 8002f62:	4604      	mov	r4, r0
 8002f64:	4608      	mov	r0, r1
 8002f66:	602b      	str	r3, [r5, #0]
 8002f68:	f000 fa26 	bl	80033b8 <_close>
 8002f6c:	1c43      	adds	r3, r0, #1
 8002f6e:	d102      	bne.n	8002f76 <_close_r+0x1a>
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	b103      	cbz	r3, 8002f76 <_close_r+0x1a>
 8002f74:	6023      	str	r3, [r4, #0]
 8002f76:	bd38      	pop	{r3, r4, r5, pc}
 8002f78:	200000ec 	.word	0x200000ec

08002f7c <__sflush_r>:
 8002f7c:	898a      	ldrh	r2, [r1, #12]
 8002f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f82:	4605      	mov	r5, r0
 8002f84:	0710      	lsls	r0, r2, #28
 8002f86:	460c      	mov	r4, r1
 8002f88:	d458      	bmi.n	800303c <__sflush_r+0xc0>
 8002f8a:	684b      	ldr	r3, [r1, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	dc05      	bgt.n	8002f9c <__sflush_r+0x20>
 8002f90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	dc02      	bgt.n	8002f9c <__sflush_r+0x20>
 8002f96:	2000      	movs	r0, #0
 8002f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f9e:	2e00      	cmp	r6, #0
 8002fa0:	d0f9      	beq.n	8002f96 <__sflush_r+0x1a>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fa8:	682f      	ldr	r7, [r5, #0]
 8002faa:	602b      	str	r3, [r5, #0]
 8002fac:	d032      	beq.n	8003014 <__sflush_r+0x98>
 8002fae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fb0:	89a3      	ldrh	r3, [r4, #12]
 8002fb2:	075a      	lsls	r2, r3, #29
 8002fb4:	d505      	bpl.n	8002fc2 <__sflush_r+0x46>
 8002fb6:	6863      	ldr	r3, [r4, #4]
 8002fb8:	1ac0      	subs	r0, r0, r3
 8002fba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fbc:	b10b      	cbz	r3, 8002fc2 <__sflush_r+0x46>
 8002fbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fc0:	1ac0      	subs	r0, r0, r3
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fc8:	6a21      	ldr	r1, [r4, #32]
 8002fca:	4628      	mov	r0, r5
 8002fcc:	47b0      	blx	r6
 8002fce:	1c43      	adds	r3, r0, #1
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	d106      	bne.n	8002fe2 <__sflush_r+0x66>
 8002fd4:	6829      	ldr	r1, [r5, #0]
 8002fd6:	291d      	cmp	r1, #29
 8002fd8:	d82c      	bhi.n	8003034 <__sflush_r+0xb8>
 8002fda:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <__sflush_r+0x108>)
 8002fdc:	40ca      	lsrs	r2, r1
 8002fde:	07d6      	lsls	r6, r2, #31
 8002fe0:	d528      	bpl.n	8003034 <__sflush_r+0xb8>
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	6062      	str	r2, [r4, #4]
 8002fe6:	04d9      	lsls	r1, r3, #19
 8002fe8:	6922      	ldr	r2, [r4, #16]
 8002fea:	6022      	str	r2, [r4, #0]
 8002fec:	d504      	bpl.n	8002ff8 <__sflush_r+0x7c>
 8002fee:	1c42      	adds	r2, r0, #1
 8002ff0:	d101      	bne.n	8002ff6 <__sflush_r+0x7a>
 8002ff2:	682b      	ldr	r3, [r5, #0]
 8002ff4:	b903      	cbnz	r3, 8002ff8 <__sflush_r+0x7c>
 8002ff6:	6560      	str	r0, [r4, #84]	; 0x54
 8002ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ffa:	602f      	str	r7, [r5, #0]
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	d0ca      	beq.n	8002f96 <__sflush_r+0x1a>
 8003000:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003004:	4299      	cmp	r1, r3
 8003006:	d002      	beq.n	800300e <__sflush_r+0x92>
 8003008:	4628      	mov	r0, r5
 800300a:	f000 f923 	bl	8003254 <_free_r>
 800300e:	2000      	movs	r0, #0
 8003010:	6360      	str	r0, [r4, #52]	; 0x34
 8003012:	e7c1      	b.n	8002f98 <__sflush_r+0x1c>
 8003014:	6a21      	ldr	r1, [r4, #32]
 8003016:	2301      	movs	r3, #1
 8003018:	4628      	mov	r0, r5
 800301a:	47b0      	blx	r6
 800301c:	1c41      	adds	r1, r0, #1
 800301e:	d1c7      	bne.n	8002fb0 <__sflush_r+0x34>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0c4      	beq.n	8002fb0 <__sflush_r+0x34>
 8003026:	2b1d      	cmp	r3, #29
 8003028:	d001      	beq.n	800302e <__sflush_r+0xb2>
 800302a:	2b16      	cmp	r3, #22
 800302c:	d101      	bne.n	8003032 <__sflush_r+0xb6>
 800302e:	602f      	str	r7, [r5, #0]
 8003030:	e7b1      	b.n	8002f96 <__sflush_r+0x1a>
 8003032:	89a3      	ldrh	r3, [r4, #12]
 8003034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003038:	81a3      	strh	r3, [r4, #12]
 800303a:	e7ad      	b.n	8002f98 <__sflush_r+0x1c>
 800303c:	690f      	ldr	r7, [r1, #16]
 800303e:	2f00      	cmp	r7, #0
 8003040:	d0a9      	beq.n	8002f96 <__sflush_r+0x1a>
 8003042:	0793      	lsls	r3, r2, #30
 8003044:	680e      	ldr	r6, [r1, #0]
 8003046:	bf08      	it	eq
 8003048:	694b      	ldreq	r3, [r1, #20]
 800304a:	600f      	str	r7, [r1, #0]
 800304c:	bf18      	it	ne
 800304e:	2300      	movne	r3, #0
 8003050:	eba6 0807 	sub.w	r8, r6, r7
 8003054:	608b      	str	r3, [r1, #8]
 8003056:	f1b8 0f00 	cmp.w	r8, #0
 800305a:	dd9c      	ble.n	8002f96 <__sflush_r+0x1a>
 800305c:	6a21      	ldr	r1, [r4, #32]
 800305e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003060:	4643      	mov	r3, r8
 8003062:	463a      	mov	r2, r7
 8003064:	4628      	mov	r0, r5
 8003066:	47b0      	blx	r6
 8003068:	2800      	cmp	r0, #0
 800306a:	dc06      	bgt.n	800307a <__sflush_r+0xfe>
 800306c:	89a3      	ldrh	r3, [r4, #12]
 800306e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003072:	81a3      	strh	r3, [r4, #12]
 8003074:	f04f 30ff 	mov.w	r0, #4294967295
 8003078:	e78e      	b.n	8002f98 <__sflush_r+0x1c>
 800307a:	4407      	add	r7, r0
 800307c:	eba8 0800 	sub.w	r8, r8, r0
 8003080:	e7e9      	b.n	8003056 <__sflush_r+0xda>
 8003082:	bf00      	nop
 8003084:	20400001 	.word	0x20400001

08003088 <_fflush_r>:
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	690b      	ldr	r3, [r1, #16]
 800308c:	4605      	mov	r5, r0
 800308e:	460c      	mov	r4, r1
 8003090:	b913      	cbnz	r3, 8003098 <_fflush_r+0x10>
 8003092:	2500      	movs	r5, #0
 8003094:	4628      	mov	r0, r5
 8003096:	bd38      	pop	{r3, r4, r5, pc}
 8003098:	b118      	cbz	r0, 80030a2 <_fflush_r+0x1a>
 800309a:	6983      	ldr	r3, [r0, #24]
 800309c:	b90b      	cbnz	r3, 80030a2 <_fflush_r+0x1a>
 800309e:	f7ff f8f3 	bl	8002288 <__sinit>
 80030a2:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <_fflush_r+0x6c>)
 80030a4:	429c      	cmp	r4, r3
 80030a6:	d11b      	bne.n	80030e0 <_fflush_r+0x58>
 80030a8:	686c      	ldr	r4, [r5, #4]
 80030aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0ef      	beq.n	8003092 <_fflush_r+0xa>
 80030b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030b4:	07d0      	lsls	r0, r2, #31
 80030b6:	d404      	bmi.n	80030c2 <_fflush_r+0x3a>
 80030b8:	0599      	lsls	r1, r3, #22
 80030ba:	d402      	bmi.n	80030c2 <_fflush_r+0x3a>
 80030bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030be:	f7ff f981 	bl	80023c4 <__retarget_lock_acquire_recursive>
 80030c2:	4628      	mov	r0, r5
 80030c4:	4621      	mov	r1, r4
 80030c6:	f7ff ff59 	bl	8002f7c <__sflush_r>
 80030ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030cc:	07da      	lsls	r2, r3, #31
 80030ce:	4605      	mov	r5, r0
 80030d0:	d4e0      	bmi.n	8003094 <_fflush_r+0xc>
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	059b      	lsls	r3, r3, #22
 80030d6:	d4dd      	bmi.n	8003094 <_fflush_r+0xc>
 80030d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030da:	f7ff f974 	bl	80023c6 <__retarget_lock_release_recursive>
 80030de:	e7d9      	b.n	8003094 <_fflush_r+0xc>
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <_fflush_r+0x70>)
 80030e2:	429c      	cmp	r4, r3
 80030e4:	d101      	bne.n	80030ea <_fflush_r+0x62>
 80030e6:	68ac      	ldr	r4, [r5, #8]
 80030e8:	e7df      	b.n	80030aa <_fflush_r+0x22>
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <_fflush_r+0x74>)
 80030ec:	429c      	cmp	r4, r3
 80030ee:	bf08      	it	eq
 80030f0:	68ec      	ldreq	r4, [r5, #12]
 80030f2:	e7da      	b.n	80030aa <_fflush_r+0x22>
 80030f4:	080034d4 	.word	0x080034d4
 80030f8:	080034f4 	.word	0x080034f4
 80030fc:	080034b4 	.word	0x080034b4

08003100 <_lseek_r>:
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	4d07      	ldr	r5, [pc, #28]	; (8003120 <_lseek_r+0x20>)
 8003104:	4604      	mov	r4, r0
 8003106:	4608      	mov	r0, r1
 8003108:	4611      	mov	r1, r2
 800310a:	2200      	movs	r2, #0
 800310c:	602a      	str	r2, [r5, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	f000 f96a 	bl	80033e8 <_lseek>
 8003114:	1c43      	adds	r3, r0, #1
 8003116:	d102      	bne.n	800311e <_lseek_r+0x1e>
 8003118:	682b      	ldr	r3, [r5, #0]
 800311a:	b103      	cbz	r3, 800311e <_lseek_r+0x1e>
 800311c:	6023      	str	r3, [r4, #0]
 800311e:	bd38      	pop	{r3, r4, r5, pc}
 8003120:	200000ec 	.word	0x200000ec

08003124 <__swhatbuf_r>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	460e      	mov	r6, r1
 8003128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800312c:	2900      	cmp	r1, #0
 800312e:	b096      	sub	sp, #88	; 0x58
 8003130:	4614      	mov	r4, r2
 8003132:	461d      	mov	r5, r3
 8003134:	da07      	bge.n	8003146 <__swhatbuf_r+0x22>
 8003136:	2300      	movs	r3, #0
 8003138:	602b      	str	r3, [r5, #0]
 800313a:	89b3      	ldrh	r3, [r6, #12]
 800313c:	061a      	lsls	r2, r3, #24
 800313e:	d410      	bmi.n	8003162 <__swhatbuf_r+0x3e>
 8003140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003144:	e00e      	b.n	8003164 <__swhatbuf_r+0x40>
 8003146:	466a      	mov	r2, sp
 8003148:	f000 f90c 	bl	8003364 <_fstat_r>
 800314c:	2800      	cmp	r0, #0
 800314e:	dbf2      	blt.n	8003136 <__swhatbuf_r+0x12>
 8003150:	9a01      	ldr	r2, [sp, #4]
 8003152:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003156:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800315a:	425a      	negs	r2, r3
 800315c:	415a      	adcs	r2, r3
 800315e:	602a      	str	r2, [r5, #0]
 8003160:	e7ee      	b.n	8003140 <__swhatbuf_r+0x1c>
 8003162:	2340      	movs	r3, #64	; 0x40
 8003164:	2000      	movs	r0, #0
 8003166:	6023      	str	r3, [r4, #0]
 8003168:	b016      	add	sp, #88	; 0x58
 800316a:	bd70      	pop	{r4, r5, r6, pc}

0800316c <__smakebuf_r>:
 800316c:	898b      	ldrh	r3, [r1, #12]
 800316e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003170:	079d      	lsls	r5, r3, #30
 8003172:	4606      	mov	r6, r0
 8003174:	460c      	mov	r4, r1
 8003176:	d507      	bpl.n	8003188 <__smakebuf_r+0x1c>
 8003178:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800317c:	6023      	str	r3, [r4, #0]
 800317e:	6123      	str	r3, [r4, #16]
 8003180:	2301      	movs	r3, #1
 8003182:	6163      	str	r3, [r4, #20]
 8003184:	b002      	add	sp, #8
 8003186:	bd70      	pop	{r4, r5, r6, pc}
 8003188:	ab01      	add	r3, sp, #4
 800318a:	466a      	mov	r2, sp
 800318c:	f7ff ffca 	bl	8003124 <__swhatbuf_r>
 8003190:	9900      	ldr	r1, [sp, #0]
 8003192:	4605      	mov	r5, r0
 8003194:	4630      	mov	r0, r6
 8003196:	f7ff f917 	bl	80023c8 <_malloc_r>
 800319a:	b948      	cbnz	r0, 80031b0 <__smakebuf_r+0x44>
 800319c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031a0:	059a      	lsls	r2, r3, #22
 80031a2:	d4ef      	bmi.n	8003184 <__smakebuf_r+0x18>
 80031a4:	f023 0303 	bic.w	r3, r3, #3
 80031a8:	f043 0302 	orr.w	r3, r3, #2
 80031ac:	81a3      	strh	r3, [r4, #12]
 80031ae:	e7e3      	b.n	8003178 <__smakebuf_r+0xc>
 80031b0:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <__smakebuf_r+0x7c>)
 80031b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	6020      	str	r0, [r4, #0]
 80031b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031bc:	81a3      	strh	r3, [r4, #12]
 80031be:	9b00      	ldr	r3, [sp, #0]
 80031c0:	6163      	str	r3, [r4, #20]
 80031c2:	9b01      	ldr	r3, [sp, #4]
 80031c4:	6120      	str	r0, [r4, #16]
 80031c6:	b15b      	cbz	r3, 80031e0 <__smakebuf_r+0x74>
 80031c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031cc:	4630      	mov	r0, r6
 80031ce:	f000 f8db 	bl	8003388 <_isatty_r>
 80031d2:	b128      	cbz	r0, 80031e0 <__smakebuf_r+0x74>
 80031d4:	89a3      	ldrh	r3, [r4, #12]
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	81a3      	strh	r3, [r4, #12]
 80031e0:	89a0      	ldrh	r0, [r4, #12]
 80031e2:	4305      	orrs	r5, r0
 80031e4:	81a5      	strh	r5, [r4, #12]
 80031e6:	e7cd      	b.n	8003184 <__smakebuf_r+0x18>
 80031e8:	08002221 	.word	0x08002221

080031ec <memcpy>:
 80031ec:	440a      	add	r2, r1
 80031ee:	4291      	cmp	r1, r2
 80031f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80031f4:	d100      	bne.n	80031f8 <memcpy+0xc>
 80031f6:	4770      	bx	lr
 80031f8:	b510      	push	{r4, lr}
 80031fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003202:	4291      	cmp	r1, r2
 8003204:	d1f9      	bne.n	80031fa <memcpy+0xe>
 8003206:	bd10      	pop	{r4, pc}

08003208 <memmove>:
 8003208:	4288      	cmp	r0, r1
 800320a:	b510      	push	{r4, lr}
 800320c:	eb01 0402 	add.w	r4, r1, r2
 8003210:	d902      	bls.n	8003218 <memmove+0x10>
 8003212:	4284      	cmp	r4, r0
 8003214:	4623      	mov	r3, r4
 8003216:	d807      	bhi.n	8003228 <memmove+0x20>
 8003218:	1e43      	subs	r3, r0, #1
 800321a:	42a1      	cmp	r1, r4
 800321c:	d008      	beq.n	8003230 <memmove+0x28>
 800321e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003226:	e7f8      	b.n	800321a <memmove+0x12>
 8003228:	4402      	add	r2, r0
 800322a:	4601      	mov	r1, r0
 800322c:	428a      	cmp	r2, r1
 800322e:	d100      	bne.n	8003232 <memmove+0x2a>
 8003230:	bd10      	pop	{r4, pc}
 8003232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800323a:	e7f7      	b.n	800322c <memmove+0x24>

0800323c <__malloc_lock>:
 800323c:	4801      	ldr	r0, [pc, #4]	; (8003244 <__malloc_lock+0x8>)
 800323e:	f7ff b8c1 	b.w	80023c4 <__retarget_lock_acquire_recursive>
 8003242:	bf00      	nop
 8003244:	200000e4 	.word	0x200000e4

08003248 <__malloc_unlock>:
 8003248:	4801      	ldr	r0, [pc, #4]	; (8003250 <__malloc_unlock+0x8>)
 800324a:	f7ff b8bc 	b.w	80023c6 <__retarget_lock_release_recursive>
 800324e:	bf00      	nop
 8003250:	200000e4 	.word	0x200000e4

08003254 <_free_r>:
 8003254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003256:	2900      	cmp	r1, #0
 8003258:	d048      	beq.n	80032ec <_free_r+0x98>
 800325a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800325e:	9001      	str	r0, [sp, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	f1a1 0404 	sub.w	r4, r1, #4
 8003266:	bfb8      	it	lt
 8003268:	18e4      	addlt	r4, r4, r3
 800326a:	f7ff ffe7 	bl	800323c <__malloc_lock>
 800326e:	4a20      	ldr	r2, [pc, #128]	; (80032f0 <_free_r+0x9c>)
 8003270:	9801      	ldr	r0, [sp, #4]
 8003272:	6813      	ldr	r3, [r2, #0]
 8003274:	4615      	mov	r5, r2
 8003276:	b933      	cbnz	r3, 8003286 <_free_r+0x32>
 8003278:	6063      	str	r3, [r4, #4]
 800327a:	6014      	str	r4, [r2, #0]
 800327c:	b003      	add	sp, #12
 800327e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003282:	f7ff bfe1 	b.w	8003248 <__malloc_unlock>
 8003286:	42a3      	cmp	r3, r4
 8003288:	d90b      	bls.n	80032a2 <_free_r+0x4e>
 800328a:	6821      	ldr	r1, [r4, #0]
 800328c:	1862      	adds	r2, r4, r1
 800328e:	4293      	cmp	r3, r2
 8003290:	bf04      	itt	eq
 8003292:	681a      	ldreq	r2, [r3, #0]
 8003294:	685b      	ldreq	r3, [r3, #4]
 8003296:	6063      	str	r3, [r4, #4]
 8003298:	bf04      	itt	eq
 800329a:	1852      	addeq	r2, r2, r1
 800329c:	6022      	streq	r2, [r4, #0]
 800329e:	602c      	str	r4, [r5, #0]
 80032a0:	e7ec      	b.n	800327c <_free_r+0x28>
 80032a2:	461a      	mov	r2, r3
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	b10b      	cbz	r3, 80032ac <_free_r+0x58>
 80032a8:	42a3      	cmp	r3, r4
 80032aa:	d9fa      	bls.n	80032a2 <_free_r+0x4e>
 80032ac:	6811      	ldr	r1, [r2, #0]
 80032ae:	1855      	adds	r5, r2, r1
 80032b0:	42a5      	cmp	r5, r4
 80032b2:	d10b      	bne.n	80032cc <_free_r+0x78>
 80032b4:	6824      	ldr	r4, [r4, #0]
 80032b6:	4421      	add	r1, r4
 80032b8:	1854      	adds	r4, r2, r1
 80032ba:	42a3      	cmp	r3, r4
 80032bc:	6011      	str	r1, [r2, #0]
 80032be:	d1dd      	bne.n	800327c <_free_r+0x28>
 80032c0:	681c      	ldr	r4, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	6053      	str	r3, [r2, #4]
 80032c6:	4421      	add	r1, r4
 80032c8:	6011      	str	r1, [r2, #0]
 80032ca:	e7d7      	b.n	800327c <_free_r+0x28>
 80032cc:	d902      	bls.n	80032d4 <_free_r+0x80>
 80032ce:	230c      	movs	r3, #12
 80032d0:	6003      	str	r3, [r0, #0]
 80032d2:	e7d3      	b.n	800327c <_free_r+0x28>
 80032d4:	6825      	ldr	r5, [r4, #0]
 80032d6:	1961      	adds	r1, r4, r5
 80032d8:	428b      	cmp	r3, r1
 80032da:	bf04      	itt	eq
 80032dc:	6819      	ldreq	r1, [r3, #0]
 80032de:	685b      	ldreq	r3, [r3, #4]
 80032e0:	6063      	str	r3, [r4, #4]
 80032e2:	bf04      	itt	eq
 80032e4:	1949      	addeq	r1, r1, r5
 80032e6:	6021      	streq	r1, [r4, #0]
 80032e8:	6054      	str	r4, [r2, #4]
 80032ea:	e7c7      	b.n	800327c <_free_r+0x28>
 80032ec:	b003      	add	sp, #12
 80032ee:	bd30      	pop	{r4, r5, pc}
 80032f0:	2000008c 	.word	0x2000008c

080032f4 <_realloc_r>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	4607      	mov	r7, r0
 80032f8:	4614      	mov	r4, r2
 80032fa:	460e      	mov	r6, r1
 80032fc:	b921      	cbnz	r1, 8003308 <_realloc_r+0x14>
 80032fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003302:	4611      	mov	r1, r2
 8003304:	f7ff b860 	b.w	80023c8 <_malloc_r>
 8003308:	b922      	cbnz	r2, 8003314 <_realloc_r+0x20>
 800330a:	f7ff ffa3 	bl	8003254 <_free_r>
 800330e:	4625      	mov	r5, r4
 8003310:	4628      	mov	r0, r5
 8003312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003314:	f000 f848 	bl	80033a8 <_malloc_usable_size_r>
 8003318:	42a0      	cmp	r0, r4
 800331a:	d20f      	bcs.n	800333c <_realloc_r+0x48>
 800331c:	4621      	mov	r1, r4
 800331e:	4638      	mov	r0, r7
 8003320:	f7ff f852 	bl	80023c8 <_malloc_r>
 8003324:	4605      	mov	r5, r0
 8003326:	2800      	cmp	r0, #0
 8003328:	d0f2      	beq.n	8003310 <_realloc_r+0x1c>
 800332a:	4631      	mov	r1, r6
 800332c:	4622      	mov	r2, r4
 800332e:	f7ff ff5d 	bl	80031ec <memcpy>
 8003332:	4631      	mov	r1, r6
 8003334:	4638      	mov	r0, r7
 8003336:	f7ff ff8d 	bl	8003254 <_free_r>
 800333a:	e7e9      	b.n	8003310 <_realloc_r+0x1c>
 800333c:	4635      	mov	r5, r6
 800333e:	e7e7      	b.n	8003310 <_realloc_r+0x1c>

08003340 <_read_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	4d07      	ldr	r5, [pc, #28]	; (8003360 <_read_r+0x20>)
 8003344:	4604      	mov	r4, r0
 8003346:	4608      	mov	r0, r1
 8003348:	4611      	mov	r1, r2
 800334a:	2200      	movs	r2, #0
 800334c:	602a      	str	r2, [r5, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	f000 f852 	bl	80033f8 <_read>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d102      	bne.n	800335e <_read_r+0x1e>
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	b103      	cbz	r3, 800335e <_read_r+0x1e>
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	bd38      	pop	{r3, r4, r5, pc}
 8003360:	200000ec 	.word	0x200000ec

08003364 <_fstat_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	4d07      	ldr	r5, [pc, #28]	; (8003384 <_fstat_r+0x20>)
 8003368:	2300      	movs	r3, #0
 800336a:	4604      	mov	r4, r0
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	602b      	str	r3, [r5, #0]
 8003372:	f000 f829 	bl	80033c8 <_fstat>
 8003376:	1c43      	adds	r3, r0, #1
 8003378:	d102      	bne.n	8003380 <_fstat_r+0x1c>
 800337a:	682b      	ldr	r3, [r5, #0]
 800337c:	b103      	cbz	r3, 8003380 <_fstat_r+0x1c>
 800337e:	6023      	str	r3, [r4, #0]
 8003380:	bd38      	pop	{r3, r4, r5, pc}
 8003382:	bf00      	nop
 8003384:	200000ec 	.word	0x200000ec

08003388 <_isatty_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4d06      	ldr	r5, [pc, #24]	; (80033a4 <_isatty_r+0x1c>)
 800338c:	2300      	movs	r3, #0
 800338e:	4604      	mov	r4, r0
 8003390:	4608      	mov	r0, r1
 8003392:	602b      	str	r3, [r5, #0]
 8003394:	f000 f820 	bl	80033d8 <_isatty>
 8003398:	1c43      	adds	r3, r0, #1
 800339a:	d102      	bne.n	80033a2 <_isatty_r+0x1a>
 800339c:	682b      	ldr	r3, [r5, #0]
 800339e:	b103      	cbz	r3, 80033a2 <_isatty_r+0x1a>
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	bd38      	pop	{r3, r4, r5, pc}
 80033a4:	200000ec 	.word	0x200000ec

080033a8 <_malloc_usable_size_r>:
 80033a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033ac:	1f18      	subs	r0, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bfbc      	itt	lt
 80033b2:	580b      	ldrlt	r3, [r1, r0]
 80033b4:	18c0      	addlt	r0, r0, r3
 80033b6:	4770      	bx	lr

080033b8 <_close>:
 80033b8:	4b02      	ldr	r3, [pc, #8]	; (80033c4 <_close+0xc>)
 80033ba:	2258      	movs	r2, #88	; 0x58
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	f04f 30ff 	mov.w	r0, #4294967295
 80033c2:	4770      	bx	lr
 80033c4:	200000ec 	.word	0x200000ec

080033c8 <_fstat>:
 80033c8:	4b02      	ldr	r3, [pc, #8]	; (80033d4 <_fstat+0xc>)
 80033ca:	2258      	movs	r2, #88	; 0x58
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	f04f 30ff 	mov.w	r0, #4294967295
 80033d2:	4770      	bx	lr
 80033d4:	200000ec 	.word	0x200000ec

080033d8 <_isatty>:
 80033d8:	4b02      	ldr	r3, [pc, #8]	; (80033e4 <_isatty+0xc>)
 80033da:	2258      	movs	r2, #88	; 0x58
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	2000      	movs	r0, #0
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	200000ec 	.word	0x200000ec

080033e8 <_lseek>:
 80033e8:	4b02      	ldr	r3, [pc, #8]	; (80033f4 <_lseek+0xc>)
 80033ea:	2258      	movs	r2, #88	; 0x58
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	f04f 30ff 	mov.w	r0, #4294967295
 80033f2:	4770      	bx	lr
 80033f4:	200000ec 	.word	0x200000ec

080033f8 <_read>:
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <_read+0xc>)
 80033fa:	2258      	movs	r2, #88	; 0x58
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003402:	4770      	bx	lr
 8003404:	200000ec 	.word	0x200000ec

08003408 <_sbrk>:
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <_sbrk+0x14>)
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	4602      	mov	r2, r0
 800340e:	b909      	cbnz	r1, 8003414 <_sbrk+0xc>
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <_sbrk+0x18>)
 8003412:	6019      	str	r1, [r3, #0]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	4402      	add	r2, r0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	4770      	bx	lr
 800341c:	20000094 	.word	0x20000094
 8003420:	200000f0 	.word	0x200000f0

08003424 <_write>:
 8003424:	4b02      	ldr	r3, [pc, #8]	; (8003430 <_write+0xc>)
 8003426:	2258      	movs	r2, #88	; 0x58
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f04f 30ff 	mov.w	r0, #4294967295
 800342e:	4770      	bx	lr
 8003430:	200000ec 	.word	0x200000ec

08003434 <_init>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	bf00      	nop
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr

08003440 <_fini>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	bf00      	nop
 8003444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003446:	bc08      	pop	{r3}
 8003448:	469e      	mov	lr, r3
 800344a:	4770      	bx	lr
